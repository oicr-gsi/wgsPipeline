[2020-07-30 19:06:01,58] [debug] Sentry configuration file not found in filesystem or classpath: 'sentry.properties'.
[2020-07-30 19:06:01,61] [debug] Using noop to send events.
[2020-07-30 19:06:01,61] [debug] Found async=false in DSN.
[2020-07-30 19:06:01,61] [debug] The current environment doesn't provide access to servlets, or provides an unsupported version.
[2020-07-30 19:06:01,61] [debug] Adding 'io.sentry.event.helper.ContextBuilderHelper@67b9b51a' to the list of builder helpers.
[2020-07-30 19:06:01,61] [debug] Configuring uncaught exception handler.
[2020-07-30 19:06:01,61] [debug] Found stacktrace.app.packages=quieted_with_any_value_because_empty_was_not_working in DSN.
[2020-07-30 19:06:01,98] [info] Running with database db.url = 
    jdbc:hsqldb:file:/tmp/cromwell-executions/cromwell-db/cromwell-db;
    shutdown=false;
    hsqldb.default_table_type=cached;hsqldb.tx=mvcc;
    hsqldb.result_max_memory_rows=10000;
    hsqldb.large_data=true;
    hsqldb.applog=1;
    hsqldb.lob_compressed=true;
    hsqldb.script_format=3
    
[2020-07-30 19:06:02,15] [debug] #1: SimpleJdbcAction
[2020-07-30 19:06:02,40] [info] dataFileCache open start
[2020-07-30 19:06:02,41] [info] dataFileCache open end
[2020-07-30 19:06:02,93] [info] checkpointClose start
[2020-07-30 19:06:02,93] [info] checkpointClose synched
[2020-07-30 19:06:03,01] [info] checkpointClose script done
[2020-07-30 19:06:03,01] [info] dataFileCache commit start
[2020-07-30 19:06:03,07] [info] dataFileCache commit end
[2020-07-30 19:06:03,10] [info] checkpointClose end
[2020-07-30 19:06:08,19] [info] Checkpoint start
[2020-07-30 19:06:08,19] [info] checkpointClose start
[2020-07-30 19:06:08,20] [info] checkpointClose synched
[2020-07-30 19:06:08,27] [info] checkpointClose script done
[2020-07-30 19:06:08,27] [info] dataFileCache commit start
[2020-07-30 19:06:08,28] [info] dataFileCache commit end
[2020-07-30 19:06:08,29] [info] checkpointClose end
[2020-07-30 19:06:08,31] [info] Checkpoint end - txts: 4171
[2020-07-30 19:06:08,39] [info] Checkpoint start
[2020-07-30 19:06:08,39] [info] checkpointClose start
[2020-07-30 19:06:08,40] [info] checkpointClose synched
[2020-07-30 19:06:08,48] [info] checkpointClose script done
[2020-07-30 19:06:08,48] [info] dataFileCache commit start
[2020-07-30 19:06:08,50] [info] dataFileCache commit end
[2020-07-30 19:06:08,52] [info] checkpointClose end
[2020-07-30 19:06:08,52] [info] Checkpoint end - txts: 4187
[2020-07-30 19:06:08,52] [info] Checkpoint start
[2020-07-30 19:06:08,52] [info] checkpointClose start
[2020-07-30 19:06:08,53] [info] checkpointClose synched
[2020-07-30 19:06:08,58] [info] checkpointClose script done
[2020-07-30 19:06:08,58] [info] dataFileCache commit start
[2020-07-30 19:06:08,59] [info] dataFileCache commit end
[2020-07-30 19:06:08,60] [info] checkpointClose end
[2020-07-30 19:06:08,61] [info] Checkpoint end - txts: 4189
[2020-07-30 19:06:10,31] [info] Checkpoint start
[2020-07-30 19:06:10,31] [info] checkpointClose start
[2020-07-30 19:06:10,32] [info] checkpointClose synched
[2020-07-30 19:06:10,36] [info] checkpointClose script done
[2020-07-30 19:06:10,36] [info] dataFileCache commit start
[2020-07-30 19:06:10,36] [info] dataFileCache commit end
[2020-07-30 19:06:10,38] [info] checkpointClose end
[2020-07-30 19:06:10,38] [info] Checkpoint end - txts: 4212
[2020-07-30 19:06:10,38] [info] Checkpoint start
[2020-07-30 19:06:10,38] [info] checkpointClose start
[2020-07-30 19:06:10,39] [info] checkpointClose synched
[2020-07-30 19:06:10,44] [info] checkpointClose script done
[2020-07-30 19:06:10,44] [info] dataFileCache commit start
[2020-07-30 19:06:10,44] [info] dataFileCache commit end
[2020-07-30 19:06:10,46] [info] checkpointClose end
[2020-07-30 19:06:10,46] [info] Checkpoint end - txts: 4214
[2020-07-30 19:06:10,63] [info] Checkpoint start
[2020-07-30 19:06:10,63] [info] checkpointClose start
[2020-07-30 19:06:10,64] [info] checkpointClose synched
[2020-07-30 19:06:10,69] [info] checkpointClose script done
[2020-07-30 19:06:10,69] [info] dataFileCache commit start
[2020-07-30 19:06:10,69] [info] dataFileCache commit end
[2020-07-30 19:06:10,71] [info] checkpointClose end
[2020-07-30 19:06:10,71] [info] Checkpoint end - txts: 4216
[2020-07-30 19:06:10,72] [info] Checkpoint start
[2020-07-30 19:06:10,72] [info] checkpointClose start
[2020-07-30 19:06:10,73] [info] checkpointClose synched
[2020-07-30 19:06:10,77] [info] checkpointClose script done
[2020-07-30 19:06:10,77] [info] dataFileCache commit start
[2020-07-30 19:06:10,79] [info] dataFileCache commit end
[2020-07-30 19:06:10,81] [info] checkpointClose end
[2020-07-30 19:06:10,81] [info] Checkpoint end - txts: 4223
[2020-07-30 19:06:10,81] [info] Checkpoint start
[2020-07-30 19:06:10,81] [info] checkpointClose start
[2020-07-30 19:06:10,82] [info] checkpointClose synched
[2020-07-30 19:06:10,86] [info] checkpointClose script done
[2020-07-30 19:06:10,86] [info] dataFileCache commit start
[2020-07-30 19:06:10,88] [info] dataFileCache commit end
[2020-07-30 19:06:10,90] [info] checkpointClose end
[2020-07-30 19:06:10,90] [info] Checkpoint end - txts: 4225
[2020-07-30 19:06:10,90] [info] Checkpoint start
[2020-07-30 19:06:10,90] [info] checkpointClose start
[2020-07-30 19:06:10,91] [info] checkpointClose synched
[2020-07-30 19:06:10,96] [info] checkpointClose script done
[2020-07-30 19:06:10,96] [info] dataFileCache commit start
[2020-07-30 19:06:10,96] [info] dataFileCache commit end
[2020-07-30 19:06:10,98] [info] checkpointClose end
[2020-07-30 19:06:10,98] [info] Checkpoint end - txts: 4227
[2020-07-30 19:06:11,00] [info] Running with database db.url = 
    jdbc:hsqldb:file:/tmp/cromwell-executions/cromwell-db/cromwell-db;
    shutdown=false;
    hsqldb.default_table_type=cached;hsqldb.tx=mvcc;
    hsqldb.result_max_memory_rows=10000;
    hsqldb.large_data=true;
    hsqldb.applog=1;
    hsqldb.lob_compressed=true;
    hsqldb.script_format=3
    
[2020-07-30 19:06:11,03] [debug] #1: SimpleJdbcAction
[2020-07-30 19:06:11,03] [info] Checkpoint start
[2020-07-30 19:06:11,03] [info] checkpointClose start
[2020-07-30 19:06:11,04] [info] checkpointClose synched
[2020-07-30 19:06:11,09] [info] checkpointClose script done
[2020-07-30 19:06:11,09] [info] dataFileCache commit start
[2020-07-30 19:06:11,10] [info] dataFileCache commit end
[2020-07-30 19:06:11,12] [info] checkpointClose end
[2020-07-30 19:06:11,12] [info] Checkpoint end - txts: 4235
[2020-07-30 19:06:11,14] [info] Checkpoint start
[2020-07-30 19:06:11,14] [info] checkpointClose start
[2020-07-30 19:06:11,15] [info] checkpointClose synched
[2020-07-30 19:06:11,20] [info] checkpointClose script done
[2020-07-30 19:06:11,20] [info] dataFileCache commit start
[2020-07-30 19:06:11,22] [info] dataFileCache commit end
[2020-07-30 19:06:11,23] [info] checkpointClose end
[2020-07-30 19:06:11,24] [info] Checkpoint end - txts: 4251
[2020-07-30 19:06:11,24] [info] Checkpoint start
[2020-07-30 19:06:11,24] [info] checkpointClose start
[2020-07-30 19:06:11,25] [info] checkpointClose synched
[2020-07-30 19:06:11,29] [info] checkpointClose script done
[2020-07-30 19:06:11,29] [info] dataFileCache commit start
[2020-07-30 19:06:11,30] [info] dataFileCache commit end
[2020-07-30 19:06:11,32] [info] checkpointClose end
[2020-07-30 19:06:11,32] [info] Checkpoint end - txts: 4253
[2020-07-30 19:06:11,44] [info] Checkpoint start
[2020-07-30 19:06:11,44] [info] checkpointClose start
[2020-07-30 19:06:11,45] [info] checkpointClose synched
[2020-07-30 19:06:11,49] [info] checkpointClose script done
[2020-07-30 19:06:11,49] [info] dataFileCache commit start
[2020-07-30 19:06:11,50] [info] dataFileCache commit end
[2020-07-30 19:06:11,51] [info] checkpointClose end
[2020-07-30 19:06:11,52] [info] Checkpoint end - txts: 4276
[2020-07-30 19:06:11,52] [info] Checkpoint start
[2020-07-30 19:06:11,53] [info] checkpointClose start
[2020-07-30 19:06:11,53] [info] checkpointClose synched
[2020-07-30 19:06:11,58] [info] checkpointClose script done
[2020-07-30 19:06:11,58] [info] dataFileCache commit start
[2020-07-30 19:06:11,59] [info] dataFileCache commit end
[2020-07-30 19:06:11,60] [info] checkpointClose end
[2020-07-30 19:06:11,60] [info] Checkpoint end - txts: 4278
[2020-07-30 19:06:11,62] [info] Checkpoint start
[2020-07-30 19:06:11,62] [info] checkpointClose start
[2020-07-30 19:06:11,63] [info] checkpointClose synched
[2020-07-30 19:06:11,68] [info] checkpointClose script done
[2020-07-30 19:06:11,68] [info] dataFileCache commit start
[2020-07-30 19:06:11,68] [info] dataFileCache commit end
[2020-07-30 19:06:11,70] [info] checkpointClose end
[2020-07-30 19:06:11,70] [info] Checkpoint end - txts: 4280
[2020-07-30 19:06:11,71] [info] Checkpoint start
[2020-07-30 19:06:11,71] [info] checkpointClose start
[2020-07-30 19:06:11,72] [info] checkpointClose synched
[2020-07-30 19:06:11,78] [info] checkpointClose script done
[2020-07-30 19:06:11,78] [info] dataFileCache commit start
[2020-07-30 19:06:11,80] [info] dataFileCache commit end
[2020-07-30 19:06:11,82] [info] checkpointClose end
[2020-07-30 19:06:11,82] [info] Checkpoint end - txts: 4287
[2020-07-30 19:06:11,82] [info] Checkpoint start
[2020-07-30 19:06:11,82] [info] checkpointClose start
[2020-07-30 19:06:11,83] [info] checkpointClose synched
[2020-07-30 19:06:11,88] [info] checkpointClose script done
[2020-07-30 19:06:11,88] [info] dataFileCache commit start
[2020-07-30 19:06:11,89] [info] dataFileCache commit end
[2020-07-30 19:06:11,90] [info] checkpointClose end
[2020-07-30 19:06:11,90] [info] Checkpoint end - txts: 4289
[2020-07-30 19:06:11,90] [info] Checkpoint start
[2020-07-30 19:06:11,90] [info] checkpointClose start
[2020-07-30 19:06:11,91] [info] checkpointClose synched
[2020-07-30 19:06:11,96] [info] checkpointClose script done
[2020-07-30 19:06:11,96] [info] dataFileCache commit start
[2020-07-30 19:06:11,96] [info] dataFileCache commit end
[2020-07-30 19:06:11,98] [info] checkpointClose end
[2020-07-30 19:06:11,98] [info] Checkpoint end - txts: 4291
[INFO] [07/30/2020 19:06:12.390] [cromwell-system-akka.dispatchers.engine-dispatcher-5] [akka://cromwell-system/user/SingleWorkflowRunnerActor] Workflow heartbeat configuration:
{
  "cromwellId" : "cromid-c858775",
  "heartbeatInterval" : "2 minutes",
  "ttl" : "10 minutes",
  "failureShutdownDuration" : "5 minutes",
  "writeBatchSize" : 10000,
  "writeThreshold" : 10000
}
[INFO] [07/30/2020 19:06:12.490] [cromwell-system-akka.dispatchers.service-dispatcher-11] [akka://cromwell-system/user/SingleWorkflowRunnerActor/ServiceRegistryActor/MetadataService] Metadata summary refreshing every 1 second.
[INFO] [07/30/2020 19:06:12.500] [cromwell-system-akka.actor.default-dispatcher-2] [akka://cromwell-system/user/SingleWorkflowRunnerActor/ServiceRegistryActor/KeyValue/KvWriteActor] KvWriteActor configured to flush with batch size 200 and process rate 5 seconds.
[INFO] [07/30/2020 19:06:12.507] [cromwell-system-akka.dispatchers.service-dispatcher-13] [akka://cromwell-system/user/SingleWorkflowRunnerActor/ServiceRegistryActor/MetadataService/WriteMetadataActor] WriteMetadataActor configured to flush with batch size 200 and process rate 5 seconds.
[INFO] [07/30/2020 19:06:12.550] [cromwell-system-akka.dispatchers.engine-dispatcher-37] [akka://cromwell-system/user/SingleWorkflowRunnerActor/CallCacheWriteActor] CallCacheWriteActor configured to flush with batch size 100 and process rate 3 seconds.
[2020-07-30 19:06:12,55] [[38;5;220mwarn[0m] 'docker.hash-lookup.gcr-api-queries-per-100-seconds' is being deprecated, use 'docker.hash-lookup.gcr.throttle' instead (see reference.conf)
[2020-07-30 19:06:12,56] [debug] Updating the hostname cache
[2020-07-30 19:06:12,61] [debug] Source:
| SortBy Ordering(Asc,NullsDefault)
|   from s2: Bind
|     from s3: Take
|       from: TableExpansion
|         table s4: Table SUMMARY_QUEUE_ENTRY
|         columns: TypeMapping
|           0: Path s4.METADATA_JOURNAL_ID : Long'
|       count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|     select: Bind
|       from s6: Filter s7
|         from s7: TableExpansion
|           table s8: Table METADATA_ENTRY
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s8.WORKFLOW_EXECUTION_UUID : String'
|               2: Path s8.CALL_FQN : Option[String']
|               3: Path s8.JOB_SCATTER_INDEX : Option[Int']
|               4: Path s8.JOB_RETRY_ATTEMPT : Option[Int']
|               5: Path s8.METADATA_KEY : String'
|               6: Path s8.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|               7: Path s8.METADATA_VALUE_TYPE : Option[String']
|               8: Path s8.METADATA_TIMESTAMP : java.sql.Timestamp'
|               9: OptionApply
|                 0: Path s8.METADATA_JOURNAL_ID : Long'
|         where: Apply Function =
|           0: Path s7.METADATA_JOURNAL_ID : Long'
|           1: Path s3.METADATA_JOURNAL_ID : Long'
|       select: Pure t9
|         value: Ref s6
|   by0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:12,89] [debug] Detected features: UsedFeatures(false,true,false,true)
[INFO] [07/30/2020 19:06:12.913] [cromwell-system-akka.dispatchers.engine-dispatcher-37] [akka://cromwell-system/user/SingleWorkflowRunnerActor/JobExecutionTokenDispenser] JobExecutionTokenDispenser - Distribution rate: 50 per 1 seconds.
[2020-07-30 19:06:12,92] [debug] After phase assignUniqueSymbols:
| SortBy Ordering(Asc,NullsDefault)
|   from s10: Bind
|     from s11: Take
|       from: TableExpansion
|         table s12: Table SUMMARY_QUEUE_ENTRY
|         columns: TypeMapping
|           0: Path s12.METADATA_JOURNAL_ID : Long'
|       count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|     select: Bind
|       from s14: Filter s15
|         from s15: TableExpansion
|           table s16: Table METADATA_ENTRY
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s16.WORKFLOW_EXECUTION_UUID : String'
|               2: Path s16.CALL_FQN : Option[String']
|               3: Path s16.JOB_SCATTER_INDEX : Option[Int']
|               4: Path s16.JOB_RETRY_ATTEMPT : Option[Int']
|               5: Path s16.METADATA_KEY : String'
|               6: Path s16.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|               7: Path s16.METADATA_VALUE_TYPE : Option[String']
|               8: Path s16.METADATA_TIMESTAMP : java.sql.Timestamp'
|               9: OptionApply
|                 0: Path s16.METADATA_JOURNAL_ID : Long'
|         where: Apply Function =
|           0: Path s15.METADATA_JOURNAL_ID : Long'
|           1: Path s11.METADATA_JOURNAL_ID : Long'
|       select: Pure t18
|         value: Ref s14
|   by0: Path s10.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:12,93] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:12,94] [debug] After phase inferTypes: (no change)
[INFO] [07/30/2020 19:06:12.947] [cromwell-system-akka.dispatchers.engine-dispatcher-5] [akka://cromwell-system/user/SingleWorkflowRunnerActor] SingleWorkflowRunnerActor: Version 52
[INFO] [07/30/2020 19:06:12.953] [cromwell-system-akka.dispatchers.engine-dispatcher-5] [akka://cromwell-system/user/SingleWorkflowRunnerActor] SingleWorkflowRunnerActor: Submitting workflow
[2020-07-30 19:06:12,98] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.METADATA_ENTRY), @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:13,01] [debug] With correct table types:
| SortBy Ordering(Asc,NullsDefault) : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|   from s10: Bind : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|     from s11: Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|       from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|       count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|     select: Bind : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|       from s14: Filter s15 : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|         from s15: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|         where: Apply Function = : Boolean
|           0: Path s15.METADATA_JOURNAL_ID : Long'
|           1: Path s11.METADATA_JOURNAL_ID : Long'
|       select: Pure t18 : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|         value: Ref s14 : @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>
|   by0: Path s10.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,01] [debug] Table expansions: @t13 -> (s12,TypeMapping), @t17 -> (s16,TypeMapping)
[2020-07-30 19:06:13,02] [debug] Expanding tables in result type
[2020-07-30 19:06:13,04] [debug] After phase expandTables:
| Bind : Vector[t20<Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]>]
|   from s19: SortBy Ordering(Asc,NullsDefault) : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|     from s10: Bind : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|       from s11: Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|       select: Bind : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|         from s14: Filter s15 : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           from s15: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           where: Apply Function = : Boolean
|             0: Path s15.METADATA_JOURNAL_ID : Long'
|             1: Path s11.METADATA_JOURNAL_ID : Long'
|         select: Pure t18 : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|           value: Ref s14 : @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>
|     by0: Path s10.METADATA_JOURNAL_ID : Long'
|   select: Pure t20 : Vector[t20<Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]>]
|     value: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|       0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|         1: Path s19.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s19.CALL_FQN : Option[String']
|         3: Path s19.JOB_SCATTER_INDEX : Option[Int']
|         4: Path s19.JOB_RETRY_ATTEMPT : Option[Int']
|         5: Path s19.METADATA_KEY : String'
|         6: Path s19.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         7: Path s19.METADATA_VALUE_TYPE : Option[String']
|         8: Path s19.METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: OptionApply : Option[Long']
|           0: Path s19.METADATA_JOURNAL_ID : Long'

[INFO] [07/30/2020 19:06:13.063] [cromwell-system-akka.dispatchers.api-dispatcher-40] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowStoreActor/WorkflowStoreSubmitActor] Unspecified type (Unspecified version) workflow 8b168b0d-854f-4ba0-99b6-35b7259a96fc submitted
[2020-07-30 19:06:13,07] [debug] After phase forceOuterBinds:
| Bind : Vector[t20<Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]>]
|   from s19: SortBy Ordering(Asc,NullsDefault) : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|     from s10: Bind : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|       from s11: Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|       select: Bind : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|         from s14: Filter s15 : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           from s15: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           where: Apply Function = : Boolean
|             0: Path s15.METADATA_JOURNAL_ID : Long'
|             1: Path s11.METADATA_JOURNAL_ID : Long'
|         select: Pure t18 : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|           value: Ref s14 : @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>
|     by0: Path s10.METADATA_JOURNAL_ID : Long'
|   select: Pure t20 : Vector[t20<Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]>]
|     value: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|       0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|         1: Path s19.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s19.CALL_FQN : Option[String']
|         3: Path s19.JOB_SCATTER_INDEX : Option[Int']
|         4: Path s19.JOB_RETRY_ATTEMPT : Option[Int']
|         5: Path s19.METADATA_KEY : String'
|         6: Path s19.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         7: Path s19.METADATA_VALUE_TYPE : Option[String']
|         8: Path s19.METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: OptionApply : Option[Long']
|           0: Path s19.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,08] [debug] After phase removeMappedTypes:
| Bind : Vector[t20<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])>]
|   from s19: SortBy Ordering(Asc,NullsDefault) : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|     from s10: Bind : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|       from s11: Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|       select: Bind : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|         from s14: Filter s15 : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           from s15: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           where: Apply Function = : Boolean
|             0: Path s15.METADATA_JOURNAL_ID : Long'
|             1: Path s11.METADATA_JOURNAL_ID : Long'
|         select: Pure t18 : Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
|           value: Ref s14 : @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>
|     by0: Path s10.METADATA_JOURNAL_ID : Long'
|   select: Pure t20 : Vector[t20<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])>]
|     value: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: Path s19.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s19.CALL_FQN : Option[String']
|       3: Path s19.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s19.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s19.METADATA_KEY : String'
|       6: Path s19.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s19.METADATA_VALUE_TYPE : Option[String']
|       8: Path s19.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: Path s19.METADATA_JOURNAL_ID : Long'

[INFO] [07/30/2020 19:06:13.085] [cromwell-system-akka.dispatchers.engine-dispatcher-37] [akka://cromwell-system/user/SingleWorkflowRunnerActor] SingleWorkflowRunnerActor: Workflow submitted UUID(8b168b0d-854f-4ba0-99b6-35b7259a96fc)
[2020-07-30 19:06:13,09] [debug] Translated type: Vector[@t13<{METADATA_JOURNAL_ID: Long'}>] -> Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
[2020-07-30 19:06:13,09] [debug] Translated type: Long' -> Long'
[2020-07-30 19:06:13,09] [debug] Translated type: Vector[@t13<{METADATA_JOURNAL_ID: Long'}>] -> Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
[2020-07-30 19:06:13,09] [debug] Translated type: Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>] -> Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
[2020-07-30 19:06:13,09] [debug] Translated type: @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}> -> @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>
[2020-07-30 19:06:13,09] [debug] Translated type: Long' -> Long'
[2020-07-30 19:06:13,09] [debug] Translated type: @t13<{METADATA_JOURNAL_ID: Long'}> -> @t13<{METADATA_JOURNAL_ID: Long'}>
[2020-07-30 19:06:13,09] [debug] Translated type: Long' -> Long'
[2020-07-30 19:06:13,09] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:13,09] [debug] Translated type: Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>] -> Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
[INFO] [07/30/2020 19:06:13.093] [cromwell-system-akka.dispatchers.engine-dispatcher-37] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowStoreActor/WorkflowStoreEngineActor] 1 new workflows fetched by cromid-c858775: 8b168b0d-854f-4ba0-99b6-35b7259a96fc
[2020-07-30 19:06:13,09] [debug] Translated type: @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}> -> @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>
[2020-07-30 19:06:13,09] [debug] Translated type: Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>] -> Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
[2020-07-30 19:06:13,09] [debug] Translated type: Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>] -> Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
[2020-07-30 19:06:13,09] [debug] Translated type: Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>] -> Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
[2020-07-30 19:06:13,09] [debug] Translated type: t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>> -> t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>
[2020-07-30 19:06:13,09] [debug] Translated type: Long' -> Long'
[2020-07-30 19:06:13,09] [debug] Translated type: Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>] -> Vector[t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>]
[2020-07-30 19:06:13,09] [debug] Translated type: t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>> -> t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>
[2020-07-30 19:06:13,09] [debug] Translated type: String' -> String'
[2020-07-30 19:06:13,09] [debug] Translated type: t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>> -> t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>
[2020-07-30 19:06:13,09] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:13,09] [debug] Translated type: t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>> -> t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>
[2020-07-30 19:06:13,09] [debug] Translated type: Option[Int'] -> Option[Int']
[2020-07-30 19:06:13,09] [debug] Translated type: t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>> -> t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>
[2020-07-30 19:06:13,09] [debug] Translated type: Option[Int'] -> Option[Int']
[2020-07-30 19:06:13,10] [debug] Translated type: t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>> -> t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>
[2020-07-30 19:06:13,10] [debug] Translated type: String' -> String'
[2020-07-30 19:06:13,10] [debug] Translated type: t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>> -> t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>
[2020-07-30 19:06:13,10] [debug] Translated type: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']] -> Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
[2020-07-30 19:06:13,10] [debug] Translated type: t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>> -> t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>
[2020-07-30 19:06:13,10] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:13,10] [debug] Translated type: t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>> -> t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>
[2020-07-30 19:06:13,10] [debug] Translated type: java.sql.Timestamp' -> java.sql.Timestamp'
[2020-07-30 19:06:13,10] [debug] Translated type: t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>> -> t18<@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>>
[2020-07-30 19:06:13,10] [debug] Translated type: Long' -> Long'
[2020-07-30 19:06:13,10] [debug] Translated type: Option[Long'] -> Option[Long']
[2020-07-30 19:06:13,10] [debug] Translated type: (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long']) -> (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
[2020-07-30 19:06:13,10] [debug] Translated type: Vector[t20<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])>] -> Vector[t20<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])>]
[2020-07-30 19:06:13,10] [debug] Translated type: Vector[t20<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])>] -> Vector[t20<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])>]
[2020-07-30 19:06:13,10] [debug] After phase expandSums: (no change)
[INFO] [07/30/2020 19:06:13.103] [cromwell-system-akka.dispatchers.engine-dispatcher-38] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor] WorkflowManagerActor Starting workflow UUID(8b168b0d-854f-4ba0-99b6-35b7259a96fc)
[2020-07-30 19:06:13,11] [debug] After phase expandRecords:
| Bind : Vector[t20<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])>]
|   from s19: SortBy Ordering(Asc,NullsDefault) : Vector[t18<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|     from s10: Bind : Vector[t18<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|       from s11: Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|       select: Bind : Vector[t18<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|         from s14: Filter s15 : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           from s15: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           where: Apply Function = : Boolean
|             0: Path s15.METADATA_JOURNAL_ID : Long'
|             1: Path s11.METADATA_JOURNAL_ID : Long'
|         select: Pure t18 : Vector[t18<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           value: StructNode : {METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}
|             METADATA_JOURNAL_ID: Path s14.METADATA_JOURNAL_ID : Long'
|             CALL_FQN: Path s14.CALL_FQN : Option[String']
|             WORKFLOW_EXECUTION_UUID: Path s14.WORKFLOW_EXECUTION_UUID : String'
|             METADATA_KEY: Path s14.METADATA_KEY : String'
|             JOB_SCATTER_INDEX: Path s14.JOB_SCATTER_INDEX : Option[Int']
|             METADATA_VALUE_TYPE: Path s14.METADATA_VALUE_TYPE : Option[String']
|             JOB_RETRY_ATTEMPT: Path s14.JOB_RETRY_ATTEMPT : Option[Int']
|             METADATA_VALUE: Path s14.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|             METADATA_TIMESTAMP: Path s14.METADATA_TIMESTAMP : java.sql.Timestamp'
|     by0: Path s10.METADATA_JOURNAL_ID : Long'
|   select: Pure t20 : Vector[t20<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])>]
|     value: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: Path s19.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s19.CALL_FQN : Option[String']
|       3: Path s19.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s19.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s19.METADATA_KEY : String'
|       6: Path s19.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s19.METADATA_VALUE_TYPE : Option[String']
|       8: Path s19.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: Path s19.METADATA_JOURNAL_ID : Long'

[INFO] [07/30/2020 19:06:13.113] [cromwell-system-akka.dispatchers.engine-dispatcher-38] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor] WorkflowManagerActor Successfully started WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc
[INFO] [07/30/2020 19:06:13.113] [cromwell-system-akka.dispatchers.engine-dispatcher-38] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor] Retrieved 1 workflows from the WorkflowStoreActor
[2020-07-30 19:06:13,12] [debug] Analyzing s15.METADATA_JOURNAL_ID with symbols 
| Path s15.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,12] [debug] Translated s15.METADATA_JOURNAL_ID to:
| Path s15.METADATA_JOURNAL_ID

[2020-07-30 19:06:13,12] [debug] Analyzing s11.METADATA_JOURNAL_ID with symbols 
| Path s11.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,12] [debug] Translated s11.METADATA_JOURNAL_ID to:
| Path s11.METADATA_JOURNAL_ID

[2020-07-30 19:06:13,12] [debug] Flattening projection t18
[INFO] [07/30/2020 19:06:13.133] [cromwell-system-akka.dispatchers.engine-dispatcher-37] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowStoreActor/WorkflowStoreHeartbeatWriteActor] WorkflowStoreHeartbeatWriteActor configured to flush with batch size 10000 and process rate 2 minutes.
[2020-07-30 19:06:13,13] [debug] Analyzing s14.METADATA_JOURNAL_ID with symbols 
| Path s14.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,13] [debug] Translated s14.METADATA_JOURNAL_ID to:
| Path s14.METADATA_JOURNAL_ID

[2020-07-30 19:06:13,13] [debug] Analyzing s14.CALL_FQN with symbols 
| Path s14.CALL_FQN : Option[String']

[2020-07-30 19:06:13,13] [debug] Translated s14.CALL_FQN to:
| Path s14.CALL_FQN

[2020-07-30 19:06:13,13] [debug] Analyzing s14.WORKFLOW_EXECUTION_UUID with symbols 
| Path s14.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:13,13] [debug] Translated s14.WORKFLOW_EXECUTION_UUID to:
| Path s14.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:13,13] [debug] Analyzing s14.METADATA_KEY with symbols 
| Path s14.METADATA_KEY : String'

[2020-07-30 19:06:13,13] [debug] Translated s14.METADATA_KEY to:
| Path s14.METADATA_KEY

[2020-07-30 19:06:13,13] [debug] Analyzing s14.JOB_SCATTER_INDEX with symbols 
| Path s14.JOB_SCATTER_INDEX : Option[Int']

[2020-07-30 19:06:13,13] [debug] Translated s14.JOB_SCATTER_INDEX to:
| Path s14.JOB_SCATTER_INDEX

[2020-07-30 19:06:13,13] [debug] Analyzing s14.METADATA_VALUE_TYPE with symbols 
| Path s14.METADATA_VALUE_TYPE : Option[String']

[2020-07-30 19:06:13,13] [debug] Translated s14.METADATA_VALUE_TYPE to:
| Path s14.METADATA_VALUE_TYPE

[2020-07-30 19:06:13,13] [debug] Analyzing s14.JOB_RETRY_ATTEMPT with symbols 
| Path s14.JOB_RETRY_ATTEMPT : Option[Int']

[2020-07-30 19:06:13,13] [debug] Translated s14.JOB_RETRY_ATTEMPT to:
| Path s14.JOB_RETRY_ATTEMPT

[2020-07-30 19:06:13,13] [debug] Analyzing s14.METADATA_VALUE with symbols 
| Path s14.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]

[2020-07-30 19:06:13,13] [debug] Translated s14.METADATA_VALUE to:
| Path s14.METADATA_VALUE

[2020-07-30 19:06:13,13] [debug] Analyzing s14.METADATA_TIMESTAMP with symbols 
| Path s14.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:13,13] [debug] Translated s14.METADATA_TIMESTAMP to:
| Path s14.METADATA_TIMESTAMP

[2020-07-30 19:06:13,14] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s14.METADATA_JOURNAL_ID
|   CALL_FQN: Path s14.CALL_FQN
|   WORKFLOW_EXECUTION_UUID: Path s14.WORKFLOW_EXECUTION_UUID
|   METADATA_KEY: Path s14.METADATA_KEY
|   JOB_SCATTER_INDEX: Path s14.JOB_SCATTER_INDEX
|   METADATA_VALUE_TYPE: Path s14.METADATA_VALUE_TYPE
|   JOB_RETRY_ATTEMPT: Path s14.JOB_RETRY_ATTEMPT
|   METADATA_VALUE: Path s14.METADATA_VALUE
|   METADATA_TIMESTAMP: Path s14.METADATA_TIMESTAMP

[2020-07-30 19:06:13,14] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s14.METADATA_JOURNAL_ID

[2020-07-30 19:06:13,14] [debug] Adding definition: s21 -> Path s14.METADATA_JOURNAL_ID
[2020-07-30 19:06:13,14] [debug] Flattening node at Path CALL_FQN
| Path s14.CALL_FQN

[2020-07-30 19:06:13,14] [debug] Adding definition: s22 -> Path s14.CALL_FQN
[2020-07-30 19:06:13,14] [debug] Flattening node at Path WORKFLOW_EXECUTION_UUID
| Path s14.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:13,14] [debug] Adding definition: s23 -> Path s14.WORKFLOW_EXECUTION_UUID
[2020-07-30 19:06:13,14] [debug] Flattening node at Path METADATA_KEY
| Path s14.METADATA_KEY

[2020-07-30 19:06:13,14] [debug] Adding definition: s24 -> Path s14.METADATA_KEY
[2020-07-30 19:06:13,14] [debug] Flattening node at Path JOB_SCATTER_INDEX
| Path s14.JOB_SCATTER_INDEX

[2020-07-30 19:06:13,14] [debug] Adding definition: s25 -> Path s14.JOB_SCATTER_INDEX
[2020-07-30 19:06:13,14] [debug] Flattening node at Path METADATA_VALUE_TYPE
| Path s14.METADATA_VALUE_TYPE

[2020-07-30 19:06:13,15] [debug] Adding definition: s26 -> Path s14.METADATA_VALUE_TYPE
[2020-07-30 19:06:13,15] [debug] Flattening node at Path JOB_RETRY_ATTEMPT
| Path s14.JOB_RETRY_ATTEMPT

[2020-07-30 19:06:13,15] [debug] Adding definition: s27 -> Path s14.JOB_RETRY_ATTEMPT
[2020-07-30 19:06:13,15] [debug] Flattening node at Path METADATA_VALUE
| Path s14.METADATA_VALUE

[2020-07-30 19:06:13,15] [debug] Adding definition: s28 -> Path s14.METADATA_VALUE
[2020-07-30 19:06:13,15] [debug] Flattening node at Path METADATA_TIMESTAMP
| Path s14.METADATA_TIMESTAMP

[2020-07-30 19:06:13,15] [debug] Adding definition: s29 -> Path s14.METADATA_TIMESTAMP
[2020-07-30 19:06:13,15] [debug] Adding translation for t18: (Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21), UnassignedType)
[2020-07-30 19:06:13,15] [debug] Flattened projection to
| Pure t18
|   value: StructNode
|     s21: Path s14.METADATA_JOURNAL_ID
|     s22: Path s14.CALL_FQN
|     s23: Path s14.WORKFLOW_EXECUTION_UUID
|     s24: Path s14.METADATA_KEY
|     s25: Path s14.JOB_SCATTER_INDEX
|     s26: Path s14.METADATA_VALUE_TYPE
|     s27: Path s14.JOB_RETRY_ATTEMPT
|     s28: Path s14.METADATA_VALUE
|     s29: Path s14.METADATA_TIMESTAMP

[2020-07-30 19:06:13,15] [debug] Analyzing s10.METADATA_JOURNAL_ID with symbols t18
| Path s10.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,15] [debug] Found s10.METADATA_JOURNAL_ID with local part Path METADATA_JOURNAL_ID over t18
[2020-07-30 19:06:13,15] [debug]   Translation for t18: Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21)
[2020-07-30 19:06:13,16] [debug] Translated s10.METADATA_JOURNAL_ID to:
| Path s10.s21

[2020-07-30 19:06:13,16] [debug] Flattening projection t20
[2020-07-30 19:06:13,16] [debug] Analyzing s19.WORKFLOW_EXECUTION_UUID with symbols t18
| Path s19.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:13,16] [debug] Found s19.WORKFLOW_EXECUTION_UUID with local part Path WORKFLOW_EXECUTION_UUID over t18
[2020-07-30 19:06:13,16] [debug]   Translation for t18: Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21)
[2020-07-30 19:06:13,16] [debug] Translated s19.WORKFLOW_EXECUTION_UUID to:
| Path s19.s23

[2020-07-30 19:06:13,16] [debug] Analyzing s19.CALL_FQN with symbols t18
| Path s19.CALL_FQN : Option[String']

[2020-07-30 19:06:13,16] [debug] Found s19.CALL_FQN with local part Path CALL_FQN over t18
[2020-07-30 19:06:13,16] [debug]   Translation for t18: Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21)
[2020-07-30 19:06:13,16] [debug] Translated s19.CALL_FQN to:
| Path s19.s22

[2020-07-30 19:06:13,16] [debug] Analyzing s19.JOB_SCATTER_INDEX with symbols t18
| Path s19.JOB_SCATTER_INDEX : Option[Int']

[2020-07-30 19:06:13,16] [debug] Found s19.JOB_SCATTER_INDEX with local part Path JOB_SCATTER_INDEX over t18
[2020-07-30 19:06:13,16] [debug]   Translation for t18: Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21)
[2020-07-30 19:06:13,16] [debug] Translated s19.JOB_SCATTER_INDEX to:
| Path s19.s25

[2020-07-30 19:06:13,16] [debug] Analyzing s19.JOB_RETRY_ATTEMPT with symbols t18
| Path s19.JOB_RETRY_ATTEMPT : Option[Int']

[2020-07-30 19:06:13,16] [debug] Found s19.JOB_RETRY_ATTEMPT with local part Path JOB_RETRY_ATTEMPT over t18
[2020-07-30 19:06:13,16] [debug]   Translation for t18: Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21)
[2020-07-30 19:06:13,16] [debug] Translated s19.JOB_RETRY_ATTEMPT to:
| Path s19.s27

[2020-07-30 19:06:13,16] [debug] Analyzing s19.METADATA_KEY with symbols t18
| Path s19.METADATA_KEY : String'

[2020-07-30 19:06:13,16] [debug] Found s19.METADATA_KEY with local part Path METADATA_KEY over t18
[2020-07-30 19:06:13,16] [debug]   Translation for t18: Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21)
[2020-07-30 19:06:13,16] [debug] Translated s19.METADATA_KEY to:
| Path s19.s24

[2020-07-30 19:06:13,16] [debug] Analyzing s19.METADATA_VALUE with symbols t18
| Path s19.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]

[2020-07-30 19:06:13,16] [debug] Found s19.METADATA_VALUE with local part Path METADATA_VALUE over t18
[2020-07-30 19:06:13,16] [debug]   Translation for t18: Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21)
[2020-07-30 19:06:13,16] [debug] Translated s19.METADATA_VALUE to:
| Path s19.s28

[2020-07-30 19:06:13,16] [debug] Analyzing s19.METADATA_VALUE_TYPE with symbols t18
| Path s19.METADATA_VALUE_TYPE : Option[String']

[2020-07-30 19:06:13,16] [debug] Found s19.METADATA_VALUE_TYPE with local part Path METADATA_VALUE_TYPE over t18
[2020-07-30 19:06:13,16] [debug]   Translation for t18: Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21)
[2020-07-30 19:06:13,16] [debug] Translated s19.METADATA_VALUE_TYPE to:
| Path s19.s26

[2020-07-30 19:06:13,17] [debug] Analyzing s19.METADATA_TIMESTAMP with symbols t18
| Path s19.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:13,17] [debug] Found s19.METADATA_TIMESTAMP with local part Path METADATA_TIMESTAMP over t18
[2020-07-30 19:06:13,17] [debug]   Translation for t18: Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21)
[2020-07-30 19:06:13,17] [debug] Translated s19.METADATA_TIMESTAMP to:
| Path s19.s29

[2020-07-30 19:06:13,17] [debug] Analyzing s19.METADATA_JOURNAL_ID with symbols t18
| Path s19.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,17] [debug] Found s19.METADATA_JOURNAL_ID with local part Path METADATA_JOURNAL_ID over t18
[2020-07-30 19:06:13,17] [debug]   Translation for t18: Map(List(JOB_RETRY_ATTEMPT) -> s27, List(WORKFLOW_EXECUTION_UUID) -> s23, List(METADATA_TIMESTAMP) -> s29, List(METADATA_VALUE_TYPE) -> s26, List(METADATA_KEY) -> s24, List(JOB_SCATTER_INDEX) -> s25, List(METADATA_VALUE) -> s28, List(CALL_FQN) -> s22, List(METADATA_JOURNAL_ID) -> s21)
[2020-07-30 19:06:13,17] [debug] Translated s19.METADATA_JOURNAL_ID to:
| Path s19.s21

[2020-07-30 19:06:13,17] [debug] Flattening node at Path 
| ProductNode
|   1: Path s19.s23
|   2: Path s19.s22
|   3: Path s19.s25
|   4: Path s19.s27
|   5: Path s19.s24
|   6: Path s19.s28
|   7: Path s19.s26
|   8: Path s19.s29
|   9: OptionApply
|     0: Path s19.s21

[2020-07-30 19:06:13,17] [debug] Flattening node at Path _1
| Path s19.s23

[2020-07-30 19:06:13,17] [debug] Adding definition: s30 -> Path s19.s23
[2020-07-30 19:06:13,17] [debug] Flattening node at Path _2
| Path s19.s22

[2020-07-30 19:06:13,17] [debug] Adding definition: s31 -> Path s19.s22
[2020-07-30 19:06:13,17] [debug] Flattening node at Path _3
| Path s19.s25

[2020-07-30 19:06:13,17] [debug] Adding definition: s32 -> Path s19.s25
[2020-07-30 19:06:13,18] [debug] Flattening node at Path _4
| Path s19.s27

[2020-07-30 19:06:13,18] [debug] Adding definition: s33 -> Path s19.s27
[2020-07-30 19:06:13,18] [debug] Flattening node at Path _5
| Path s19.s24

[2020-07-30 19:06:13,18] [debug] Adding definition: s34 -> Path s19.s24
[2020-07-30 19:06:13,18] [debug] Flattening node at Path _6
| Path s19.s28

[2020-07-30 19:06:13,18] [debug] Adding definition: s35 -> Path s19.s28
[2020-07-30 19:06:13,18] [debug] Flattening node at Path _7
| Path s19.s26

[2020-07-30 19:06:13,18] [debug] Adding definition: s36 -> Path s19.s26
[2020-07-30 19:06:13,18] [debug] Flattening node at Path _8
| Path s19.s29

[2020-07-30 19:06:13,18] [debug] Adding definition: s37 -> Path s19.s29
[2020-07-30 19:06:13,18] [debug] Flattening node at Path _9
| OptionApply
|   0: Path s19.s21

[2020-07-30 19:06:13,18] [debug] Adding definition: s38 -> OptionApply
[2020-07-30 19:06:13,18] [debug] Adding translation for t20: (Map(List(_2) -> s31, List(_4) -> s33, List(_5) -> s34, List(_3) -> s32, List(_9) -> s38, List(_1) -> s30, List(_7) -> s36, List(_6) -> s35, List(_8) -> s37), UnassignedType)
[2020-07-30 19:06:13,18] [debug] Flattened projection to
| Pure t20
|   value: StructNode
|     s30: Path s19.s23
|     s31: Path s19.s22
|     s32: Path s19.s25
|     s33: Path s19.s27
|     s34: Path s19.s24
|     s35: Path s19.s28
|     s36: Path s19.s26
|     s37: Path s19.s29
|     s38: OptionApply
|       0: Path s19.s21

[2020-07-30 19:06:13,20] [debug] After phase flattenProjections:
| Bind : Vector[t20<{s30: String', s31: Option[String'], s32: Option[Int'], s33: Option[Int'], s34: String', s35: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s36: Option[String'], s37: java.sql.Timestamp', s38: Option[Long']}>]
|   from s19: SortBy Ordering(Asc,NullsDefault) : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|     from s10: Bind : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|       from s11: Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|       select: Bind : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|         from s14: Filter s15 : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           from s15: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           where: Apply Function = : Boolean
|             0: Path s15.METADATA_JOURNAL_ID : Long'
|             1: Path s11.METADATA_JOURNAL_ID : Long'
|         select: Pure t18 : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|           value: StructNode : {s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}
|             s21: Path s14.METADATA_JOURNAL_ID : Long'
|             s22: Path s14.CALL_FQN : Option[String']
|             s23: Path s14.WORKFLOW_EXECUTION_UUID : String'
|             s24: Path s14.METADATA_KEY : String'
|             s25: Path s14.JOB_SCATTER_INDEX : Option[Int']
|             s26: Path s14.METADATA_VALUE_TYPE : Option[String']
|             s27: Path s14.JOB_RETRY_ATTEMPT : Option[Int']
|             s28: Path s14.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|             s29: Path s14.METADATA_TIMESTAMP : java.sql.Timestamp'
|     by0: Path s10.s21 : Long'
|   select: Pure t20 : Vector[t20<{s30: String', s31: Option[String'], s32: Option[Int'], s33: Option[Int'], s34: String', s35: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s36: Option[String'], s37: java.sql.Timestamp', s38: Option[Long']}>]
|     value: StructNode : {s30: String', s31: Option[String'], s32: Option[Int'], s33: Option[Int'], s34: String', s35: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s36: Option[String'], s37: java.sql.Timestamp', s38: Option[Long']}
|       s30: Path s19.s23 : String'
|       s31: Path s19.s22 : Option[String']
|       s32: Path s19.s25 : Option[Int']
|       s33: Path s19.s27 : Option[Int']
|       s34: Path s19.s24 : String'
|       s35: Path s19.s28 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s36: Path s19.s26 : Option[String']
|       s37: Path s19.s29 : java.sql.Timestamp'
|       s38: OptionApply : Option[Long']
|         0: Path s19.s21 : Long'

[2020-07-30 19:06:13,21] [debug] Hoisting flatMapped Filter from:
| Bind : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|   from s11: ...
|   select: Bind : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|     from s14: Filter s15 : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|       from s15: ...
|       where: Apply Function = : Boolean
|         0: Path s15.METADATA_JOURNAL_ID : Long'
|         1: Path s11.METADATA_JOURNAL_ID : Long'
|     select: Pure t18 : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|       value: StructNode : {s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}
|         s21: Path s14.METADATA_JOURNAL_ID : Long'
|         s22: Path s14.CALL_FQN : Option[String']
|         s23: Path s14.WORKFLOW_EXECUTION_UUID : String'
|         s24: Path s14.METADATA_KEY : String'
|         s25: Path s14.JOB_SCATTER_INDEX : Option[Int']
|         s26: Path s14.METADATA_VALUE_TYPE : Option[String']
|         s27: Path s14.JOB_RETRY_ATTEMPT : Option[Int']
|         s28: Path s14.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s29: Path s14.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:13,21] [debug] Hoisted flatMapped Filter in:
| Bind : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|   from s39: Join Inner : Vector[(@t13<{METADATA_JOURNAL_ID: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|     left s40: ...
|     right s41: ...
|     on: Apply Function = : Boolean
|       0: Path s41.METADATA_JOURNAL_ID : Long'
|       1: Path s40.METADATA_JOURNAL_ID : Long'
|   select: Pure t18 : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|     value: StructNode : {s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}
|       s21: Path s39._2.METADATA_JOURNAL_ID : Long'
|       s22: Path s39._2.CALL_FQN : Option[String']
|       s23: Path s39._2.WORKFLOW_EXECUTION_UUID : String'
|       s24: Path s39._2.METADATA_KEY : String'
|       s25: Path s39._2.JOB_SCATTER_INDEX : Option[Int']
|       s26: Path s39._2.METADATA_VALUE_TYPE : Option[String']
|       s27: Path s39._2.JOB_RETRY_ATTEMPT : Option[Int']
|       s28: Path s39._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s29: Path s39._2.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:13,22] [debug] After phase rewriteJoins:
| Bind : Vector[t20<{s30: String', s31: Option[String'], s32: Option[Int'], s33: Option[Int'], s34: String', s35: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s36: Option[String'], s37: java.sql.Timestamp', s38: Option[Long']}>]
|   from s19: SortBy Ordering(Asc,NullsDefault) : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|     from s10: Bind : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|       from s39: Join Inner : Vector[(@t13<{METADATA_JOURNAL_ID: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|         left s40: Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|           from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|           count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|         right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|         on: Apply Function = : Boolean
|           0: Path s41.METADATA_JOURNAL_ID : Long'
|           1: Path s40.METADATA_JOURNAL_ID : Long'
|       select: Pure t18 : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|         value: StructNode : {s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}
|           s21: Path s39._2.METADATA_JOURNAL_ID : Long'
|           s22: Path s39._2.CALL_FQN : Option[String']
|           s23: Path s39._2.WORKFLOW_EXECUTION_UUID : String'
|           s24: Path s39._2.METADATA_KEY : String'
|           s25: Path s39._2.JOB_SCATTER_INDEX : Option[Int']
|           s26: Path s39._2.METADATA_VALUE_TYPE : Option[String']
|           s27: Path s39._2.JOB_RETRY_ATTEMPT : Option[Int']
|           s28: Path s39._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           s29: Path s39._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|     by0: Path s10.s21 : Long'
|   select: Pure t20 : Vector[t20<{s30: String', s31: Option[String'], s32: Option[Int'], s33: Option[Int'], s34: String', s35: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s36: Option[String'], s37: java.sql.Timestamp', s38: Option[Long']}>]
|     value: StructNode : {s30: String', s31: Option[String'], s32: Option[Int'], s33: Option[Int'], s34: String', s35: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s36: Option[String'], s37: java.sql.Timestamp', s38: Option[Long']}
|       s30: Path s19.s23 : String'
|       s31: Path s19.s22 : Option[String']
|       s32: Path s19.s25 : Option[Int']
|       s33: Path s19.s27 : Option[Int']
|       s34: Path s19.s24 : String'
|       s35: Path s19.s28 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s36: Path s19.s26 : Option[String']
|       s37: Path s19.s29 : java.sql.Timestamp'
|       s38: OptionApply : Option[Long']
|         0: Path s19.s21 : Long'

[2020-07-30 19:06:13,22] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:13,22] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:13,22] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:13,22] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:13,22] [debug] Unreferenced: t20; Field refs: (@t17,METADATA_TIMESTAMP), (t18,s24), (t18,s27), (@t17,JOB_RETRY_ATTEMPT), (t18,s29), (t18,s28), (@t17,METADATA_VALUE_TYPE), (@t17,METADATA_JOURNAL_ID), (t18,s25), (t18,s26), (t18,s22), (@t13,METADATA_JOURNAL_ID), (@t17,METADATA_KEY), (@t17,METADATA_VALUE), (@t17,CALL_FQN), (@t17,WORKFLOW_EXECUTION_UUID), (t18,s21), (@t17,JOB_SCATTER_INDEX), (t18,s23)
[2020-07-30 19:06:13,22] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:13,22] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:13,22] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:13,23] [debug] Creating mapping from t20<Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]>
[2020-07-30 19:06:13,23] [debug] Creating mapping from (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
[2020-07-30 19:06:13,23] [debug] Creating mapping from String'
[2020-07-30 19:06:13,23] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:13,23] [debug] Creating mapping from Option[Int']
[2020-07-30 19:06:13,23] [debug] Creating mapping from Option[Int']
[2020-07-30 19:06:13,23] [debug] Creating mapping from String'
[2020-07-30 19:06:13,23] [debug] Creating mapping from Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
[2020-07-30 19:06:13,23] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:13,23] [debug] Creating mapping from java.sql.Timestamp'
[2020-07-30 19:06:13,23] [debug] Creating mapping from Option[Long']
[2020-07-30 19:06:13,24] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]]
|   from s42: Bind : Vector[t20<{s30: String', s31: Option[String'], s32: Option[Int'], s33: Option[Int'], s34: String', s35: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s36: Option[String'], s37: java.sql.Timestamp', s38: Option[Long']}>]
|     from s19: SortBy Ordering(Asc,NullsDefault) : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|       from s10: Bind : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|         from s39: Join Inner : Vector[(@t13<{METADATA_JOURNAL_ID: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|           left s40: Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|             from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|             count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|           right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           on: Apply Function = : Boolean
|             0: Path s41.METADATA_JOURNAL_ID : Long'
|             1: Path s40.METADATA_JOURNAL_ID : Long'
|         select: Pure t18 : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|           value: StructNode : {s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}
|             s21: Path s39._2.METADATA_JOURNAL_ID : Long'
|             s22: Path s39._2.CALL_FQN : Option[String']
|             s23: Path s39._2.WORKFLOW_EXECUTION_UUID : String'
|             s24: Path s39._2.METADATA_KEY : String'
|             s25: Path s39._2.JOB_SCATTER_INDEX : Option[Int']
|             s26: Path s39._2.METADATA_VALUE_TYPE : Option[String']
|             s27: Path s39._2.JOB_RETRY_ATTEMPT : Option[Int']
|             s28: Path s39._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|             s29: Path s39._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|       by0: Path s10.s21 : Long'
|     select: Pure t20 : Vector[t20<{s30: String', s31: Option[String'], s32: Option[Int'], s33: Option[Int'], s34: String', s35: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s36: Option[String'], s37: java.sql.Timestamp', s38: Option[Long']}>]
|       value: StructNode : {s30: String', s31: Option[String'], s32: Option[Int'], s33: Option[Int'], s34: String', s35: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s36: Option[String'], s37: java.sql.Timestamp', s38: Option[Long']}
|         s30: Path s19.s23 : String'
|         s31: Path s19.s22 : Option[String']
|         s32: Path s19.s25 : Option[Int']
|         s33: Path s19.s27 : Option[Int']
|         s34: Path s19.s24 : String'
|         s35: Path s19.s28 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s36: Path s19.s26 : Option[String']
|         s37: Path s19.s29 : java.sql.Timestamp'
|         s38: OptionApply : Option[Long']
|           0: Path s19.s21 : Long'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: Path s42.s30 : String'
|       2: Path s42.s31 : Option[String']
|       3: Path s42.s32 : Option[Int']
|       4: Path s42.s33 : Option[Int']
|       5: Path s42.s34 : String'
|       6: Path s42.s35 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s42.s36 : Option[String']
|       8: Path s42.s37 : java.sql.Timestamp'
|       9: Path s42.s38 : Option[Long']

[INFO] [07/30/2020 19:06:13.241] [cromwell-system-akka.dispatchers.engine-dispatcher-38] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/MaterializeWorkflowDescriptorActor] MaterializeWorkflowDescriptorActor [UUID(8b168b0d)]: Parsing workflow as WDL 1.0
[2020-07-30 19:06:13,24] [debug] Hoisting operations from defs: s38
[2020-07-30 19:06:13,24] [debug] New defs: Map(0 -> (Path s19.s23,s43), 5 -> (Path s19.s28,s44), 1 -> (Path s19.s22,s45), 6 -> (Path s19.s26,s46), 2 -> (Path s19.s25,s47), 7 -> (Path s19.s29,s48), 3 -> (Path s19.s27,s49), 8 -> (Path s19.s21,s50), 4 -> (Path s19.s24,s51))
[2020-07-30 19:06:13,25] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]]
|   from s42: Bind : Vector[t52<{s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}>]
|     from s19: ...
|     select: Pure t52 : Vector[t52<{s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}>]
|       value: StructNode : {s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}
|         s48: Path s19.s29 : java.sql.Timestamp'
|         s46: Path s19.s26 : Option[String']
|         s50: Path s19.s21 : Long'
|         s51: Path s19.s24 : String'
|         s49: Path s19.s27 : Option[Int']
|         s47: Path s19.s25 : Option[Int']
|         s44: Path s19.s28 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s45: Path s19.s22 : Option[String']
|         s43: Path s19.s23 : String'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: Path s42.s43 : String'
|       2: Path s42.s45 : Option[String']
|       3: Path s42.s47 : Option[Int']
|       4: Path s42.s49 : Option[Int']
|       5: Path s42.s51 : String'
|       6: Path s42.s44 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s42.s46 : Option[String']
|       8: Path s42.s48 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: Path s42.s50 : Long'

[2020-07-30 19:06:13,26] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]]
|   from s42: Bind : Vector[t52<{s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}>]
|     from s19: SortBy Ordering(Asc,NullsDefault) : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|       from s10: Bind : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|         from s39: Join Inner : Vector[(@t13<{METADATA_JOURNAL_ID: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|           left s40: Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|             from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|             count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|           right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|           on: Apply Function = : Boolean
|             0: Path s41.METADATA_JOURNAL_ID : Long'
|             1: Path s40.METADATA_JOURNAL_ID : Long'
|         select: Pure t18 : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|           value: StructNode : {s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}
|             s21: Path s39._2.METADATA_JOURNAL_ID : Long'
|             s22: Path s39._2.CALL_FQN : Option[String']
|             s23: Path s39._2.WORKFLOW_EXECUTION_UUID : String'
|             s24: Path s39._2.METADATA_KEY : String'
|             s25: Path s39._2.JOB_SCATTER_INDEX : Option[Int']
|             s26: Path s39._2.METADATA_VALUE_TYPE : Option[String']
|             s27: Path s39._2.JOB_RETRY_ATTEMPT : Option[Int']
|             s28: Path s39._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|             s29: Path s39._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|       by0: Path s10.s21 : Long'
|     select: Pure t52 : Vector[t52<{s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}>]
|       value: StructNode : {s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}
|         s48: Path s19.s29 : java.sql.Timestamp'
|         s46: Path s19.s26 : Option[String']
|         s50: Path s19.s21 : Long'
|         s51: Path s19.s24 : String'
|         s49: Path s19.s27 : Option[Int']
|         s47: Path s19.s25 : Option[Int']
|         s44: Path s19.s28 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s45: Path s19.s22 : Option[String']
|         s43: Path s19.s23 : String'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: Path s42.s43 : String'
|       2: Path s42.s45 : Option[String']
|       3: Path s42.s47 : Option[Int']
|       4: Path s42.s49 : Option[Int']
|       5: Path s42.s51 : String'
|       6: Path s42.s44 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s42.s46 : Option[String']
|       8: Path s42.s48 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: Path s42.s50 : Long'

[2020-07-30 19:06:13,27] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:13,27] [debug] Table fields: Map(@t13 -> Vector(METADATA_JOURNAL_ID), @t17 -> Vector(METADATA_JOURNAL_ID, CALL_FQN, WORKFLOW_EXECUTION_UUID, METADATA_KEY, JOB_SCATTER_INDEX, METADATA_VALUE_TYPE, JOB_RETRY_ATTEMPT, METADATA_VALUE, METADATA_TIMESTAMP))
[2020-07-30 19:06:13,27] [debug] Creating source from Join s40/s41:
| Join Inner : Vector[(@t13<{METADATA_JOURNAL_ID: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|   left s40: Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|     from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|     count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|   right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|   on: Apply Function = : Boolean
|     0: Path s41.METADATA_JOURNAL_ID : Long'
|     1: Path s40.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,28] [debug] Creating subquery from top-level:
| Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|   from: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|   count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'

[2020-07-30 19:06:13,28] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:13,28] [debug] Mappings are: ConstArray(((@t13,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:13,28] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:13,29] [debug] Built new Comprehension:
| Comprehension s53, None, None, ConstArray(), None, None, None, None, false : Vector[t54<{s55: Long'}>]
|   from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t54 : Vector[t54<{s55: Long'}>]
|     value: StructNode : {s55: Long'}
|       s55: Path s53.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,30] [debug] Replacements are: Map((@t13,METADATA_JOURNAL_ID) -> s55)
[2020-07-30 19:06:13,30] [debug] Merging Take into Comprehension:
| Take : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|   from: ...
|   count: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'

[2020-07-30 19:06:13,30] [debug] Merged Take into Comprehension:
| Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|   from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t54 : Vector[t54<{s55: Long'}>]
|     value: StructNode : {s55: Long'}
|       s55: Path s53.METADATA_JOURNAL_ID : Long'
|   fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'

[2020-07-30 19:06:13,30] [debug] Mappings are: ConstArray(((@t13,METADATA_JOURNAL_ID),List(s55)))
[2020-07-30 19:06:13,30] [debug] Creating source from TableNode:
| Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]

[2020-07-30 19:06:13,30] [debug] Mappings are: ConstArray(((@t17,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)), ((@t17,CALL_FQN),List(CALL_FQN)), ((@t17,WORKFLOW_EXECUTION_UUID),List(WORKFLOW_EXECUTION_UUID)), ((@t17,METADATA_KEY),List(METADATA_KEY)), ((@t17,JOB_SCATTER_INDEX),List(JOB_SCATTER_INDEX)), ((@t17,METADATA_VALUE_TYPE),List(METADATA_VALUE_TYPE)), ((@t17,JOB_RETRY_ATTEMPT),List(JOB_RETRY_ATTEMPT)), ((@t17,METADATA_VALUE),List(METADATA_VALUE)), ((@t17,METADATA_TIMESTAMP),List(METADATA_TIMESTAMP)))
[2020-07-30 19:06:13,31] [debug] Converted left side of Join s40/s41:
| Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|   from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t54 : Vector[t54<{s55: Long'}>]
|     value: StructNode : {s55: Long'}
|       s55: Path s53.METADATA_JOURNAL_ID : Long'
|   fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'

[2020-07-30 19:06:13,31] [debug] Converted right side of Join s40/s41:
| Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]

[2020-07-30 19:06:13,31] [debug] Mappings for [38;5;5mon[0m clause in Join s40/s41: Map((@t17,METADATA_TIMESTAMP) -> List(_2, METADATA_TIMESTAMP), (@t17,JOB_RETRY_ATTEMPT) -> List(_2, JOB_RETRY_ATTEMPT), (@t17,METADATA_VALUE_TYPE) -> List(_2, METADATA_VALUE_TYPE), (@t17,METADATA_JOURNAL_ID) -> List(_2, METADATA_JOURNAL_ID), (@t13,METADATA_JOURNAL_ID) -> List(_1, s55), (@t17,METADATA_KEY) -> List(_2, METADATA_KEY), (@t17,METADATA_VALUE) -> List(_2, METADATA_VALUE), (@t17,CALL_FQN) -> List(_2, CALL_FQN), (@t17,WORKFLOW_EXECUTION_UUID) -> List(_2, WORKFLOW_EXECUTION_UUID), (@t17,JOB_SCATTER_INDEX) -> List(_2, JOB_SCATTER_INDEX))
[2020-07-30 19:06:13,31] [debug] Transformed [38;5;5mon[0m clause in Join s40/s41:
| Apply Function = : Boolean
|   0: Path s41.METADATA_JOURNAL_ID : Long'
|   1: Path s40.s55 : Long'

[2020-07-30 19:06:13,32] [debug] Created source from Join s40/s41:
| Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|   left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|     from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t54 : Vector[t54<{s55: Long'}>]
|       value: StructNode : {s55: Long'}
|         s55: Path s53.METADATA_JOURNAL_ID : Long'
|     fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|   right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|   on: Apply Function = : Boolean
|     0: Path s41.METADATA_JOURNAL_ID : Long'
|     1: Path s40.s55 : Long'

[2020-07-30 19:06:13,32] [debug] Building new Comprehension from:
| Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|   left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|     from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t54 : Vector[t54<{s55: Long'}>]
|       value: StructNode : {s55: Long'}
|         s55: Path s53.METADATA_JOURNAL_ID : Long'
|     fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|   right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|   on: Apply Function = : Boolean
|     0: Path s41.METADATA_JOURNAL_ID : Long'
|     1: Path s40.s55 : Long'

[2020-07-30 19:06:13,32] [debug] Built new Comprehension:
| Comprehension s56, None, None, ConstArray(), None, None, None, None, false : Vector[t57<{s58: Long', s59: Long', s60: Option[String'], s61: String', s62: String', s63: Option[Int'], s64: Option[String'], s65: Option[Int'], s66: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s67: java.sql.Timestamp'}>]
|   from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|     left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|       from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t54 : Vector[t54<{s55: Long'}>]
|         value: StructNode : {s55: Long'}
|           s55: Path s53.METADATA_JOURNAL_ID : Long'
|       fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|     right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|     on: Apply Function = : Boolean
|       0: Path s41.METADATA_JOURNAL_ID : Long'
|       1: Path s40.s55 : Long'
|   select: Pure t57 : Vector[t57<{s58: Long', s59: Long', s60: Option[String'], s61: String', s62: String', s63: Option[Int'], s64: Option[String'], s65: Option[Int'], s66: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s67: java.sql.Timestamp'}>]
|     value: StructNode : {s58: Long', s59: Long', s60: Option[String'], s61: String', s62: String', s63: Option[Int'], s64: Option[String'], s65: Option[Int'], s66: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s67: java.sql.Timestamp'}
|       s58: Path s56._1.s55 : Long'
|       s59: Path s56._2.METADATA_JOURNAL_ID : Long'
|       s60: Path s56._2.CALL_FQN : Option[String']
|       s61: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|       s62: Path s56._2.METADATA_KEY : String'
|       s63: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|       s64: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|       s65: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|       s66: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s67: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:13,32] [debug] Replacements are: Map((@t17,METADATA_TIMESTAMP) -> s67, (@t17,JOB_RETRY_ATTEMPT) -> s65, (@t17,METADATA_VALUE_TYPE) -> s64, (@t17,METADATA_JOURNAL_ID) -> s59, (@t13,METADATA_JOURNAL_ID) -> s58, (@t17,METADATA_KEY) -> s62, (@t17,METADATA_VALUE) -> s66, (@t17,CALL_FQN) -> s60, (@t17,WORKFLOW_EXECUTION_UUID) -> s61, (@t17,JOB_SCATTER_INDEX) -> s63)
[2020-07-30 19:06:13,32] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|   from s39: ...
|   select: Pure t18 : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|     value: StructNode : {s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}
|       s21: Path s39._2.METADATA_JOURNAL_ID : Long'
|       s22: Path s39._2.CALL_FQN : Option[String']
|       s23: Path s39._2.WORKFLOW_EXECUTION_UUID : String'
|       s24: Path s39._2.METADATA_KEY : String'
|       s25: Path s39._2.JOB_SCATTER_INDEX : Option[Int']
|       s26: Path s39._2.METADATA_VALUE_TYPE : Option[String']
|       s27: Path s39._2.JOB_RETRY_ATTEMPT : Option[Int']
|       s28: Path s39._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s29: Path s39._2.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:13,33] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s56, None, None, ConstArray(), None, None, None, None, false : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|   from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|     left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|       from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t54 : Vector[t54<{s55: Long'}>]
|         value: StructNode : {s55: Long'}
|           s55: Path s53.METADATA_JOURNAL_ID : Long'
|       fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|     right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|     on: Apply Function = : Boolean
|       0: Path s41.METADATA_JOURNAL_ID : Long'
|       1: Path s40.s55 : Long'
|   select: Pure t18 : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|     value: StructNode : {s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}
|       s21: Path s56._2.METADATA_JOURNAL_ID : Long'
|       s22: Path s56._2.CALL_FQN : Option[String']
|       s23: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|       s24: Path s56._2.METADATA_KEY : String'
|       s25: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|       s26: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|       s27: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|       s28: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s29: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:13,33] [debug] Replacements are: Map((t18,s24) -> s24, (t18,s27) -> s27, (t18,s29) -> s29, (t18,s28) -> s28, (t18,s25) -> s25, (t18,s26) -> s26, (t18,s22) -> s22, (t18,s21) -> s21, (t18,s23) -> s23)
[2020-07-30 19:06:13,33] [debug] Merging SortBy into Comprehension:
| SortBy Ordering(Asc,NullsDefault) : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|   from s10: ...
|   by0: Path s10.s21 : Long'

[2020-07-30 19:06:13,33] [debug] Merged SortBy into Comprehension:
| Comprehension s56, None, None, ConstArray((Path s56._2.METADATA_JOURNAL_ID,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|   from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|     left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|       from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t54 : Vector[t54<{s55: Long'}>]
|         value: StructNode : {s55: Long'}
|           s55: Path s53.METADATA_JOURNAL_ID : Long'
|       fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|     right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|     on: Apply Function = : Boolean
|       0: Path s41.METADATA_JOURNAL_ID : Long'
|       1: Path s40.s55 : Long'
|   select: Pure t18 : Vector[t18<{s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}>]
|     value: StructNode : {s21: Long', s22: Option[String'], s23: String', s24: String', s25: Option[Int'], s26: Option[String'], s27: Option[Int'], s28: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s29: java.sql.Timestamp'}
|       s21: Path s56._2.METADATA_JOURNAL_ID : Long'
|       s22: Path s56._2.CALL_FQN : Option[String']
|       s23: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|       s24: Path s56._2.METADATA_KEY : String'
|       s25: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|       s26: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|       s27: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|       s28: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s29: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|   orderBy Ordering(Asc,NullsDefault): Path s56._2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,33] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t52<{s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}>]
|   from s19: ...
|   select: Pure t52 : Vector[t52<{s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}>]
|     value: StructNode : {s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}
|       s48: Path s19.s29 : java.sql.Timestamp'
|       s46: Path s19.s26 : Option[String']
|       s50: Path s19.s21 : Long'
|       s51: Path s19.s24 : String'
|       s49: Path s19.s27 : Option[Int']
|       s47: Path s19.s25 : Option[Int']
|       s44: Path s19.s28 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s45: Path s19.s22 : Option[String']
|       s43: Path s19.s23 : String'

[2020-07-30 19:06:13,34] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s56, None, None, ConstArray((Path s56._2.METADATA_JOURNAL_ID,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t52<{s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}>]
|   from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|     left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|       from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t54 : Vector[t54<{s55: Long'}>]
|         value: StructNode : {s55: Long'}
|           s55: Path s53.METADATA_JOURNAL_ID : Long'
|       fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|     right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|     on: Apply Function = : Boolean
|       0: Path s41.METADATA_JOURNAL_ID : Long'
|       1: Path s40.s55 : Long'
|   select: Pure t52 : Vector[t52<{s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}>]
|     value: StructNode : {s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}
|       s48: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|       s46: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|       s50: Path s56._2.METADATA_JOURNAL_ID : Long'
|       s51: Path s56._2.METADATA_KEY : String'
|       s49: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|       s47: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|       s44: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s45: Path s56._2.CALL_FQN : Option[String']
|       s43: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|   orderBy Ordering(Asc,NullsDefault): Path s56._2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,34] [debug] Replacements are: Map((t52,s51) -> s51, (t52,s43) -> s43, (t52,s44) -> s44, (t52,s47) -> s47, (t52,s48) -> s48, (t52,s46) -> s46, (t52,s50) -> s50, (t52,s49) -> s49, (t52,s45) -> s45)
[2020-07-30 19:06:13,34] [debug] Mappings are: ConstArray(((t52,s51),List(s51)), ((t52,s43),List(s43)), ((t52,s44),List(s44)), ((t52,s47),List(s47)), ((t52,s48),List(s48)), ((t52,s46),List(s46)), ((t52,s50),List(s50)), ((t52,s49),List(s49)), ((t52,s45),List(s45)))
[2020-07-30 19:06:13,34] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]]
|   from s42: Comprehension s56, None, None, ConstArray((Path s56._2.METADATA_JOURNAL_ID,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t52<{s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}>]
|     from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|       left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|         from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t54 : Vector[t54<{s55: Long'}>]
|           value: StructNode : {s55: Long'}
|             s55: Path s53.METADATA_JOURNAL_ID : Long'
|         fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|       right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|       on: Apply Function = : Boolean
|         0: Path s41.METADATA_JOURNAL_ID : Long'
|         1: Path s40.s55 : Long'
|     select: Pure t52 : Vector[t52<{s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}>]
|       value: StructNode : {s48: java.sql.Timestamp', s46: Option[String'], s50: Long', s51: String', s49: Option[Int'], s47: Option[Int'], s44: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s45: Option[String'], s43: String'}
|         s48: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|         s46: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|         s50: Path s56._2.METADATA_JOURNAL_ID : Long'
|         s51: Path s56._2.METADATA_KEY : String'
|         s49: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|         s47: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|         s44: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s45: Path s56._2.CALL_FQN : Option[String']
|         s43: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|     orderBy Ordering(Asc,NullsDefault): Path s56._2.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: Path s42.s43 : String'
|       2: Path s42.s45 : Option[String']
|       3: Path s42.s47 : Option[Int']
|       4: Path s42.s49 : Option[Int']
|       5: Path s42.s51 : String'
|       6: Path s42.s44 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s42.s46 : Option[String']
|       8: Path s42.s48 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: Path s42.s50 : Long'

[2020-07-30 19:06:13,34] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:13,35] [debug] Required symbols: s48 -> 7, s46 -> 6, s50 -> 8, s51 -> 4, s49 -> 3, s47 -> 2, s44 -> 5, s45 -> 1, s43 -> 0
[2020-07-30 19:06:13,36] [debug] Transformed RSM: 
| ResultSetMapping
|   from s42: Comprehension s56, None, None, ConstArray((Path s56._2.METADATA_JOURNAL_ID,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|     from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|       left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|         from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t54 : Vector[t54<{s55: Long'}>]
|           value: StructNode : {s55: Long'}
|             s55: Path s53.METADATA_JOURNAL_ID : Long'
|         fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|       right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|       on: Apply Function = : Boolean
|         0: Path s41.METADATA_JOURNAL_ID : Long'
|         1: Path s40.s55 : Long'
|     select: Pure t52 : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|       value: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')
|         1: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s56._2.CALL_FQN : Option[String']
|         3: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|         4: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|         5: Path s56._2.METADATA_KEY : String'
|         6: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         7: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|         8: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: Path s56._2.METADATA_JOURNAL_ID : Long'
|     orderBy Ordering(Asc,NullsDefault): Path s56._2.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: Path s42.s43 : String'
|       2: Path s42.s45 : Option[String']
|       3: Path s42.s47 : Option[Int']
|       4: Path s42.s49 : Option[Int']
|       5: Path s42.s51 : String'
|       6: Path s42.s44 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s42.s46 : Option[String']
|       8: Path s42.s48 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: Path s42.s50 : Long'

[2020-07-30 19:06:13,36] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]]
|   from s42: Comprehension s56, None, None, ConstArray((Path s56._2.METADATA_JOURNAL_ID,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|     from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|       left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false : Vector[t54<{s55: Long'}>]
|         from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t54 : Vector[t54<{s55: Long'}>]
|           value: StructNode : {s55: Long'}
|             s55: Path s53.METADATA_JOURNAL_ID : Long'
|         fetch: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Long'
|       right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|       on: Apply Function = : Boolean
|         0: Path s41.METADATA_JOURNAL_ID : Long'
|         1: Path s40.s55 : Long'
|     select: Pure t52 : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|       value: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')
|         1: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s56._2.CALL_FQN : Option[String']
|         3: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|         4: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|         5: Path s56._2.METADATA_KEY : String'
|         6: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         7: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|         8: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: Path s56._2.METADATA_JOURNAL_ID : Long'
|     orderBy Ordering(Asc,NullsDefault): Path s56._2.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: Path s42._1 : String'
|       2: Path s42._2 : Option[String']
|       3: Path s42._3 : Option[Int']
|       4: Path s42._4 : Option[Int']
|       5: Path s42._5 : String'
|       6: Path s42._6 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s42._7 : Option[String']
|       8: Path s42._8 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: Path s42._9 : Long'

[2020-07-30 19:06:13,36] [debug] Affected fetch clauses in: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false
[2020-07-30 19:06:13,37] [debug] After phase specializeParameters:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]]
|   from s42: ParameterSwitch : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|     [slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d(...) == 0]: Comprehension s56, None, None, ConstArray((Path s56._2.METADATA_JOURNAL_ID,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|       from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|         left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(LiteralNode 0 (volatileHint=false)), None, false
|           from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t54 : Vector[t54<{s55: Long'}>]
|             value: StructNode : {s55: Long'}
|               s55: Path s53.METADATA_JOURNAL_ID : Long'
|           fetch: LiteralNode 0 (volatileHint=false)
|         right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|         on: Apply Function = : Boolean
|           0: Path s41.METADATA_JOURNAL_ID : Long'
|           1: Path s40.s55 : Long'
|       select: Pure t52 : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|         value: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')
|           1: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s56._2.CALL_FQN : Option[String']
|           3: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|           4: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|           5: Path s56._2.METADATA_KEY : String'
|           6: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           7: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|           8: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|           9: Path s56._2.METADATA_JOURNAL_ID : Long'
|       orderBy Ordering(Asc,NullsDefault): Path s56._2.METADATA_JOURNAL_ID : Long'
|     default: Comprehension s56, None, None, ConstArray((Path s56._2.METADATA_JOURNAL_ID,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|       from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|         left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s68 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false
|           from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t54 : Vector[t54<{s55: Long'}>]
|             value: StructNode : {s55: Long'}
|               s55: Path s53.METADATA_JOURNAL_ID : Long'
|           fetch: QueryParameter s68 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|         right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|         on: Apply Function = : Boolean
|           0: Path s41.METADATA_JOURNAL_ID : Long'
|           1: Path s40.s55 : Long'
|       select: Pure t52 : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|         value: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')
|           1: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s56._2.CALL_FQN : Option[String']
|           3: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|           4: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|           5: Path s56._2.METADATA_KEY : String'
|           6: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           7: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|           8: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|           9: Path s56._2.METADATA_JOURNAL_ID : Long'
|       orderBy Ordering(Asc,NullsDefault): Path s56._2.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: Path s42._1 : String'
|       2: Path s42._2 : Option[String']
|       3: Path s42._3 : Option[Int']
|       4: Path s42._4 : Option[Int']
|       5: Path s42._5 : String'
|       6: Path s42._6 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s42._7 : Option[String']
|       8: Path s42._8 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: Path s42._9 : Long'

[2020-07-30 19:06:13,38] [debug] Compiling server-side and mapping with server-side:
| Comprehension s56, None, None, ConstArray((Path s56._2.METADATA_JOURNAL_ID,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|   from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|     left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(LiteralNode 0 (volatileHint=false)), None, false
|       from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t54 : Vector[t54<{s55: Long'}>]
|         value: StructNode : {s55: Long'}
|           s55: Path s53.METADATA_JOURNAL_ID : Long'
|       fetch: LiteralNode 0 (volatileHint=false)
|     right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|     on: Apply Function = : Boolean
|       0: Path s41.METADATA_JOURNAL_ID : Long'
|       1: Path s40.s55 : Long'
|   select: Pure t52 : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|     value: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')
|       1: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s56._2.CALL_FQN : Option[String']
|       3: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s56._2.METADATA_KEY : String'
|       6: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|       8: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: Path s56._2.METADATA_JOURNAL_ID : Long'
|   orderBy Ordering(Asc,NullsDefault): Path s56._2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,48] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|     3: OptionResultConverter$mcI$sp idx=3 : Int'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|     8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=<computed> : java.sql.Timestamp'
|     9: OptionResultConverter$mcJ$sp idx=9 : Long'

[2020-07-30 19:06:13,50] [debug] Compiled server-side to:
| CompiledStatement "select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" where 1=0) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"" : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]

[2020-07-30 19:06:13,50] [debug] Compiling server-side and mapping with server-side:
| Comprehension s56, None, None, ConstArray((Path s56._2.METADATA_JOURNAL_ID,Ordering(Asc,NullsDefault))), None, None, None, None, false : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|   from s56: Join Inner : Vector[(t54<{s55: Long'}>, @t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>)]
|     left s40: Comprehension s53, None, None, ConstArray(), None, None, Some(QueryParameter s68 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d), None, false
|       from s53: Table SUMMARY_QUEUE_ENTRY : Vector[@t13<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t54 : Vector[t54<{s55: Long'}>]
|         value: StructNode : {s55: Long'}
|           s55: Path s53.METADATA_JOURNAL_ID : Long'
|       fetch: QueryParameter s68 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|     right s41: Table METADATA_ENTRY : Vector[@t17<{METADATA_JOURNAL_ID: Long', CALL_FQN: Option[String'], WORKFLOW_EXECUTION_UUID: String', METADATA_KEY: String', JOB_SCATTER_INDEX: Option[Int'], METADATA_VALUE_TYPE: Option[String'], JOB_RETRY_ATTEMPT: Option[Int'], METADATA_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], METADATA_TIMESTAMP: java.sql.Timestamp'}>]
|     on: Apply Function = : Boolean
|       0: Path s41.METADATA_JOURNAL_ID : Long'
|       1: Path s40.s55 : Long'
|   select: Pure t52 : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|     value: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')
|       1: Path s56._2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s56._2.CALL_FQN : Option[String']
|       3: Path s56._2.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s56._2.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s56._2.METADATA_KEY : String'
|       6: Path s56._2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s56._2.METADATA_VALUE_TYPE : Option[String']
|       8: Path s56._2.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: Path s56._2.METADATA_JOURNAL_ID : Long'
|   orderBy Ordering(Asc,NullsDefault): Path s56._2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,50] [debug] Compiled server-side to:
| CompiledStatement "select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"" : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]

[2020-07-30 19:06:13,52] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]]
|   from s42: ParameterSwitch : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|     [slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d(...) == 0]: CompiledStatement "select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" where 1=0) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"" : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|     default: CompiledStatement "select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"" : Vector[t52<(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Long')>]
|   map: CompiledMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|         3: OptionResultConverter$mcI$sp idx=3 : Int'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=<computed> : String'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|         8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=<computed> : java.sql.Timestamp'
|         9: OptionResultConverter$mcJ$sp idx=9 : Long'

[2020-07-30 19:06:13,52] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:13,52] [debug]       assignUniqueSymbols:   48.774816 ms
[2020-07-30 19:06:13,52] [debug]           unrollTailBinds:    5.687624 ms
[2020-07-30 19:06:13,52] [debug]                inferTypes:   10.388411 ms
[2020-07-30 19:06:13,52] [debug]              expandTables:  102.327337 ms
[2020-07-30 19:06:13,52] [debug]           forceOuterBinds:   30.592561 ms
[2020-07-30 19:06:13,53] [debug]         removeMappedTypes:    9.333210 ms
[2020-07-30 19:06:13,53] [debug]                expandSums:   15.297950 ms
[2020-07-30 19:06:13,53] [debug]             expandRecords:    8.288869 ms
[2020-07-30 19:06:13,53] [debug]        flattenProjections:   91.489647 ms
[2020-07-30 19:06:13,53] [debug]              rewriteJoins:   16.697650 ms
[2020-07-30 19:06:13,53] [debug]             verifySymbols:    2.678747 ms
[2020-07-30 19:06:13,54] [debug]             relabelUnions:    0.904763 ms
[2020-07-30 19:06:13,54] [debug]          createAggregates:    0.560313 ms
[2020-07-30 19:06:13,54] [debug]           resolveZipJoins:    0.847875 ms
[2020-07-30 19:06:13,54] [debug]          pruneProjections:    3.703385 ms
[2020-07-30 19:06:13,54] [debug]           rewriteDistinct:    0.829957 ms
[2020-07-30 19:06:13,54] [debug]    createResultSetMapping:   10.383300 ms
[2020-07-30 19:06:13,54] [debug]            hoistClientOps:   28.409028 ms
[2020-07-30 19:06:13,54] [debug]         reorderOperations:    1.993174 ms
[2020-07-30 19:06:13,54] [debug]     mergeToComprehensions:   76.155596 ms
[2020-07-30 19:06:13,54] [debug]            optimizeScalar:    1.852896 ms
[2020-07-30 19:06:13,54] [debug]          removeFieldNames:   17.932697 ms
[2020-07-30 19:06:13,54] [debug]      specializeParameters:   12.472991 ms
[2020-07-30 19:06:13,54] [debug]                   codeGen:  143.523006 ms
[2020-07-30 19:06:13,54] [debug]                     TOTAL:  641.125803 ms
[2020-07-30 19:06:13,59] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:13,60] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:13,60] [debug] #3: StartTransaction
[2020-07-30 19:06:13,60] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:13,61] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:13,64] [debug] Executing prepared statement: HikariProxyPreparedStatement@761138106 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@64c35ad9[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:13,64] [debug] Executing prepared statement: HikariProxyPreparedStatement@761138106 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@64c35ad9[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:13,67] [debug] /------\
[2020-07-30 19:06:13,67] [debug] | 1    |
[2020-07-30 19:06:13,67] [debug] | Long |
[2020-07-30 19:06:13,67] [debug] |------|
[2020-07-30 19:06:13,67] [debug] | 5000 |
[2020-07-30 19:06:13,67] [debug] \------/
[2020-07-30 19:06:13,67] [debug] Execution of prepared statement took 1ms
[2020-07-30 19:06:13,71] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:13,71] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:13,71] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:13,71] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:13,71] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:13,71] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table WORKFLOW_METADATA_SUMMARY_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s4.WORKFLOW_NAME : Option[String']
|           3: Path s4.WORKFLOW_STATUS : Option[String']
|           4: Path s4.START_TIMESTAMP : Option[java.sql.Timestamp']
|           5: Path s4.END_TIMESTAMP : Option[java.sql.Timestamp']
|           6: Path s4.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|           7: Path s4.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|           8: Path s4.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|           9: Path s4.METADATA_ARCHIVE_STATUS : Option[String']
|           10: OptionApply
|             0: Path s4.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'
|     where: Apply Function =
|       0: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t6
|     value: Path s2.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:13,71] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:13,71] [debug] #5: success Vector()
[2020-07-30 19:06:13,72] [debug] #6: success Vector()
[2020-07-30 19:06:13,72] [debug] #7: success ()
[2020-07-30 19:06:13,72] [debug] #8: success ((),Vector())
[2020-07-30 19:06:13,72] [debug] After phase assignUniqueSymbols:
| Bind
|   from s7: Filter s8
|     from s8: TableExpansion
|       table s9: Table WORKFLOW_METADATA_SUMMARY_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s9.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s9.WORKFLOW_NAME : Option[String']
|           3: Path s9.WORKFLOW_STATUS : Option[String']
|           4: Path s9.START_TIMESTAMP : Option[java.sql.Timestamp']
|           5: Path s9.END_TIMESTAMP : Option[java.sql.Timestamp']
|           6: Path s9.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|           7: Path s9.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|           8: Path s9.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|           9: Path s9.METADATA_ARCHIVE_STATUS : Option[String']
|           10: OptionApply
|             0: Path s9.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'
|     where: Apply Function =
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t11
|     value: Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:13,72] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:13,72] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:13,72] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.WORKFLOW_METADATA_SUMMARY_ENTRY)
[2020-07-30 19:06:13,72] [debug] With correct table types:
| Bind : Vector[t11<Option[String']>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Option[String']>]
|     value: Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:13,72] [debug] Table expansions: @t10 -> (s9,TypeMapping)
[2020-07-30 19:06:13,72] [debug] After phase expandTables:
| Bind : Vector[t11<Option[String']>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Option[String']>]
|     value: Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:13,72] [debug] After phase forceOuterBinds:
| Bind : Vector[t11<Option[String']>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Option[String']>]
|     value: Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:13,72] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:13,73] [debug] Translated type: Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>] -> Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
[2020-07-30 19:06:13,73] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:13,73] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:13,73] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:13,73] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:13,73] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:13,74] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:13,74] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:13,74] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:13,74] [debug] Expanding tables in result type
[2020-07-30 19:06:13,74] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,74] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,74] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,74] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:13,75] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:13,75] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,75] [debug] Flattening projection t8
[2020-07-30 19:06:13,75] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,75] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:13,75] [debug] Translated type: String' -> String'
[2020-07-30 19:06:13,75] [debug] Translated type: String' -> String'
[2020-07-30 19:06:13,75] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:13,75] [debug] Translated type: Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>] -> Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
[2020-07-30 19:06:13,75] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:13,75] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:13,75] [debug] Translated type: Vector[t11<Option[String']>] -> Vector[t11<Option[String']>]
[2020-07-30 19:06:13,75] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:13,76] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:13,76] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:13,76] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:13,76] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,76] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:13,76] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:13,76] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:13,76] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:13,76] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:13,76] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:13,76] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:13,76] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:13,76] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:13,76] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:13,76] [debug] Creating mapping from Long'
[2020-07-30 19:06:13,76] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:13,76] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:13,76] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:13,76] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:13,76] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:13,76] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:13,76] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:13,76] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:13,76] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:13,76] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:13,76] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,76] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:13,75] [debug] Translated type: Vector[t11<Option[String']>] -> Vector[t11<Option[String']>]
[2020-07-30 19:06:13,76] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:13,76] [debug] After phase expandRecords:
| Bind : Vector[t11<Option[String']>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Option[String']>]
|     value: Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:13,76] [debug] Analyzing s8.WORKFLOW_EXECUTION_UUID with symbols 
| Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:13,76] [debug] Translated s8.WORKFLOW_EXECUTION_UUID to:
| Path s8.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:13,76] [debug] Flattening projection t11
[2020-07-30 19:06:13,77] [debug] Analyzing s7.WORKFLOW_STATUS with symbols 
| Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:13,77] [debug] Translated s7.WORKFLOW_STATUS to:
| Path s7.WORKFLOW_STATUS

[2020-07-30 19:06:13,77] [debug] Flattening node at Path 
| Path s7.WORKFLOW_STATUS

[2020-07-30 19:06:13,77] [debug] Adding definition: s12 -> Path s7.WORKFLOW_STATUS
[2020-07-30 19:06:13,77] [debug] Adding translation for t11: (Map(List() -> s12), UnassignedType)
[2020-07-30 19:06:13,77] [debug] Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.WORKFLOW_STATUS

[2020-07-30 19:06:13,77] [debug] After phase flattenProjections:
| Bind : Vector[t11<{s12: Option[String']}>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<{s12: Option[String']}>]
|     value: StructNode : {s12: Option[String']}
|       s12: Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:13,77] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:13,77] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:13,77] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:13,77] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:13,77] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:13,77] [debug] Unreferenced: t11; Field refs: (@t10,WORKFLOW_EXECUTION_UUID), (@t10,WORKFLOW_STATUS)
[2020-07-30 19:06:13,77] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:13,77] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:13,77] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:13,77] [debug] Creating mapping from t11<Option[String']>
[2020-07-30 19:06:13,77] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Option[String']]
|   from s13: Bind : Vector[t11<{s12: Option[String']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t11 : Vector[t11<{s12: Option[String']}>]
|       value: StructNode : {s12: Option[String']}
|         s12: Path s7.WORKFLOW_STATUS : Option[String']
|   map: Path s13.s12 : Option[String']

[2020-07-30 19:06:13,77] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:13,77] [debug] New defs: Map(0 -> (Path s7.WORKFLOW_STATUS,s14))
[2020-07-30 19:06:13,78] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Option[String']]
|   from s13: Bind : Vector[t15<{s14: Option[String']}>]
|     from s7: ...
|     select: Pure t15 : Vector[t15<{s14: Option[String']}>]
|       value: StructNode : {s14: Option[String']}
|         s14: Path s7.WORKFLOW_STATUS : Option[String']
|   map: Path s13.s14 : Option[String']

[2020-07-30 19:06:13,78] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:13,79] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Option[String']]
|   from s13: Bind : Vector[t15<{s14: Option[String']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t15 : Vector[t15<{s14: Option[String']}>]
|       value: StructNode : {s14: Option[String']}
|         s14: Path s7.WORKFLOW_STATUS : Option[String']
|   map: Path s13.s14 : Option[String']

[2020-07-30 19:06:13,80] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:13,80] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:13,80] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:13,80] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:13,80] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:13,80] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:13,80] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:13,80] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:13,80] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:13,80] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:13,80] [debug] Table fields: Map(@t10 -> Vector(WORKFLOW_EXECUTION_UUID, WORKFLOW_STATUS))
[2020-07-30 19:06:13,80] [debug] Creating source from TableNode:
| Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]

[2020-07-30 19:06:13,80] [debug] Mappings are: ConstArray(((@t10,WORKFLOW_EXECUTION_UUID),List(WORKFLOW_EXECUTION_UUID)), ((@t10,WORKFLOW_STATUS),List(WORKFLOW_STATUS)))
[2020-07-30 19:06:13,80] [debug] Building new Comprehension from:
| Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]

[2020-07-30 19:06:13,80] [debug] Built new Comprehension:
| Comprehension s16, None, None, ConstArray(), None, None, None, None, false : Vector[t17<{s18: String', s19: Option[String']}>]
|   from s16: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t17 : Vector[t17<{s18: String', s19: Option[String']}>]
|     value: StructNode : {s18: String', s19: Option[String']}
|       s18: Path s16.WORKFLOW_EXECUTION_UUID : String'
|       s19: Path s16.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:13,80] [debug] Replacements are: Map((@t10,WORKFLOW_EXECUTION_UUID) -> s18, (@t10,WORKFLOW_STATUS) -> s19)
[2020-07-30 19:06:13,80] [debug] Merging Filter into Comprehension:
| Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   from s8: ...
|   where: Apply Function = : Boolean
|     0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:13,80] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:13,80] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:13,81] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:13,81] [debug] Merged Filter into Comprehension:
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t17<{s18: String', s19: Option[String']}>]
|   from s16: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t17 : Vector[t17<{s18: String', s19: Option[String']}>]
|     value: StructNode : {s18: String', s19: Option[String']}
|       s18: Path s16.WORKFLOW_EXECUTION_UUID : String'
|       s19: Path s16.WORKFLOW_STATUS : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s16.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:13,81] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t15<{s14: Option[String']}>]
|   from s7: ...
|   select: Pure t15 : Vector[t15<{s14: Option[String']}>]
|     value: StructNode : {s14: Option[String']}
|       s14: Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:13,81] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<{s14: Option[String']}>]
|   from s16: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t15 : Vector[t15<{s14: Option[String']}>]
|     value: StructNode : {s14: Option[String']}
|       s14: Path s16.WORKFLOW_STATUS : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s16.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:13,81] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:13,81] [debug] Replacements are: Map((t15,s14) -> s14)
[2020-07-30 19:06:13,81] [debug] Mappings are: ConstArray(((t15,s14),List(s14)))
[2020-07-30 19:06:13,81] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:13,81] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:13,81] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:13,81] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:13,81] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Option[String']]
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<{s14: Option[String']}>]
|     from s16: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     select: Pure t15 : Vector[t15<{s14: Option[String']}>]
|       value: StructNode : {s14: Option[String']}
|         s14: Path s16.WORKFLOW_STATUS : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s16.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: Path s13.s14 : Option[String']

[2020-07-30 19:06:13,81] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:13,82] [debug] Required symbols: s14 -> 0
[2020-07-30 19:06:13,82] [debug]       assignUniqueSymbols:    8.837773 ms
[2020-07-30 19:06:13,82] [debug]           unrollTailBinds:    0.189005 ms
[2020-07-30 19:06:13,82] [debug]                inferTypes:    0.167111 ms
[2020-07-30 19:06:13,82] [debug]              expandTables:    2.009606 ms
[2020-07-30 19:06:13,82] [debug]           forceOuterBinds:    1.524508 ms
[2020-07-30 19:06:13,82] [debug]         removeMappedTypes:    0.720996 ms
[2020-07-30 19:06:13,82] [debug]                expandSums:    0.173173 ms
[2020-07-30 19:06:13,82] [debug]             expandRecords:   13.599191 ms
[2020-07-30 19:06:13,82] [debug] Transformed RSM: 
| ResultSetMapping
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(Option[String'])>]
|     from s16: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     select: Pure t15 : Vector[t15<(Option[String'])>]
|       value: ProductNode : (Option[String'])
|         1: Path s16.WORKFLOW_STATUS : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s16.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: Path s13.s14 : Option[String']

[2020-07-30 19:06:13,82] [debug]        flattenProjections:    4.325755 ms
[2020-07-30 19:06:13,82] [debug]              rewriteJoins:    0.113151 ms
[2020-07-30 19:06:13,82] [debug]             verifySymbols:    0.113766 ms
[2020-07-30 19:06:13,82] [debug]             relabelUnions:    0.154174 ms
[2020-07-30 19:06:13,82] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Option[String']]
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(Option[String'])>]
|     from s16: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     select: Pure t15 : Vector[t15<(Option[String'])>]
|       value: ProductNode : (Option[String'])
|         1: Path s16.WORKFLOW_STATUS : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s16.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: Path s13._1 : Option[String']

[2020-07-30 19:06:13,82] [debug]          createAggregates:    0.096940 ms
[2020-07-30 19:06:13,82] [debug]           resolveZipJoins:    0.132652 ms
[2020-07-30 19:06:13,83] [debug]          pruneProjections:    0.375450 ms
[2020-07-30 19:06:13,83] [debug]           rewriteDistinct:    0.134102 ms
[2020-07-30 19:06:13,83] [debug]    createResultSetMapping:    0.952568 ms
[2020-07-30 19:06:13,83] [debug]            hoistClientOps:    1.835682 ms
[2020-07-30 19:06:13,83] [debug]         reorderOperations:    0.133703 ms
[2020-07-30 19:06:13,83] [debug]     mergeToComprehensions:   36.720720 ms
[2020-07-30 19:06:13,83] [debug]            optimizeScalar:    0.145872 ms
[2020-07-30 19:06:13,83] [debug]          removeFieldNames:    6.450160 ms
[2020-07-30 19:06:13,83] [debug]      specializeParameters:    0.373972 ms
[2020-07-30 19:06:13,83] [debug]                   codeGen:    7.412607 ms
[2020-07-30 19:06:13,83] [debug]                     TOTAL:   86.692637 ms
[2020-07-30 19:06:13,83] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:13,83] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:13,83] [debug] Compiling server-side and mapping with server-side:
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(Option[String'])>]
|   from s16: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t15 : Vector[t15<(Option[String'])>]
|     value: ProductNode : (Option[String'])
|       1: Path s16.WORKFLOW_STATUS : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s16.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:13,83] [debug] Compiled ResultConverter
| SpecializedJdbcResultConverter$$anon$2 idx=1 : String'

[2020-07-30 19:06:13,83] [debug] Compiled server-side to:
| CompiledStatement "select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?" : Vector[t15<(Option[String'])>]

[2020-07-30 19:06:13,83] [debug] After phase codeGen:
| ResultSetMapping : Vector[Option[String']]
|   from s13: CompiledStatement "select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?" : Vector[t15<(Option[String'])>]
|   map: CompiledMapping : Option[String']
|     converter: SpecializedJdbcResultConverter$$anon$2 idx=1 : String'

[2020-07-30 19:06:13,83] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:13,83] [debug]       assignUniqueSymbols:   10.526648 ms
[2020-07-30 19:06:13,83] [debug]           unrollTailBinds:    0.170547 ms
[2020-07-30 19:06:13,83] [debug]                inferTypes:    0.238429 ms
[2020-07-30 19:06:13,83] [debug]              expandTables:    2.851874 ms
[2020-07-30 19:06:13,83] [debug]           forceOuterBinds:    0.942493 ms
[2020-07-30 19:06:13,83] [debug]         removeMappedTypes:    0.265470 ms
[2020-07-30 19:06:13,83] [debug]                expandSums:   38.350913 ms
[2020-07-30 19:06:13,83] [debug]             expandRecords:    0.918678 ms
[2020-07-30 19:06:13,83] [debug]        flattenProjections:    3.024424 ms
[2020-07-30 19:06:13,83] [debug]              rewriteJoins:    0.139991 ms
[2020-07-30 19:06:13,84] [debug]             verifySymbols:    0.154065 ms
[2020-07-30 19:06:13,84] [debug]             relabelUnions:    0.152264 ms
[2020-07-30 19:06:13,84] [debug]          createAggregates:    0.084926 ms
[2020-07-30 19:06:13,84] [debug]           resolveZipJoins:    0.134818 ms
[2020-07-30 19:06:13,84] [debug]          pruneProjections:    0.409544 ms
[2020-07-30 19:06:13,84] [debug]           rewriteDistinct:    0.135896 ms
[2020-07-30 19:06:13,84] [debug]    createResultSetMapping:    1.161006 ms
[2020-07-30 19:06:13,84] [debug]            hoistClientOps:   17.815043 ms
[2020-07-30 19:06:13,84] [debug]         reorderOperations:   12.900629 ms
[2020-07-30 19:06:13,84] [debug]     mergeToComprehensions:   14.323282 ms
[2020-07-30 19:06:13,84] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:13,84] [debug]            optimizeScalar:    0.136116 ms
[2020-07-30 19:06:13,84] [debug]          removeFieldNames:    9.668640 ms
[2020-07-30 19:06:13,84] [debug]      specializeParameters:    3.089085 ms
[2020-07-30 19:06:13,84] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:13,84] [debug]                   codeGen:    3.432298 ms
[2020-07-30 19:06:13,84] [debug]                     TOTAL:  121.027079 ms
[2020-07-30 19:06:13,84] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@1de04d5d
          base: SetTransactionIsolation
[2020-07-30 19:06:13,84] [debug] pausing
[2020-07-30 19:06:13,85] [debug] Preparing statement: select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:13,86] [debug] Executing prepared update: HikariProxyPreparedStatement@1471548530 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@12b48040[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:13,86] [debug] Executing prepared update: HikariProxyPreparedStatement@1471548530 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@12b48040[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:13,86] [debug] Executing prepared statement: HikariProxyPreparedStatement@928166478 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1a43a470[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:13,86] [debug] Executing prepared statement: HikariProxyPreparedStatement@928166478 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1a43a470[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:13,86] [debug] /---------------------------\
[2020-07-30 19:06:13,86] [debug] | 1                         |
[2020-07-30 19:06:13,86] [debug] | String                    |
[2020-07-30 19:06:13,86] [debug] |---------------------------|
[2020-07-30 19:06:13,86] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:13,86] [debug] \---------------------------/
[2020-07-30 19:06:13,86] [debug] Execution of prepared statement took 164µs
[2020-07-30 19:06:13,86] [debug] /-----------------\
[2020-07-30 19:06:13,86] [debug] | 1               |
[2020-07-30 19:06:13,86] [debug] | WORKFLOW_STATUS |
[2020-07-30 19:06:13,86] [debug] |-----------------|
[2020-07-30 19:06:13,86] [debug] \-----------------/
[2020-07-30 19:06:13,86] [debug] resuming
[2020-07-30 19:06:13,87] [debug] Execution of prepared update took 8ms
[2020-07-30 19:06:13,87] [debug] #10: success 0
[2020-07-30 19:06:13,87] [debug] #11: Commit
[2020-07-30 19:06:13,87] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:13,88] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:13,88] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table SUMMARY_STATUS_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.SUMMARY_NAME : String'
|           2: Path s4.SUMMARY_POSITION : Long'
|           3: OptionApply
|             0: Path s4.SUMMARY_STATUS_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s3.SUMMARY_NAME : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t6
|     value: Path s2.SUMMARY_POSITION : Long'

[2020-07-30 19:06:13,88] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:13,88] [debug] After phase assignUniqueSymbols:
| Bind
|   from s7: Filter s8
|     from s8: TableExpansion
|       table s9: Table SUMMARY_STATUS_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s9.SUMMARY_NAME : String'
|           2: Path s9.SUMMARY_POSITION : Long'
|           3: OptionApply
|             0: Path s9.SUMMARY_STATUS_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s8.SUMMARY_NAME : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t11
|     value: Path s7.SUMMARY_POSITION : Long'

[2020-07-30 19:06:13,88] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:13,88] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:13,88] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_STATUS_ENTRY)
[2020-07-30 19:06:13,89] [debug] With correct table types:
| Bind : Vector[t11<Long'>]
|   from s7: Filter s8 : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     from s8: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     where: Apply Function = : Boolean
|       0: Path s8.SUMMARY_NAME : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Long'>]
|     value: Path s7.SUMMARY_POSITION : Long'

[2020-07-30 19:06:13,89] [debug] Table expansions: @t10 -> (s9,TypeMapping)
[2020-07-30 19:06:13,89] [debug] After phase expandTables:
| Bind : Vector[t11<Long'>]
|   from s7: Filter s8 : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     from s8: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     where: Apply Function = : Boolean
|       0: Path s8.SUMMARY_NAME : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Long'>]
|     value: Path s7.SUMMARY_POSITION : Long'

[2020-07-30 19:06:13,89] [debug] After phase forceOuterBinds:
| Bind : Vector[t11<Long'>]
|   from s7: Filter s8 : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     from s8: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     where: Apply Function = : Boolean
|       0: Path s8.SUMMARY_NAME : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Long'>]
|     value: Path s7.SUMMARY_POSITION : Long'

[2020-07-30 19:06:13,89] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:13,89] [debug] Translated type: Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>] -> Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
[2020-07-30 19:06:13,89] [debug] Translated type: @t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}> -> @t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>
[2020-07-30 19:06:13,89] [debug] Translated type: String' -> String'
[2020-07-30 19:06:13,89] [debug] Translated type: String' -> String'
[2020-07-30 19:06:13,89] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:13,89] [debug] Translated type: Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>] -> Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
[2020-07-30 19:06:13,90] [debug] Translated type: @t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}> -> @t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>
[2020-07-30 19:06:13,90] [debug] Translated type: Long' -> Long'
[2020-07-30 19:06:13,90] [debug] Translated type: Vector[t11<Long'>] -> Vector[t11<Long'>]
[2020-07-30 19:06:13,90] [debug] Translated type: Vector[t11<Long'>] -> Vector[t11<Long'>]
[2020-07-30 19:06:13,90] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:13,90] [debug] After phase expandRecords:
| Bind : Vector[t11<Long'>]
|   from s7: Filter s8 : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     from s8: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     where: Apply Function = : Boolean
|       0: Path s8.SUMMARY_NAME : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Long'>]
|     value: Path s7.SUMMARY_POSITION : Long'

[2020-07-30 19:06:13,90] [debug] Analyzing s8.SUMMARY_NAME with symbols 
| Path s8.SUMMARY_NAME : String'

[2020-07-30 19:06:13,90] [debug] Translated s8.SUMMARY_NAME to:
| Path s8.SUMMARY_NAME

[2020-07-30 19:06:13,90] [debug] Flattening projection t11
[2020-07-30 19:06:13,90] [debug] Analyzing s7.SUMMARY_POSITION with symbols 
| Path s7.SUMMARY_POSITION : Long'

[2020-07-30 19:06:13,90] [debug] Translated s7.SUMMARY_POSITION to:
| Path s7.SUMMARY_POSITION

[2020-07-30 19:06:13,90] [debug] Flattening node at Path 
| Path s7.SUMMARY_POSITION

[2020-07-30 19:06:13,90] [debug] Adding definition: s12 -> Path s7.SUMMARY_POSITION
[2020-07-30 19:06:13,90] [debug] Adding translation for t11: (Map(List() -> s12), UnassignedType)
[2020-07-30 19:06:13,90] [debug] Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.SUMMARY_POSITION

[2020-07-30 19:06:13,91] [debug] After phase flattenProjections:
| Bind : Vector[t11<{s12: Long'}>]
|   from s7: Filter s8 : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     from s8: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     where: Apply Function = : Boolean
|       0: Path s8.SUMMARY_NAME : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<{s12: Long'}>]
|     value: StructNode : {s12: Long'}
|       s12: Path s7.SUMMARY_POSITION : Long'

[2020-07-30 19:06:13,91] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:13,91] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:13,91] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:13,91] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:13,91] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:13,91] [debug] Unreferenced: t11; Field refs: (@t10,SUMMARY_NAME), (@t10,SUMMARY_POSITION)
[2020-07-30 19:06:13,91] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:13,91] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:13,91] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:13,91] [debug] Creating mapping from t11<Long'>
[2020-07-30 19:06:13,91] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Long']
|   from s13: Bind : Vector[t11<{s12: Long'}>]
|     from s7: Filter s8 : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|       from s8: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.SUMMARY_NAME : String'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t11 : Vector[t11<{s12: Long'}>]
|       value: StructNode : {s12: Long'}
|         s12: Path s7.SUMMARY_POSITION : Long'
|   map: Path s13.s12 : Long'

[2020-07-30 19:06:13,91] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:13,91] [debug] New defs: Map(0 -> (Path s7.SUMMARY_POSITION,s14))
[2020-07-30 19:06:13,91] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Long']
|   from s13: Bind : Vector[t15<{s14: Long'}>]
|     from s7: ...
|     select: Pure t15 : Vector[t15<{s14: Long'}>]
|       value: StructNode : {s14: Long'}
|         s14: Path s7.SUMMARY_POSITION : Long'
|   map: Path s13.s14 : Long'

[2020-07-30 19:06:13,91] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Long']
|   from s13: Bind : Vector[t15<{s14: Long'}>]
|     from s7: Filter s8 : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|       from s8: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.SUMMARY_NAME : String'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t15 : Vector[t15<{s14: Long'}>]
|       value: StructNode : {s14: Long'}
|         s14: Path s7.SUMMARY_POSITION : Long'
|   map: Path s13.s14 : Long'

[2020-07-30 19:06:13,91] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:13,91] [debug] Table fields: Map(@t10 -> Vector(SUMMARY_NAME, SUMMARY_POSITION))
[2020-07-30 19:06:13,91] [debug] Creating source from TableNode:
| Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]

[2020-07-30 19:06:13,91] [debug] Mappings are: ConstArray(((@t10,SUMMARY_NAME),List(SUMMARY_NAME)), ((@t10,SUMMARY_POSITION),List(SUMMARY_POSITION)))
[2020-07-30 19:06:13,91] [debug] Building new Comprehension from:
| Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]

[2020-07-30 19:06:13,92] [debug] Built new Comprehension:
| Comprehension s16, None, None, ConstArray(), None, None, None, None, false : Vector[t17<{s18: String', s19: Long'}>]
|   from s16: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|   select: Pure t17 : Vector[t17<{s18: String', s19: Long'}>]
|     value: StructNode : {s18: String', s19: Long'}
|       s18: Path s16.SUMMARY_NAME : String'
|       s19: Path s16.SUMMARY_POSITION : Long'

[2020-07-30 19:06:13,92] [debug] Replacements are: Map((@t10,SUMMARY_NAME) -> s18, (@t10,SUMMARY_POSITION) -> s19)
[2020-07-30 19:06:13,92] [debug] Merging Filter into Comprehension:
| Filter s8 : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|   from s8: ...
|   where: Apply Function = : Boolean
|     0: Path s8.SUMMARY_NAME : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:13,92] [debug] Merged Filter into Comprehension:
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t17<{s18: String', s19: Long'}>]
|   from s16: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|   select: Pure t17 : Vector[t17<{s18: String', s19: Long'}>]
|     value: StructNode : {s18: String', s19: Long'}
|       s18: Path s16.SUMMARY_NAME : String'
|       s19: Path s16.SUMMARY_POSITION : Long'
|   where: Apply Function = : Boolean
|     0: Path s16.SUMMARY_NAME : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:13,92] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t15<{s14: Long'}>]
|   from s7: ...
|   select: Pure t15 : Vector[t15<{s14: Long'}>]
|     value: StructNode : {s14: Long'}
|       s14: Path s7.SUMMARY_POSITION : Long'

[2020-07-30 19:06:13,93] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<{s14: Long'}>]
|   from s16: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|   select: Pure t15 : Vector[t15<{s14: Long'}>]
|     value: StructNode : {s14: Long'}
|       s14: Path s16.SUMMARY_POSITION : Long'
|   where: Apply Function = : Boolean
|     0: Path s16.SUMMARY_NAME : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:13,93] [debug] Replacements are: Map((t15,s14) -> s14)
[2020-07-30 19:06:13,93] [debug] Mappings are: ConstArray(((t15,s14),List(s14)))
[2020-07-30 19:06:13,94] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Long']
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<{s14: Long'}>]
|     from s16: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     select: Pure t15 : Vector[t15<{s14: Long'}>]
|       value: StructNode : {s14: Long'}
|         s14: Path s16.SUMMARY_POSITION : Long'
|     where: Apply Function = : Boolean
|       0: Path s16.SUMMARY_NAME : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: Path s13.s14 : Long'

[2020-07-30 19:06:13,94] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:13,94] [debug] Required symbols: s14 -> 0
[2020-07-30 19:06:13,95] [debug] Transformed RSM: 
| ResultSetMapping
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(Long')>]
|     from s16: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     select: Pure t15 : Vector[t15<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s16.SUMMARY_POSITION : Long'
|     where: Apply Function = : Boolean
|       0: Path s16.SUMMARY_NAME : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: Path s13.s14 : Long'

[2020-07-30 19:06:13,95] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Long']
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(Long')>]
|     from s16: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|     select: Pure t15 : Vector[t15<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s16.SUMMARY_POSITION : Long'
|     where: Apply Function = : Boolean
|       0: Path s16.SUMMARY_NAME : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: Path s13._1 : Long'

[2020-07-30 19:06:13,95] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:13,95] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:13,96] [debug] Compiling server-side and mapping with server-side:
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(Long')>]
|   from s16: Table SUMMARY_STATUS_ENTRY : Vector[@t10<{SUMMARY_NAME: String', SUMMARY_POSITION: Long', SUMMARY_STATUS_ENTRY_ID: Int'}>]
|   select: Pure t15 : Vector[t15<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s16.SUMMARY_POSITION : Long'
|   where: Apply Function = : Boolean
|     0: Path s16.SUMMARY_NAME : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:13,96] [debug] Compiled ResultConverter
| BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:13,96] [debug] Compiled server-side to:
| CompiledStatement "select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?" : Vector[t15<(Long')>]

[2020-07-30 19:06:13,96] [debug] After phase codeGen:
| ResultSetMapping : Vector[Long']
|   from s13: CompiledStatement "select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?" : Vector[t15<(Long')>]
|   map: CompiledMapping : Long'
|     converter: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:13,96] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:13,96] [debug]       assignUniqueSymbols:    1.789912 ms
[2020-07-30 19:06:13,96] [debug]           unrollTailBinds:    0.136807 ms
[2020-07-30 19:06:13,96] [debug]                inferTypes:    2.318821 ms
[2020-07-30 19:06:13,96] [debug]              expandTables:    6.702256 ms
[2020-07-30 19:06:13,96] [debug]           forceOuterBinds:    2.584847 ms
[2020-07-30 19:06:13,96] [debug]         removeMappedTypes:    0.198326 ms
[2020-07-30 19:06:13,96] [debug]                expandSums:    4.143707 ms
[2020-07-30 19:06:13,96] [debug]             expandRecords:    5.198995 ms
[2020-07-30 19:06:13,96] [debug]        flattenProjections:    3.799474 ms
[2020-07-30 19:06:13,96] [debug]              rewriteJoins:    0.127007 ms
[2020-07-30 19:06:13,96] [debug]             verifySymbols:    0.123299 ms
[2020-07-30 19:06:13,96] [debug]             relabelUnions:    0.110534 ms
[2020-07-30 19:06:13,96] [debug]          createAggregates:    0.151333 ms
[2020-07-30 19:06:13,96] [debug]           resolveZipJoins:    0.893377 ms
[2020-07-30 19:06:13,96] [debug]          pruneProjections:    1.188876 ms
[2020-07-30 19:06:13,96] [debug]           rewriteDistinct:    0.528385 ms
[2020-07-30 19:06:13,97] [debug]    createResultSetMapping:    1.672603 ms
[2020-07-30 19:06:13,97] [debug]            hoistClientOps:    2.979504 ms
[2020-07-30 19:06:13,98] [debug]         reorderOperations:    0.127739 ms
[2020-07-30 19:06:13,98] [debug]     mergeToComprehensions:   27.483612 ms
[2020-07-30 19:06:13,98] [debug]            optimizeScalar:    0.158421 ms
[2020-07-30 19:06:13,98] [debug]          removeFieldNames:   12.620027 ms
[2020-07-30 19:06:13,98] [debug]      specializeParameters:    0.306105 ms
[2020-07-30 19:06:13,98] [debug]                   codeGen:    6.656117 ms
[2020-07-30 19:06:13,98] [debug]                     TOTAL:   82.000084 ms
[2020-07-30 19:06:14,00] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:14,00] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:14,00] [debug] #3: StartTransaction
[2020-07-30 19:06:14,00] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:14,00] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:14,06] [debug] Executing prepared statement: HikariProxyPreparedStatement@152438188 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@a3439f2[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:14,06] [debug] Executing prepared statement: HikariProxyPreparedStatement@152438188 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@a3439f2[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:14,06] [debug] /---------------------------\
[2020-07-30 19:06:14,06] [debug] | 1                         |
[2020-07-30 19:06:14,06] [debug] | String                    |
[2020-07-30 19:06:14,06] [debug] |---------------------------|
[2020-07-30 19:06:14,06] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:14,06] [debug] \---------------------------/
[2020-07-30 19:06:14,06] [debug] Execution of prepared statement took 91µs
[2020-07-30 19:06:14,06] [debug] /------------------\
[2020-07-30 19:06:14,06] [debug] | 1                |
[2020-07-30 19:06:14,06] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:14,06] [debug] |------------------|
[2020-07-30 19:06:14,06] [debug] \------------------/
[2020-07-30 19:06:14,06] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:14,06] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:14,08] [debug] Executing prepared statement: HikariProxyPreparedStatement@235469430 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@51594a35[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:14,08] [debug] Executing prepared statement: HikariProxyPreparedStatement@235469430 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@51594a35[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:14,08] [debug] /---------------------------\
[2020-07-30 19:06:14,08] [debug] | 1                         |
[2020-07-30 19:06:14,08] [debug] | String                    |
[2020-07-30 19:06:14,08] [debug] |---------------------------|
[2020-07-30 19:06:14,08] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:14,09] [debug] \---------------------------/
[2020-07-30 19:06:14,09] [debug] Execution of prepared statement took 94µs
[2020-07-30 19:06:14,09] [debug] /------------------\
[2020-07-30 19:06:14,09] [debug] | 1                |
[2020-07-30 19:06:14,09] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:14,09] [debug] |------------------|
[2020-07-30 19:06:14,09] [debug] \------------------/
[2020-07-30 19:06:14,09] [debug] #6: success None
[2020-07-30 19:06:14,09] [debug] #7: success 0
[2020-07-30 19:06:14,09] [debug] #8: success (0,0)
[2020-07-30 19:06:14,09] [debug] #9: success (0,0)
[2020-07-30 19:06:14,09] [debug] #10: Commit
[2020-07-30 19:06:14,09] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:14,09] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:14,09] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:14,09] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:14,09] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:14,09] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:14,09] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:14,09] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:14,09] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:14,09] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:14,09] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:14,10] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:14,10] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:14,10] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:14,10] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:14,10] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:14,11] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:14,11] [debug] Flattening projection t8
[2020-07-30 19:06:14,11] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:14,11] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:14,11] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:14,11] [debug] Flattening projection t7
[2020-07-30 19:06:14,11] [debug] Flattening projection t9
[2020-07-30 19:06:14,11] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:14,11] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:14,11] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:14,11] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:14,11] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:14,11] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:14,11] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:14,11] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:14,11] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:14,11] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:14,11] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:14,11] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:14,11] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:14,12] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:14,12] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:14,12] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:14,12] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:14,12] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:14,12] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:14,12] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:14,13] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:14,13] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:14,13] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:14,13] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:14,13] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:14,14] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:14,14] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:14,14] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:14,14] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:14,15] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:14,15] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:14,15] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:14,15] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:14,15] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:14,15] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:14,15] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:14,15] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:14,16] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:14,16] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:14,16] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:14,16] [debug] Table fields: Map()
[2020-07-30 19:06:14,16] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:14,16] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:14,16] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:14,16] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:14,16] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:14,16] [debug] Replacements are: Map()
[2020-07-30 19:06:14,16] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:14,16] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:14,16] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:14,16] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:14,17] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:14,17] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:14,17] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:14,17] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:14,17] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:14,17] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:14,17] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:14,17] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:14,17] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:14,17] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:14,17] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:14,17] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:14,17] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:14,17] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:14,17] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:14,18] [debug]       assignUniqueSymbols:    0.675463 ms
[2020-07-30 19:06:14,18] [debug]           unrollTailBinds:    0.118211 ms
[2020-07-30 19:06:14,18] [debug]                inferTypes:    0.148663 ms
[2020-07-30 19:06:14,18] [debug]              expandTables:    1.426056 ms
[2020-07-30 19:06:14,18] [debug]           forceOuterBinds:   10.168695 ms
[2020-07-30 19:06:14,18] [debug]         removeMappedTypes:    0.194842 ms
[2020-07-30 19:06:14,18] [debug]                expandSums:    0.091486 ms
[2020-07-30 19:06:14,18] [debug]             expandRecords:    1.248771 ms
[2020-07-30 19:06:14,18] [debug]        flattenProjections:    5.817615 ms
[2020-07-30 19:06:14,18] [debug]              rewriteJoins:    5.456664 ms
[2020-07-30 19:06:14,18] [debug]             verifySymbols:    0.148160 ms
[2020-07-30 19:06:14,18] [debug]             relabelUnions:    0.126170 ms
[2020-07-30 19:06:14,18] [debug]          createAggregates:   21.488474 ms
[2020-07-30 19:06:14,18] [debug]           resolveZipJoins:    0.141069 ms
[2020-07-30 19:06:14,18] [debug]          pruneProjections:    7.736240 ms
[2020-07-30 19:06:14,18] [debug]           rewriteDistinct:    0.160918 ms
[2020-07-30 19:06:14,18] [debug]    createResultSetMapping:    3.057360 ms
[2020-07-30 19:06:14,18] [debug]            hoistClientOps:    7.548533 ms
[2020-07-30 19:06:14,18] [debug]         reorderOperations:    0.154335 ms
[2020-07-30 19:06:14,18] [debug]     mergeToComprehensions:    8.388872 ms
[2020-07-30 19:06:14,18] [debug]            optimizeScalar:    0.146136 ms
[2020-07-30 19:06:14,18] [debug]          removeFieldNames:    6.164252 ms
[2020-07-30 19:06:14,18] [debug]      specializeParameters:    0.224343 ms
[2020-07-30 19:06:14,19] [debug]                   codeGen:    1.884409 ms
[2020-07-30 19:06:14,19] [debug]                     TOTAL:   82.715737 ms
[2020-07-30 19:06:14,19] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:14,19] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:14,19] [debug] Executing prepared statement: HikariProxyPreparedStatement@2010280458 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5c822bc1[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:14,19] [debug] Executing prepared statement: HikariProxyPreparedStatement@2010280458 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5c822bc1[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:14,19] [debug] Execution of prepared statement took 118µs
[2020-07-30 19:06:14,19] [debug] /----\
[2020-07-30 19:06:14,19] [debug] | 1  |
[2020-07-30 19:06:14,19] [debug] | C1 |
[2020-07-30 19:06:14,19] [debug] |----|
[2020-07-30 19:06:14,19] [debug] | 0  |
[2020-07-30 19:06:14,19] [debug] \----/
[2020-07-30 19:06:14,85] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@329a7850
          base: SetTransactionIsolation
[2020-07-30 19:06:14,85] [debug] Preparing statement: select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:14,85] [debug] Executing prepared statement: HikariProxyPreparedStatement@308235241 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@94cb017[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:14,85] [debug] Executing prepared statement: HikariProxyPreparedStatement@308235241 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@94cb017[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:14,85] [debug] /---------------------------\
[2020-07-30 19:06:14,85] [debug] | 1                         |
[2020-07-30 19:06:14,85] [debug] | String                    |
[2020-07-30 19:06:14,85] [debug] |---------------------------|
[2020-07-30 19:06:14,85] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:14,85] [debug] \---------------------------/
[2020-07-30 19:06:14,85] [debug] Execution of prepared statement took 85µs
[2020-07-30 19:06:14,85] [debug] /-----------------\
[2020-07-30 19:06:14,85] [debug] | 1               |
[2020-07-30 19:06:14,85] [debug] | WORKFLOW_STATUS |
[2020-07-30 19:06:14,85] [debug] |-----------------|
[2020-07-30 19:06:14,85] [debug] \-----------------/
[INFO] [07/30/2020 19:06:14.953] [cromwell-system-akka.dispatchers.engine-dispatcher-38] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/MaterializeWorkflowDescriptorActor] MaterializeWorkflowDescriptorActor [UUID(8b168b0d)]: Call-to-Backend assignments: bamMergePreprocessing.gatherBQSRReports -> Local, bamMergePreprocessing.splitStringToArray -> Local, bamMergePreprocessing.baseQualityScoreRecalibration -> Local, bamMergePreprocessing.analyzeCovariates -> Local, bamMergePreprocessing.preprocessBam -> Local, bamMergePreprocessing.applyBaseQualityScoreRecalibration -> Local, bamMergePreprocessing.mergeSplitByIntervalBams -> Local, bamMergePreprocessing.collectFilesBySample -> Local, bamMergePreprocessing.indelRealign -> Local, bamMergePreprocessing.realignerTargetCreator -> Local
[2020-07-30 19:06:15,11] [debug] #1: SynchronousDatabaseAction.Pin
[WARN] [07/30/2020 19:06:15.110] [cromwell-system-akka.dispatchers.backend-dispatcher-42] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowInitializationActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/Local] Local [UUID(8b168b0d)]: Key/s [cpu, timeout, memory] is/are not supported by backend. Unsupported attributes will not be part of job executions.
[WARN] [07/30/2020 19:06:15.110] [cromwell-system-akka.dispatchers.backend-dispatcher-42] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowInitializationActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/Local] Local [UUID(8b168b0d)]: Key/s [cpu, timeout, memory] is/are not supported by backend. Unsupported attributes will not be part of job executions.
[2020-07-30 19:06:15,11] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:15,11] [debug] #3: StartTransaction
[2020-07-30 19:06:15,11] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:15,11] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[WARN] [07/30/2020 19:06:15.111] [cromwell-system-akka.dispatchers.backend-dispatcher-42] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowInitializationActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/Local] Local [UUID(8b168b0d)]: Key/s [cpu, timeout, memory] is/are not supported by backend. Unsupported attributes will not be part of job executions.
[WARN] [07/30/2020 19:06:15.112] [cromwell-system-akka.dispatchers.backend-dispatcher-42] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowInitializationActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/Local] Local [UUID(8b168b0d)]: Key/s [cpu, timeout, memory] is/are not supported by backend. Unsupported attributes will not be part of job executions.
[WARN] [07/30/2020 19:06:15.112] [cromwell-system-akka.dispatchers.backend-dispatcher-42] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowInitializationActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/Local] Local [UUID(8b168b0d)]: Key/s [cpu, timeout, memory] is/are not supported by backend. Unsupported attributes will not be part of job executions.
[2020-07-30 19:06:15,11] [debug] Executing prepared statement: HikariProxyPreparedStatement@778877576 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@79f2e951[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[WARN] [07/30/2020 19:06:15.112] [cromwell-system-akka.dispatchers.backend-dispatcher-42] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowInitializationActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/Local] Local [UUID(8b168b0d)]: Key/s [cpu, timeout, memory] is/are not supported by backend. Unsupported attributes will not be part of job executions.
[2020-07-30 19:06:15,11] [debug] Executing prepared statement: HikariProxyPreparedStatement@778877576 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@79f2e951[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[WARN] [07/30/2020 19:06:15.112] [cromwell-system-akka.dispatchers.backend-dispatcher-42] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowInitializationActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/Local] Local [UUID(8b168b0d)]: Key/s [cpu, timeout, memory] is/are not supported by backend. Unsupported attributes will not be part of job executions.
[WARN] [07/30/2020 19:06:15.113] [cromwell-system-akka.dispatchers.backend-dispatcher-42] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowInitializationActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/Local] Local [UUID(8b168b0d)]: Key/s [cpu, timeout, memory] is/are not supported by backend. Unsupported attributes will not be part of job executions.
[WARN] [07/30/2020 19:06:15.114] [cromwell-system-akka.dispatchers.backend-dispatcher-42] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowInitializationActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/Local] Local [UUID(8b168b0d)]: Key/s [cpu, timeout, memory] is/are not supported by backend. Unsupported attributes will not be part of job executions.
[2020-07-30 19:06:15,11] [debug] /------\
[2020-07-30 19:06:15,11] [debug] | 1    |
[2020-07-30 19:06:15,11] [debug] | Long |
[WARN] [07/30/2020 19:06:15.114] [cromwell-system-akka.dispatchers.backend-dispatcher-42] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowInitializationActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/Local] Local [UUID(8b168b0d)]: Key/s [cpu, timeout, memory] is/are not supported by backend. Unsupported attributes will not be part of job executions.
[2020-07-30 19:06:15,11] [debug] |------|
[2020-07-30 19:06:15,11] [debug] | 5000 |
[2020-07-30 19:06:15,11] [debug] \------/
[2020-07-30 19:06:15,11] [debug] Execution of prepared statement took 224µs
[2020-07-30 19:06:15,11] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:15,11] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:15,11] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:15,11] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:15,11] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:15,11] [debug] #5: success Vector()
[2020-07-30 19:06:15,11] [debug] #6: success Vector()
[2020-07-30 19:06:15,11] [debug] #7: success ()
[2020-07-30 19:06:15,11] [debug] #8: success ((),Vector())
[2020-07-30 19:06:15,11] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:15,11] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:15,11] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:15,11] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:15,11] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:15,11] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:15,11] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:15,11] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:15,11] [debug] Expanding tables in result type
[2020-07-30 19:06:15,12] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,12] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,12] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,12] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:15,12] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,12] [debug] Flattening projection t8
[2020-07-30 19:06:15,12] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,12] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:15,12] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:15,12] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:15,12] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:15,12] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:15,13] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,13] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:15,13] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:15,13] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:15,13] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:15,13] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:15,13] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:15,13] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:15,13] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:15,13] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:15,13] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:15,13] [debug] Creating mapping from Long'
[2020-07-30 19:06:15,13] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:15,13] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:15,13] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:15,13] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:15,13] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:15,13] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:15,13] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:15,13] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:15,13] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:15,13] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:15,13] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,13] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:15,13] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:15,13] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:15,13] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,13] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:15,13] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:15,13] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:15,14] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:15,14] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:15,14] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:15,14] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:15,14] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:15,14] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:15,14] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:15,14] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:15,14] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:15,14] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:15,14] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:15,14] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:15,14] [debug]       assignUniqueSymbols:    0.818139 ms
[2020-07-30 19:06:15,14] [debug]           unrollTailBinds:    0.113265 ms
[2020-07-30 19:06:15,14] [debug]                inferTypes:    0.159082 ms
[2020-07-30 19:06:15,14] [debug]              expandTables:    1.733432 ms
[2020-07-30 19:06:15,14] [debug]           forceOuterBinds:    0.600211 ms
[2020-07-30 19:06:15,14] [debug]         removeMappedTypes:    0.409417 ms
[2020-07-30 19:06:15,14] [debug]                expandSums:    0.054695 ms
[2020-07-30 19:06:15,14] [debug]             expandRecords:    0.393062 ms
[2020-07-30 19:06:15,14] [debug]        flattenProjections:   11.366546 ms
[2020-07-30 19:06:15,14] [debug]              rewriteJoins:    0.139496 ms
[2020-07-30 19:06:15,14] [debug]             verifySymbols:    0.100623 ms
[2020-07-30 19:06:15,14] [debug]             relabelUnions:    0.082311 ms
[2020-07-30 19:06:15,14] [debug]          createAggregates:    0.052158 ms
[2020-07-30 19:06:15,14] [debug]           resolveZipJoins:    0.085205 ms
[2020-07-30 19:06:15,14] [debug]          pruneProjections:    0.325574 ms
[2020-07-30 19:06:15,14] [debug]           rewriteDistinct:    0.085381 ms
[2020-07-30 19:06:15,14] [debug]    createResultSetMapping:    0.786532 ms
[2020-07-30 19:06:15,14] [debug]            hoistClientOps:    1.444525 ms
[2020-07-30 19:06:15,14] [debug]         reorderOperations:    0.138274 ms
[2020-07-30 19:06:15,14] [debug]     mergeToComprehensions:    3.861125 ms
[2020-07-30 19:06:15,14] [debug]            optimizeScalar:    0.138615 ms
[2020-07-30 19:06:15,14] [debug]          removeFieldNames:    1.434922 ms
[2020-07-30 19:06:15,14] [debug]      specializeParameters:    0.169332 ms
[2020-07-30 19:06:15,14] [debug]                   codeGen:    1.422009 ms
[2020-07-30 19:06:15,14] [debug]                     TOTAL:   25.913931 ms
[2020-07-30 19:06:15,14] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:15,14] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:15,14] [debug] Executing prepared update: HikariProxyPreparedStatement@175738733 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@665957b9[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:15,14] [debug] Executing prepared update: HikariProxyPreparedStatement@175738733 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@665957b9[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:15,14] [debug] Execution of prepared update took 137µs
[2020-07-30 19:06:15,15] [debug] #10: success 0
[2020-07-30 19:06:15,15] [debug] #11: Commit
[2020-07-30 19:06:15,15] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:15,15] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:15,15] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:15,15] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:15,15] [debug] #3: StartTransaction
[2020-07-30 19:06:15,15] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:15,15] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:15,15] [debug] Executing prepared statement: HikariProxyPreparedStatement@2121754101 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1021aec1[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:15,15] [debug] Executing prepared statement: HikariProxyPreparedStatement@2121754101 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1021aec1[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:15,15] [debug] /---------------------------\
[2020-07-30 19:06:15,15] [debug] | 1                         |
[2020-07-30 19:06:15,15] [debug] | String                    |
[2020-07-30 19:06:15,15] [debug] |---------------------------|
[2020-07-30 19:06:15,15] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:15,15] [debug] \---------------------------/
[2020-07-30 19:06:15,15] [debug] Execution of prepared statement took 113µs
[2020-07-30 19:06:15,15] [debug] /------------------\
[2020-07-30 19:06:15,15] [debug] | 1                |
[2020-07-30 19:06:15,15] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:15,15] [debug] |------------------|
[2020-07-30 19:06:15,15] [debug] \------------------/
[2020-07-30 19:06:15,15] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:15,15] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:15,15] [debug] Executing prepared statement: HikariProxyPreparedStatement@2078626287 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@572d302c[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:15,15] [debug] Executing prepared statement: HikariProxyPreparedStatement@2078626287 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@572d302c[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:15,15] [debug] /---------------------------\
[2020-07-30 19:06:15,15] [debug] | 1                         |
[2020-07-30 19:06:15,15] [debug] | String                    |
[2020-07-30 19:06:15,15] [debug] |---------------------------|
[2020-07-30 19:06:15,15] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:15,15] [debug] \---------------------------/
[2020-07-30 19:06:15,15] [debug] Execution of prepared statement took 70µs
[2020-07-30 19:06:15,15] [debug] /------------------\
[2020-07-30 19:06:15,15] [debug] | 1                |
[2020-07-30 19:06:15,15] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:15,15] [debug] |------------------|
[2020-07-30 19:06:15,15] [debug] \------------------/
[2020-07-30 19:06:15,15] [debug] #6: success None
[2020-07-30 19:06:15,15] [debug] #7: success 0
[2020-07-30 19:06:15,15] [debug] #8: success (0,0)
[2020-07-30 19:06:15,15] [debug] #9: success (0,0)
[2020-07-30 19:06:15,15] [debug] #10: Commit
[2020-07-30 19:06:15,15] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:15,15] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:15,15] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,15] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:15,15] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,15] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:15,15] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:15,16] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:15,16] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:15,16] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:15,16] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:15,16] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:15,16] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:15,16] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:15,16] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:15,16] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:15,16] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,16] [debug] Flattening projection t8
[2020-07-30 19:06:15,16] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:15,16] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:15,16] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:15,16] [debug] Flattening projection t7
[2020-07-30 19:06:15,16] [debug] Flattening projection t9
[2020-07-30 19:06:15,16] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,16] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:15,16] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:15,16] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:15,16] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:15,16] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:15,16] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:15,16] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:15,16] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:15,16] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:15,16] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:15,16] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,16] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,16] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,16] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,16] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:15,16] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:15,16] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:15,16] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:15,16] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:15,16] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:15,16] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:15,16] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:15,17] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:15,17] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:15,17] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:15,17] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:15,17] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:15,17] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:15,17] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:15,17] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:15,17] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:15,17] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:15,17] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:15,17] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:15,17] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:15,17] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:15,17] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:15,17] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:15,17] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:15,17] [debug] Table fields: Map()
[2020-07-30 19:06:15,17] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:15,17] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:15,17] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:15,17] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:15,17] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:15,17] [debug] Replacements are: Map()
[2020-07-30 19:06:15,17] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:15,17] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:15,17] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:15,17] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:15,17] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:15,17] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:15,17] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:15,17] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:15,17] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:15,17] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:15,17] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:15,18] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:15,18] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:15,18] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:15,18] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:15,18] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:15,18] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:15,18] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:15,18] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:15,18] [debug]       assignUniqueSymbols:    0.512742 ms
[2020-07-30 19:06:15,18] [debug]           unrollTailBinds:    0.081539 ms
[2020-07-30 19:06:15,18] [debug]                inferTypes:    0.123732 ms
[2020-07-30 19:06:15,18] [debug]              expandTables:    1.052292 ms
[2020-07-30 19:06:15,18] [debug]           forceOuterBinds:    0.894005 ms
[2020-07-30 19:06:15,18] [debug]         removeMappedTypes:    0.154010 ms
[2020-07-30 19:06:15,18] [debug]                expandSums:    0.049683 ms
[2020-07-30 19:06:15,18] [debug]             expandRecords:    0.671876 ms
[2020-07-30 19:06:15,18] [debug]        flattenProjections:    3.150770 ms
[2020-07-30 19:06:15,18] [debug]              rewriteJoins:    1.920210 ms
[2020-07-30 19:06:15,18] [debug]             verifySymbols:    0.115934 ms
[2020-07-30 19:06:15,18] [debug]             relabelUnions:    0.100204 ms
[2020-07-30 19:06:15,18] [debug]          createAggregates:    3.959443 ms
[2020-07-30 19:06:15,18] [debug]           resolveZipJoins:    0.098609 ms
[2020-07-30 19:06:15,18] [debug]          pruneProjections:    0.330429 ms
[2020-07-30 19:06:15,18] [debug]           rewriteDistinct:    0.080830 ms
[2020-07-30 19:06:15,18] [debug]    createResultSetMapping:    0.779927 ms
[2020-07-30 19:06:15,18] [debug]            hoistClientOps:    1.354488 ms
[2020-07-30 19:06:15,18] [debug]         reorderOperations:    0.115396 ms
[2020-07-30 19:06:15,18] [debug]     mergeToComprehensions:    3.992363 ms
[2020-07-30 19:06:15,18] [debug]            optimizeScalar:    0.131222 ms
[2020-07-30 19:06:15,18] [debug]          removeFieldNames:    1.339769 ms
[2020-07-30 19:06:15,18] [debug]      specializeParameters:    0.162382 ms
[2020-07-30 19:06:15,18] [debug]                   codeGen:    1.337965 ms
[2020-07-30 19:06:15,18] [debug]                     TOTAL:   22.509820 ms
[2020-07-30 19:06:15,18] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:15,18] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:15,18] [debug] Executing prepared statement: HikariProxyPreparedStatement@1839397042 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@53b01eb8[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:15,18] [debug] Executing prepared statement: HikariProxyPreparedStatement@1839397042 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@53b01eb8[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:15,18] [debug] Execution of prepared statement took 109µs
[2020-07-30 19:06:15,18] [debug] /----\
[2020-07-30 19:06:15,18] [debug] | 1  |
[2020-07-30 19:06:15,18] [debug] | C1 |
[2020-07-30 19:06:15,18] [debug] |----|
[2020-07-30 19:06:15,18] [debug] | 0  |
[2020-07-30 19:06:15,18] [debug] \----/
[2020-07-30 19:06:16,13] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@7746586f
          base: SetTransactionIsolation
[2020-07-30 19:06:16,13] [debug] Preparing statement: select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:16,13] [debug] Executing prepared statement: HikariProxyPreparedStatement@752024248 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@31180dfc[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:16,13] [debug] Executing prepared statement: HikariProxyPreparedStatement@752024248 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@31180dfc[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:16,13] [debug] /---------------------------\
[2020-07-30 19:06:16,13] [debug] | 1                         |
[2020-07-30 19:06:16,13] [debug] | String                    |
[2020-07-30 19:06:16,13] [debug] |---------------------------|
[2020-07-30 19:06:16,13] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:16,13] [debug] \---------------------------/
[2020-07-30 19:06:16,13] [debug] Execution of prepared statement took 237µs
[2020-07-30 19:06:16,13] [debug] /-----------------\
[2020-07-30 19:06:16,13] [debug] | 1               |
[2020-07-30 19:06:16,13] [debug] | WORKFLOW_STATUS |
[2020-07-30 19:06:16,13] [debug] |-----------------|
[2020-07-30 19:06:16,13] [debug] \-----------------/
[2020-07-30 19:06:16,17] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:16,17] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:16,17] [debug] #3: StartTransaction
[2020-07-30 19:06:16,17] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:16,17] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:16,17] [debug] Executing prepared statement: HikariProxyPreparedStatement@908872515 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@25aa4bed[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:16,17] [debug] Executing prepared statement: HikariProxyPreparedStatement@908872515 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@25aa4bed[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:16,17] [debug] /------\
[2020-07-30 19:06:16,17] [debug] | 1    |
[2020-07-30 19:06:16,17] [debug] | Long |
[2020-07-30 19:06:16,17] [debug] |------|
[2020-07-30 19:06:16,17] [debug] | 5000 |
[2020-07-30 19:06:16,17] [debug] \------/
[2020-07-30 19:06:16,17] [debug] Execution of prepared statement took 195µs
[2020-07-30 19:06:16,17] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:16,17] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:16,17] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:16,17] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:16,17] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:16,17] [debug] #5: success Vector()
[2020-07-30 19:06:16,17] [debug] #6: success Vector()
[2020-07-30 19:06:16,17] [debug] #7: success ()
[2020-07-30 19:06:16,17] [debug] #8: success ((),Vector())
[2020-07-30 19:06:16,17] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:16,17] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:16,17] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:16,17] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:16,17] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:16,17] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:16,17] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:16,18] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:16,18] [debug] Expanding tables in result type
[2020-07-30 19:06:16,18] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,18] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,18] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,18] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:16,18] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,18] [debug] Flattening projection t8
[2020-07-30 19:06:16,18] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,18] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:16,18] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:16,18] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:16,18] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:16,18] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:16,18] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,18] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:16,18] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:16,18] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:16,18] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:16,18] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:16,18] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:16,18] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:16,18] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:16,18] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:16,18] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:16,18] [debug] Creating mapping from Long'
[2020-07-30 19:06:16,18] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:16,18] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:16,18] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:16,18] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:16,18] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:16,18] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:16,18] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:16,18] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:16,18] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:16,18] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:16,18] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,18] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:16,18] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:16,18] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:16,18] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,18] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:16,18] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:16,18] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:16,19] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:16,19] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:16,19] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:16,19] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:16,19] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:16,19] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:16,19] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:16,19] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:16,19] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:16,19] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:16,19] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:16,19] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:16,19] [debug]       assignUniqueSymbols:    0.583271 ms
[2020-07-30 19:06:16,19] [debug]           unrollTailBinds:    0.088836 ms
[2020-07-30 19:06:16,19] [debug]                inferTypes:    0.123771 ms
[2020-07-30 19:06:16,19] [debug]              expandTables:    2.148976 ms
[2020-07-30 19:06:16,19] [debug]           forceOuterBinds:    0.450168 ms
[2020-07-30 19:06:16,19] [debug]         removeMappedTypes:    0.363980 ms
[2020-07-30 19:06:16,19] [debug]                expandSums:    0.050069 ms
[2020-07-30 19:06:16,19] [debug]             expandRecords:    0.328624 ms
[2020-07-30 19:06:16,19] [debug]        flattenProjections:    1.200848 ms
[2020-07-30 19:06:16,19] [debug]              rewriteJoins:    0.102693 ms
[2020-07-30 19:06:16,19] [debug]             verifySymbols:    0.114071 ms
[2020-07-30 19:06:16,19] [debug]             relabelUnions:    0.080080 ms
[2020-07-30 19:06:16,19] [debug]          createAggregates:    0.040879 ms
[2020-07-30 19:06:16,19] [debug]           resolveZipJoins:    0.077839 ms
[2020-07-30 19:06:16,19] [debug]          pruneProjections:    0.313788 ms
[2020-07-30 19:06:16,19] [debug]           rewriteDistinct:    0.128066 ms
[2020-07-30 19:06:16,19] [debug]    createResultSetMapping:    0.673292 ms
[2020-07-30 19:06:16,19] [debug]            hoistClientOps:    1.317661 ms
[2020-07-30 19:06:16,19] [debug]         reorderOperations:    0.123246 ms
[2020-07-30 19:06:16,19] [debug]     mergeToComprehensions:    3.545169 ms
[2020-07-30 19:06:16,19] [debug]            optimizeScalar:    0.135819 ms
[2020-07-30 19:06:16,19] [debug]          removeFieldNames:    1.581450 ms
[2020-07-30 19:06:16,19] [debug]      specializeParameters:    0.181640 ms
[2020-07-30 19:06:16,19] [debug]                   codeGen:    1.283134 ms
[2020-07-30 19:06:16,19] [debug]                     TOTAL:   15.037370 ms
[2020-07-30 19:06:16,19] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:16,19] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:16,19] [debug] Executing prepared update: HikariProxyPreparedStatement@1598435797 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@c50bb39[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:16,19] [debug] Executing prepared update: HikariProxyPreparedStatement@1598435797 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@c50bb39[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:16,19] [debug] Execution of prepared update took 147µs
[2020-07-30 19:06:16,19] [debug] #10: success 0
[2020-07-30 19:06:16,19] [debug] #11: Commit
[2020-07-30 19:06:16,20] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:16,20] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:16,20] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:16,20] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:16,20] [debug] #3: StartTransaction
[2020-07-30 19:06:16,20] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:16,20] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:16,20] [debug] Executing prepared statement: HikariProxyPreparedStatement@464057072 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6caa39ab[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:16,20] [debug] Executing prepared statement: HikariProxyPreparedStatement@464057072 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6caa39ab[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:16,20] [debug] /---------------------------\
[2020-07-30 19:06:16,20] [debug] | 1                         |
[2020-07-30 19:06:16,20] [debug] | String                    |
[2020-07-30 19:06:16,20] [debug] |---------------------------|
[2020-07-30 19:06:16,20] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:16,20] [debug] \---------------------------/
[2020-07-30 19:06:16,20] [debug] Execution of prepared statement took 114µs
[2020-07-30 19:06:16,20] [debug] /------------------\
[2020-07-30 19:06:16,20] [debug] | 1                |
[2020-07-30 19:06:16,20] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:16,20] [debug] |------------------|
[2020-07-30 19:06:16,20] [debug] \------------------/
[2020-07-30 19:06:16,20] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:16,20] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:16,20] [debug] Executing prepared statement: HikariProxyPreparedStatement@1560660192 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5485283a[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:16,20] [debug] Executing prepared statement: HikariProxyPreparedStatement@1560660192 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5485283a[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:16,20] [debug] /---------------------------\
[2020-07-30 19:06:16,20] [debug] | 1                         |
[2020-07-30 19:06:16,20] [debug] | String                    |
[2020-07-30 19:06:16,20] [debug] |---------------------------|
[2020-07-30 19:06:16,20] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:16,20] [debug] \---------------------------/
[2020-07-30 19:06:16,20] [debug] Execution of prepared statement took 89µs
[2020-07-30 19:06:16,20] [debug] /------------------\
[2020-07-30 19:06:16,20] [debug] | 1                |
[2020-07-30 19:06:16,20] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:16,20] [debug] |------------------|
[2020-07-30 19:06:16,20] [debug] \------------------/
[2020-07-30 19:06:16,20] [debug] #6: success None
[2020-07-30 19:06:16,20] [debug] #7: success 0
[2020-07-30 19:06:16,20] [debug] #8: success (0,0)
[2020-07-30 19:06:16,20] [debug] #9: success (0,0)
[2020-07-30 19:06:16,20] [debug] #10: Commit
[2020-07-30 19:06:16,20] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:16,20] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:16,21] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,21] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:16,21] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,21] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:16,21] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:16,21] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:16,21] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:16,21] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:16,21] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:16,21] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:16,21] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:16,21] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:16,21] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:16,21] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:16,21] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,21] [debug] Flattening projection t8
[2020-07-30 19:06:16,21] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:16,21] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:16,21] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:16,21] [debug] Flattening projection t7
[2020-07-30 19:06:16,21] [debug] Flattening projection t9
[2020-07-30 19:06:16,21] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,21] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:16,21] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:16,21] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:16,21] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:16,21] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:16,21] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:16,21] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:16,21] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:16,21] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:16,21] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:16,22] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,22] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,22] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,22] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,22] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:16,22] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:16,22] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:16,22] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:16,22] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:16,22] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:16,22] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:16,22] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:16,22] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:16,22] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:16,22] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:16,22] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:16,22] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:16,22] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:16,22] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:16,22] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:16,22] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:16,22] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:16,22] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:16,22] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:16,22] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:16,22] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:16,23] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:16,23] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:16,23] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:16,23] [debug] Table fields: Map()
[2020-07-30 19:06:16,23] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:16,23] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:16,23] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:16,23] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:16,23] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:16,23] [debug] Replacements are: Map()
[2020-07-30 19:06:16,23] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:16,23] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:16,23] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:16,23] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:16,23] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:16,23] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:16,23] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:16,23] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:16,23] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:16,23] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:16,23] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:16,23] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:16,23] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:16,23] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:16,23] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:16,23] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:16,23] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:16,23] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:16,23] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:16,23] [debug]       assignUniqueSymbols:    1.050523 ms
[2020-07-30 19:06:16,24] [debug]           unrollTailBinds:    0.182273 ms
[2020-07-30 19:06:16,24] [debug]                inferTypes:    0.228555 ms
[2020-07-30 19:06:16,24] [debug]              expandTables:    1.504673 ms
[2020-07-30 19:06:16,24] [debug]           forceOuterBinds:    1.006532 ms
[2020-07-30 19:06:16,24] [debug]         removeMappedTypes:    0.169558 ms
[2020-07-30 19:06:16,24] [debug]                expandSums:    0.057635 ms
[2020-07-30 19:06:16,24] [debug]             expandRecords:    0.945079 ms
[2020-07-30 19:06:16,24] [debug]        flattenProjections:    3.758548 ms
[2020-07-30 19:06:16,24] [debug]              rewriteJoins:    2.174600 ms
[2020-07-30 19:06:16,24] [debug]             verifySymbols:    0.115563 ms
[2020-07-30 19:06:16,24] [debug]             relabelUnions:    0.089726 ms
[2020-07-30 19:06:16,24] [debug]          createAggregates:    5.463419 ms
[2020-07-30 19:06:16,24] [debug]           resolveZipJoins:    0.107472 ms
[2020-07-30 19:06:16,24] [debug]          pruneProjections:    0.379509 ms
[2020-07-30 19:06:16,24] [debug]           rewriteDistinct:    0.134753 ms
[2020-07-30 19:06:16,24] [debug]    createResultSetMapping:    0.867883 ms
[2020-07-30 19:06:16,24] [debug]            hoistClientOps:    1.574980 ms
[2020-07-30 19:06:16,24] [debug]         reorderOperations:    0.163183 ms
[2020-07-30 19:06:16,24] [debug]     mergeToComprehensions:    4.641368 ms
[2020-07-30 19:06:16,24] [debug]            optimizeScalar:    0.114818 ms
[2020-07-30 19:06:16,24] [debug]          removeFieldNames:    1.721717 ms
[2020-07-30 19:06:16,24] [debug]      specializeParameters:    0.195142 ms
[2020-07-30 19:06:16,24] [debug]                   codeGen:    1.470269 ms
[2020-07-30 19:06:16,24] [debug]                     TOTAL:   28.117778 ms
[2020-07-30 19:06:16,24] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:16,24] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:16,24] [debug] Executing prepared statement: HikariProxyPreparedStatement@904791093 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@83403f9[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:16,24] [debug] Executing prepared statement: HikariProxyPreparedStatement@904791093 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@83403f9[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:16,24] [debug] Execution of prepared statement took 98µs
[2020-07-30 19:06:16,24] [debug] /----\
[2020-07-30 19:06:16,24] [debug] | 1  |
[2020-07-30 19:06:16,24] [debug] | C1 |
[2020-07-30 19:06:16,24] [debug] |----|
[2020-07-30 19:06:16,24] [debug] | 0  |
[2020-07-30 19:06:16,24] [debug] \----/
[2020-07-30 19:06:17,23] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:17,23] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:17,23] [debug] #3: StartTransaction
[2020-07-30 19:06:17,23] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:17,23] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:17,23] [debug] Executing prepared statement: HikariProxyPreparedStatement@1054429248 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1ec5efca[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:17,23] [debug] Executing prepared statement: HikariProxyPreparedStatement@1054429248 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1ec5efca[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:17,23] [debug] /------\
[2020-07-30 19:06:17,23] [debug] | 1    |
[2020-07-30 19:06:17,23] [debug] | Long |
[2020-07-30 19:06:17,23] [debug] |------|
[2020-07-30 19:06:17,23] [debug] | 5000 |
[2020-07-30 19:06:17,23] [debug] \------/
[2020-07-30 19:06:17,23] [debug] Execution of prepared statement took 232µs
[2020-07-30 19:06:17,23] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:17,23] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:17,23] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:17,23] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:17,23] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:17,23] [debug] #5: success Vector()
[2020-07-30 19:06:17,23] [debug] #6: success Vector()
[2020-07-30 19:06:17,23] [debug] #7: success ()
[2020-07-30 19:06:17,23] [debug] #8: success ((),Vector())
[2020-07-30 19:06:17,23] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:17,23] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:17,24] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:17,24] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:17,24] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:17,24] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:17,24] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:17,24] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:17,24] [debug] Expanding tables in result type
[2020-07-30 19:06:17,24] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,24] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,24] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,24] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:17,24] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,24] [debug] Flattening projection t8
[2020-07-30 19:06:17,24] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,24] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:17,24] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:17,24] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:17,24] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:17,24] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:17,24] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,24] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:17,24] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:17,24] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:17,24] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:17,24] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:17,24] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:17,24] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:17,24] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:17,24] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:17,24] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:17,24] [debug] Creating mapping from Long'
[2020-07-30 19:06:17,24] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:17,24] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:17,24] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:17,24] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:17,24] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:17,24] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:17,25] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:17,25] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:17,25] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:17,25] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:17,25] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,25] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:17,25] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:17,25] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:17,25] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,25] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:17,25] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:17,25] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:17,25] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:17,25] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:17,25] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:17,25] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:17,25] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:17,25] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:17,25] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:17,25] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:17,25] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:17,25] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:17,25] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:17,25] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:17,25] [debug]       assignUniqueSymbols:    0.702159 ms
[2020-07-30 19:06:17,25] [debug]           unrollTailBinds:    0.134182 ms
[2020-07-30 19:06:17,25] [debug]                inferTypes:    0.205716 ms
[2020-07-30 19:06:17,25] [debug]              expandTables:    1.775478 ms
[2020-07-30 19:06:17,25] [debug]           forceOuterBinds:    0.641307 ms
[2020-07-30 19:06:17,25] [debug]         removeMappedTypes:    0.488441 ms
[2020-07-30 19:06:17,25] [debug]                expandSums:    0.065689 ms
[2020-07-30 19:06:17,25] [debug]             expandRecords:    0.479965 ms
[2020-07-30 19:06:17,25] [debug]        flattenProjections:    1.734307 ms
[2020-07-30 19:06:17,25] [debug]              rewriteJoins:    0.110920 ms
[2020-07-30 19:06:17,25] [debug]             verifySymbols:    0.113966 ms
[2020-07-30 19:06:17,25] [debug]             relabelUnions:    0.083818 ms
[2020-07-30 19:06:17,25] [debug]          createAggregates:    0.055080 ms
[2020-07-30 19:06:17,26] [debug]           resolveZipJoins:    0.123337 ms
[2020-07-30 19:06:17,26] [debug]          pruneProjections:    0.369049 ms
[2020-07-30 19:06:17,26] [debug]           rewriteDistinct:    0.097279 ms
[2020-07-30 19:06:17,26] [debug]    createResultSetMapping:    0.834548 ms
[2020-07-30 19:06:17,26] [debug]            hoistClientOps:    1.993767 ms
[2020-07-30 19:06:17,26] [debug]         reorderOperations:    0.110665 ms
[2020-07-30 19:06:17,26] [debug]     mergeToComprehensions:    3.748707 ms
[2020-07-30 19:06:17,26] [debug]            optimizeScalar:    0.169772 ms
[2020-07-30 19:06:17,26] [debug]          removeFieldNames:    1.704652 ms
[2020-07-30 19:06:17,26] [debug]      specializeParameters:    0.193004 ms
[2020-07-30 19:06:17,26] [debug]                   codeGen:    1.379475 ms
[2020-07-30 19:06:17,26] [debug]                     TOTAL:   17.315283 ms
[2020-07-30 19:06:17,26] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:17,26] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:17,26] [debug] Executing prepared update: HikariProxyPreparedStatement@840095925 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4f2bed92[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:17,26] [debug] Executing prepared update: HikariProxyPreparedStatement@840095925 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4f2bed92[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:17,26] [debug] Execution of prepared update took 244µs
[2020-07-30 19:06:17,26] [debug] #10: success 0
[2020-07-30 19:06:17,26] [debug] #11: Commit
[2020-07-30 19:06:17,26] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:17,26] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:17,26] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:17,26] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:17,26] [debug] #3: StartTransaction
[2020-07-30 19:06:17,26] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:17,26] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:17,26] [debug] Executing prepared statement: HikariProxyPreparedStatement@428574152 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@280194bd[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:17,26] [debug] Executing prepared statement: HikariProxyPreparedStatement@428574152 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@280194bd[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:17,26] [debug] /---------------------------\
[2020-07-30 19:06:17,26] [debug] | 1                         |
[2020-07-30 19:06:17,26] [debug] | String                    |
[2020-07-30 19:06:17,26] [debug] |---------------------------|
[2020-07-30 19:06:17,26] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:17,26] [debug] \---------------------------/
[2020-07-30 19:06:17,26] [debug] Execution of prepared statement took 104µs
[2020-07-30 19:06:17,26] [debug] /------------------\
[2020-07-30 19:06:17,26] [debug] | 1                |
[2020-07-30 19:06:17,26] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:17,26] [debug] |------------------|
[2020-07-30 19:06:17,26] [debug] \------------------/
[2020-07-30 19:06:17,26] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:17,27] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:17,27] [debug] Executing prepared statement: HikariProxyPreparedStatement@2129177149 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6ebf9d05[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:17,27] [debug] Executing prepared statement: HikariProxyPreparedStatement@2129177149 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6ebf9d05[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:17,27] [debug] /---------------------------\
[2020-07-30 19:06:17,27] [debug] | 1                         |
[2020-07-30 19:06:17,27] [debug] | String                    |
[2020-07-30 19:06:17,27] [debug] |---------------------------|
[2020-07-30 19:06:17,27] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:17,27] [debug] \---------------------------/
[2020-07-30 19:06:17,27] [debug] Execution of prepared statement took 108µs
[2020-07-30 19:06:17,27] [debug] /------------------\
[2020-07-30 19:06:17,27] [debug] | 1                |
[2020-07-30 19:06:17,27] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:17,27] [debug] |------------------|
[2020-07-30 19:06:17,27] [debug] \------------------/
[2020-07-30 19:06:17,27] [debug] #6: success None
[2020-07-30 19:06:17,27] [debug] #7: success 0
[2020-07-30 19:06:17,27] [debug] #8: success (0,0)
[2020-07-30 19:06:17,27] [debug] #9: success (0,0)
[2020-07-30 19:06:17,27] [debug] #10: Commit
[2020-07-30 19:06:17,27] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:17,27] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:17,27] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,27] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:17,27] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,27] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:17,27] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:17,27] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:17,27] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:17,27] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:17,27] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:17,27] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:17,27] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:17,27] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:17,27] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:17,27] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:17,28] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,28] [debug] Flattening projection t8
[2020-07-30 19:06:17,28] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:17,28] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:17,28] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:17,28] [debug] Flattening projection t7
[2020-07-30 19:06:17,28] [debug] Flattening projection t9
[2020-07-30 19:06:17,28] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,28] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:17,28] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:17,28] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:17,28] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:17,28] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:17,28] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:17,28] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:17,28] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:17,28] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:17,28] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:17,28] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,28] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,28] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,28] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,28] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:17,28] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:17,28] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,28] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:17,28] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:17,28] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:17,28] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:17,28] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:17,28] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:17,28] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:17,28] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:17,29] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:17,29] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:17,29] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:17,29] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:17,29] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:17,29] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:17,29] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:17,29] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:17,29] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:17,29] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:17,29] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:17,29] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:17,29] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:17,29] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:17,29] [debug] Table fields: Map()
[2020-07-30 19:06:17,29] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:17,29] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:17,29] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:17,29] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:17,29] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:17,29] [debug] Replacements are: Map()
[2020-07-30 19:06:17,29] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:17,29] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:17,29] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:17,29] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:17,29] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:17,29] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:17,29] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:17,29] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:17,29] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:17,29] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:17,29] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:17,30] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:17,30] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:17,30] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:17,30] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:17,30] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:17,30] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:17,30] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:17,30] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:17,30] [debug]       assignUniqueSymbols:    0.702711 ms
[2020-07-30 19:06:17,30] [debug]           unrollTailBinds:    0.154856 ms
[2020-07-30 19:06:17,30] [debug]                inferTypes:    0.177577 ms
[2020-07-30 19:06:17,30] [debug]              expandTables:    1.245979 ms
[2020-07-30 19:06:17,30] [debug]           forceOuterBinds:    1.227486 ms
[2020-07-30 19:06:17,30] [debug]         removeMappedTypes:    0.221929 ms
[2020-07-30 19:06:17,30] [debug]                expandSums:    0.084018 ms
[2020-07-30 19:06:17,30] [debug]             expandRecords:    0.935465 ms
[2020-07-30 19:06:17,30] [debug]        flattenProjections:    4.391445 ms
[2020-07-30 19:06:17,30] [debug]              rewriteJoins:    1.856907 ms
[2020-07-30 19:06:17,30] [debug]             verifySymbols:    0.101342 ms
[2020-07-30 19:06:17,30] [debug]             relabelUnions:    0.078612 ms
[2020-07-30 19:06:17,30] [debug]          createAggregates:    4.436371 ms
[2020-07-30 19:06:17,30] [debug]           resolveZipJoins:    0.103925 ms
[2020-07-30 19:06:17,30] [debug]          pruneProjections:    0.363639 ms
[2020-07-30 19:06:17,30] [debug]           rewriteDistinct:    0.095271 ms
[2020-07-30 19:06:17,30] [debug]    createResultSetMapping:    0.919210 ms
[2020-07-30 19:06:17,30] [debug]            hoistClientOps:    1.485949 ms
[2020-07-30 19:06:17,30] [debug]         reorderOperations:    0.099841 ms
[2020-07-30 19:06:17,30] [debug]     mergeToComprehensions:    4.452194 ms
[2020-07-30 19:06:17,30] [debug]            optimizeScalar:    0.130688 ms
[2020-07-30 19:06:17,30] [debug]          removeFieldNames:    1.467269 ms
[2020-07-30 19:06:17,30] [debug]      specializeParameters:    0.217672 ms
[2020-07-30 19:06:17,30] [debug]                   codeGen:    1.526050 ms
[2020-07-30 19:06:17,30] [debug]                     TOTAL:   26.476406 ms
[2020-07-30 19:06:17,30] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:17,30] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:17,30] [debug] Executing prepared statement: HikariProxyPreparedStatement@318821005 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1c53005[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:17,30] [debug] Executing prepared statement: HikariProxyPreparedStatement@318821005 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1c53005[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:17,30] [debug] Execution of prepared statement took 152µs
[2020-07-30 19:06:17,30] [debug] /----\
[2020-07-30 19:06:17,30] [debug] | 1  |
[2020-07-30 19:06:17,30] [debug] | C1 |
[2020-07-30 19:06:17,30] [debug] |----|
[2020-07-30 19:06:17,30] [debug] | 0  |
[2020-07-30 19:06:17,30] [debug] \----/
[INFO] [07/30/2020 19:06:17.323] [cromwell-system-akka.dispatchers.engine-dispatcher-37] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowExecutionActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc] WorkflowExecutionActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc [UUID(8b168b0d)]: Starting bamMergePreprocessing.splitStringToArray
[2020-07-30 19:06:17,36] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@13a6cbf2
          base: SetTransactionIsolation
[2020-07-30 19:06:17,36] [debug] Preparing statement: select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:17,36] [debug] Executing prepared statement: HikariProxyPreparedStatement@1660335863 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@46f676e8[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:17,36] [debug] Executing prepared statement: HikariProxyPreparedStatement@1660335863 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@46f676e8[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:17,36] [debug] /---------------------------\
[2020-07-30 19:06:17,36] [debug] | 1                         |
[2020-07-30 19:06:17,36] [debug] | String                    |
[2020-07-30 19:06:17,36] [debug] |---------------------------|
[2020-07-30 19:06:17,36] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:17,36] [debug] \---------------------------/
[2020-07-30 19:06:17,36] [debug] Execution of prepared statement took 147µs
[2020-07-30 19:06:17,36] [debug] /-----------------\
[2020-07-30 19:06:17,36] [debug] | 1               |
[2020-07-30 19:06:17,36] [debug] | WORKFLOW_STATUS |
[2020-07-30 19:06:17,36] [debug] |-----------------|
[2020-07-30 19:06:17,36] [debug] \-----------------/
[2020-07-30 19:06:17,55] [debug] Source:
| TableExpansion
|   table s2: Table METADATA_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s2.CALL_FQN : Option[String']
|       3: Path s2.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s2.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s2.METADATA_KEY : String'
|       6: Path s2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s2.METADATA_VALUE_TYPE : Option[String']
|       8: Path s2.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply
|         0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,55] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:17,55] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table METADATA_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s3.CALL_FQN : Option[String']
|       3: Path s3.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s3.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s3.METADATA_KEY : String'
|       6: Path s3.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s3.METADATA_VALUE_TYPE : Option[String']
|       8: Path s3.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply
|         0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,55] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:17,56] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')]
|   from s5: Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FQN, JOB_SCATTER_INDEX, JOB_RETRY_ATTEMPT, METADATA_KEY, METADATA_VALUE, METADATA_VALUE_TYPE, METADATA_TIMESTAMP, METADATA_JOURNAL_ID] : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|     table s6: Table METADATA_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|       1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s6.CALL_FQN : Option[String']
|       3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s6.METADATA_KEY : String'
|       6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s6.METADATA_VALUE_TYPE : Option[String']
|       8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: InsertColumn WORKFLOW_EXECUTION_UUID : String'
|         0: Path s5._1 : String'
|       2: InsertColumn CALL_FQN : Option[String']
|         0: Path s5._2 : Option[String']
|       3: InsertColumn JOB_SCATTER_INDEX : Option[Int']
|         0: Path s5._3 : Option[Int']
|       4: InsertColumn JOB_RETRY_ATTEMPT : Option[Int']
|         0: Path s5._4 : Option[Int']
|       5: InsertColumn METADATA_KEY : String'
|         0: Path s5._5 : String'
|       6: InsertColumn METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         0: Path s5._6 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: InsertColumn METADATA_VALUE_TYPE : Option[String']
|         0: Path s5._7 : Option[String']
|       8: InsertColumn METADATA_TIMESTAMP : java.sql.Timestamp'
|         0: Path s5._8 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: InsertColumn METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,56] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FQN, JOB_SCATTER_INDEX, JOB_RETRY_ATTEMPT, METADATA_KEY, METADATA_VALUE, METADATA_VALUE_TYPE, METADATA_TIMESTAMP, METADATA_JOURNAL_ID] : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|   table s6: Table METADATA_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|     1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|     2: Path s6.CALL_FQN : Option[String']
|     3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|     4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|     5: Path s6.METADATA_KEY : String'
|     6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|     7: Path s6.METADATA_VALUE_TYPE : Option[String']
|     8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:17,57] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|     3: OptionResultConverter$mcI$sp idx=3 : Int'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=METADATA_KEY : String'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|     8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=METADATA_TIMESTAMP : java.sql.Timestamp'
|     9: CompoundResultConverter

[2020-07-30 19:06:17,57] [debug] Compiled server-side to:
| CompiledStatement "insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')

[2020-07-30 19:06:17,57] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')]
|   from s5: CompiledStatement "insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|   map: CompiledMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|         3: OptionResultConverter$mcI$sp idx=3 : Int'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=METADATA_KEY : String'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|         8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: CompoundResultConverter

[2020-07-30 19:06:17,57] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:17,57] [debug]       assignUniqueSymbols:    1.148644 ms
[2020-07-30 19:06:17,57] [debug]                inferTypes:    0.254650 ms
[2020-07-30 19:06:17,57] [debug]            insertCompiler:    9.238578 ms
[2020-07-30 19:06:17,57] [debug]                   codeGen:    7.781328 ms
[2020-07-30 19:06:17,57] [debug]                     TOTAL:   18.423200 ms
[2020-07-30 19:06:17,57] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:17,57] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:17,57] [debug] #3: StartTransaction
[2020-07-30 19:06:17,57] [debug] #4: MultiInsertAction [insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)]
[2020-07-30 19:06:17,58] [debug] Source:
| Bind
|   from s2: TableExpansion
|     table s3: Table METADATA_ENTRY
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s3.CALL_FQN : Option[String']
|         3: Path s3.JOB_SCATTER_INDEX : Option[Int']
|         4: Path s3.JOB_RETRY_ATTEMPT : Option[Int']
|         5: Path s3.METADATA_KEY : String'
|         6: Path s3.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         7: Path s3.METADATA_VALUE_TYPE : Option[String']
|         8: Path s3.METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: OptionApply
|           0: Path s3.METADATA_JOURNAL_ID : Long'
|   select: Pure t4
|     value: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,58] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:17,58] [debug] After phase assignUniqueSymbols:
| Bind
|   from s5: TableExpansion
|     table s6: Table METADATA_ENTRY
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s6.CALL_FQN : Option[String']
|         3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|         4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|         5: Path s6.METADATA_KEY : String'
|         6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         7: Path s6.METADATA_VALUE_TYPE : Option[String']
|         8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: OptionApply
|           0: Path s6.METADATA_JOURNAL_ID : Long'
|   select: Pure t8
|     value: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,58] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:17,58] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(Long')]
|   from s9: Insert allFields=[METADATA_JOURNAL_ID] : (Long')
|     table s10: Table METADATA_ENTRY : Vector[@t7<UnassignedType>]
|     linear: ProductNode : (Long')
|       1: Path s10.METADATA_JOURNAL_ID : Long'
|   map: InsertColumn METADATA_JOURNAL_ID : Long'
|     0: Path s9._1 : Long'

[2020-07-30 19:06:17,58] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[METADATA_JOURNAL_ID] : (Long')
|   table s10: Table METADATA_ENTRY : Vector[@t7<UnassignedType>]
|   linear: ProductNode : (Long')
|     1: Path s10.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,58] [debug] Compiled ResultConverter
| BaseResultConverter$mcJ$sp idx=1, name=METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,58] [debug] Compiled server-side to:
| CompiledStatement "insert into "METADATA_ENTRY" ("METADATA_JOURNAL_ID")  values (?)" : (Long')

[2020-07-30 19:06:17,58] [debug] After phase codeGen:
| ResultSetMapping : Vector[(Long')]
|   from s9: CompiledStatement "insert into "METADATA_ENTRY" ("METADATA_JOURNAL_ID")  values (?)" : (Long')
|   map: CompiledMapping : Long'
|     converter: BaseResultConverter$mcJ$sp idx=1, name=METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,58] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:17,58] [debug]       assignUniqueSymbols:    1.100172 ms
[2020-07-30 19:06:17,58] [debug]                inferTypes:    0.200871 ms
[2020-07-30 19:06:17,58] [debug]            insertCompiler:    1.100792 ms
[2020-07-30 19:06:17,58] [debug]                   codeGen:    1.043773 ms
[2020-07-30 19:06:17,58] [debug]                     TOTAL:    3.445608 ms
[2020-07-30 19:06:17,58] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:17,58] [debug] Executing prepared update: HikariProxyPreparedStatement@443490636 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5e400e57[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submission], [javax.sql.rowset.serial.SerialClob@5c8d4215], [string], [org.hsqldb.types.TimestampData@5c042a85]]]
[2020-07-30 19:06:17,58] [debug] Executing prepared update: HikariProxyPreparedStatement@443490636 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5e400e57[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submission], [javax.sql.rowset.serial.SerialClob@5c8d4215], [string], [org.hsqldb.types.TimestampData@5c042a85]]]
[2020-07-30 19:06:17,59] [debug] /---------------------------+---------+---------+---------+------------+------+--------+--------------------------\
[2020-07-30 19:06:17,59] [debug] | 1                         | 2       | 3       | 4       | 5          | 6    | 7      | 8                        |
[2020-07-30 19:06:17,59] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String     | Clob | String | Timestamp                |
[2020-07-30 19:06:17,59] [debug] |---------------------------+---------+---------+---------+------------+------+--------+--------------------------|
[2020-07-30 19:06:17,59] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | submission |      | string | 2020-07-30 19:06:13.0529 |
[2020-07-30 19:06:17,59] [debug] \---------------------------+---------+---------+---------+------------+------+--------+--------------------------/
[2020-07-30 19:06:17,61] [debug] Execution of prepared update took 24ms
[2020-07-30 19:06:17,61] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:17,62] [debug] Executing prepared update: HikariProxyPreparedStatement@391052352 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@55e790bd[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@6f6dd8f9], [string], [org.hsqldb.types.TimestampData@5c0b1d5d]]]
[2020-07-30 19:06:17,62] [debug] Executing prepared update: HikariProxyPreparedStatement@391052352 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@55e790bd[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@6f6dd8f9], [string], [org.hsqldb.types.TimestampData@5c0b1d5d]]]
[2020-07-30 19:06:17,62] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:17,62] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:17,62] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,62] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:17,62] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | status |      | string | 2020-07-30 19:06:13.05... |
[2020-07-30 19:06:17,62] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:17,62] [debug] Execution of prepared update took 8ms
[2020-07-30 19:06:17,63] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:17,63] [debug] Executing prepared update: HikariProxyPreparedStatement@246879458 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5eeb44f4[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [labels:cromwell-workflow-id], [javax.sql.rowset.serial.SerialClob@8f4c8bf3], [string], [org.hsqldb.types.TimestampData@5baa9545]]]
[2020-07-30 19:06:17,63] [debug] Executing prepared update: HikariProxyPreparedStatement@246879458 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5eeb44f4[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [labels:cromwell-workflow-id], [javax.sql.rowset.serial.SerialClob@8f4c8bf3], [string], [org.hsqldb.types.TimestampData@5baa9545]]]
[2020-07-30 19:06:17,63] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,63] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,63] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,63] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,63] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | labels:cromwell-workfl... |      | string | 2020-07-30 19:06:13.07... |
[2020-07-30 19:06:17,63] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,63] [debug] Execution of prepared update took 7ms
[2020-07-30 19:06:17,63] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:17,63] [debug] Executing prepared update: HikariProxyPreparedStatement@124801978 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@67bc1ff1[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@6f6dd8f9], [string], [org.hsqldb.types.TimestampData@58bc323d]]]
[2020-07-30 19:06:17,63] [debug] Executing prepared update: HikariProxyPreparedStatement@124801978 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@67bc1ff1[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@6f6dd8f9], [string], [org.hsqldb.types.TimestampData@58bc323d]]]
[2020-07-30 19:06:17,63] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:17,63] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:17,63] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,63] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:17,63] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | status |      | string | 2020-07-30 19:06:13.12... |
[2020-07-30 19:06:17,63] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:17,64] [debug] Execution of prepared update took 6ms
[2020-07-30 19:06:17,64] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:17,64] [debug] Executing prepared update: HikariProxyPreparedStatement@891191237 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3386b44[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [start], [javax.sql.rowset.serial.SerialClob@5e50a694], [string], [org.hsqldb.types.TimestampData@563ddd05]]]
[2020-07-30 19:06:17,64] [debug] Executing prepared update: HikariProxyPreparedStatement@891191237 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3386b44[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [start], [javax.sql.rowset.serial.SerialClob@5e50a694], [string], [org.hsqldb.types.TimestampData@563ddd05]]]
[2020-07-30 19:06:17,64] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:17,64] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:17,64] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,64] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:17,64] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | start  |      | string | 2020-07-30 19:06:13.15... |
[2020-07-30 19:06:17,64] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:17,65] [debug] Execution of prepared update took 7ms
[2020-07-30 19:06:17,65] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:17,65] [debug] Executing prepared update: HikariProxyPreparedStatement@934462834 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@325aad00[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@55557dc5]]]
[2020-07-30 19:06:17,65] [debug] Executing prepared update: HikariProxyPreparedStatement@934462834 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@325aad00[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@55557dc5]]]
[2020-07-30 19:06:17,65] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:17,65] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:17,65] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,65] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:17,65] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | status |      | string | 2020-07-30 19:06:13.17... |
[2020-07-30 19:06:17,65] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:17,66] [debug] Execution of prepared update took 7ms
[2020-07-30 19:06:17,66] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:17,66] [debug] Executing prepared update: HikariProxyPreparedStatement@825639931 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7710ea8b[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [labels:cromwell-workflow-id], [javax.sql.rowset.serial.SerialClob@8f4c8bf3], [string], [org.hsqldb.types.TimestampData@547f028d]]]
[2020-07-30 19:06:17,66] [debug] Executing prepared update: HikariProxyPreparedStatement@825639931 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7710ea8b[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [labels:cromwell-workflow-id], [javax.sql.rowset.serial.SerialClob@8f4c8bf3], [string], [org.hsqldb.types.TimestampData@547f028d]]]
[2020-07-30 19:06:17,66] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,66] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,66] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,66] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,66] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | labels:cromwell-workfl... |      | string | 2020-07-30 19:06:13.19... |
[2020-07-30 19:06:17,66] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,67] [debug] Execution of prepared update took 8ms
[2020-07-30 19:06:17,67] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:17,67] [debug] Executing prepared update: HikariProxyPreparedStatement@2010844299 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@56e3da70[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowName], [javax.sql.rowset.serial.SerialClob@beedcc2a], [string], [org.hsqldb.types.TimestampData@6751acf6]]]
[2020-07-30 19:06:17,67] [debug] Executing prepared update: HikariProxyPreparedStatement@2010844299 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@56e3da70[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowName], [javax.sql.rowset.serial.SerialClob@beedcc2a], [string], [org.hsqldb.types.TimestampData@6751acf6]]]
[2020-07-30 19:06:17,67] [debug] /---------------------------+---------+---------+---------+--------------+------+--------+---------------------------\
[2020-07-30 19:06:17,67] [debug] | 1                         | 2       | 3       | 4       | 5            | 6    | 7      | 8                         |
[2020-07-30 19:06:17,67] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String       | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,67] [debug] |---------------------------+---------+---------+---------+--------------+------+--------+---------------------------|
[2020-07-30 19:06:17,67] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | workflowName |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,67] [debug] \---------------------------+---------+---------+---------+--------------+------+--------+---------------------------/
[2020-07-30 19:06:17,68] [debug] Execution of prepared update took 6ms
[2020-07-30 19:06:17,68] [debug] Source:
| TableExpansion
|   table s2: Table SUMMARY_QUEUE_ENTRY
|   columns: TypeMapping
|     0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,68] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:17,68] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table SUMMARY_QUEUE_ENTRY
|   columns: TypeMapping
|     0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,68] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:17,68] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(Long')]
|   from s5: Insert allFields=[METADATA_JOURNAL_ID] : (Long')
|     table s6: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (Long')
|       1: Path s6.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: InsertColumn METADATA_JOURNAL_ID : Long'
|       0: Path s5._1 : Long'

[2020-07-30 19:06:17,68] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[METADATA_JOURNAL_ID] : (Long')
|   table s6: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (Long')
|     1: Path s6.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,68] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,68] [debug] Compiled server-side to:
| CompiledStatement "insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)" : (Long')

[2020-07-30 19:06:17,68] [debug] After phase codeGen:
| ResultSetMapping : Vector[(Long')]
|   from s5: CompiledStatement "insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)" : (Long')
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,68] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:17,68] [debug]       assignUniqueSymbols:    0.596022 ms
[2020-07-30 19:06:17,68] [debug]                inferTypes:    0.148596 ms
[2020-07-30 19:06:17,69] [debug]            insertCompiler:    0.774579 ms
[2020-07-30 19:06:17,69] [debug]                   codeGen:    1.311902 ms
[2020-07-30 19:06:17,69] [debug]                     TOTAL:    2.831099 ms
[2020-07-30 19:06:17,69] [debug] #5: MultiInsertAction [insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)]
[2020-07-30 19:06:17,69] [debug] Preparing statement: insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9041]]]
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9041]]]
[2020-07-30 19:06:17,69] [debug] /------\
[2020-07-30 19:06:17,69] [debug] | 1    |
[2020-07-30 19:06:17,69] [debug] | Long |
[2020-07-30 19:06:17,69] [debug] |------|
[2020-07-30 19:06:17,69] [debug] | 9041 |
[2020-07-30 19:06:17,69] [debug] \------/
[2020-07-30 19:06:17,69] [debug] Execution of batch insert took 73µs
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9042]]]
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9042]]]
[2020-07-30 19:06:17,69] [debug] /------\
[2020-07-30 19:06:17,69] [debug] | 1    |
[2020-07-30 19:06:17,69] [debug] | Long |
[2020-07-30 19:06:17,69] [debug] |------|
[2020-07-30 19:06:17,69] [debug] | 9042 |
[2020-07-30 19:06:17,69] [debug] \------/
[2020-07-30 19:06:17,69] [debug] Execution of batch insert took 14µs
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9043]]]
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9043]]]
[2020-07-30 19:06:17,69] [debug] /------\
[2020-07-30 19:06:17,69] [debug] | 1    |
[2020-07-30 19:06:17,69] [debug] | Long |
[2020-07-30 19:06:17,69] [debug] |------|
[2020-07-30 19:06:17,69] [debug] | 9043 |
[2020-07-30 19:06:17,69] [debug] \------/
[2020-07-30 19:06:17,69] [debug] Execution of batch insert took 13µs
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9044]]]
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9044]]]
[2020-07-30 19:06:17,69] [debug] /------\
[2020-07-30 19:06:17,69] [debug] | 1    |
[2020-07-30 19:06:17,69] [debug] | Long |
[2020-07-30 19:06:17,69] [debug] |------|
[2020-07-30 19:06:17,69] [debug] | 9044 |
[2020-07-30 19:06:17,69] [debug] \------/
[2020-07-30 19:06:17,69] [debug] Execution of batch insert took 13µs
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9045]]]
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9045]]]
[2020-07-30 19:06:17,69] [debug] /------\
[2020-07-30 19:06:17,69] [debug] | 1    |
[2020-07-30 19:06:17,69] [debug] | Long |
[2020-07-30 19:06:17,69] [debug] |------|
[2020-07-30 19:06:17,69] [debug] | 9045 |
[2020-07-30 19:06:17,69] [debug] \------/
[2020-07-30 19:06:17,69] [debug] Execution of batch insert took 12µs
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9046]]]
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9046]]]
[2020-07-30 19:06:17,69] [debug] /------\
[2020-07-30 19:06:17,69] [debug] | 1    |
[2020-07-30 19:06:17,69] [debug] | Long |
[2020-07-30 19:06:17,69] [debug] |------|
[2020-07-30 19:06:17,69] [debug] | 9046 |
[2020-07-30 19:06:17,69] [debug] \------/
[2020-07-30 19:06:17,69] [debug] Execution of batch insert took 12µs
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9047]]]
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9047]]]
[2020-07-30 19:06:17,69] [debug] /------\
[2020-07-30 19:06:17,69] [debug] | 1    |
[2020-07-30 19:06:17,69] [debug] | Long |
[2020-07-30 19:06:17,69] [debug] |------|
[2020-07-30 19:06:17,69] [debug] | 9047 |
[2020-07-30 19:06:17,69] [debug] \------/
[2020-07-30 19:06:17,69] [debug] Execution of batch insert took 11µs
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9048]]]
[2020-07-30 19:06:17,69] [debug] Executing batch insert: HikariProxyPreparedStatement@543209817 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@bd8695e[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9048]]]
[2020-07-30 19:06:17,69] [debug] /------\
[2020-07-30 19:06:17,69] [debug] | 1    |
[2020-07-30 19:06:17,69] [debug] | Long |
[2020-07-30 19:06:17,69] [debug] |------|
[2020-07-30 19:06:17,69] [debug] | 9048 |
[2020-07-30 19:06:17,69] [debug] \------/
[2020-07-30 19:06:17,69] [debug] Execution of batch insert took 12µs
[2020-07-30 19:06:17,69] [debug] Execution of batch took 367µs
[2020-07-30 19:06:17,70] [debug] #6: Commit
[2020-07-30 19:06:17,70] [debug] #7: SetTransactionIsolation
[2020-07-30 19:06:17,70] [debug] #8: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:17,71] [debug] Source:
| TableExpansion
|   table s2: Table METADATA_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s2.CALL_FQN : Option[String']
|       3: Path s2.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s2.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s2.METADATA_KEY : String'
|       6: Path s2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s2.METADATA_VALUE_TYPE : Option[String']
|       8: Path s2.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply
|         0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,71] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:17,71] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table METADATA_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s3.CALL_FQN : Option[String']
|       3: Path s3.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s3.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s3.METADATA_KEY : String'
|       6: Path s3.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s3.METADATA_VALUE_TYPE : Option[String']
|       8: Path s3.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply
|         0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,71] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:17,71] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')]
|   from s5: Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FQN, JOB_SCATTER_INDEX, JOB_RETRY_ATTEMPT, METADATA_KEY, METADATA_VALUE, METADATA_VALUE_TYPE, METADATA_TIMESTAMP, METADATA_JOURNAL_ID] : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|     table s6: Table METADATA_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|       1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s6.CALL_FQN : Option[String']
|       3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s6.METADATA_KEY : String'
|       6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s6.METADATA_VALUE_TYPE : Option[String']
|       8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: InsertColumn WORKFLOW_EXECUTION_UUID : String'
|         0: Path s5._1 : String'
|       2: InsertColumn CALL_FQN : Option[String']
|         0: Path s5._2 : Option[String']
|       3: InsertColumn JOB_SCATTER_INDEX : Option[Int']
|         0: Path s5._3 : Option[Int']
|       4: InsertColumn JOB_RETRY_ATTEMPT : Option[Int']
|         0: Path s5._4 : Option[Int']
|       5: InsertColumn METADATA_KEY : String'
|         0: Path s5._5 : String'
|       6: InsertColumn METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         0: Path s5._6 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: InsertColumn METADATA_VALUE_TYPE : Option[String']
|         0: Path s5._7 : Option[String']
|       8: InsertColumn METADATA_TIMESTAMP : java.sql.Timestamp'
|         0: Path s5._8 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: InsertColumn METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:17,71] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FQN, JOB_SCATTER_INDEX, JOB_RETRY_ATTEMPT, METADATA_KEY, METADATA_VALUE, METADATA_VALUE_TYPE, METADATA_TIMESTAMP, METADATA_JOURNAL_ID] : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|   table s6: Table METADATA_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|     1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|     2: Path s6.CALL_FQN : Option[String']
|     3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|     4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|     5: Path s6.METADATA_KEY : String'
|     6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|     7: Path s6.METADATA_VALUE_TYPE : Option[String']
|     8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:17,71] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|     3: OptionResultConverter$mcI$sp idx=3 : Int'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=METADATA_KEY : String'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|     8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=METADATA_TIMESTAMP : java.sql.Timestamp'
|     9: CompoundResultConverter

[2020-07-30 19:06:17,71] [debug] Compiled server-side to:
| CompiledStatement "insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')

[2020-07-30 19:06:17,72] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')]
|   from s5: CompiledStatement "insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|   map: CompiledMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|         3: OptionResultConverter$mcI$sp idx=3 : Int'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=METADATA_KEY : String'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|         8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: CompoundResultConverter

[2020-07-30 19:06:17,72] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:17,72] [debug]       assignUniqueSymbols:    1.422779 ms
[2020-07-30 19:06:17,72] [debug]                inferTypes:    0.300451 ms
[2020-07-30 19:06:17,72] [debug]            insertCompiler:    3.707501 ms
[2020-07-30 19:06:17,72] [debug]                   codeGen:    3.556394 ms
[2020-07-30 19:06:17,72] [debug]                     TOTAL:    8.987125 ms
[2020-07-30 19:06:17,72] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: sequence
          1: MultiInsertAction [insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)]
[2020-07-30 19:06:17,72] [debug] Preparing statement: insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:17,72] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs], [null], [null], [org.hsqldb.types.TimestampData@5c04bbcd]]]
[2020-07-30 19:06:17,72] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs], [null], [null], [org.hsqldb.types.TimestampData@5c04bbcd]]]
[2020-07-30 19:06:17,72] [debug] /---------------------------+---------+---------+---------+--------+------+---------+---------------------------\
[2020-07-30 19:06:17,72] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7       | 8                         |
[2020-07-30 19:06:17,72] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:17,72] [debug] |---------------------------+---------+---------+---------+--------+------+---------+---------------------------|
[2020-07-30 19:06:17,72] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs | NULL | NULL    | 2020-07-30 19:06:13.05... |
[2020-07-30 19:06:17,72] [debug] \---------------------------+---------+---------+---------+--------+------+---------+---------------------------/
[2020-07-30 19:06:17,72] [debug] Execution of batch insert took 23µs
[2020-07-30 19:06:17,72] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [outputs], [null], [null], [org.hsqldb.types.TimestampData@5c04d2dd]]]
[2020-07-30 19:06:17,72] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [outputs], [null], [null], [org.hsqldb.types.TimestampData@5c04d2dd]]]
[2020-07-30 19:06:17,72] [debug] /---------------------------+---------+---------+---------+---------+------+---------+---------------------------\
[2020-07-30 19:06:17,72] [debug] | 1                         | 2       | 3       | 4       | 5       | 6    | 7       | 8                         |
[2020-07-30 19:06:17,72] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String  | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:17,72] [debug] |---------------------------+---------+---------+---------+---------+------+---------+---------------------------|
[2020-07-30 19:06:17,72] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | outputs | NULL | NULL    | 2020-07-30 19:06:13.05... |
[2020-07-30 19:06:17,72] [debug] \---------------------------+---------+---------+---------+---------+------+---------+---------------------------/
[2020-07-30 19:06:17,72] [debug] Execution of batch insert took 14µs
[2020-07-30 19:06:17,72] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:workflow], [null], [string], [org.hsqldb.types.TimestampData@5c0aaf0d]]]
[2020-07-30 19:06:17,72] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:workflow], [null], [string], [org.hsqldb.types.TimestampData@5c0aaf0d]]]
[2020-07-30 19:06:17,72] [debug] /---------------------------+---------+---------+---------+-------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,72] [debug] | 1                         | 2       | 3       | 4       | 5                       | 6    | 7      | 8                         |
[2020-07-30 19:06:17,72] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                  | CLOB | String | Timestamp                 |
[2020-07-30 19:06:17,72] [debug] |---------------------------+---------+---------+---------+-------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,73] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | submittedFiles:workflow | NULL | string | 2020-07-30 19:06:13.05... |
[2020-07-30 19:06:17,73] [debug] \---------------------------+---------+---------+---------+-------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,73] [debug] Execution of batch insert took 13µs
[2020-07-30 19:06:17,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:workflowUrl], [javax.sql.rowset.serial.SerialClob@1fb7d88b], [string], [org.hsqldb.types.TimestampData@5c092c35]]]
[2020-07-30 19:06:17,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:workflowUrl], [javax.sql.rowset.serial.SerialClob@1fb7d88b], [string], [org.hsqldb.types.TimestampData@5c092c35]]]
[2020-07-30 19:06:17,73] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,73] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,73] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,73] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,73] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | submittedFiles:workflo... |      | string | 2020-07-30 19:06:13.05... |
[2020-07-30 19:06:17,73] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,74] [debug] Execution of batch insert took 13ms
[2020-07-30 19:06:17,74] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:root], [null], [string], [org.hsqldb.types.TimestampData@5c09a4ed]]]
[2020-07-30 19:06:17,74] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:root], [null], [string], [org.hsqldb.types.TimestampData@5c09a4ed]]]
[2020-07-30 19:06:17,74] [debug] /---------------------------+---------+---------+---------+---------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,74] [debug] | 1                         | 2       | 3       | 4       | 5                   | 6    | 7      | 8                         |
[2020-07-30 19:06:17,74] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String              | CLOB | String | Timestamp                 |
[2020-07-30 19:06:17,74] [debug] |---------------------------+---------+---------+---------+---------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,74] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | submittedFiles:root | NULL | string | 2020-07-30 19:06:13.05... |
[2020-07-30 19:06:17,74] [debug] \---------------------------+---------+---------+---------+---------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,74] [debug] Execution of batch insert took 15µs
[2020-07-30 19:06:17,74] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:inputs], [javax.sql.rowset.serial.SerialClob@c6b14654], [string], [org.hsqldb.types.TimestampData@5c080e9d]]]
[2020-07-30 19:06:17,74] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:inputs], [javax.sql.rowset.serial.SerialClob@c6b14654], [string], [org.hsqldb.types.TimestampData@5c080e9d]]]
[2020-07-30 19:06:17,74] [debug] /---------------------------+---------+---------+---------+-----------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,74] [debug] | 1                         | 2       | 3       | 4       | 5                     | 6    | 7      | 8                         |
[2020-07-30 19:06:17,74] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,74] [debug] |---------------------------+---------+---------+---------+-----------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,74] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | submittedFiles:inputs |      | string | 2020-07-30 19:06:13.05... |
[2020-07-30 19:06:17,74] [debug] \---------------------------+---------+---------+---------+-----------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,75] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:17,75] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:options], [javax.sql.rowset.serial.SerialClob@4392cbd6], [string], [org.hsqldb.types.TimestampData@5c7a3f95]]]
[2020-07-30 19:06:17,75] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:options], [javax.sql.rowset.serial.SerialClob@4392cbd6], [string], [org.hsqldb.types.TimestampData@5c7a3f95]]]
[2020-07-30 19:06:17,75] [debug] /---------------------------+---------+---------+---------+------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,75] [debug] | 1                         | 2       | 3       | 4       | 5                      | 6    | 7      | 8                         |
[2020-07-30 19:06:17,75] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                 | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,75] [debug] |---------------------------+---------+---------+---------+------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,75] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | submittedFiles:options |      | string | 2020-07-30 19:06:13.05... |
[2020-07-30 19:06:17,75] [debug] \---------------------------+---------+---------+---------+------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,76] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,76] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:labels], [javax.sql.rowset.serial.SerialClob@484b02], [string], [org.hsqldb.types.TimestampData@5c790dc5]]]
[2020-07-30 19:06:17,76] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:labels], [javax.sql.rowset.serial.SerialClob@484b02], [string], [org.hsqldb.types.TimestampData@5c790dc5]]]
[2020-07-30 19:06:17,76] [debug] /---------------------------+---------+---------+---------+-----------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,76] [debug] | 1                         | 2       | 3       | 4       | 5                     | 6    | 7      | 8                         |
[2020-07-30 19:06:17,76] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,76] [debug] |---------------------------+---------+---------+---------+-----------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,76] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | submittedFiles:labels |      | string | 2020-07-30 19:06:13.05... |
[2020-07-30 19:06:17,76] [debug] \---------------------------+---------+---------+---------+-----------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,77] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,77] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[977108749]:description], [javax.sql.rowset.serial.SerialClob@b63c14bb], [string], [org.hsqldb.types.TimestampData@5ad29d9d]]]
[2020-07-30 19:06:17,77] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[977108749]:description], [javax.sql.rowset.serial.SerialClob@b63c14bb], [string], [org.hsqldb.types.TimestampData@5ad29d9d]]]
[2020-07-30 19:06:17,77] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,77] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,77] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,77] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,77] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | workflowProcessingEven... |      | string | 2020-07-30 19:06:13.09... |
[2020-07-30 19:06:17,77] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,78] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,78] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[977108749]:cromwellId], [javax.sql.rowset.serial.SerialClob@b4eb6678], [string], [org.hsqldb.types.TimestampData@5ad2c3e5]]]
[2020-07-30 19:06:17,78] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[977108749]:cromwellId], [javax.sql.rowset.serial.SerialClob@b4eb6678], [string], [org.hsqldb.types.TimestampData@5ad2c3e5]]]
[2020-07-30 19:06:17,78] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,78] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,78] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,78] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,78] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | workflowProcessingEven... |      | string | 2020-07-30 19:06:13.09... |
[2020-07-30 19:06:17,78] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,79] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,79] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[977108749]:timestamp], [javax.sql.rowset.serial.SerialClob@5cd6e633], [string], [org.hsqldb.types.TimestampData@5ad1d22d]]]
[2020-07-30 19:06:17,79] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[977108749]:timestamp], [javax.sql.rowset.serial.SerialClob@5cd6e633], [string], [org.hsqldb.types.TimestampData@5ad1d22d]]]
[2020-07-30 19:06:17,79] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,79] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,79] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,79] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,79] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | workflowProcessingEven... |      | string | 2020-07-30 19:06:13.09... |
[2020-07-30 19:06:17,79] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,79] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:17,80] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[977108749]:cromwellVersion], [javax.sql.rowset.serial.SerialClob@275f7d], [string], [org.hsqldb.types.TimestampData@5ad1e49d]]]
[2020-07-30 19:06:17,80] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[977108749]:cromwellVersion], [javax.sql.rowset.serial.SerialClob@275f7d], [string], [org.hsqldb.types.TimestampData@5ad1e49d]]]
[2020-07-30 19:06:17,80] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,80] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,80] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,80] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,80] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | workflowProcessingEven... |      | string | 2020-07-30 19:06:13.09... |
[2020-07-30 19:06:17,80] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,80] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,81] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:workflow], [javax.sql.rowset.serial.SerialClob@d767e6e6], [string], [org.hsqldb.types.TimestampData@53fc7b15]]]
[2020-07-30 19:06:17,81] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [submittedFiles:workflow], [javax.sql.rowset.serial.SerialClob@d767e6e6], [string], [org.hsqldb.types.TimestampData@53fc7b15]]]
[2020-07-30 19:06:17,81] [debug] /---------------------------+---------+---------+---------+-------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,81] [debug] | 1                         | 2       | 3       | 4       | 5                       | 6    | 7      | 8                         |
[2020-07-30 19:06:17,81] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                  | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,81] [debug] |---------------------------+---------+---------+---------+-------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,81] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | submittedFiles:workflow |      | string | 2020-07-30 19:06:13.21... |
[2020-07-30 19:06:17,81] [debug] \---------------------------+---------+---------+---------+-------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,82] [debug] Execution of batch insert took 15ms
[2020-07-30 19:06:17,82] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [actualWorkflowLanguage], [javax.sql.rowset.serial.SerialClob@69f50bd], [string], [org.hsqldb.types.TimestampData@51a21135]]]
[2020-07-30 19:06:17,82] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [actualWorkflowLanguage], [javax.sql.rowset.serial.SerialClob@69f50bd], [string], [org.hsqldb.types.TimestampData@51a21135]]]
[2020-07-30 19:06:17,82] [debug] /---------------------------+---------+---------+---------+------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,82] [debug] | 1                         | 2       | 3       | 4       | 5                      | 6    | 7      | 8                         |
[2020-07-30 19:06:17,82] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                 | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,82] [debug] |---------------------------+---------+---------+---------+------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,82] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | actualWorkflowLanguage |      | string | 2020-07-30 19:06:13.24... |
[2020-07-30 19:06:17,82] [debug] \---------------------------+---------+---------+---------+------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,83] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [actualWorkflowLanguageVersion], [javax.sql.rowset.serial.SerialClob@47d6a51], [string], [org.hsqldb.types.TimestampData@51a2473d]]]
[2020-07-30 19:06:17,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [actualWorkflowLanguageVersion], [javax.sql.rowset.serial.SerialClob@47d6a51], [string], [org.hsqldb.types.TimestampData@51a2473d]]]
[2020-07-30 19:06:17,83] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,83] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,83] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,83] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,83] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | actualWorkflowLanguage... |      | string | 2020-07-30 19:06:13.24... |
[2020-07-30 19:06:17,83] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,84] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,84] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@676ecba6]]]
[2020-07-30 19:06:17,84] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@676ecba6]]]
[2020-07-30 19:06:17,84] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,84] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,84] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,84] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,84] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:gatherBQSRRepor... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,84] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,85] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,85] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_minMapQuality], [null], [null], [org.hsqldb.types.TimestampData@6772c68e]]]
[2020-07-30 19:06:17,85] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_minMapQuality], [null], [null], [org.hsqldb.types.TimestampData@6772c68e]]]
[2020-07-30 19:06:17,85] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,85] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,85] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:17,85] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,85] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_m... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,85] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,85] [debug] Execution of batch insert took 15µs
[2020-07-30 19:06:17,85] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:docker], [javax.sql.rowset.serial.SerialClob@13722914], [string], [org.hsqldb.types.TimestampData@67712ca6]]]
[2020-07-30 19:06:17,85] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:docker], [javax.sql.rowset.serial.SerialClob@13722914], [string], [org.hsqldb.types.TimestampData@67712ca6]]]
[2020-07-30 19:06:17,85] [debug] /---------------------------+---------+---------+---------+---------------+------+--------+---------------------------\
[2020-07-30 19:06:17,85] [debug] | 1                         | 2       | 3       | 4       | 5             | 6    | 7      | 8                         |
[2020-07-30 19:06:17,85] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String        | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,85] [debug] |---------------------------+---------+---------+---------+---------------+------+--------+---------------------------|
[2020-07-30 19:06:17,85] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:docker |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,85] [debug] \---------------------------+---------+---------+---------+---------------+------+--------+---------------------------/
[2020-07-30 19:06:17,86] [debug] Execution of batch insert took 10ms
[2020-07-30 19:06:17,86] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6771438e]]]
[2020-07-30 19:06:17,86] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6771438e]]]
[2020-07-30 19:06:17,86] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,86] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,86] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,86] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,86] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:splitStringToAr... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,86] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,87] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,87] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@67716f26]]]
[2020-07-30 19:06:17,87] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@67716f26]]]
[2020-07-30 19:06:17,87] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,87] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,87] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:17,87] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,87] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:analyzeCovariat... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,87] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,87] [debug] Execution of batch insert took 20µs
[2020-07-30 19:06:17,87] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_modules], [javax.sql.rowset.serial.SerialClob@9487d80], [string], [org.hsqldb.types.TimestampData@67719656]]]
[2020-07-30 19:06:17,87] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_modules], [javax.sql.rowset.serial.SerialClob@9487d80], [string], [org.hsqldb.types.TimestampData@67719656]]]
[2020-07-30 19:06:17,87] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,87] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,87] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,87] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,87] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:realignerTarget... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,87] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,88] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:collectFilesBySample_modules], [javax.sql.rowset.serial.SerialClob@b210c369], [string], [org.hsqldb.types.TimestampData@677185de]]]
[2020-07-30 19:06:17,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:collectFilesBySample_modules], [javax.sql.rowset.serial.SerialClob@b210c369], [string], [org.hsqldb.types.TimestampData@677185de]]]
[2020-07-30 19:06:17,88] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,88] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,88] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,88] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,88] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:collectFilesByS... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,88] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,89] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,89] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6771a9a6]]]
[2020-07-30 19:06:17,89] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6771a9a6]]]
[2020-07-30 19:06:17,89] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,89] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,89] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,89] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,89] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:realignerTarget... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,89] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,90] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,90] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:collectFilesBySample_jobMemory], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6771d0d6]]]
[2020-07-30 19:06:17,90] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:collectFilesBySample_jobMemory], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6771d0d6]]]
[2020-07-30 19:06:17,90] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,90] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,90] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,90] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,90] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:collectFilesByS... |      | int    | 2020-07-30 19:06:14.94495 |
[2020-07-30 19:06:17,90] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,91] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,91] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:collectFilesBySample_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6771c0b6]]]
[2020-07-30 19:06:17,91] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:collectFilesBySample_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6771c0b6]]]
[2020-07-30 19:06:17,91] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,91] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,91] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,91] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,91] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:collectFilesByS... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,91] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[INFO] [07/30/2020 19:06:17.920] [cromwell-system-akka.dispatchers.engine-dispatcher-35] [akka://cromwell-system/user/SingleWorkflowRunnerActor/JobExecutionTokenDispenser] Not triggering log of token queue status. Effective log interval = None
[2020-07-30 19:06:17,92] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,92] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@6771e826]]]
[2020-07-30 19:06:17,92] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@6771e826]]]
[2020-07-30 19:06:17,92] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,92] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,92] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:17,92] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,92] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:indelRealign_ad... | NULL | null   | 2020-07-30 19:06:14.94496 |
[2020-07-30 19:06:17,92] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,92] [debug] Execution of batch insert took 25µs
[2020-07-30 19:06:17,92] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@67701fae]]]
[2020-07-30 19:06:17,92] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@67701fae]]]
[2020-07-30 19:06:17,92] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,92] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,92] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,92] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,92] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:indelRealign_jo... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,92] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,93] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,93] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_recordSeparator], [javax.sql.rowset.serial.SerialClob@18a49], [string], [org.hsqldb.types.TimestampData@67700336]]]
[2020-07-30 19:06:17,93] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_recordSeparator], [javax.sql.rowset.serial.SerialClob@18a49], [string], [org.hsqldb.types.TimestampData@67700336]]]
[2020-07-30 19:06:17,93] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,93] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,93] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,93] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,93] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:splitStringToAr... |      | string | 2020-07-30 19:06:14.94497 |
[2020-07-30 19:06:17,93] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,93] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,94] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_gatkJar], [javax.sql.rowset.serial.SerialClob@91295d18], [string], [org.hsqldb.types.TimestampData@677036be]]]
[2020-07-30 19:06:17,94] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_gatkJar], [javax.sql.rowset.serial.SerialClob@91295d18], [string], [org.hsqldb.types.TimestampData@677036be]]]
[2020-07-30 19:06:17,94] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,94] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,94] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,94] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,94] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:realignerTarget... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,94] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[INFO] [07/30/2020 19:06:17.942] [cromwell-system-akka.dispatchers.engine-dispatcher-35] [akka://cromwell-system/user/SingleWorkflowRunnerActor/JobExecutionTokenDispenser] Assigned new job execution tokens to the following groups: 8b168b0d: 1
[2020-07-30 19:06:17,95] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:17,95] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_knownAlleles[0]], [javax.sql.rowset.serial.SerialClob@7927a35], [string], [org.hsqldb.types.TimestampData@677fcb7e]]]
[2020-07-30 19:06:17,95] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_knownAlleles[0]], [javax.sql.rowset.serial.SerialClob@7927a35], [string], [org.hsqldb.types.TimestampData@677fcb7e]]]
[2020-07-30 19:06:17,96] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,96] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,96] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,96] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,96] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:indelRealign_kn... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,96] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,96] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:17,96] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_modules], [javax.sql.rowset.serial.SerialClob@d0005875], [string], [org.hsqldb.types.TimestampData@677e0d8e]]]
[2020-07-30 19:06:17,96] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_modules], [javax.sql.rowset.serial.SerialClob@d0005875], [string], [org.hsqldb.types.TimestampData@677e0d8e]]]
[2020-07-30 19:06:17,97] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,97] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,97] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,97] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,97] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:indelRealign_mo... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,97] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,98] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:17,98] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@677e2926]]]
[2020-07-30 19:06:17,98] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@677e2926]]]
[2020-07-30 19:06:17,98] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,98] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,98] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,98] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,98] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:splitStringToAr... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,98] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:17,98] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:17,98] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@677e5cae]]]
[2020-07-30 19:06:17,98] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@677e5cae]]]
[2020-07-30 19:06:17,98] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:17,99] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:17,99] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:17,99] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:17,99] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:gatherBQSRRepor... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:17,99] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,00] [debug] Execution of batch insert took 11ms
[2020-07-30 19:06:18,00] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_opticalDuplicatePixelDistance], [javax.sql.rowset.serial.SerialClob@47e530f], [int], [org.hsqldb.types.TimestampData@677e4036]]]
[2020-07-30 19:06:18,00] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_opticalDuplicatePixelDistance], [javax.sql.rowset.serial.SerialClob@47e530f], [int], [org.hsqldb.types.TimestampData@677e4036]]]
[2020-07-30 19:06:18,00] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,00] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,00] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,00] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,00] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_o... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,00] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,01] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:18,01] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:doSplitNCigarReads], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@6743692e]]]
[2020-07-30 19:06:18,01] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:doSplitNCigarReads], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@6743692e]]]
[2020-07-30 19:06:18,01] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:18,01] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:18,01] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String  | Timestamp                 |
[2020-07-30 19:06:18,01] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:18,01] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:doSplitNCigarReads |      | boolean | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,01] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:18,02] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,02] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_modules], [javax.sql.rowset.serial.SerialClob@654a5323], [string], [org.hsqldb.types.TimestampData@6743af56]]]
[2020-07-30 19:06:18,02] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_modules], [javax.sql.rowset.serial.SerialClob@654a5323], [string], [org.hsqldb.types.TimestampData@6743af56]]]
[2020-07-30 19:06:18,02] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,02] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,02] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,02] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,02] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:baseQualityScor... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,02] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,03] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,03] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@6743d6c6]]]
[2020-07-30 19:06:18,03] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@6743d6c6]]]
[2020-07-30 19:06:18,03] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,03] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,03] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,03] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,03] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:indelRealign_ov... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,03] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,04] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:18,04] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_refactorCigarString], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@6743fe76]]]
[2020-07-30 19:06:18,04] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_refactorCigarString], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@6743fe76]]]
[2020-07-30 19:06:18,04] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:18,04] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:18,04] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String  | Timestamp                 |
[2020-07-30 19:06:18,04] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:18,04] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_r... |      | boolean | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,04] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:18,06] [debug] Execution of batch insert took 19ms
[2020-07-30 19:06:18,06] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:collectFilesBySample_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6743edfe]]]
[2020-07-30 19:06:18,06] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:collectFilesBySample_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6743edfe]]]
[2020-07-30 19:06:18,06] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,06] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,06] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,06] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,06] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:collectFilesByS... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,06] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,07] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,07] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_suffix], [javax.sql.rowset.serial.SerialClob@f7ae607c], [string], [org.hsqldb.types.TimestampData@67421146]]]
[2020-07-30 19:06:18,07] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_suffix], [javax.sql.rowset.serial.SerialClob@f7ae607c], [string], [org.hsqldb.types.TimestampData@67421146]]]
[2020-07-30 19:06:18,07] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,07] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,07] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,07] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,07] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:applyBaseQualit... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,07] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,08] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,08] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_markDuplicatesSuffix], [javax.sql.rowset.serial.SerialClob@d8995b6f], [string], [org.hsqldb.types.TimestampData@674204ce]]]
[2020-07-30 19:06:18,08] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_markDuplicatesSuffix], [javax.sql.rowset.serial.SerialClob@d8995b6f], [string], [org.hsqldb.types.TimestampData@674204ce]]]
[2020-07-30 19:06:18,08] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,08] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,08] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,08] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,08] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_m... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,08] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,09] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,09] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_markDuplicatesAdditionalParams], [null], [null], [org.hsqldb.types.TimestampData@67422856]]]
[2020-07-30 19:06:18,09] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_markDuplicatesAdditionalParams], [null], [null], [org.hsqldb.types.TimestampData@67422856]]]
[2020-07-30 19:06:18,09] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,09] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,09] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,09] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,09] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_m... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,09] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,09] [debug] Execution of batch insert took 17µs
[2020-07-30 19:06:18,09] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@67425fde]]]
[2020-07-30 19:06:18,09] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@67425fde]]]
[2020-07-30 19:06:18,09] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,09] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,09] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,09] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,09] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:gatherBQSRRepor... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,09] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,10] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,10] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@67424fbe]]]
[2020-07-30 19:06:18,10] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@67424fbe]]]
[2020-07-30 19:06:18,10] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,10] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,10] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,10] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,10] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:analyzeCovariat... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,10] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,10] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,10] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@67427f1e]]]
[2020-07-30 19:06:18,10] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@67427f1e]]]
[2020-07-30 19:06:18,11] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,11] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,11] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,11] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,11] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:applyBaseQualit... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,11] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,11] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,11] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@674262e6]]]
[2020-07-30 19:06:18,11] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@674262e6]]]
[2020-07-30 19:06:18,11] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,11] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,11] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,11] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,11] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:baseQualityScor... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,11] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,11] [debug] Execution of batch insert took 20µs
[2020-07-30 19:06:18,11] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@67429246]]]
[2020-07-30 19:06:18,11] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@67429246]]]
[2020-07-30 19:06:18,11] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,11] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,11] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,12] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,12] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:baseQualityScor... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,12] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,12] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,12] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674281ce]]]
[2020-07-30 19:06:18,12] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674281ce]]]
[2020-07-30 19:06:18,12] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,12] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,12] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,12] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,12] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:indelRealign_ti... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,12] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,13] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,13] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_modules], [javax.sql.rowset.serial.SerialClob@b210c369], [string], [org.hsqldb.types.TimestampData@6742b1ae]]]
[2020-07-30 19:06:18,13] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_modules], [javax.sql.rowset.serial.SerialClob@b210c369], [string], [org.hsqldb.types.TimestampData@6742b1ae]]]
[2020-07-30 19:06:18,13] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,13] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,13] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,13] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,13] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:splitStringToAr... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,13] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,14] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,14] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_knownIndels[0]], [javax.sql.rowset.serial.SerialClob@7927a35], [string], [org.hsqldb.types.TimestampData@6742e38e]]]
[2020-07-30 19:06:18,14] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_knownIndels[0]], [javax.sql.rowset.serial.SerialClob@7927a35], [string], [org.hsqldb.types.TimestampData@6742e38e]]]
[2020-07-30 19:06:18,14] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,14] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,14] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,14] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,14] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:realignerTarget... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,14] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,15] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:18,15] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:doFilter], [javax.sql.rowset.serial.SerialClob@155fa2e], [boolean], [org.hsqldb.types.TimestampData@674102ce]]]
[2020-07-30 19:06:18,15] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:doFilter], [javax.sql.rowset.serial.SerialClob@155fa2e], [boolean], [org.hsqldb.types.TimestampData@674102ce]]]
[2020-07-30 19:06:18,15] [debug] /---------------------------+---------+---------+---------+-----------------+------+---------+---------------------------\
[2020-07-30 19:06:18,15] [debug] | 1                         | 2       | 3       | 4       | 5               | 6    | 7       | 8                         |
[2020-07-30 19:06:18,15] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String          | Clob | String  | Timestamp                 |
[2020-07-30 19:06:18,15] [debug] |---------------------------+---------+---------+---------+-----------------+------+---------+---------------------------|
[2020-07-30 19:06:18,15] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:doFilter |      | boolean | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,15] [debug] \---------------------------+---------+---------+---------+-----------------+------+---------+---------------------------/
[2020-07-30 19:06:18,16] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:18,16] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@67413656]]]
[2020-07-30 19:06:18,16] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@67413656]]]
[2020-07-30 19:06:18,16] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,16] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,16] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,16] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,16] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:mergeSplitByInt... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,16] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,17] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,17] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674125de]]]
[2020-07-30 19:06:18,17] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674125de]]]
[2020-07-30 19:06:18,17] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,17] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,17] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,17] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,17] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:applyBaseQualit... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,17] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,18] [debug] Execution of batch insert took 11ms
[2020-07-30 19:06:18,18] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:doMarkDuplicates], [javax.sql.rowset.serial.SerialClob@155fa2e], [boolean], [org.hsqldb.types.TimestampData@674155be]]]
[2020-07-30 19:06:18,18] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:doMarkDuplicates], [javax.sql.rowset.serial.SerialClob@155fa2e], [boolean], [org.hsqldb.types.TimestampData@674155be]]]
[2020-07-30 19:06:18,18] [debug] /---------------------------+---------+---------+---------+-------------------------+------+---------+---------------------------\
[2020-07-30 19:06:18,18] [debug] | 1                         | 2       | 3       | 4       | 5                       | 6    | 7       | 8                         |
[2020-07-30 19:06:18,18] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                  | Clob | String  | Timestamp                 |
[2020-07-30 19:06:18,18] [debug] |---------------------------+---------+---------+---------+-------------------------+------+---------+---------------------------|
[2020-07-30 19:06:18,18] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:doMarkDuplicates |      | boolean | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,18] [debug] \---------------------------+---------+---------+---------+-------------------------+------+---------+---------------------------/
[2020-07-30 19:06:18,18] [debug] Requesting connection: curAllocated=0 idleQueues.size=0 waitQueue.size=0 maxWaitQueueLimit=256 closed=false
[2020-07-30 19:06:18,19] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:18,19] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@67417906]]]
[2020-07-30 19:06:18,19] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@67417906]]]
[2020-07-30 19:06:18,19] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,19] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,19] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,19] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,19] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:analyzeCovariat... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,19] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,19] [debug] Active connection not found. Creating new one. curAllocated=0 idleQueues.size=0 waitQueue.size=0 maxWaitQueueLimit=256 closed=false
[2020-07-30 19:06:18,20] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,20] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_modules], [javax.sql.rowset.serial.SerialClob@654a5323], [string], [org.hsqldb.types.TimestampData@67416c8e]]]
[2020-07-30 19:06:18,20] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_modules], [javax.sql.rowset.serial.SerialClob@654a5323], [string], [org.hsqldb.types.TimestampData@67416c8e]]]
[2020-07-30 19:06:18,20] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,20] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,20] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,20] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,20] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:analyzeCovariat... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,20] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,21] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,21] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@67419016]]]
[2020-07-30 19:06:18,21] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@67419016]]]
[2020-07-30 19:06:18,21] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,21] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,21] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,21] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,21] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:gatherBQSRRepor... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,21] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,21] [debug] Execution of batch insert took 24µs
[2020-07-30 19:06:18,21] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_splitNCigarReadsAdditionalParams], [null], [null], [org.hsqldb.types.TimestampData@674183f6]]]
[2020-07-30 19:06:18,21] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_splitNCigarReadsAdditionalParams], [null], [null], [org.hsqldb.types.TimestampData@674183f6]]]
[2020-07-30 19:06:18,21] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,21] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,21] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,21] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,21] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_s... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,21] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,21] [debug] Execution of batch insert took 42µs
[2020-07-30 19:06:18,21] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@6741b77e]]]
[2020-07-30 19:06:18,21] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@6741b77e]]]
[2020-07-30 19:06:18,21] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,21] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,21] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,21] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,21] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:mergeSplitByInt... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,21] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,22] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:18,22] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_splitNCigarReadsSuffix], [javax.sql.rowset.serial.SerialClob@c769b0cc], [string], [org.hsqldb.types.TimestampData@6741a6de]]]
[2020-07-30 19:06:18,22] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_splitNCigarReadsSuffix], [javax.sql.rowset.serial.SerialClob@c769b0cc], [string], [org.hsqldb.types.TimestampData@6741a6de]]]
[2020-07-30 19:06:18,22] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,22] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,22] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,22] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,22] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_s... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,22] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,23] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,23] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@6741caa6]]]
[2020-07-30 19:06:18,23] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@6741caa6]]]
[2020-07-30 19:06:18,23] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+-------------------------\
[2020-07-30 19:06:18,23] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                       |
[2020-07-30 19:06:18,23] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp               |
[2020-07-30 19:06:18,23] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+-------------------------|
[2020-07-30 19:06:18,23] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:applyBaseQualit... | NULL | null   | 2020-07-30 19:06:14.946 |
[2020-07-30 19:06:18,23] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+-------------------------/
[2020-07-30 19:06:18,23] [debug] Execution of batch insert took 23µs
[2020-07-30 19:06:18,23] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@6741fa06]]]
[2020-07-30 19:06:18,23] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@6741fa06]]]
[2020-07-30 19:06:18,23] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,23] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,23] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,23] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,23] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:mergeSplitByInt... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,23] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,23] [debug] Execution of batch insert took 48µs
[2020-07-30 19:06:18,23] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:outputIdentifier], [javax.sql.rowset.serial.SerialClob@d20e7d29], [string], [org.hsqldb.types.TimestampData@67444afe]]]
[2020-07-30 19:06:18,23] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:outputIdentifier], [javax.sql.rowset.serial.SerialClob@d20e7d29], [string], [org.hsqldb.types.TimestampData@67444afe]]]
[2020-07-30 19:06:18,23] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,23] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,23] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,23] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,23] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:inputGroups[0]:... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,23] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,27] [debug] Execution of batch insert took 33ms
[2020-07-30 19:06:18,27] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[0]:bam], [javax.sql.rowset.serial.SerialClob@4e6f5f9a], [string], [org.hsqldb.types.TimestampData@6744fb46]]]
[2020-07-30 19:06:18,27] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[0]:bam], [javax.sql.rowset.serial.SerialClob@4e6f5f9a], [string], [org.hsqldb.types.TimestampData@6744fb46]]]
[2020-07-30 19:06:18,27] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,27] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,27] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,27] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,27] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:inputGroups[0]:... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,27] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,28] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:18,28] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[0]:bamIndex], [javax.sql.rowset.serial.SerialClob@34c828b6], [string], [org.hsqldb.types.TimestampData@6744e69e]]]
[2020-07-30 19:06:18,28] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[0]:bamIndex], [javax.sql.rowset.serial.SerialClob@34c828b6], [string], [org.hsqldb.types.TimestampData@6744e69e]]]
[2020-07-30 19:06:18,28] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,28] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,28] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,28] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,28] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:inputGroups[0]:... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,28] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,29] [debug] Execution of batch insert took 13ms
[2020-07-30 19:06:18,29] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[1]:bam], [javax.sql.rowset.serial.SerialClob@de0c7367], [string], [org.hsqldb.types.TimestampData@674b31be]]]
[2020-07-30 19:06:18,29] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[1]:bam], [javax.sql.rowset.serial.SerialClob@de0c7367], [string], [org.hsqldb.types.TimestampData@674b31be]]]
[2020-07-30 19:06:18,29] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,29] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,29] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,29] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,29] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:inputGroups[0]:... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,29] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,30] [debug] Starting up.
[2020-07-30 19:06:18,30] [debug] Stage ByteBufferHead sending inbound command: Connected
[2020-07-30 19:06:18,30] [debug] Starting up.
[2020-07-30 19:06:18,30] [debug] Stage SSLStage sending inbound command: Connected
[2020-07-30 19:06:18,30] [debug] Stage started up. Beginning read buffering
[2020-07-30 19:06:18,30] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:18,30] [debug] pausing
[2020-07-30 19:06:18,30] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:18,30] [debug] #3: StartTransaction
[2020-07-30 19:06:18,30] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:18,30] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:18,30] [debug] Executing prepared statement: HikariProxyPreparedStatement@1637970450 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@627bd244[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:18,30] [debug] Executing prepared statement: HikariProxyPreparedStatement@1637970450 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@627bd244[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:18,30] [debug] /------\
[2020-07-30 19:06:18,30] [debug] | 1    |
[2020-07-30 19:06:18,30] [debug] | Long |
[2020-07-30 19:06:18,30] [debug] |------|
[2020-07-30 19:06:18,30] [debug] | 5000 |
[2020-07-30 19:06:18,30] [debug] \------/
[2020-07-30 19:06:18,30] [debug] Execution of prepared statement took 627µs
[2020-07-30 19:06:18,30] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:18,30] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[1]:bamIndex], [javax.sql.rowset.serial.SerialClob@c4ec8e03], [string], [org.hsqldb.types.TimestampData@674b592e]]]
[2020-07-30 19:06:18,30] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[1]:bamIndex], [javax.sql.rowset.serial.SerialClob@c4ec8e03], [string], [org.hsqldb.types.TimestampData@674b592e]]]
[2020-07-30 19:06:18,31] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,31] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,31] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,31] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,31] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:inputGroups[0]:... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,31] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,32] [debug] Execution of batch insert took 14ms
[2020-07-30 19:06:18,32] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[2]:bam], [javax.sql.rowset.serial.SerialClob@7d5d8e9], [string], [org.hsqldb.types.TimestampData@674b7c16]]]
[2020-07-30 19:06:18,32] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[2]:bam], [javax.sql.rowset.serial.SerialClob@7d5d8e9], [string], [org.hsqldb.types.TimestampData@674b7c16]]]
[2020-07-30 19:06:18,32] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,32] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,32] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,32] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,32] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:inputGroups[0]:... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,32] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,33] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,33] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[2]:bamIndex], [javax.sql.rowset.serial.SerialClob@7d5c9e5], [string], [org.hsqldb.types.TimestampData@674b6786]]]
[2020-07-30 19:06:18,33] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[2]:bamIndex], [javax.sql.rowset.serial.SerialClob@7d5c9e5], [string], [org.hsqldb.types.TimestampData@674b6786]]]
[2020-07-30 19:06:18,33] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,33] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,33] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,33] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,33] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:inputGroups[0]:... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,33] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,34] [debug] /----------------------+----------+-------------------+-------------------+----------------------+----------------------+---------------------+----------------------+---------------------\
[2020-07-30 19:06:18,34] [debug] | 1                    | 2        | 3                 | 4                 | 5                    | 6                    | 7                   | 8                    | 9                   |
[2020-07-30 19:06:18,34] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY         | METADATA_VALUE       | METADATA_VALUE_TYPE | METADATA_TIMESTAMP   | METADATA_JOURNAL_ID |
[2020-07-30 19:06:18,34] [debug] |----------------------+----------+-------------------+-------------------+----------------------+----------------------+---------------------+----------------------+---------------------|
[2020-07-30 19:06:18,34] [debug] | 8b168b0d-854f-4ba... | NULL     | NULL              | NULL              | submission           | org.hsqldb.jdbc.J... | string              | 2020-07-30 19:06:... | 9041                |
[2020-07-30 19:06:18,34] [debug] | 8b168b0d-854f-4ba... | NULL     | NULL              | NULL              | status               | org.hsqldb.jdbc.J... | string              | 2020-07-30 19:06:... | 9042                |
[2020-07-30 19:06:18,34] [debug] | 8b168b0d-854f-4ba... | NULL     | NULL              | NULL              | labels:cromwell-w... | org.hsqldb.jdbc.J... | string              | 2020-07-30 19:06:... | 9043                |
[2020-07-30 19:06:18,34] [debug] | 8b168b0d-854f-4ba... | NULL     | NULL              | NULL              | status               | org.hsqldb.jdbc.J... | string              | 2020-07-30 19:06:... | 9044                |
[2020-07-30 19:06:18,34] [debug] | 8b168b0d-854f-4ba... | NULL     | NULL              | NULL              | start                | org.hsqldb.jdbc.J... | string              | 2020-07-30 19:06:... | 9045                |
[2020-07-30 19:06:18,34] [debug] \----------------------+----------+-------------------+-------------------+----------------------+----------------------+---------------------+----------------------+---------------------/
[2020-07-30 19:06:18,34] [debug] 3 more rows read (8 total)
[2020-07-30 19:06:18,34] [debug] Execution of batch insert took 13ms
[2020-07-30 19:06:18,34] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table WORKFLOW_METADATA_SUMMARY_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s4.WORKFLOW_NAME : Option[String']
|           3: Path s4.WORKFLOW_STATUS : Option[String']
|           4: Path s4.START_TIMESTAMP : Option[java.sql.Timestamp']
|           5: Path s4.END_TIMESTAMP : Option[java.sql.Timestamp']
|           6: Path s4.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|           7: Path s4.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|           8: Path s4.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|           9: Path s4.METADATA_ARCHIVE_STATUS : Option[String']
|           10: OptionApply
|             0: Path s4.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'
|     where: Apply Function =
|       0: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t6
|     value: TypeMapping
|       0: ProductNode
|         1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s2.WORKFLOW_NAME : Option[String']
|         3: Path s2.WORKFLOW_STATUS : Option[String']
|         4: Path s2.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s2.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s2.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s2.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s2.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s2.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,34] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[3]:bam], [javax.sql.rowset.serial.SerialClob@8532096f], [string], [org.hsqldb.types.TimestampData@674bbaee]]]
[2020-07-30 19:06:18,34] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[3]:bam], [javax.sql.rowset.serial.SerialClob@8532096f], [string], [org.hsqldb.types.TimestampData@674bbaee]]]
[2020-07-30 19:06:18,34] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:18,34] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,34] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,34] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,34] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,34] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:inputGroups[0]:... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,34] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,34] [debug] After phase assignUniqueSymbols:
| Bind
|   from s7: Filter s8
|     from s8: TableExpansion
|       table s9: Table WORKFLOW_METADATA_SUMMARY_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s9.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s9.WORKFLOW_NAME : Option[String']
|           3: Path s9.WORKFLOW_STATUS : Option[String']
|           4: Path s9.START_TIMESTAMP : Option[java.sql.Timestamp']
|           5: Path s9.END_TIMESTAMP : Option[java.sql.Timestamp']
|           6: Path s9.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|           7: Path s9.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|           8: Path s9.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|           9: Path s9.METADATA_ARCHIVE_STATUS : Option[String']
|           10: OptionApply
|             0: Path s9.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'
|     where: Apply Function =
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t11
|     value: TypeMapping
|       0: ProductNode
|         1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s7.WORKFLOW_NAME : Option[String']
|         3: Path s7.WORKFLOW_STATUS : Option[String']
|         4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,34] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:18,34] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:18,34] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.WORKFLOW_METADATA_SUMMARY_ENTRY)
[2020-07-30 19:06:18,35] [debug] With correct table types:
| Bind : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|     value: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|       0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|         1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s7.WORKFLOW_NAME : Option[String']
|         3: Path s7.WORKFLOW_STATUS : Option[String']
|         4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,35] [debug] Table expansions: @t10 -> (s9,TypeMapping)
[2020-07-30 19:06:18,35] [debug] After phase expandTables:
| Bind : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|     value: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|       0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|         1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s7.WORKFLOW_NAME : Option[String']
|         3: Path s7.WORKFLOW_STATUS : Option[String']
|         4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,35] [debug] After phase forceOuterBinds:
| Bind : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|     value: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|       0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|         1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s7.WORKFLOW_NAME : Option[String']
|         3: Path s7.WORKFLOW_STATUS : Option[String']
|         4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,35] [debug] After phase removeMappedTypes:
| Bind : Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|     value: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s7.WORKFLOW_NAME : Option[String']
|       3: Path s7.WORKFLOW_STATUS : Option[String']
|       4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|       5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|       6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,35] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,35] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[3]:bamIndex], [javax.sql.rowset.serial.SerialClob@93c7e00b], [string], [org.hsqldb.types.TimestampData@674bae76]]]
[2020-07-30 19:06:18,35] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:inputGroups[0]:bamAndBamIndexInputs[3]:bamIndex], [javax.sql.rowset.serial.SerialClob@93c7e00b], [string], [org.hsqldb.types.TimestampData@674bae76]]]
[2020-07-30 19:06:18,35] [debug] Translated type: Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>] -> Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
[2020-07-30 19:06:18,35] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,35] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,35] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,35] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,35] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:18,35] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,35] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,35] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,35] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:inputGroups[0]:... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,35] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,35] [debug] Translated type: Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>] -> Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
[2020-07-30 19:06:18,35] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,35] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,35] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,35] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:18,35] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,35] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:18,35] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,35] [debug] Translated type: Option[java.sql.Timestamp'] -> Option[java.sql.Timestamp']
[2020-07-30 19:06:18,35] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,35] [debug] Translated type: Option[java.sql.Timestamp'] -> Option[java.sql.Timestamp']
[2020-07-30 19:06:18,35] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,35] [debug] Translated type: Option[java.sql.Timestamp'] -> Option[java.sql.Timestamp']
[2020-07-30 19:06:18,35] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,35] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:18,35] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,35] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:18,35] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,35] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:18,35] [debug] SSL Read Request Status: Status = OK HandshakeStatus = NEED_WRAP
bytesConsumed = 0 bytesProduced = 0, java.nio.HeapByteBuffer[pos=0 lim=16709 cap=16709]
[2020-07-30 19:06:18,35] [debug] Translated type: (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String']) -> (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
[2020-07-30 19:06:18,35] [debug] Translated type: Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>] -> Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
[2020-07-30 19:06:18,35] [debug] Translated type: Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>] -> Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
[2020-07-30 19:06:18,35] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:18,35] [debug] After phase expandRecords:
| Bind : Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|     value: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s7.WORKFLOW_NAME : Option[String']
|       3: Path s7.WORKFLOW_STATUS : Option[String']
|       4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|       5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|       6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,35] [debug] Analyzing s8.WORKFLOW_EXECUTION_UUID with symbols 
| Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,35] [debug] Translated s8.WORKFLOW_EXECUTION_UUID to:
| Path s8.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,35] [debug] Flattening projection t11
[2020-07-30 19:06:18,35] [debug] Analyzing s7.WORKFLOW_EXECUTION_UUID with symbols 
| Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,35] [debug] Translated s7.WORKFLOW_EXECUTION_UUID to:
| Path s7.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,35] [debug] Analyzing s7.WORKFLOW_NAME with symbols 
| Path s7.WORKFLOW_NAME : Option[String']

[2020-07-30 19:06:18,35] [debug] Translated s7.WORKFLOW_NAME to:
| Path s7.WORKFLOW_NAME

[2020-07-30 19:06:18,35] [debug] Analyzing s7.WORKFLOW_STATUS with symbols 
| Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:18,35] [debug] Translated s7.WORKFLOW_STATUS to:
| Path s7.WORKFLOW_STATUS

[2020-07-30 19:06:18,35] [debug] Analyzing s7.START_TIMESTAMP with symbols 
| Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:18,35] [debug] Translated s7.START_TIMESTAMP to:
| Path s7.START_TIMESTAMP

[2020-07-30 19:06:18,35] [debug] Analyzing s7.END_TIMESTAMP with symbols 
| Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:18,35] [debug] Translated s7.END_TIMESTAMP to:
| Path s7.END_TIMESTAMP

[2020-07-30 19:06:18,35] [debug] Analyzing s7.SUBMISSION_TIMESTAMP with symbols 
| Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:18,35] [debug] Translated s7.SUBMISSION_TIMESTAMP to:
| Path s7.SUBMISSION_TIMESTAMP

[2020-07-30 19:06:18,35] [debug] Analyzing s7.PARENT_WORKFLOW_EXECUTION_UUID with symbols 
| Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']

[2020-07-30 19:06:18,35] [debug] Translated s7.PARENT_WORKFLOW_EXECUTION_UUID to:
| Path s7.PARENT_WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,36] [debug] Analyzing s7.ROOT_WORKFLOW_EXECUTION_UUID with symbols 
| Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']

[2020-07-30 19:06:18,36] [debug] Translated s7.ROOT_WORKFLOW_EXECUTION_UUID to:
| Path s7.ROOT_WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,36] [debug] Analyzing s7.METADATA_ARCHIVE_STATUS with symbols 
| Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,36] [debug] Translated s7.METADATA_ARCHIVE_STATUS to:
| Path s7.METADATA_ARCHIVE_STATUS

[2020-07-30 19:06:18,36] [debug] Flattening node at Path 
| ProductNode
|   1: Path s7.WORKFLOW_EXECUTION_UUID
|   2: Path s7.WORKFLOW_NAME
|   3: Path s7.WORKFLOW_STATUS
|   4: Path s7.START_TIMESTAMP
|   5: Path s7.END_TIMESTAMP
|   6: Path s7.SUBMISSION_TIMESTAMP
|   7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID
|   8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID
|   9: Path s7.METADATA_ARCHIVE_STATUS

[2020-07-30 19:06:18,36] [debug] Flattening node at Path _1
| Path s7.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,36] [debug] Adding definition: s12 -> Path s7.WORKFLOW_EXECUTION_UUID
[2020-07-30 19:06:18,36] [debug] Flattening node at Path _2
| Path s7.WORKFLOW_NAME

[2020-07-30 19:06:18,36] [debug] Adding definition: s13 -> Path s7.WORKFLOW_NAME
[2020-07-30 19:06:18,36] [debug] Flattening node at Path _3
| Path s7.WORKFLOW_STATUS

[2020-07-30 19:06:18,36] [debug] Adding definition: s14 -> Path s7.WORKFLOW_STATUS
[2020-07-30 19:06:18,36] [debug] Flattening node at Path _4
| Path s7.START_TIMESTAMP

[2020-07-30 19:06:18,36] [debug] Adding definition: s15 -> Path s7.START_TIMESTAMP
[2020-07-30 19:06:18,36] [debug] Flattening node at Path _5
| Path s7.END_TIMESTAMP

[2020-07-30 19:06:18,36] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,36] [debug] Adding definition: s16 -> Path s7.END_TIMESTAMP
[2020-07-30 19:06:18,36] [debug] Flattening node at Path _6
| Path s7.SUBMISSION_TIMESTAMP

[2020-07-30 19:06:18,36] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_outputFileName], [javax.sql.rowset.serial.SerialClob@f8d0ed1e], [string], [org.hsqldb.types.TimestampData@674bf916]]]
[2020-07-30 19:06:18,36] [debug] Adding definition: s17 -> Path s7.SUBMISSION_TIMESTAMP
[2020-07-30 19:06:18,36] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_outputFileName], [javax.sql.rowset.serial.SerialClob@f8d0ed1e], [string], [org.hsqldb.types.TimestampData@674bf916]]]
[2020-07-30 19:06:18,36] [debug] Flattening node at Path _7
| Path s7.PARENT_WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,36] [debug] Adding definition: s18 -> Path s7.PARENT_WORKFLOW_EXECUTION_UUID
[2020-07-30 19:06:18,36] [debug] Flattening node at Path _8
| Path s7.ROOT_WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,36] [debug] Adding definition: s19 -> Path s7.ROOT_WORKFLOW_EXECUTION_UUID
[2020-07-30 19:06:18,36] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,36] [debug] Flattening node at Path _9
| Path s7.METADATA_ARCHIVE_STATUS

[2020-07-30 19:06:18,36] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,36] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,36] [debug] Adding definition: s20 -> Path s7.METADATA_ARCHIVE_STATUS
[2020-07-30 19:06:18,36] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,36] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:analyzeCovariat... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,36] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,36] [debug] Adding translation for t11: (Map(List(_2) -> s13, List(_4) -> s15, List(_5) -> s16, List(_3) -> s14, List(_9) -> s20, List(_1) -> s12, List(_7) -> s18, List(_6) -> s17, List(_8) -> s19), UnassignedType)
[2020-07-30 19:06:18,36] [debug] Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.WORKFLOW_EXECUTION_UUID
|     s13: Path s7.WORKFLOW_NAME
|     s14: Path s7.WORKFLOW_STATUS
|     s15: Path s7.START_TIMESTAMP
|     s16: Path s7.END_TIMESTAMP
|     s17: Path s7.SUBMISSION_TIMESTAMP
|     s18: Path s7.PARENT_WORKFLOW_EXECUTION_UUID
|     s19: Path s7.ROOT_WORKFLOW_EXECUTION_UUID
|     s20: Path s7.METADATA_ARCHIVE_STATUS

[2020-07-30 19:06:18,36] [debug] Stage ReadBufferStage sending inbound command: Connected
[2020-07-30 19:06:18,36] [debug] Starting up.
[2020-07-30 19:06:18,36] [debug] After phase flattenProjections:
| Bind : Vector[t11<{s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<{s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}>]
|     value: StructNode : {s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}
|       s12: Path s7.WORKFLOW_EXECUTION_UUID : String'
|       s13: Path s7.WORKFLOW_NAME : Option[String']
|       s14: Path s7.WORKFLOW_STATUS : Option[String']
|       s15: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|       s16: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|       s17: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       s18: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s19: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s20: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,36] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:18,36] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:18,36] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:18,36] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:18,36] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:18,36] [debug] Unreferenced: t11; Field refs: (@t10,END_TIMESTAMP), (@t10,METADATA_ARCHIVE_STATUS), (@t10,WORKFLOW_NAME), (@t10,ROOT_WORKFLOW_EXECUTION_UUID), (@t10,WORKFLOW_STATUS), (@t10,START_TIMESTAMP), (@t10,SUBMISSION_TIMESTAMP), (@t10,WORKFLOW_EXECUTION_UUID), (@t10,PARENT_WORKFLOW_EXECUTION_UUID)
[2020-07-30 19:06:18,36] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:18,36] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:18,36] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:18,36] [debug] Creating mapping from t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>
[2020-07-30 19:06:18,36] [debug] Creating mapping from (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
[2020-07-30 19:06:18,36] [debug] Creating mapping from String'
[2020-07-30 19:06:18,36] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:18,36] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:18,36] [debug] Creating mapping from Option[java.sql.Timestamp']
[2020-07-30 19:06:18,36] [debug] Creating mapping from Option[java.sql.Timestamp']
[2020-07-30 19:06:18,36] [debug] Creating mapping from Option[java.sql.Timestamp']
[2020-07-30 19:06:18,36] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:18,36] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:18,36] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:18,36] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: Bind : Vector[t11<{s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t11 : Vector[t11<{s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}>]
|       value: StructNode : {s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}
|         s12: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         s13: Path s7.WORKFLOW_NAME : Option[String']
|         s14: Path s7.WORKFLOW_STATUS : Option[String']
|         s15: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         s16: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         s17: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         s18: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s19: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s20: Path s7.METADATA_ARCHIVE_STATUS : Option[String']
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21.s12 : String'
|       2: Path s21.s13 : Option[String']
|       3: Path s21.s14 : Option[String']
|       4: Path s21.s15 : Option[java.sql.Timestamp']
|       5: Path s21.s16 : Option[java.sql.Timestamp']
|       6: Path s21.s17 : Option[java.sql.Timestamp']
|       7: Path s21.s18 : Option[String']
|       8: Path s21.s19 : Option[String']
|       9: Path s21.s20 : Option[String']

[2020-07-30 19:06:18,36] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:18,36] [debug] New defs: Map(0 -> (Path s7.WORKFLOW_EXECUTION_UUID,s22), 5 -> (Path s7.SUBMISSION_TIMESTAMP,s23), 1 -> (Path s7.WORKFLOW_NAME,s24), 6 -> (Path s7.PARENT_WORKFLOW_EXECUTION_UUID,s25), 2 -> (Path s7.WORKFLOW_STATUS,s26), 7 -> (Path s7.ROOT_WORKFLOW_EXECUTION_UUID,s27), 3 -> (Path s7.START_TIMESTAMP,s28), 8 -> (Path s7.METADATA_ARCHIVE_STATUS,s29), 4 -> (Path s7.END_TIMESTAMP,s30))
[2020-07-30 19:06:18,36] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: Bind : Vector[t31<{s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}>]
|     from s7: ...
|     select: Pure t31 : Vector[t31<{s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}>]
|       value: StructNode : {s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}
|         s27: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s22: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         s29: Path s7.METADATA_ARCHIVE_STATUS : Option[String']
|         s23: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         s24: Path s7.WORKFLOW_NAME : Option[String']
|         s28: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         s25: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s30: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         s26: Path s7.WORKFLOW_STATUS : Option[String']
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21.s22 : String'
|       2: Path s21.s24 : Option[String']
|       3: Path s21.s26 : Option[String']
|       4: Path s21.s28 : Option[java.sql.Timestamp']
|       5: Path s21.s30 : Option[java.sql.Timestamp']
|       6: Path s21.s23 : Option[java.sql.Timestamp']
|       7: Path s21.s25 : Option[String']
|       8: Path s21.s27 : Option[String']
|       9: Path s21.s29 : Option[String']

[2020-07-30 19:06:18,36] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,36] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674be086]]]
[2020-07-30 19:06:18,36] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674be086]]]
[2020-07-30 19:06:18,36] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,36] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,36] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,36] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,36] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:mergeSplitByInt... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,36] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,36] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: Bind : Vector[t31<{s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t31 : Vector[t31<{s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}>]
|       value: StructNode : {s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}
|         s27: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s22: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         s29: Path s7.METADATA_ARCHIVE_STATUS : Option[String']
|         s23: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         s24: Path s7.WORKFLOW_NAME : Option[String']
|         s28: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         s25: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s30: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         s26: Path s7.WORKFLOW_STATUS : Option[String']
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21.s22 : String'
|       2: Path s21.s24 : Option[String']
|       3: Path s21.s26 : Option[String']
|       4: Path s21.s28 : Option[java.sql.Timestamp']
|       5: Path s21.s30 : Option[java.sql.Timestamp']
|       6: Path s21.s23 : Option[java.sql.Timestamp']
|       7: Path s21.s25 : Option[String']
|       8: Path s21.s27 : Option[String']
|       9: Path s21.s29 : Option[String']

[2020-07-30 19:06:18,36] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:18,36] [debug] Table fields: Map(@t10 -> Vector(WORKFLOW_EXECUTION_UUID, ROOT_WORKFLOW_EXECUTION_UUID, METADATA_ARCHIVE_STATUS, SUBMISSION_TIMESTAMP, WORKFLOW_NAME, START_TIMESTAMP, PARENT_WORKFLOW_EXECUTION_UUID, END_TIMESTAMP, WORKFLOW_STATUS))
[2020-07-30 19:06:18,37] [debug] Creating source from TableNode:
| Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]

[2020-07-30 19:06:18,37] [debug] Mappings are: ConstArray(((@t10,WORKFLOW_EXECUTION_UUID),List(WORKFLOW_EXECUTION_UUID)), ((@t10,ROOT_WORKFLOW_EXECUTION_UUID),List(ROOT_WORKFLOW_EXECUTION_UUID)), ((@t10,METADATA_ARCHIVE_STATUS),List(METADATA_ARCHIVE_STATUS)), ((@t10,SUBMISSION_TIMESTAMP),List(SUBMISSION_TIMESTAMP)), ((@t10,WORKFLOW_NAME),List(WORKFLOW_NAME)), ((@t10,START_TIMESTAMP),List(START_TIMESTAMP)), ((@t10,PARENT_WORKFLOW_EXECUTION_UUID),List(PARENT_WORKFLOW_EXECUTION_UUID)), ((@t10,END_TIMESTAMP),List(END_TIMESTAMP)), ((@t10,WORKFLOW_STATUS),List(WORKFLOW_STATUS)))
[2020-07-30 19:06:18,37] [debug] Building new Comprehension from:
| Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]

[2020-07-30 19:06:18,37] [debug] Built new Comprehension:
| Comprehension s32, None, None, ConstArray(), None, None, None, None, false : Vector[t33<{s34: String', s35: Option[String'], s36: Option[String'], s37: Option[java.sql.Timestamp'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[String'], s41: Option[java.sql.Timestamp'], s42: Option[String']}>]
|   from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t33 : Vector[t33<{s34: String', s35: Option[String'], s36: Option[String'], s37: Option[java.sql.Timestamp'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[String'], s41: Option[java.sql.Timestamp'], s42: Option[String']}>]
|     value: StructNode : {s34: String', s35: Option[String'], s36: Option[String'], s37: Option[java.sql.Timestamp'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[String'], s41: Option[java.sql.Timestamp'], s42: Option[String']}
|       s34: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       s35: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s36: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|       s37: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       s38: Path s32.WORKFLOW_NAME : Option[String']
|       s39: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|       s40: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s41: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|       s42: Path s32.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:18,37] [debug] Replacements are: Map((@t10,END_TIMESTAMP) -> s41, (@t10,METADATA_ARCHIVE_STATUS) -> s36, (@t10,WORKFLOW_NAME) -> s38, (@t10,ROOT_WORKFLOW_EXECUTION_UUID) -> s35, (@t10,WORKFLOW_STATUS) -> s42, (@t10,START_TIMESTAMP) -> s39, (@t10,SUBMISSION_TIMESTAMP) -> s37, (@t10,WORKFLOW_EXECUTION_UUID) -> s34, (@t10,PARENT_WORKFLOW_EXECUTION_UUID) -> s40)
[2020-07-30 19:06:18,37] [debug] Merging Filter into Comprehension:
| Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   from s8: ...
|   where: Apply Function = : Boolean
|     0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:18,37] [debug] Merged Filter into Comprehension:
| Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t33<{s34: String', s35: Option[String'], s36: Option[String'], s37: Option[java.sql.Timestamp'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[String'], s41: Option[java.sql.Timestamp'], s42: Option[String']}>]
|   from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t33 : Vector[t33<{s34: String', s35: Option[String'], s36: Option[String'], s37: Option[java.sql.Timestamp'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[String'], s41: Option[java.sql.Timestamp'], s42: Option[String']}>]
|     value: StructNode : {s34: String', s35: Option[String'], s36: Option[String'], s37: Option[java.sql.Timestamp'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[String'], s41: Option[java.sql.Timestamp'], s42: Option[String']}
|       s34: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       s35: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s36: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|       s37: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       s38: Path s32.WORKFLOW_NAME : Option[String']
|       s39: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|       s40: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s41: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|       s42: Path s32.WORKFLOW_STATUS : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:18,37] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t31<{s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}>]
|   from s7: ...
|   select: Pure t31 : Vector[t31<{s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}>]
|     value: StructNode : {s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}
|       s27: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s22: Path s7.WORKFLOW_EXECUTION_UUID : String'
|       s29: Path s7.METADATA_ARCHIVE_STATUS : Option[String']
|       s23: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       s24: Path s7.WORKFLOW_NAME : Option[String']
|       s28: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|       s25: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s30: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|       s26: Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:18,37] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<{s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}>]
|   from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t31 : Vector[t31<{s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}>]
|     value: StructNode : {s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}
|       s27: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s22: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       s29: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|       s23: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       s24: Path s32.WORKFLOW_NAME : Option[String']
|       s28: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|       s25: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s30: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|       s26: Path s32.WORKFLOW_STATUS : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:18,37] [debug] Replacements are: Map((t31,s30) -> s30, (t31,s22) -> s22, (t31,s28) -> s28, (t31,s26) -> s26, (t31,s25) -> s25, (t31,s29) -> s29, (t31,s23) -> s23, (t31,s24) -> s24, (t31,s27) -> s27)
[2020-07-30 19:06:18,37] [debug] Mappings are: ConstArray(((t31,s30),List(s30)), ((t31,s22),List(s22)), ((t31,s28),List(s28)), ((t31,s26),List(s26)), ((t31,s25),List(s25)), ((t31,s29),List(s29)), ((t31,s23),List(s23)), ((t31,s24),List(s24)), ((t31,s27),List(s27)))
[2020-07-30 19:06:18,37] [debug] Starting up.
[2020-07-30 19:06:18,37] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<{s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}>]
|     from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     select: Pure t31 : Vector[t31<{s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}>]
|       value: StructNode : {s27: Option[String'], s22: String', s29: Option[String'], s23: Option[java.sql.Timestamp'], s24: Option[String'], s28: Option[java.sql.Timestamp'], s25: Option[String'], s30: Option[java.sql.Timestamp'], s26: Option[String']}
|         s27: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s22: Path s32.WORKFLOW_EXECUTION_UUID : String'
|         s29: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|         s23: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         s24: Path s32.WORKFLOW_NAME : Option[String']
|         s28: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|         s25: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s30: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|         s26: Path s32.WORKFLOW_STATUS : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21.s22 : String'
|       2: Path s21.s24 : Option[String']
|       3: Path s21.s26 : Option[String']
|       4: Path s21.s28 : Option[java.sql.Timestamp']
|       5: Path s21.s30 : Option[java.sql.Timestamp']
|       6: Path s21.s23 : Option[java.sql.Timestamp']
|       7: Path s21.s25 : Option[String']
|       8: Path s21.s27 : Option[String']
|       9: Path s21.s29 : Option[String']

[2020-07-30 19:06:18,37] [debug] Starting response header timeout stage with timeout of 10000 ms
[2020-07-30 19:06:18,37] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:18,37] [debug] Required symbols: s27 -> 7, s22 -> 0, s29 -> 8, s23 -> 5, s24 -> 1, s28 -> 3, s25 -> 6, s30 -> 4, s26 -> 2
[2020-07-30 19:06:18,37] [debug] Connection was idle. Running.
[2020-07-30 19:06:18,38] [debug] Transformed RSM: 
| ResultSetMapping
|   from s21: Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|     from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     select: Pure t31 : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|       value: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|         1: Path s32.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s32.WORKFLOW_NAME : Option[String']
|         3: Path s32.WORKFLOW_STATUS : Option[String']
|         4: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21.s22 : String'
|       2: Path s21.s24 : Option[String']
|       3: Path s21.s26 : Option[String']
|       4: Path s21.s28 : Option[java.sql.Timestamp']
|       5: Path s21.s30 : Option[java.sql.Timestamp']
|       6: Path s21.s23 : Option[java.sql.Timestamp']
|       7: Path s21.s25 : Option[String']
|       8: Path s21.s27 : Option[String']
|       9: Path s21.s29 : Option[String']

[2020-07-30 19:06:18,38] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|     from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     select: Pure t31 : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|       value: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|         1: Path s32.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s32.WORKFLOW_NAME : Option[String']
|         3: Path s32.WORKFLOW_STATUS : Option[String']
|         4: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21._1 : String'
|       2: Path s21._2 : Option[String']
|       3: Path s21._3 : Option[String']
|       4: Path s21._4 : Option[java.sql.Timestamp']
|       5: Path s21._5 : Option[java.sql.Timestamp']
|       6: Path s21._6 : Option[java.sql.Timestamp']
|       7: Path s21._7 : Option[String']
|       8: Path s21._8 : Option[String']
|       9: Path s21._9 : Option[String']

[2020-07-30 19:06:18,38] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:18,38] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:18,38] [debug] Compiling server-side and mapping with server-side:
| Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|   from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t31 : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|     value: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s32.WORKFLOW_NAME : Option[String']
|       3: Path s32.WORKFLOW_STATUS : Option[String']
|       4: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|       5: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|       6: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       7: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       8: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       9: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:18,38] [debug] Beginning request: GET https://auth.docker.io/token?service=registry.docker.io&scope=repository%3Ag3chen/wgspipeline%3Apull
[2020-07-30 19:06:18,38] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'
|     4: SpecializedJdbcResultConverter$$anon$2 idx=4 : java.sql.Timestamp'
|     5: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : String'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : String'

[2020-07-30 19:06:18,38] [debug] Compiled server-side to:
| CompiledStatement "select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?" : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]

[2020-07-30 19:06:18,38] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: CompiledStatement "select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?" : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|   map: CompiledMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'
|         4: SpecializedJdbcResultConverter$$anon$2 idx=4 : java.sql.Timestamp'
|         5: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : String'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : String'

[2020-07-30 19:06:18,38] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:18,38] [debug]       assignUniqueSymbols:    1.381549 ms
[2020-07-30 19:06:18,38] [debug]           unrollTailBinds:    0.160729 ms
[2020-07-30 19:06:18,38] [debug]                inferTypes:    0.332422 ms
[2020-07-30 19:06:18,38] [debug]              expandTables:    2.859978 ms
[2020-07-30 19:06:18,38] [debug]           forceOuterBinds:    1.158297 ms
[2020-07-30 19:06:18,38] [debug]         removeMappedTypes:    1.207293 ms
[2020-07-30 19:06:18,38] [debug]                expandSums:    3.385693 ms
[2020-07-30 19:06:18,38] [debug]             expandRecords:    0.990999 ms
[2020-07-30 19:06:18,38] [debug]        flattenProjections:    5.081841 ms
[2020-07-30 19:06:18,38] [debug]              rewriteJoins:    0.096896 ms
[2020-07-30 19:06:18,38] [debug]             verifySymbols:    0.125336 ms
[2020-07-30 19:06:18,38] [debug]             relabelUnions:    0.076171 ms
[2020-07-30 19:06:18,38] [debug]          createAggregates:    0.043989 ms
[2020-07-30 19:06:18,38] [debug]           resolveZipJoins:    0.077181 ms
[2020-07-30 19:06:18,39] [debug]          pruneProjections:    0.351441 ms
[2020-07-30 19:06:18,39] [debug] Starting idle timeout stage with timeout of 60000 ms
[2020-07-30 19:06:18,39] [debug]           rewriteDistinct:    0.072208 ms
[2020-07-30 19:06:18,39] [debug]    createResultSetMapping:    2.044585 ms
[2020-07-30 19:06:18,39] [debug]            hoistClientOps:    3.092069 ms
[2020-07-30 19:06:18,39] [debug]         reorderOperations:    0.143076 ms
[2020-07-30 19:06:18,39] [debug]     mergeToComprehensions:    9.485262 ms
[2020-07-30 19:06:18,39] [debug]            optimizeScalar:    0.143508 ms
[2020-07-30 19:06:18,39] [debug]          removeFieldNames:    3.224749 ms
[2020-07-30 19:06:18,39] [debug]      specializeParameters:    0.180083 ms
[2020-07-30 19:06:18,39] [debug]                   codeGen:    2.915300 ms
[2020-07-30 19:06:18,39] [debug]                     TOTAL:   38.630655 ms
[2020-07-30 19:06:18,40] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?]
[2020-07-30 19:06:18,40] [debug] Preparing statement: select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:18,40] [debug] Executing prepared statement: HikariProxyPreparedStatement@34174160 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@173a256a[sql=[select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:18,40] [debug] Executing prepared statement: HikariProxyPreparedStatement@34174160 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@173a256a[sql=[select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:18,40] [debug] /---------------------------\
[2020-07-30 19:06:18,40] [debug] | 1                         |
[2020-07-30 19:06:18,40] [debug] | String                    |
[2020-07-30 19:06:18,40] [debug] |---------------------------|
[2020-07-30 19:06:18,40] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:18,40] [debug] \---------------------------/
[2020-07-30 19:06:18,40] [debug] Execution of prepared statement took 156µs
[2020-07-30 19:06:18,40] [debug] /----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------\
[2020-07-30 19:06:18,40] [debug] | 1                    | 2             | 3               | 4               | 5             | 6                    | 7                    | 8                    | 9                    |
[2020-07-30 19:06:18,40] [debug] | WORKFLOW_EXECUTIO... | WORKFLOW_NAME | WORKFLOW_STATUS | START_TIMESTAMP | END_TIMESTAMP | SUBMISSION_TIMESTAMP | PARENT_WORKFLOW_E... | ROOT_WORKFLOW_EXE... | METADATA_ARCHIVE_... |
[2020-07-30 19:06:18,40] [debug] |----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------|
[2020-07-30 19:06:18,40] [debug] \----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------/
[2020-07-30 19:06:18,42] [debug] Execution of batch insert took 52ms
[2020-07-30 19:06:18,42] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674a1066]]]
[2020-07-30 19:06:18,42] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674a1066]]]
[2020-07-30 19:06:18,42] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,42] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,42] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,42] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,42] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:baseQualityScor... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,42] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,42] [debug] #6: success (None,WorkflowMetadataSummaryEntry(8b168b0d-854f-4ba0-99b6-35b7259a96fc,Some(bamMergePreprocessing),Some(Running),Some(2020-07-30 19:06:13.152),None,Some(2020-07-30 19:06:13.041),None,None,None,None))
[2020-07-30 19:06:18,43] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table WORKFLOW_METADATA_SUMMARY_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s4.WORKFLOW_NAME : Option[String']
|           3: Path s4.WORKFLOW_STATUS : Option[String']
|           4: Path s4.START_TIMESTAMP : Option[java.sql.Timestamp']
|           5: Path s4.END_TIMESTAMP : Option[java.sql.Timestamp']
|           6: Path s4.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|           7: Path s4.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|           8: Path s4.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|           9: Path s4.METADATA_ARCHIVE_STATUS : Option[String']
|           10: OptionApply
|             0: Path s4.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'
|     where: Apply Function =
|       0: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t6
|     value: TypeMapping
|       0: ProductNode
|         1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s2.WORKFLOW_NAME : Option[String']
|         3: Path s2.WORKFLOW_STATUS : Option[String']
|         4: Path s2.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s2.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s2.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s2.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s2.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s2.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,43] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:18,43] [debug] After phase assignUniqueSymbols:
| Bind
|   from s7: Filter s8
|     from s8: TableExpansion
|       table s9: Table WORKFLOW_METADATA_SUMMARY_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s9.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s9.WORKFLOW_NAME : Option[String']
|           3: Path s9.WORKFLOW_STATUS : Option[String']
|           4: Path s9.START_TIMESTAMP : Option[java.sql.Timestamp']
|           5: Path s9.END_TIMESTAMP : Option[java.sql.Timestamp']
|           6: Path s9.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|           7: Path s9.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|           8: Path s9.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|           9: Path s9.METADATA_ARCHIVE_STATUS : Option[String']
|           10: OptionApply
|             0: Path s9.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'
|     where: Apply Function =
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t11
|     value: TypeMapping
|       0: ProductNode
|         1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s7.WORKFLOW_NAME : Option[String']
|         3: Path s7.WORKFLOW_STATUS : Option[String']
|         4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,43] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:18,43] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:18,44] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.WORKFLOW_METADATA_SUMMARY_ENTRY)
[2020-07-30 19:06:18,44] [debug] With correct table types:
| Bind : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|     value: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|       0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|         1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s7.WORKFLOW_NAME : Option[String']
|         3: Path s7.WORKFLOW_STATUS : Option[String']
|         4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,44] [debug] Table expansions: @t10 -> (s9,TypeMapping)
[2020-07-30 19:06:18,44] [debug] Execution of batch insert took 21ms
[2020-07-30 19:06:18,44] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@674a07ee]]]
[2020-07-30 19:06:18,44] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@674a07ee]]]
[2020-07-30 19:06:18,44] [debug] After phase expandTables:
| Bind : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|     value: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|       0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|         1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s7.WORKFLOW_NAME : Option[String']
|         3: Path s7.WORKFLOW_STATUS : Option[String']
|         4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,44] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,44] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,44] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,44] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,44] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:analyzeCovariat... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,44] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,44] [debug] After phase forceOuterBinds:
| Bind : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>]
|     value: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|       0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|         1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s7.WORKFLOW_NAME : Option[String']
|         3: Path s7.WORKFLOW_STATUS : Option[String']
|         4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,44] [debug] After phase removeMappedTypes:
| Bind : Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|     value: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s7.WORKFLOW_NAME : Option[String']
|       3: Path s7.WORKFLOW_STATUS : Option[String']
|       4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|       5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|       6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,44] [debug] Translated type: Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>] -> Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
[2020-07-30 19:06:18,44] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,44] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,44] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,44] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:18,44] [debug] Translated type: Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>] -> Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
[2020-07-30 19:06:18,44] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,44] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,44] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,44] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:18,45] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,45] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:18,45] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,45] [debug] Translated type: Option[java.sql.Timestamp'] -> Option[java.sql.Timestamp']
[2020-07-30 19:06:18,45] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,45] [debug] Translated type: Option[java.sql.Timestamp'] -> Option[java.sql.Timestamp']
[2020-07-30 19:06:18,45] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,45] [debug] Translated type: Option[java.sql.Timestamp'] -> Option[java.sql.Timestamp']
[2020-07-30 19:06:18,45] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,45] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:18,45] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,45] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:18,45] [debug] Translated type: @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}> -> @t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>
[2020-07-30 19:06:18,45] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:18,45] [debug] Translated type: (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String']) -> (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
[2020-07-30 19:06:18,45] [debug] Translated type: Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>] -> Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
[2020-07-30 19:06:18,45] [debug] Translated type: Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>] -> Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
[2020-07-30 19:06:18,45] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,45] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:18,45] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_lineSeparator], [javax.sql.rowset.serial.SerialClob@18e0a], [string], [org.hsqldb.types.TimestampData@674a374e]]]
[2020-07-30 19:06:18,45] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_lineSeparator], [javax.sql.rowset.serial.SerialClob@18e0a], [string], [org.hsqldb.types.TimestampData@674a374e]]]
[2020-07-30 19:06:18,45] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,45] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,45] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,45] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,45] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:splitStringToAr... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,45] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,45] [debug] After phase expandRecords:
| Bind : Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|     value: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s7.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s7.WORKFLOW_NAME : Option[String']
|       3: Path s7.WORKFLOW_STATUS : Option[String']
|       4: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|       5: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|       6: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       9: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,45] [debug] Analyzing s8.WORKFLOW_EXECUTION_UUID with symbols 
| Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,45] [debug] Translated s8.WORKFLOW_EXECUTION_UUID to:
| Path s8.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,45] [debug] Flattening projection t11
[2020-07-30 19:06:18,45] [debug] Analyzing s7.WORKFLOW_EXECUTION_UUID with symbols 
| Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,45] [debug] Translated s7.WORKFLOW_EXECUTION_UUID to:
| Path s7.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,45] [debug] Analyzing s7.WORKFLOW_NAME with symbols 
| Path s7.WORKFLOW_NAME : Option[String']

[2020-07-30 19:06:18,45] [debug] Translated s7.WORKFLOW_NAME to:
| Path s7.WORKFLOW_NAME

[2020-07-30 19:06:18,45] [debug] Analyzing s7.WORKFLOW_STATUS with symbols 
| Path s7.WORKFLOW_STATUS : Option[String']

[2020-07-30 19:06:18,45] [debug] Translated s7.WORKFLOW_STATUS to:
| Path s7.WORKFLOW_STATUS

[2020-07-30 19:06:18,45] [debug] Analyzing s7.START_TIMESTAMP with symbols 
| Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:18,45] [debug] Translated s7.START_TIMESTAMP to:
| Path s7.START_TIMESTAMP

[2020-07-30 19:06:18,45] [debug] Analyzing s7.END_TIMESTAMP with symbols 
| Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:18,45] [debug] Translated s7.END_TIMESTAMP to:
| Path s7.END_TIMESTAMP

[2020-07-30 19:06:18,45] [debug] Analyzing s7.SUBMISSION_TIMESTAMP with symbols 
| Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:18,45] [debug] Translated s7.SUBMISSION_TIMESTAMP to:
| Path s7.SUBMISSION_TIMESTAMP

[2020-07-30 19:06:18,45] [debug] Analyzing s7.PARENT_WORKFLOW_EXECUTION_UUID with symbols 
| Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']

[2020-07-30 19:06:18,45] [debug] Translated s7.PARENT_WORKFLOW_EXECUTION_UUID to:
| Path s7.PARENT_WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,45] [debug] Analyzing s7.ROOT_WORKFLOW_EXECUTION_UUID with symbols 
| Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']

[2020-07-30 19:06:18,45] [debug] Translated s7.ROOT_WORKFLOW_EXECUTION_UUID to:
| Path s7.ROOT_WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,45] [debug] Analyzing s7.METADATA_ARCHIVE_STATUS with symbols 
| Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,45] [debug] Translated s7.METADATA_ARCHIVE_STATUS to:
| Path s7.METADATA_ARCHIVE_STATUS

[2020-07-30 19:06:18,46] [debug] Flattening node at Path 
| ProductNode
|   1: Path s7.WORKFLOW_EXECUTION_UUID
|   2: Path s7.WORKFLOW_NAME
|   3: Path s7.WORKFLOW_STATUS
|   4: Path s7.START_TIMESTAMP
|   5: Path s7.END_TIMESTAMP
|   6: Path s7.SUBMISSION_TIMESTAMP
|   7: Path s7.PARENT_WORKFLOW_EXECUTION_UUID
|   8: Path s7.ROOT_WORKFLOW_EXECUTION_UUID
|   9: Path s7.METADATA_ARCHIVE_STATUS

[2020-07-30 19:06:18,46] [debug] Flattening node at Path _1
| Path s7.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,46] [debug] Adding definition: s12 -> Path s7.WORKFLOW_EXECUTION_UUID
[2020-07-30 19:06:18,46] [debug] Flattening node at Path _2
| Path s7.WORKFLOW_NAME

[2020-07-30 19:06:18,46] [debug] Adding definition: s13 -> Path s7.WORKFLOW_NAME
[2020-07-30 19:06:18,46] [debug] Flattening node at Path _3
| Path s7.WORKFLOW_STATUS

[2020-07-30 19:06:18,46] [debug] Adding definition: s14 -> Path s7.WORKFLOW_STATUS
[2020-07-30 19:06:18,46] [debug] Flattening node at Path _4
| Path s7.START_TIMESTAMP

[2020-07-30 19:06:18,46] [debug] Adding definition: s15 -> Path s7.START_TIMESTAMP
[2020-07-30 19:06:18,46] [debug] Flattening node at Path _5
| Path s7.END_TIMESTAMP

[2020-07-30 19:06:18,46] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,46] [debug] Adding definition: s16 -> Path s7.END_TIMESTAMP
[2020-07-30 19:06:18,46] [debug] Flattening node at Path _6
| Path s7.SUBMISSION_TIMESTAMP

[2020-07-30 19:06:18,46] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_gatkJar], [javax.sql.rowset.serial.SerialClob@91295d18], [string], [org.hsqldb.types.TimestampData@674a5ad6]]]
[2020-07-30 19:06:18,46] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_gatkJar], [javax.sql.rowset.serial.SerialClob@91295d18], [string], [org.hsqldb.types.TimestampData@674a5ad6]]]
[2020-07-30 19:06:18,46] [debug] Adding definition: s17 -> Path s7.SUBMISSION_TIMESTAMP
[2020-07-30 19:06:18,46] [debug] Flattening node at Path _7
| Path s7.PARENT_WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,46] [debug] Adding definition: s18 -> Path s7.PARENT_WORKFLOW_EXECUTION_UUID
[2020-07-30 19:06:18,46] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,46] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,46] [debug] Flattening node at Path _8
| Path s7.ROOT_WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,46] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,46] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,46] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:indelRealign_ga... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,46] [debug] Adding definition: s19 -> Path s7.ROOT_WORKFLOW_EXECUTION_UUID
[2020-07-30 19:06:18,46] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,46] [debug] Flattening node at Path _9
| Path s7.METADATA_ARCHIVE_STATUS

[2020-07-30 19:06:18,46] [debug] Adding definition: s20 -> Path s7.METADATA_ARCHIVE_STATUS
[2020-07-30 19:06:18,46] [debug] Adding translation for t11: (Map(List(_2) -> s13, List(_4) -> s15, List(_5) -> s16, List(_3) -> s14, List(_9) -> s20, List(_1) -> s12, List(_7) -> s18, List(_6) -> s17, List(_8) -> s19), UnassignedType)
[2020-07-30 19:06:18,46] [debug] Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.WORKFLOW_EXECUTION_UUID
|     s13: Path s7.WORKFLOW_NAME
|     s14: Path s7.WORKFLOW_STATUS
|     s15: Path s7.START_TIMESTAMP
|     s16: Path s7.END_TIMESTAMP
|     s17: Path s7.SUBMISSION_TIMESTAMP
|     s18: Path s7.PARENT_WORKFLOW_EXECUTION_UUID
|     s19: Path s7.ROOT_WORKFLOW_EXECUTION_UUID
|     s20: Path s7.METADATA_ARCHIVE_STATUS

[2020-07-30 19:06:18,46] [debug] After phase flattenProjections:
| Bind : Vector[t11<{s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<{s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}>]
|     value: StructNode : {s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}
|       s12: Path s7.WORKFLOW_EXECUTION_UUID : String'
|       s13: Path s7.WORKFLOW_NAME : Option[String']
|       s14: Path s7.WORKFLOW_STATUS : Option[String']
|       s15: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|       s16: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|       s17: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       s18: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s19: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s20: Path s7.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,46] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:18,46] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:18,46] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:18,46] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:18,46] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:18,46] [debug] Unreferenced: t11; Field refs: (@t10,WORKFLOW_EXECUTION_UUID), (@t10,ROOT_WORKFLOW_EXECUTION_UUID), (@t10,END_TIMESTAMP), (@t10,PARENT_WORKFLOW_EXECUTION_UUID), (@t10,WORKFLOW_NAME), (@t10,SUBMISSION_TIMESTAMP), (@t10,METADATA_ARCHIVE_STATUS), (@t10,WORKFLOW_STATUS), (@t10,START_TIMESTAMP)
[2020-07-30 19:06:18,46] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:18,46] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:18,46] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:18,46] [debug] Creating mapping from t11<Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]>
[2020-07-30 19:06:18,46] [debug] Creating mapping from (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
[2020-07-30 19:06:18,46] [debug] Creating mapping from String'
[2020-07-30 19:06:18,46] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:18,46] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:18,46] [debug] Creating mapping from Option[java.sql.Timestamp']
[2020-07-30 19:06:18,46] [debug] Creating mapping from Option[java.sql.Timestamp']
[2020-07-30 19:06:18,46] [debug] Creating mapping from Option[java.sql.Timestamp']
[2020-07-30 19:06:18,46] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:18,46] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:18,46] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,46] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:18,47] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674a4e5e]]]
[2020-07-30 19:06:18,47] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674a4e5e]]]
[2020-07-30 19:06:18,47] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,47] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,47] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,47] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,47] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:realignerTarget... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,47] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,47] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: Bind : Vector[t11<{s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t11 : Vector[t11<{s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}>]
|       value: StructNode : {s12: String', s13: Option[String'], s14: Option[String'], s15: Option[java.sql.Timestamp'], s16: Option[java.sql.Timestamp'], s17: Option[java.sql.Timestamp'], s18: Option[String'], s19: Option[String'], s20: Option[String']}
|         s12: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         s13: Path s7.WORKFLOW_NAME : Option[String']
|         s14: Path s7.WORKFLOW_STATUS : Option[String']
|         s15: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         s16: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         s17: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         s18: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s19: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s20: Path s7.METADATA_ARCHIVE_STATUS : Option[String']
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21.s12 : String'
|       2: Path s21.s13 : Option[String']
|       3: Path s21.s14 : Option[String']
|       4: Path s21.s15 : Option[java.sql.Timestamp']
|       5: Path s21.s16 : Option[java.sql.Timestamp']
|       6: Path s21.s17 : Option[java.sql.Timestamp']
|       7: Path s21.s18 : Option[String']
|       8: Path s21.s19 : Option[String']
|       9: Path s21.s20 : Option[String']

[2020-07-30 19:06:18,47] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:18,47] [debug] New defs: Map(0 -> (Path s7.WORKFLOW_EXECUTION_UUID,s22), 5 -> (Path s7.SUBMISSION_TIMESTAMP,s23), 1 -> (Path s7.WORKFLOW_NAME,s24), 6 -> (Path s7.PARENT_WORKFLOW_EXECUTION_UUID,s25), 2 -> (Path s7.WORKFLOW_STATUS,s26), 7 -> (Path s7.ROOT_WORKFLOW_EXECUTION_UUID,s27), 3 -> (Path s7.START_TIMESTAMP,s28), 8 -> (Path s7.METADATA_ARCHIVE_STATUS,s29), 4 -> (Path s7.END_TIMESTAMP,s30))
[2020-07-30 19:06:18,47] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: Bind : Vector[t31<{s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}>]
|     from s7: ...
|     select: Pure t31 : Vector[t31<{s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}>]
|       value: StructNode : {s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}
|         s28: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         s29: Path s7.METADATA_ARCHIVE_STATUS : Option[String']
|         s25: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s26: Path s7.WORKFLOW_STATUS : Option[String']
|         s22: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         s30: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         s23: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         s27: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s24: Path s7.WORKFLOW_NAME : Option[String']
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21.s22 : String'
|       2: Path s21.s24 : Option[String']
|       3: Path s21.s26 : Option[String']
|       4: Path s21.s28 : Option[java.sql.Timestamp']
|       5: Path s21.s30 : Option[java.sql.Timestamp']
|       6: Path s21.s23 : Option[java.sql.Timestamp']
|       7: Path s21.s25 : Option[String']
|       8: Path s21.s27 : Option[String']
|       9: Path s21.s29 : Option[String']

[2020-07-30 19:06:18,47] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,47] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_temporaryWorkingDir], [null], [string], [org.hsqldb.types.TimestampData@674a7e3e]]]
[2020-07-30 19:06:18,47] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_temporaryWorkingDir], [null], [string], [org.hsqldb.types.TimestampData@674a7e3e]]]
[2020-07-30 19:06:18,47] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,47] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,47] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,47] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,47] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_t... | NULL | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,47] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,47] [debug] Execution of batch insert took 17µs
[2020-07-30 19:06:18,47] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@674a699e]]]
[2020-07-30 19:06:18,47] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@674a699e]]]
[2020-07-30 19:06:18,47] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,47] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,47] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,47] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,47] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:applyBaseQualit... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,47] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,47] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: Bind : Vector[t31<{s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       from s8: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t31 : Vector[t31<{s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}>]
|       value: StructNode : {s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}
|         s28: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|         s29: Path s7.METADATA_ARCHIVE_STATUS : Option[String']
|         s25: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s26: Path s7.WORKFLOW_STATUS : Option[String']
|         s22: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         s30: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|         s23: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         s27: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s24: Path s7.WORKFLOW_NAME : Option[String']
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21.s22 : String'
|       2: Path s21.s24 : Option[String']
|       3: Path s21.s26 : Option[String']
|       4: Path s21.s28 : Option[java.sql.Timestamp']
|       5: Path s21.s30 : Option[java.sql.Timestamp']
|       6: Path s21.s23 : Option[java.sql.Timestamp']
|       7: Path s21.s25 : Option[String']
|       8: Path s21.s27 : Option[String']
|       9: Path s21.s29 : Option[String']

[2020-07-30 19:06:18,47] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:18,48] [debug] Table fields: Map(@t10 -> Vector(WORKFLOW_EXECUTION_UUID, START_TIMESTAMP, METADATA_ARCHIVE_STATUS, PARENT_WORKFLOW_EXECUTION_UUID, WORKFLOW_STATUS, END_TIMESTAMP, SUBMISSION_TIMESTAMP, ROOT_WORKFLOW_EXECUTION_UUID, WORKFLOW_NAME))
[2020-07-30 19:06:18,48] [debug] Creating source from TableNode:
| Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]

[2020-07-30 19:06:18,48] [debug] Mappings are: ConstArray(((@t10,WORKFLOW_EXECUTION_UUID),List(WORKFLOW_EXECUTION_UUID)), ((@t10,START_TIMESTAMP),List(START_TIMESTAMP)), ((@t10,METADATA_ARCHIVE_STATUS),List(METADATA_ARCHIVE_STATUS)), ((@t10,PARENT_WORKFLOW_EXECUTION_UUID),List(PARENT_WORKFLOW_EXECUTION_UUID)), ((@t10,WORKFLOW_STATUS),List(WORKFLOW_STATUS)), ((@t10,END_TIMESTAMP),List(END_TIMESTAMP)), ((@t10,SUBMISSION_TIMESTAMP),List(SUBMISSION_TIMESTAMP)), ((@t10,ROOT_WORKFLOW_EXECUTION_UUID),List(ROOT_WORKFLOW_EXECUTION_UUID)), ((@t10,WORKFLOW_NAME),List(WORKFLOW_NAME)))
[2020-07-30 19:06:18,48] [debug] Building new Comprehension from:
| Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]

[2020-07-30 19:06:18,48] [debug] Built new Comprehension:
| Comprehension s32, None, None, ConstArray(), None, None, None, None, false : Vector[t33<{s34: String', s35: Option[java.sql.Timestamp'], s36: Option[String'], s37: Option[String'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[java.sql.Timestamp'], s41: Option[String'], s42: Option[String']}>]
|   from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t33 : Vector[t33<{s34: String', s35: Option[java.sql.Timestamp'], s36: Option[String'], s37: Option[String'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[java.sql.Timestamp'], s41: Option[String'], s42: Option[String']}>]
|     value: StructNode : {s34: String', s35: Option[java.sql.Timestamp'], s36: Option[String'], s37: Option[String'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[java.sql.Timestamp'], s41: Option[String'], s42: Option[String']}
|       s34: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       s35: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|       s36: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|       s37: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s38: Path s32.WORKFLOW_STATUS : Option[String']
|       s39: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|       s40: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       s41: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s42: Path s32.WORKFLOW_NAME : Option[String']

[2020-07-30 19:06:18,48] [debug] Replacements are: Map((@t10,WORKFLOW_EXECUTION_UUID) -> s34, (@t10,ROOT_WORKFLOW_EXECUTION_UUID) -> s41, (@t10,END_TIMESTAMP) -> s39, (@t10,PARENT_WORKFLOW_EXECUTION_UUID) -> s37, (@t10,WORKFLOW_NAME) -> s42, (@t10,SUBMISSION_TIMESTAMP) -> s40, (@t10,METADATA_ARCHIVE_STATUS) -> s36, (@t10,WORKFLOW_STATUS) -> s38, (@t10,START_TIMESTAMP) -> s35)
[2020-07-30 19:06:18,48] [debug] Merging Filter into Comprehension:
| Filter s8 : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   from s8: ...
|   where: Apply Function = : Boolean
|     0: Path s8.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:18,48] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,48] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674a9d66]]]
[2020-07-30 19:06:18,48] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674a9d66]]]
[2020-07-30 19:06:18,48] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,48] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,48] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,48] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,48] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:baseQualityScor... |      | int    | 2020-07-30 19:06:14.94644 |
[2020-07-30 19:06:18,48] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,48] [debug] Merged Filter into Comprehension:
| Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t33<{s34: String', s35: Option[java.sql.Timestamp'], s36: Option[String'], s37: Option[String'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[java.sql.Timestamp'], s41: Option[String'], s42: Option[String']}>]
|   from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t33 : Vector[t33<{s34: String', s35: Option[java.sql.Timestamp'], s36: Option[String'], s37: Option[String'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[java.sql.Timestamp'], s41: Option[String'], s42: Option[String']}>]
|     value: StructNode : {s34: String', s35: Option[java.sql.Timestamp'], s36: Option[String'], s37: Option[String'], s38: Option[String'], s39: Option[java.sql.Timestamp'], s40: Option[java.sql.Timestamp'], s41: Option[String'], s42: Option[String']}
|       s34: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       s35: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|       s36: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|       s37: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s38: Path s32.WORKFLOW_STATUS : Option[String']
|       s39: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|       s40: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       s41: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s42: Path s32.WORKFLOW_NAME : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:18,48] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t31<{s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}>]
|   from s7: ...
|   select: Pure t31 : Vector[t31<{s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}>]
|     value: StructNode : {s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}
|       s28: Path s7.START_TIMESTAMP : Option[java.sql.Timestamp']
|       s29: Path s7.METADATA_ARCHIVE_STATUS : Option[String']
|       s25: Path s7.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s26: Path s7.WORKFLOW_STATUS : Option[String']
|       s22: Path s7.WORKFLOW_EXECUTION_UUID : String'
|       s30: Path s7.END_TIMESTAMP : Option[java.sql.Timestamp']
|       s23: Path s7.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       s27: Path s7.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s24: Path s7.WORKFLOW_NAME : Option[String']

[2020-07-30 19:06:18,49] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<{s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}>]
|   from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t31 : Vector[t31<{s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}>]
|     value: StructNode : {s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}
|       s28: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|       s29: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|       s25: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s26: Path s32.WORKFLOW_STATUS : Option[String']
|       s22: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       s30: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|       s23: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       s27: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       s24: Path s32.WORKFLOW_NAME : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:18,49] [debug] Replacements are: Map((t31,s30) -> s30, (t31,s29) -> s29, (t31,s23) -> s23, (t31,s28) -> s28, (t31,s22) -> s22, (t31,s26) -> s26, (t31,s24) -> s24, (t31,s25) -> s25, (t31,s27) -> s27)
[2020-07-30 19:06:18,49] [debug] Mappings are: ConstArray(((t31,s30),List(s30)), ((t31,s29),List(s29)), ((t31,s23),List(s23)), ((t31,s28),List(s28)), ((t31,s22),List(s22)), ((t31,s26),List(s26)), ((t31,s24),List(s24)), ((t31,s25),List(s25)), ((t31,s27),List(s27)))
[2020-07-30 19:06:18,49] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<{s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}>]
|     from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     select: Pure t31 : Vector[t31<{s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}>]
|       value: StructNode : {s28: Option[java.sql.Timestamp'], s29: Option[String'], s25: Option[String'], s26: Option[String'], s22: String', s30: Option[java.sql.Timestamp'], s23: Option[java.sql.Timestamp'], s27: Option[String'], s24: Option[String']}
|         s28: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|         s29: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|         s25: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s26: Path s32.WORKFLOW_STATUS : Option[String']
|         s22: Path s32.WORKFLOW_EXECUTION_UUID : String'
|         s30: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|         s23: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         s27: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         s24: Path s32.WORKFLOW_NAME : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21.s22 : String'
|       2: Path s21.s24 : Option[String']
|       3: Path s21.s26 : Option[String']
|       4: Path s21.s28 : Option[java.sql.Timestamp']
|       5: Path s21.s30 : Option[java.sql.Timestamp']
|       6: Path s21.s23 : Option[java.sql.Timestamp']
|       7: Path s21.s25 : Option[String']
|       8: Path s21.s27 : Option[String']
|       9: Path s21.s29 : Option[String']

[2020-07-30 19:06:18,49] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:18,49] [debug] Required symbols: s28 -> 3, s29 -> 8, s25 -> 6, s26 -> 2, s22 -> 0, s30 -> 4, s23 -> 5, s27 -> 7, s24 -> 1
[2020-07-30 19:06:18,50] [debug] Execution of batch insert took 14ms
[2020-07-30 19:06:18,50] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:doBqsr], [javax.sql.rowset.serial.SerialClob@155fa2e], [boolean], [org.hsqldb.types.TimestampData@674a80ee]]]
[2020-07-30 19:06:18,50] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:doBqsr], [javax.sql.rowset.serial.SerialClob@155fa2e], [boolean], [org.hsqldb.types.TimestampData@674a80ee]]]
[2020-07-30 19:06:18,50] [debug] /---------------------------+---------+---------+---------+---------------+------+---------+---------------------------\
[2020-07-30 19:06:18,50] [debug] | 1                         | 2       | 3       | 4       | 5             | 6    | 7       | 8                         |
[2020-07-30 19:06:18,50] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String        | Clob | String  | Timestamp                 |
[2020-07-30 19:06:18,50] [debug] |---------------------------+---------+---------+---------+---------------+------+---------+---------------------------|
[2020-07-30 19:06:18,50] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:doBqsr |      | boolean | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,50] [debug] \---------------------------+---------+---------+---------+---------------+------+---------+---------------------------/
[2020-07-30 19:06:18,50] [debug] Transformed RSM: 
| ResultSetMapping
|   from s21: Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|     from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     select: Pure t31 : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|       value: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|         1: Path s32.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s32.WORKFLOW_NAME : Option[String']
|         3: Path s32.WORKFLOW_STATUS : Option[String']
|         4: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21.s22 : String'
|       2: Path s21.s24 : Option[String']
|       3: Path s21.s26 : Option[String']
|       4: Path s21.s28 : Option[java.sql.Timestamp']
|       5: Path s21.s30 : Option[java.sql.Timestamp']
|       6: Path s21.s23 : Option[java.sql.Timestamp']
|       7: Path s21.s25 : Option[String']
|       8: Path s21.s27 : Option[String']
|       9: Path s21.s29 : Option[String']

[2020-07-30 19:06:18,50] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|     from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|     select: Pure t31 : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|       value: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|         1: Path s32.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s32.WORKFLOW_NAME : Option[String']
|         3: Path s32.WORKFLOW_STATUS : Option[String']
|         4: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|     where: Apply Function = : Boolean
|       0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s21._1 : String'
|       2: Path s21._2 : Option[String']
|       3: Path s21._3 : Option[String']
|       4: Path s21._4 : Option[java.sql.Timestamp']
|       5: Path s21._5 : Option[java.sql.Timestamp']
|       6: Path s21._6 : Option[java.sql.Timestamp']
|       7: Path s21._7 : Option[String']
|       8: Path s21._8 : Option[String']
|       9: Path s21._9 : Option[String']

[2020-07-30 19:06:18,50] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:18,50] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:18,50] [debug] Compiling server-side and mapping with server-side:
| Comprehension s32, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|   from s32: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t10<{WORKFLOW_NAME: Option[String'], METADATA_ARCHIVE_STATUS: Option[String'], END_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_METADATA_SUMMARY_ENTRY_ID: Long', WORKFLOW_EXECUTION_UUID: String', SUBMISSION_TIMESTAMP: Option[java.sql.Timestamp'], PARENT_WORKFLOW_EXECUTION_UUID: Option[String'], START_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_STATUS: Option[String'], ROOT_WORKFLOW_EXECUTION_UUID: Option[String']}>]
|   select: Pure t31 : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|     value: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s32.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s32.WORKFLOW_NAME : Option[String']
|       3: Path s32.WORKFLOW_STATUS : Option[String']
|       4: Path s32.START_TIMESTAMP : Option[java.sql.Timestamp']
|       5: Path s32.END_TIMESTAMP : Option[java.sql.Timestamp']
|       6: Path s32.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       7: Path s32.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       8: Path s32.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       9: Path s32.METADATA_ARCHIVE_STATUS : Option[String']
|   where: Apply Function = : Boolean
|     0: Path s32.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:18,50] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'
|     4: SpecializedJdbcResultConverter$$anon$2 idx=4 : java.sql.Timestamp'
|     5: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : String'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : String'

[2020-07-30 19:06:18,51] [debug] Compiled server-side to:
| CompiledStatement "update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?" : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]

[2020-07-30 19:06:18,51] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]]
|   from s21: CompiledStatement "update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?" : Vector[t31<(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])>]
|   map: CompiledMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'
|         4: SpecializedJdbcResultConverter$$anon$2 idx=4 : java.sql.Timestamp'
|         5: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : String'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : String'

[2020-07-30 19:06:18,51] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:18,51] [debug]       assignUniqueSymbols:    1.547520 ms
[2020-07-30 19:06:18,51] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:18,51] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_filterAdditionalParams], [null], [null], [org.hsqldb.types.TimestampData@674aa81e]]]
[2020-07-30 19:06:18,51] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_filterAdditionalParams], [null], [null], [org.hsqldb.types.TimestampData@674aa81e]]]
[2020-07-30 19:06:18,51] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,51] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,51] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,51] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,51] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_f... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,51] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,51] [debug] Execution of batch insert took 18µs
[2020-07-30 19:06:18,51] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@674adbfe]]]
[2020-07-30 19:06:18,51] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@674adbfe]]]
[2020-07-30 19:06:18,51] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,51] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,51] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,51] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,51] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:realignerTarget... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,51] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,51] [debug]           unrollTailBinds:    0.163269 ms
[2020-07-30 19:06:18,51] [debug]                inferTypes:    0.210442 ms
[2020-07-30 19:06:18,51] [debug]              expandTables:    6.300547 ms
[2020-07-30 19:06:18,51] [debug]           forceOuterBinds:    1.327690 ms
[2020-07-30 19:06:18,51] [debug]         removeMappedTypes:    1.105646 ms
[2020-07-30 19:06:18,51] [debug]                expandSums:    5.259478 ms
[2020-07-30 19:06:18,51] [debug]             expandRecords:    1.933440 ms
[2020-07-30 19:06:18,51] [debug]        flattenProjections:   11.199214 ms
[2020-07-30 19:06:18,51] [debug]              rewriteJoins:    0.213544 ms
[2020-07-30 19:06:18,51] [debug]             verifySymbols:    0.225287 ms
[2020-07-30 19:06:18,51] [debug]             relabelUnions:    0.148049 ms
[2020-07-30 19:06:18,51] [debug]          createAggregates:    0.106498 ms
[2020-07-30 19:06:18,51] [debug]           resolveZipJoins:    0.169648 ms
[2020-07-30 19:06:18,51] [debug]          pruneProjections:    0.568200 ms
[2020-07-30 19:06:18,51] [debug]           rewriteDistinct:    0.192999 ms
[2020-07-30 19:06:18,51] [debug]    createResultSetMapping:    4.457027 ms
[2020-07-30 19:06:18,51] [debug]            hoistClientOps:    6.701214 ms
[2020-07-30 19:06:18,51] [debug]         reorderOperations:    0.257238 ms
[2020-07-30 19:06:18,51] [debug]     mergeToComprehensions:   19.495315 ms
[2020-07-30 19:06:18,51] [debug]            optimizeScalar:    0.199982 ms
[2020-07-30 19:06:18,51] [debug]          removeFieldNames:    6.051759 ms
[2020-07-30 19:06:18,51] [debug]      specializeParameters:    0.211848 ms
[2020-07-30 19:06:18,51] [debug]                   codeGen:    5.340474 ms
[2020-07-30 19:06:18,51] [debug]                     TOTAL:   73.386328 ms
[2020-07-30 19:06:18,51] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,51] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674acf46]]]
[2020-07-30 19:06:18,52] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674acf46]]]
[2020-07-30 19:06:18,52] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,52] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,52] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,52] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,52] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:gatherBQSRRepor... |      | int    | 2020-07-30 19:06:14.94646 |
[2020-07-30 19:06:18,52] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,52] [debug] #7: update [update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?]
[2020-07-30 19:06:18,52] [debug] Preparing statement: update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:18,52] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,52] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_filterSuffix], [javax.sql.rowset.serial.SerialClob@6d99a604], [string], [org.hsqldb.types.TimestampData@674aff26]]]
[2020-07-30 19:06:18,52] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_filterSuffix], [javax.sql.rowset.serial.SerialClob@6d99a604], [string], [org.hsqldb.types.TimestampData@674aff26]]]
[2020-07-30 19:06:18,52] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,52] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,52] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,52] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,52] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_f... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,52] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,53] [debug] Executing prepared update: HikariProxyPreparedStatement@732277417 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6d9377d8[sql=[update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing], [Running], [org.hsqldb.types.TimestampData@562c4c25], [null], [org.hsqldb.types.TimestampData@5d528665], [null], [null], [null], [8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:18,53] [debug] Executing prepared update: HikariProxyPreparedStatement@732277417 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6d9377d8[sql=[update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing], [Running], [org.hsqldb.types.TimestampData@562c4c25], [null], [org.hsqldb.types.TimestampData@5d528665], [null], [null], [null], [8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:18,53] [debug] /---------------------------+-----------------------+---------+-------------------------+-----------+-------------------------+---------+---------+---------+---------------------------\
[2020-07-30 19:06:18,53] [debug] | 1                         | 2                     | 3       | 4                       | 5         | 6                       | 7       | 8       | 9       | 10                        |
[2020-07-30 19:06:18,53] [debug] | String                    | String                | String  | Timestamp               | TIMESTAMP | Timestamp               | VARCHAR | VARCHAR | VARCHAR | String                    |
[2020-07-30 19:06:18,53] [debug] |---------------------------+-----------------------+---------+-------------------------+-----------+-------------------------+---------+---------+---------+---------------------------|
[2020-07-30 19:06:18,53] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing | Running | 2020-07-30 19:06:13.152 | NULL      | 2020-07-30 19:06:13.041 | NULL    | NULL    | NULL    | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:18,53] [debug] \---------------------------+-----------------------+---------+-------------------------+-----------+-------------------------+---------+---------+---------+---------------------------/
[2020-07-30 19:06:18,53] [debug] Execution of prepared update took 182µs
[2020-07-30 19:06:18,53] [debug] Source:
| TableExpansion
|   table s2: Table WORKFLOW_METADATA_SUMMARY_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s2.WORKFLOW_NAME : Option[String']
|       3: Path s2.WORKFLOW_STATUS : Option[String']
|       4: Path s2.START_TIMESTAMP : Option[java.sql.Timestamp']
|       5: Path s2.END_TIMESTAMP : Option[java.sql.Timestamp']
|       6: Path s2.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       7: Path s2.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       8: Path s2.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       9: Path s2.METADATA_ARCHIVE_STATUS : Option[String']
|       10: OptionApply
|         0: Path s2.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'

[2020-07-30 19:06:18,53] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:18,53] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table WORKFLOW_METADATA_SUMMARY_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s3.WORKFLOW_NAME : Option[String']
|       3: Path s3.WORKFLOW_STATUS : Option[String']
|       4: Path s3.START_TIMESTAMP : Option[java.sql.Timestamp']
|       5: Path s3.END_TIMESTAMP : Option[java.sql.Timestamp']
|       6: Path s3.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       7: Path s3.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       8: Path s3.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       9: Path s3.METADATA_ARCHIVE_STATUS : Option[String']
|       10: OptionApply
|         0: Path s3.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'

[2020-07-30 19:06:18,53] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:18,53] [debug] Execution of batch insert took 10ms
[2020-07-30 19:06:18,53] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_knownSites[0]], [javax.sql.rowset.serial.SerialClob@7927a35], [string], [org.hsqldb.types.TimestampData@67490dee]]]
[2020-07-30 19:06:18,53] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_knownSites[0]], [javax.sql.rowset.serial.SerialClob@7927a35], [string], [org.hsqldb.types.TimestampData@67490dee]]]
[2020-07-30 19:06:18,53] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,53] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,53] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,53] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,53] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:baseQualityScor... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,53] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,54] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|   from s5: Insert allFields=[WORKFLOW_EXECUTION_UUID, WORKFLOW_NAME, WORKFLOW_STATUS, START_TIMESTAMP, END_TIMESTAMP, SUBMISSION_TIMESTAMP, PARENT_WORKFLOW_EXECUTION_UUID, ROOT_WORKFLOW_EXECUTION_UUID, METADATA_ARCHIVE_STATUS, WORKFLOW_METADATA_SUMMARY_ENTRY_ID] : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|     table s6: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|       1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s6.WORKFLOW_NAME : Option[String']
|       3: Path s6.WORKFLOW_STATUS : Option[String']
|       4: Path s6.START_TIMESTAMP : Option[java.sql.Timestamp']
|       5: Path s6.END_TIMESTAMP : Option[java.sql.Timestamp']
|       6: Path s6.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|       7: Path s6.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|       8: Path s6.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|       9: Path s6.METADATA_ARCHIVE_STATUS : Option[String']
|   map: TypeMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'], Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'], Option[Long'])
|       1: InsertColumn WORKFLOW_EXECUTION_UUID : String'
|         0: Path s5._1 : String'
|       2: InsertColumn WORKFLOW_NAME : Option[String']
|         0: Path s5._2 : Option[String']
|       3: InsertColumn WORKFLOW_STATUS : Option[String']
|         0: Path s5._3 : Option[String']
|       4: InsertColumn START_TIMESTAMP : Option[java.sql.Timestamp']
|         0: Path s5._4 : Option[java.sql.Timestamp']
|       5: InsertColumn END_TIMESTAMP : Option[java.sql.Timestamp']
|         0: Path s5._5 : Option[java.sql.Timestamp']
|       6: InsertColumn SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         0: Path s5._6 : Option[java.sql.Timestamp']
|       7: InsertColumn PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         0: Path s5._7 : Option[String']
|       8: InsertColumn ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         0: Path s5._8 : Option[String']
|       9: InsertColumn METADATA_ARCHIVE_STATUS : Option[String']
|         0: Path s5._9 : Option[String']
|       10: OptionApply : Option[Long']
|         0: InsertColumn WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'

[2020-07-30 19:06:18,54] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[WORKFLOW_EXECUTION_UUID, WORKFLOW_NAME, WORKFLOW_STATUS, START_TIMESTAMP, END_TIMESTAMP, SUBMISSION_TIMESTAMP, PARENT_WORKFLOW_EXECUTION_UUID, ROOT_WORKFLOW_EXECUTION_UUID, METADATA_ARCHIVE_STATUS, WORKFLOW_METADATA_SUMMARY_ENTRY_ID] : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|   table s6: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|     1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|     2: Path s6.WORKFLOW_NAME : Option[String']
|     3: Path s6.WORKFLOW_STATUS : Option[String']
|     4: Path s6.START_TIMESTAMP : Option[java.sql.Timestamp']
|     5: Path s6.END_TIMESTAMP : Option[java.sql.Timestamp']
|     6: Path s6.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|     7: Path s6.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|     8: Path s6.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|     9: Path s6.METADATA_ARCHIVE_STATUS : Option[String']

[2020-07-30 19:06:18,54] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|     3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'
|     4: SpecializedJdbcResultConverter$$anon$2 idx=4 : java.sql.Timestamp'
|     5: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|     8: SpecializedJdbcResultConverter$$anon$2 idx=8 : String'
|     9: SpecializedJdbcResultConverter$$anon$2 idx=9 : String'
|     10: CompoundResultConverter

[2020-07-30 19:06:18,54] [debug] Compiled server-side to:
| CompiledStatement "insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])

[2020-07-30 19:06:18,54] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])]
|   from s5: CompiledStatement "insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'])
|   map: CompiledMapping : Mapped[(String', Option[String'], Option[String'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[java.sql.Timestamp'], Option[String'], Option[String'], Option[String'], Option[Long'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|         3: SpecializedJdbcResultConverter$$anon$2 idx=3 : String'
|         4: SpecializedJdbcResultConverter$$anon$2 idx=4 : java.sql.Timestamp'
|         5: SpecializedJdbcResultConverter$$anon$2 idx=5 : java.sql.Timestamp'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=6 : java.sql.Timestamp'
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|         8: SpecializedJdbcResultConverter$$anon$2 idx=8 : String'
|         9: SpecializedJdbcResultConverter$$anon$2 idx=9 : String'
|         10: CompoundResultConverter

[2020-07-30 19:06:18,54] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:18,54] [debug]       assignUniqueSymbols:    0.821526 ms
[2020-07-30 19:06:18,54] [debug]                inferTypes:    0.504464 ms
[2020-07-30 19:06:18,54] [debug]            insertCompiler:    4.654100 ms
[2020-07-30 19:06:18,54] [debug]                   codeGen:    2.234995 ms
[2020-07-30 19:06:18,54] [debug]                     TOTAL:    8.215085 ms
[2020-07-30 19:06:18,54] [debug] #8: SingleInsertAction [insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)]
[2020-07-30 19:06:18,54] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,54] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:intervalsToParallelizeByString], [javax.sql.rowset.serial.SerialClob@84c219a5], [string], [org.hsqldb.types.TimestampData@6749351e]]]
[2020-07-30 19:06:18,54] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:intervalsToParallelizeByString], [javax.sql.rowset.serial.SerialClob@84c219a5], [string], [org.hsqldb.types.TimestampData@6749351e]]]
[2020-07-30 19:06:18,54] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,54] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,54] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,54] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,54] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:intervalsToPara... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,54] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,54] [debug] Source:
| Bind
|   from s2: TableExpansion
|     table s3: Table WORKFLOW_METADATA_SUMMARY_ENTRY
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s3.WORKFLOW_NAME : Option[String']
|         3: Path s3.WORKFLOW_STATUS : Option[String']
|         4: Path s3.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s3.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s3.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s3.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s3.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s3.METADATA_ARCHIVE_STATUS : Option[String']
|         10: OptionApply
|           0: Path s3.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'
|   select: Pure t4
|     value: Path s2.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'

[2020-07-30 19:06:18,54] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:18,54] [debug] After phase assignUniqueSymbols:
| Bind
|   from s5: TableExpansion
|     table s6: Table WORKFLOW_METADATA_SUMMARY_ENTRY
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s6.WORKFLOW_NAME : Option[String']
|         3: Path s6.WORKFLOW_STATUS : Option[String']
|         4: Path s6.START_TIMESTAMP : Option[java.sql.Timestamp']
|         5: Path s6.END_TIMESTAMP : Option[java.sql.Timestamp']
|         6: Path s6.SUBMISSION_TIMESTAMP : Option[java.sql.Timestamp']
|         7: Path s6.PARENT_WORKFLOW_EXECUTION_UUID : Option[String']
|         8: Path s6.ROOT_WORKFLOW_EXECUTION_UUID : Option[String']
|         9: Path s6.METADATA_ARCHIVE_STATUS : Option[String']
|         10: OptionApply
|           0: Path s6.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'
|   select: Pure t8
|     value: Path s5.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'

[2020-07-30 19:06:18,54] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:18,54] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(Long')]
|   from s9: Insert allFields=[WORKFLOW_METADATA_SUMMARY_ENTRY_ID] : (Long')
|     table s10: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t7<UnassignedType>]
|     linear: ProductNode : (Long')
|       1: Path s10.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'
|   map: InsertColumn WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'
|     0: Path s9._1 : Long'

[2020-07-30 19:06:18,54] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[WORKFLOW_METADATA_SUMMARY_ENTRY_ID] : (Long')
|   table s10: Table WORKFLOW_METADATA_SUMMARY_ENTRY : Vector[@t7<UnassignedType>]
|   linear: ProductNode : (Long')
|     1: Path s10.WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'

[2020-07-30 19:06:18,54] [debug] Compiled ResultConverter
| BaseResultConverter$mcJ$sp idx=1, name=WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'

[2020-07-30 19:06:18,55] [debug] Compiled server-side to:
| CompiledStatement "insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_METADATA_SUMMARY_ENTRY_ID")  values (?)" : (Long')

[2020-07-30 19:06:18,55] [debug] After phase codeGen:
| ResultSetMapping : Vector[(Long')]
|   from s9: CompiledStatement "insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_METADATA_SUMMARY_ENTRY_ID")  values (?)" : (Long')
|   map: CompiledMapping : Long'
|     converter: BaseResultConverter$mcJ$sp idx=1, name=WORKFLOW_METADATA_SUMMARY_ENTRY_ID : Long'

[2020-07-30 19:06:18,55] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:18,55] [debug]       assignUniqueSymbols:    1.170282 ms
[2020-07-30 19:06:18,55] [debug]                inferTypes:    0.165258 ms
[2020-07-30 19:06:18,55] [debug]            insertCompiler:    0.482683 ms
[2020-07-30 19:06:18,55] [debug]                   codeGen:    1.082039 ms
[2020-07-30 19:06:18,55] [debug]                     TOTAL:    2.900262 ms
[2020-07-30 19:06:18,55] [debug] Preparing insert statement (returning: WORKFLOW_METADATA_SUMMARY_ENTRY_ID): insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)
[2020-07-30 19:06:18,55] [debug] Executing prepared update: HikariProxyPreparedStatement@2109709018 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6bccc5a1[sql=[insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing], [Running], [org.hsqldb.types.TimestampData@562c4c25], [null], [org.hsqldb.types.TimestampData@5d528665], [null], [null], [null]]]
[2020-07-30 19:06:18,55] [debug] Executing prepared update: HikariProxyPreparedStatement@2109709018 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6bccc5a1[sql=[insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing], [Running], [org.hsqldb.types.TimestampData@562c4c25], [null], [org.hsqldb.types.TimestampData@5d528665], [null], [null], [null]]]
[2020-07-30 19:06:18,55] [debug] /---------------------------+-----------------------+---------+-------------------------+-----------+-------------------------+---------+---------+---------\
[2020-07-30 19:06:18,55] [debug] | 1                         | 2                     | 3       | 4                       | 5         | 6                       | 7       | 8       | 9       |
[2020-07-30 19:06:18,55] [debug] | String                    | String                | String  | Timestamp               | TIMESTAMP | Timestamp               | VARCHAR | VARCHAR | VARCHAR |
[2020-07-30 19:06:18,55] [debug] |---------------------------+-----------------------+---------+-------------------------+-----------+-------------------------+---------+---------+---------|
[2020-07-30 19:06:18,55] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing | Running | 2020-07-30 19:06:13.152 | NULL      | 2020-07-30 19:06:13.041 | NULL    | NULL    | NULL    |
[2020-07-30 19:06:18,55] [debug] \---------------------------+-----------------------+---------+-------------------------+-----------+-------------------------+---------+---------+---------/
[2020-07-30 19:06:18,55] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,55] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@674958e6]]]
[2020-07-30 19:06:18,55] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_additionalParams], [null], [null], [org.hsqldb.types.TimestampData@674958e6]]]
[2020-07-30 19:06:18,55] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,55] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,55] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,55] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,55] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:realignerTarget... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,55] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,55] [debug] Execution of batch insert took 15µs
[2020-07-30 19:06:18,55] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_modules], [javax.sql.rowset.serial.SerialClob@654a5323], [string], [org.hsqldb.types.TimestampData@67494c6e]]]
[2020-07-30 19:06:18,55] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_modules], [javax.sql.rowset.serial.SerialClob@654a5323], [string], [org.hsqldb.types.TimestampData@67494c6e]]]
[2020-07-30 19:06:18,55] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,55] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,55] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,55] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,55] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:gatherBQSRRepor... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,55] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,55] [debug] Execution of prepared update took 2ms
[2020-07-30 19:06:18,55] [debug] #9: success ()
[2020-07-30 19:06:18,55] [debug] #10: success ()
[2020-07-30 19:06:18,56] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,56] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_filterFlags], [javax.sql.rowset.serial.SerialClob@48f24ca], [int], [org.hsqldb.types.TimestampData@674973f6]]]
[2020-07-30 19:06:18,56] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_filterFlags], [javax.sql.rowset.serial.SerialClob@48f24ca], [int], [org.hsqldb.types.TimestampData@674973f6]]]
[2020-07-30 19:06:18,56] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,56] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,56] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,56] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,56] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_f... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,56] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,56] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table CUSTOM_LABEL_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.CUSTOM_LABEL_KEY : String'
|           2: Path s4.CUSTOM_LABEL_VALUE : String'
|           3: Path s4.WORKFLOW_EXECUTION_UUID : String'
|           4: OptionApply
|             0: Path s4.CUSTOM_LABEL_ENTRY_ID : Long'
|     where: Apply Function and
|       0: Apply Function =
|         0: Path s3.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84
|       1: Apply Function =
|         0: Path s3.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4
|   select: Pure t7
|     value: TypeMapping
|       0: ProductNode
|         1: Path s2.CUSTOM_LABEL_KEY : String'
|         2: Path s2.CUSTOM_LABEL_VALUE : String'
|         3: Path s2.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,56] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:18,56] [debug] After phase assignUniqueSymbols:
| Bind
|   from s8: Filter s9
|     from s9: TableExpansion
|       table s10: Table CUSTOM_LABEL_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s10.CUSTOM_LABEL_KEY : String'
|           2: Path s10.CUSTOM_LABEL_VALUE : String'
|           3: Path s10.WORKFLOW_EXECUTION_UUID : String'
|           4: OptionApply
|             0: Path s10.CUSTOM_LABEL_ENTRY_ID : Long'
|     where: Apply Function and
|       0: Apply Function =
|         0: Path s9.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84
|       1: Apply Function =
|         0: Path s9.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4
|   select: Pure t12
|     value: TypeMapping
|       0: ProductNode
|         1: Path s8.CUSTOM_LABEL_KEY : String'
|         2: Path s8.CUSTOM_LABEL_VALUE : String'
|         3: Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,56] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:18,56] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:18,56] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,56] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_modules], [javax.sql.rowset.serial.SerialClob@654a5323], [string], [org.hsqldb.types.TimestampData@67496356]]]
[2020-07-30 19:06:18,56] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_modules], [javax.sql.rowset.serial.SerialClob@654a5323], [string], [org.hsqldb.types.TimestampData@67496356]]]
[2020-07-30 19:06:18,56] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,56] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,56] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,56] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,56] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:mergeSplitByInt... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,56] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,56] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.CUSTOM_LABEL_ENTRY)
[2020-07-30 19:06:18,57] [debug] With correct table types:
| Bind : Vector[t12<Mapped[(String', String', String')]>]
|   from s8: Filter s9 : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     from s9: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s9.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|       1: Apply Function = : Boolean
|         0: Path s9.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|   select: Pure t12 : Vector[t12<Mapped[(String', String', String')]>]
|     value: TypeMapping : Mapped[(String', String', String')]
|       0: ProductNode : (String', String', String')
|         1: Path s8.CUSTOM_LABEL_KEY : String'
|         2: Path s8.CUSTOM_LABEL_VALUE : String'
|         3: Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,57] [debug] Table expansions: @t11 -> (s10,TypeMapping)
[2020-07-30 19:06:18,57] [debug] After phase expandTables:
| Bind : Vector[t12<Mapped[(String', String', String')]>]
|   from s8: Filter s9 : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     from s9: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s9.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|       1: Apply Function = : Boolean
|         0: Path s9.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|   select: Pure t12 : Vector[t12<Mapped[(String', String', String')]>]
|     value: TypeMapping : Mapped[(String', String', String')]
|       0: ProductNode : (String', String', String')
|         1: Path s8.CUSTOM_LABEL_KEY : String'
|         2: Path s8.CUSTOM_LABEL_VALUE : String'
|         3: Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,57] [debug] After phase forceOuterBinds:
| Bind : Vector[t12<Mapped[(String', String', String')]>]
|   from s8: Filter s9 : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     from s9: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s9.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|       1: Apply Function = : Boolean
|         0: Path s9.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|   select: Pure t12 : Vector[t12<Mapped[(String', String', String')]>]
|     value: TypeMapping : Mapped[(String', String', String')]
|       0: ProductNode : (String', String', String')
|         1: Path s8.CUSTOM_LABEL_KEY : String'
|         2: Path s8.CUSTOM_LABEL_VALUE : String'
|         3: Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,57] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,57] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:doIndelRealignment], [javax.sql.rowset.serial.SerialClob@155fa2e], [boolean], [org.hsqldb.types.TimestampData@67498ac6]]]
[2020-07-30 19:06:18,57] [debug] After phase removeMappedTypes:
| Bind : Vector[t12<(String', String', String')>]
|   from s8: Filter s9 : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     from s9: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s9.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|       1: Apply Function = : Boolean
|         0: Path s9.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|   select: Pure t12 : Vector[t12<(String', String', String')>]
|     value: ProductNode : (String', String', String')
|       1: Path s8.CUSTOM_LABEL_KEY : String'
|       2: Path s8.CUSTOM_LABEL_VALUE : String'
|       3: Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,57] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:doIndelRealignment], [javax.sql.rowset.serial.SerialClob@155fa2e], [boolean], [org.hsqldb.types.TimestampData@67498ac6]]]
[2020-07-30 19:06:18,57] [debug] Translated type: Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>] -> Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
[2020-07-30 19:06:18,57] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:18,57] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:18,57] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String  | Timestamp                 |
[2020-07-30 19:06:18,57] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:18,57] [debug] Translated type: @t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}> -> @t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>
[2020-07-30 19:06:18,57] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:doIndelRealignment |      | boolean | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,57] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:18,57] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,57] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,57] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:18,57] [debug] Translated type: @t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}> -> @t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>
[2020-07-30 19:06:18,57] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,57] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,57] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:18,57] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:18,57] [debug] Translated type: Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>] -> Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
[2020-07-30 19:06:18,57] [debug] Translated type: @t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}> -> @t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>
[2020-07-30 19:06:18,57] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,57] [debug] Translated type: @t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}> -> @t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>
[2020-07-30 19:06:18,57] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,57] [debug] Translated type: @t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}> -> @t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>
[2020-07-30 19:06:18,57] [debug] Translated type: String' -> String'
[2020-07-30 19:06:18,57] [debug] Translated type: (String', String', String') -> (String', String', String')
[2020-07-30 19:06:18,57] [debug] Translated type: Vector[t12<(String', String', String')>] -> Vector[t12<(String', String', String')>]
[2020-07-30 19:06:18,57] [debug] Translated type: Vector[t12<(String', String', String')>] -> Vector[t12<(String', String', String')>]
[2020-07-30 19:06:18,57] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:18,58] [debug] After phase expandRecords:
| Bind : Vector[t12<(String', String', String')>]
|   from s8: Filter s9 : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     from s9: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s9.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|       1: Apply Function = : Boolean
|         0: Path s9.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|   select: Pure t12 : Vector[t12<(String', String', String')>]
|     value: ProductNode : (String', String', String')
|       1: Path s8.CUSTOM_LABEL_KEY : String'
|       2: Path s8.CUSTOM_LABEL_VALUE : String'
|       3: Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,58] [debug] Analyzing s9.WORKFLOW_EXECUTION_UUID with symbols 
| Path s9.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,58] [debug] Translated s9.WORKFLOW_EXECUTION_UUID to:
| Path s9.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,58] [debug] Analyzing s9.CUSTOM_LABEL_KEY with symbols 
| Path s9.CUSTOM_LABEL_KEY : String'

[2020-07-30 19:06:18,58] [debug] Translated s9.CUSTOM_LABEL_KEY to:
| Path s9.CUSTOM_LABEL_KEY

[2020-07-30 19:06:18,58] [debug] Flattening projection t12
[2020-07-30 19:06:18,58] [debug] Analyzing s8.CUSTOM_LABEL_KEY with symbols 
| Path s8.CUSTOM_LABEL_KEY : String'

[2020-07-30 19:06:18,58] [debug] Translated s8.CUSTOM_LABEL_KEY to:
| Path s8.CUSTOM_LABEL_KEY

[2020-07-30 19:06:18,58] [debug] Analyzing s8.CUSTOM_LABEL_VALUE with symbols 
| Path s8.CUSTOM_LABEL_VALUE : String'

[2020-07-30 19:06:18,58] [debug] Translated s8.CUSTOM_LABEL_VALUE to:
| Path s8.CUSTOM_LABEL_VALUE

[2020-07-30 19:06:18,58] [debug] Analyzing s8.WORKFLOW_EXECUTION_UUID with symbols 
| Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,58] [debug] Translated s8.WORKFLOW_EXECUTION_UUID to:
| Path s8.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,58] [debug] Flattening node at Path 
| ProductNode
|   1: Path s8.CUSTOM_LABEL_KEY
|   2: Path s8.CUSTOM_LABEL_VALUE
|   3: Path s8.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,58] [debug] Flattening node at Path _1
| Path s8.CUSTOM_LABEL_KEY

[2020-07-30 19:06:18,58] [debug] Adding definition: s13 -> Path s8.CUSTOM_LABEL_KEY
[2020-07-30 19:06:18,58] [debug] Flattening node at Path _2
| Path s8.CUSTOM_LABEL_VALUE

[2020-07-30 19:06:18,58] [debug] Adding definition: s14 -> Path s8.CUSTOM_LABEL_VALUE
[2020-07-30 19:06:18,58] [debug] Flattening node at Path _3
| Path s8.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,58] [debug] Adding definition: s15 -> Path s8.WORKFLOW_EXECUTION_UUID
[2020-07-30 19:06:18,58] [debug] Adding translation for t12: (Map(List(_2) -> s14, List(_1) -> s13, List(_3) -> s15), UnassignedType)
[2020-07-30 19:06:18,58] [debug] Flattened projection to
| Pure t12
|   value: StructNode
|     s13: Path s8.CUSTOM_LABEL_KEY
|     s14: Path s8.CUSTOM_LABEL_VALUE
|     s15: Path s8.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:18,58] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,58] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_outputFileName], [javax.sql.rowset.serial.SerialClob@f820c932], [string], [org.hsqldb.types.TimestampData@6749baa6]]]
[2020-07-30 19:06:18,58] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_outputFileName], [javax.sql.rowset.serial.SerialClob@f820c932], [string], [org.hsqldb.types.TimestampData@6749baa6]]]
[2020-07-30 19:06:18,58] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,58] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,58] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,58] [debug] After phase flattenProjections:
| Bind : Vector[t12<{s13: String', s14: String', s15: String'}>]
|   from s8: Filter s9 : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     from s9: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s9.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|       1: Apply Function = : Boolean
|         0: Path s9.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|   select: Pure t12 : Vector[t12<{s13: String', s14: String', s15: String'}>]
|     value: StructNode : {s13: String', s14: String', s15: String'}
|       s13: Path s8.CUSTOM_LABEL_KEY : String'
|       s14: Path s8.CUSTOM_LABEL_VALUE : String'
|       s15: Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,58] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,58] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:baseQualityScor... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,58] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,58] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:18,58] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:18,58] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:18,58] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:18,58] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:18,58] [debug] Unreferenced: t12; Field refs: (@t11,CUSTOM_LABEL_VALUE), (@t11,WORKFLOW_EXECUTION_UUID), (@t11,CUSTOM_LABEL_KEY)
[2020-07-30 19:06:18,58] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:18,58] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:18,58] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:18,58] [debug] Creating mapping from t12<Mapped[(String', String', String')]>
[2020-07-30 19:06:18,58] [debug] Creating mapping from (String', String', String')
[2020-07-30 19:06:18,58] [debug] Creating mapping from String'
[2020-07-30 19:06:18,58] [debug] Creating mapping from String'
[2020-07-30 19:06:18,58] [debug] Creating mapping from String'
[2020-07-30 19:06:18,58] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String')]]
|   from s16: Bind : Vector[t12<{s13: String', s14: String', s15: String'}>]
|     from s8: Filter s9 : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|       from s9: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|       where: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s9.WORKFLOW_EXECUTION_UUID : String'
|           1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|         1: Apply Function = : Boolean
|           0: Path s9.CUSTOM_LABEL_KEY : String'
|           1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|     select: Pure t12 : Vector[t12<{s13: String', s14: String', s15: String'}>]
|       value: StructNode : {s13: String', s14: String', s15: String'}
|         s13: Path s8.CUSTOM_LABEL_KEY : String'
|         s14: Path s8.CUSTOM_LABEL_VALUE : String'
|         s15: Path s8.WORKFLOW_EXECUTION_UUID : String'
|   map: TypeMapping : Mapped[(String', String', String')]
|     0: ProductNode : (String', String', String')
|       1: Path s16.s13 : String'
|       2: Path s16.s14 : String'
|       3: Path s16.s15 : String'

[2020-07-30 19:06:18,58] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:18,58] [debug] New defs: Map(0 -> (Path s8.CUSTOM_LABEL_KEY,s17), 1 -> (Path s8.CUSTOM_LABEL_VALUE,s18), 2 -> (Path s8.WORKFLOW_EXECUTION_UUID,s19))
[2020-07-30 19:06:18,58] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', String')]]
|   from s16: Bind : Vector[t20<{s17: String', s18: String', s19: String'}>]
|     from s8: ...
|     select: Pure t20 : Vector[t20<{s17: String', s18: String', s19: String'}>]
|       value: StructNode : {s17: String', s18: String', s19: String'}
|         s17: Path s8.CUSTOM_LABEL_KEY : String'
|         s18: Path s8.CUSTOM_LABEL_VALUE : String'
|         s19: Path s8.WORKFLOW_EXECUTION_UUID : String'
|   map: TypeMapping : Mapped[(String', String', String')]
|     0: ProductNode : (String', String', String')
|       1: Path s16.s17 : String'
|       2: Path s16.s18 : String'
|       3: Path s16.s19 : String'

[2020-07-30 19:06:18,58] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', String')]]
|   from s16: Bind : Vector[t20<{s17: String', s18: String', s19: String'}>]
|     from s8: Filter s9 : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|       from s9: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|       where: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s9.WORKFLOW_EXECUTION_UUID : String'
|           1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|         1: Apply Function = : Boolean
|           0: Path s9.CUSTOM_LABEL_KEY : String'
|           1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|     select: Pure t20 : Vector[t20<{s17: String', s18: String', s19: String'}>]
|       value: StructNode : {s17: String', s18: String', s19: String'}
|         s17: Path s8.CUSTOM_LABEL_KEY : String'
|         s18: Path s8.CUSTOM_LABEL_VALUE : String'
|         s19: Path s8.WORKFLOW_EXECUTION_UUID : String'
|   map: TypeMapping : Mapped[(String', String', String')]
|     0: ProductNode : (String', String', String')
|       1: Path s16.s17 : String'
|       2: Path s16.s18 : String'
|       3: Path s16.s19 : String'

[2020-07-30 19:06:18,58] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:18,58] [debug] Table fields: Map(@t11 -> Vector(WORKFLOW_EXECUTION_UUID, CUSTOM_LABEL_KEY, CUSTOM_LABEL_VALUE))
[2020-07-30 19:06:18,58] [debug] Creating source from TableNode:
| Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]

[2020-07-30 19:06:18,58] [debug] Mappings are: ConstArray(((@t11,WORKFLOW_EXECUTION_UUID),List(WORKFLOW_EXECUTION_UUID)), ((@t11,CUSTOM_LABEL_KEY),List(CUSTOM_LABEL_KEY)), ((@t11,CUSTOM_LABEL_VALUE),List(CUSTOM_LABEL_VALUE)))
[2020-07-30 19:06:18,59] [debug] Building new Comprehension from:
| Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]

[2020-07-30 19:06:18,59] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,59] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_defaultRuntimeAttributes:cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [string], [org.hsqldb.types.TimestampData@674ec686]]]
[2020-07-30 19:06:18,59] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_defaultRuntimeAttributes:cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [string], [org.hsqldb.types.TimestampData@674ec686]]]
[2020-07-30 19:06:18,59] [debug] Built new Comprehension:
| Comprehension s21, None, None, ConstArray(), None, None, None, None, false : Vector[t22<{s23: String', s24: String', s25: String'}>]
|   from s21: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|   select: Pure t22 : Vector[t22<{s23: String', s24: String', s25: String'}>]
|     value: StructNode : {s23: String', s24: String', s25: String'}
|       s23: Path s21.WORKFLOW_EXECUTION_UUID : String'
|       s24: Path s21.CUSTOM_LABEL_KEY : String'
|       s25: Path s21.CUSTOM_LABEL_VALUE : String'

[2020-07-30 19:06:18,59] [debug] Replacements are: Map((@t11,WORKFLOW_EXECUTION_UUID) -> s23, (@t11,CUSTOM_LABEL_KEY) -> s24, (@t11,CUSTOM_LABEL_VALUE) -> s25)
[2020-07-30 19:06:18,59] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,59] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,59] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,59] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,59] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_d... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,59] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,59] [debug] Merging Filter into Comprehension:
| Filter s9 : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|   from s9: ...
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s9.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|     1: Apply Function = : Boolean
|       0: Path s9.CUSTOM_LABEL_KEY : String'
|       1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'

[2020-07-30 19:06:18,59] [debug] Merged Filter into Comprehension:
| Comprehension s21, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t22<{s23: String', s24: String', s25: String'}>]
|   from s21: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|   select: Pure t22 : Vector[t22<{s23: String', s24: String', s25: String'}>]
|     value: StructNode : {s23: String', s24: String', s25: String'}
|       s23: Path s21.WORKFLOW_EXECUTION_UUID : String'
|       s24: Path s21.CUSTOM_LABEL_KEY : String'
|       s25: Path s21.CUSTOM_LABEL_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s21.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|     1: Apply Function = : Boolean
|       0: Path s21.CUSTOM_LABEL_KEY : String'
|       1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'

[2020-07-30 19:06:18,59] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t20<{s17: String', s18: String', s19: String'}>]
|   from s8: ...
|   select: Pure t20 : Vector[t20<{s17: String', s18: String', s19: String'}>]
|     value: StructNode : {s17: String', s18: String', s19: String'}
|       s17: Path s8.CUSTOM_LABEL_KEY : String'
|       s18: Path s8.CUSTOM_LABEL_VALUE : String'
|       s19: Path s8.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,59] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s21, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t20<{s17: String', s18: String', s19: String'}>]
|   from s21: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|   select: Pure t20 : Vector[t20<{s17: String', s18: String', s19: String'}>]
|     value: StructNode : {s17: String', s18: String', s19: String'}
|       s17: Path s21.CUSTOM_LABEL_KEY : String'
|       s18: Path s21.CUSTOM_LABEL_VALUE : String'
|       s19: Path s21.WORKFLOW_EXECUTION_UUID : String'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s21.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|     1: Apply Function = : Boolean
|       0: Path s21.CUSTOM_LABEL_KEY : String'
|       1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'

[2020-07-30 19:06:18,59] [debug] Replacements are: Map((t20,s17) -> s17, (t20,s18) -> s18, (t20,s19) -> s19)
[2020-07-30 19:06:18,59] [debug] Mappings are: ConstArray(((t20,s17),List(s17)), ((t20,s18),List(s18)), ((t20,s19),List(s19)))
[2020-07-30 19:06:18,59] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', String')]]
|   from s16: Comprehension s21, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t20<{s17: String', s18: String', s19: String'}>]
|     from s21: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     select: Pure t20 : Vector[t20<{s17: String', s18: String', s19: String'}>]
|       value: StructNode : {s17: String', s18: String', s19: String'}
|         s17: Path s21.CUSTOM_LABEL_KEY : String'
|         s18: Path s21.CUSTOM_LABEL_VALUE : String'
|         s19: Path s21.WORKFLOW_EXECUTION_UUID : String'
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s21.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|       1: Apply Function = : Boolean
|         0: Path s21.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|   map: TypeMapping : Mapped[(String', String', String')]
|     0: ProductNode : (String', String', String')
|       1: Path s16.s17 : String'
|       2: Path s16.s18 : String'
|       3: Path s16.s19 : String'

[2020-07-30 19:06:18,59] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:18,59] [debug] Required symbols: s17 -> 0, s18 -> 1, s19 -> 2
[2020-07-30 19:06:18,59] [debug] Transformed RSM: 
| ResultSetMapping
|   from s16: Comprehension s21, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t20<(String', String', String')>]
|     from s21: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     select: Pure t20 : Vector[t20<(String', String', String')>]
|       value: ProductNode : (String', String', String')
|         1: Path s21.CUSTOM_LABEL_KEY : String'
|         2: Path s21.CUSTOM_LABEL_VALUE : String'
|         3: Path s21.WORKFLOW_EXECUTION_UUID : String'
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s21.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|       1: Apply Function = : Boolean
|         0: Path s21.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|   map: TypeMapping : Mapped[(String', String', String')]
|     0: ProductNode : (String', String', String')
|       1: Path s16.s17 : String'
|       2: Path s16.s18 : String'
|       3: Path s16.s19 : String'

[2020-07-30 19:06:18,59] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,59] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_defaultRuntimeAttributes:modules], [javax.sql.rowset.serial.SerialClob@1ba28858], [string], [org.hsqldb.types.TimestampData@674d1996]]]
[2020-07-30 19:06:18,59] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_defaultRuntimeAttributes:modules], [javax.sql.rowset.serial.SerialClob@1ba28858], [string], [org.hsqldb.types.TimestampData@674d1996]]]
[2020-07-30 19:06:18,59] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,59] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,59] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,59] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,59] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_d... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,59] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,61] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', String')]]
|   from s16: Comprehension s21, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t20<(String', String', String')>]
|     from s21: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|     select: Pure t20 : Vector[t20<(String', String', String')>]
|       value: ProductNode : (String', String', String')
|         1: Path s21.CUSTOM_LABEL_KEY : String'
|         2: Path s21.CUSTOM_LABEL_VALUE : String'
|         3: Path s21.WORKFLOW_EXECUTION_UUID : String'
|     where: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s21.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|       1: Apply Function = : Boolean
|         0: Path s21.CUSTOM_LABEL_KEY : String'
|         1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'
|   map: TypeMapping : Mapped[(String', String', String')]
|     0: ProductNode : (String', String', String')
|       1: Path s16._1 : String'
|       2: Path s16._2 : String'
|       3: Path s16._3 : String'

[2020-07-30 19:06:18,61] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:18,61] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:18,61] [debug] Compiling server-side and mapping with server-side:
| Comprehension s21, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t20<(String', String', String')>]
|   from s21: Table CUSTOM_LABEL_ENTRY : Vector[@t11<{CUSTOM_LABEL_KEY: String', CUSTOM_LABEL_VALUE: String', WORKFLOW_EXECUTION_UUID: String', CUSTOM_LABEL_ENTRY_ID: Long'}>]
|   select: Pure t20 : Vector[t20<(String', String', String')>]
|     value: ProductNode : (String', String', String')
|       1: Path s21.CUSTOM_LABEL_KEY : String'
|       2: Path s21.CUSTOM_LABEL_VALUE : String'
|       3: Path s21.WORKFLOW_EXECUTION_UUID : String'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s21.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s5 scala.Function1$$Lambda$311/0x0000000800e66040@7a959e84 : String'
|     1: Apply Function = : Boolean
|       0: Path s21.CUSTOM_LABEL_KEY : String'
|       1: QueryParameter s6 scala.Function1$$Lambda$311/0x0000000800e66040@42074ff4 : String'

[2020-07-30 19:06:18,62] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'

[2020-07-30 19:06:18,62] [debug] Compiled server-side to:
| CompiledStatement "update "CUSTOM_LABEL_ENTRY" set "CUSTOM_LABEL_KEY" = ?, "CUSTOM_LABEL_VALUE" = ?, "WORKFLOW_EXECUTION_UUID" = ? where ("CUSTOM_LABEL_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("CUSTOM_LABEL_ENTRY"."CUSTOM_LABEL_KEY" = ?)" : Vector[t20<(String', String', String')>]

[2020-07-30 19:06:18,62] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', String')]]
|   from s16: CompiledStatement "update "CUSTOM_LABEL_ENTRY" set "CUSTOM_LABEL_KEY" = ?, "CUSTOM_LABEL_VALUE" = ?, "WORKFLOW_EXECUTION_UUID" = ? where ("CUSTOM_LABEL_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("CUSTOM_LABEL_ENTRY"."CUSTOM_LABEL_KEY" = ?)" : Vector[t20<(String', String', String')>]
|   map: CompiledMapping : Mapped[(String', String', String')]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'

[2020-07-30 19:06:18,62] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:18,62] [debug]       assignUniqueSymbols:    1.529127 ms
[2020-07-30 19:06:18,62] [debug]           unrollTailBinds:    1.287507 ms
[2020-07-30 19:06:18,62] [debug]                inferTypes:    0.190174 ms
[2020-07-30 19:06:18,62] [debug]              expandTables:    7.493737 ms
[2020-07-30 19:06:18,62] [debug]           forceOuterBinds:    1.395394 ms
[2020-07-30 19:06:18,62] [debug]         removeMappedTypes:    1.484058 ms
[2020-07-30 19:06:18,62] [debug]                expandSums:    2.838904 ms
[2020-07-30 19:06:18,62] [debug]             expandRecords:    1.305148 ms
[2020-07-30 19:06:18,62] [debug]        flattenProjections:    3.690298 ms
[2020-07-30 19:06:18,62] [debug]              rewriteJoins:    0.127444 ms
[2020-07-30 19:06:18,62] [debug]             verifySymbols:    0.130077 ms
[2020-07-30 19:06:18,62] [debug]             relabelUnions:    0.090716 ms
[2020-07-30 19:06:18,62] [debug]          createAggregates:    0.047322 ms
[2020-07-30 19:06:18,62] [debug]           resolveZipJoins:    0.078594 ms
[2020-07-30 19:06:18,62] [debug] Execution of batch insert took 26ms
[2020-07-30 19:06:18,62] [debug]          pruneProjections:    0.389299 ms
[2020-07-30 19:06:18,62] [debug]           rewriteDistinct:    0.139771 ms
[2020-07-30 19:06:18,62] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_defaultRuntimeAttributes:memory], [javax.sql.rowset.serial.SerialClob@2609e2], [string], [org.hsqldb.types.TimestampData@674d0d1e]]]
[2020-07-30 19:06:18,62] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_defaultRuntimeAttributes:memory], [javax.sql.rowset.serial.SerialClob@2609e2], [string], [org.hsqldb.types.TimestampData@674d0d1e]]]
[2020-07-30 19:06:18,62] [debug]    createResultSetMapping:    1.743677 ms
[2020-07-30 19:06:18,62] [debug]            hoistClientOps:    2.554253 ms
[2020-07-30 19:06:18,62] [debug]         reorderOperations:    0.132906 ms
[2020-07-30 19:06:18,62] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,62] [debug]     mergeToComprehensions:    6.723971 ms
[2020-07-30 19:06:18,62] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,62] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,62] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,62] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_d... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,62] [debug]            optimizeScalar:    0.159497 ms
[2020-07-30 19:06:18,62] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,62] [debug]          removeFieldNames:   21.972332 ms
[2020-07-30 19:06:18,62] [debug]      specializeParameters:    0.267810 ms
[2020-07-30 19:06:18,62] [debug]                   codeGen:    4.623183 ms
[2020-07-30 19:06:18,62] [debug]                     TOTAL:   60.395199 ms
[2020-07-30 19:06:18,62] [debug] SSL Read Request Status: Status = BUFFER_UNDERFLOW HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 0 bytesProduced = 0, java.nio.HeapByteBuffer[pos=0 lim=16709 cap=16709]
[2020-07-30 19:06:18,62] [debug] #11: update [update "CUSTOM_LABEL_ENTRY" set "CUSTOM_LABEL_KEY" = ?, "CUSTOM_LABEL_VALUE" = ?, "WORKFLOW_EXECUTION_UUID" = ? where ("CUSTOM_LABEL_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("CUSTOM_LABEL_ENTRY"."CUSTOM_LABEL_KEY" = ?)]
[2020-07-30 19:06:18,62] [debug] Preparing statement: update "CUSTOM_LABEL_ENTRY" set "CUSTOM_LABEL_KEY" = ?, "CUSTOM_LABEL_VALUE" = ?, "WORKFLOW_EXECUTION_UUID" = ? where ("CUSTOM_LABEL_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("CUSTOM_LABEL_ENTRY"."CUSTOM_LABEL_KEY" = ?)
[2020-07-30 19:06:18,62] [debug] Executing prepared update: HikariProxyPreparedStatement@1541298206 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1507d5e2[sql=[update "CUSTOM_LABEL_ENTRY" set "CUSTOM_LABEL_KEY" = ?, "CUSTOM_LABEL_VALUE" = ?, "WORKFLOW_EXECUTION_UUID" = ? where ("CUSTOM_LABEL_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("CUSTOM_LABEL_ENTRY"."CUSTOM_LABEL_KEY" = ?)], parameters=[[cromwell-workflow-id], [cromwell-8b168b0d-854f-4ba0-99b6-35b7259a96fc], [8b168b0d-854f-4ba0-99b6-35b7259a96fc], [8b168b0d-854f-4ba0-99b6-35b7259a96fc], [cromwell-workflow-id]]]
[2020-07-30 19:06:18,63] [debug] Executing prepared update: HikariProxyPreparedStatement@1541298206 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1507d5e2[sql=[update "CUSTOM_LABEL_ENTRY" set "CUSTOM_LABEL_KEY" = ?, "CUSTOM_LABEL_VALUE" = ?, "WORKFLOW_EXECUTION_UUID" = ? where ("CUSTOM_LABEL_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("CUSTOM_LABEL_ENTRY"."CUSTOM_LABEL_KEY" = ?)], parameters=[[cromwell-workflow-id], [cromwell-8b168b0d-854f-4ba0-99b6-35b7259a96fc], [8b168b0d-854f-4ba0-99b6-35b7259a96fc], [8b168b0d-854f-4ba0-99b6-35b7259a96fc], [cromwell-workflow-id]]]
[2020-07-30 19:06:18,63] [debug] /----------------------+---------------------------+---------------------------+---------------------------+----------------------\
[2020-07-30 19:06:18,63] [debug] | 1                    | 2                         | 3                         | 4                         | 5                    |
[2020-07-30 19:06:18,63] [debug] | String               | String                    | String                    | String                    | String               |
[2020-07-30 19:06:18,63] [debug] |----------------------+---------------------------+---------------------------+---------------------------+----------------------|
[2020-07-30 19:06:18,63] [debug] | cromwell-workflow-id | cromwell-8b168b0d-854f... | 8b168b0d-854f-4ba0-99b... | 8b168b0d-854f-4ba0-99b... | cromwell-workflow-id |
[2020-07-30 19:06:18,63] [debug] \----------------------+---------------------------+---------------------------+---------------------------+----------------------/
[2020-07-30 19:06:18,63] [debug] Execution of prepared update took 126µs
[2020-07-30 19:06:18,63] [debug] Source:
| TableExpansion
|   table s2: Table CUSTOM_LABEL_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.CUSTOM_LABEL_KEY : String'
|       2: Path s2.CUSTOM_LABEL_VALUE : String'
|       3: Path s2.WORKFLOW_EXECUTION_UUID : String'
|       4: OptionApply
|         0: Path s2.CUSTOM_LABEL_ENTRY_ID : Long'

[2020-07-30 19:06:18,63] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:18,63] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table CUSTOM_LABEL_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.CUSTOM_LABEL_KEY : String'
|       2: Path s3.CUSTOM_LABEL_VALUE : String'
|       3: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       4: OptionApply
|         0: Path s3.CUSTOM_LABEL_ENTRY_ID : Long'

[2020-07-30 19:06:18,63] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:18,63] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,63] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_defaultRuntimeAttributes:overhead], [javax.sql.rowset.serial.SerialClob@1b394], [string], [org.hsqldb.types.TimestampData@674d30e6]]]
[2020-07-30 19:06:18,63] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_defaultRuntimeAttributes:overhead], [javax.sql.rowset.serial.SerialClob@1b394], [string], [org.hsqldb.types.TimestampData@674d30e6]]]
[2020-07-30 19:06:18,63] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String')]
|   from s5: Insert allFields=[CUSTOM_LABEL_KEY, CUSTOM_LABEL_VALUE, WORKFLOW_EXECUTION_UUID, CUSTOM_LABEL_ENTRY_ID] : (String', String', String')
|     table s6: Table CUSTOM_LABEL_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String')
|       1: Path s6.CUSTOM_LABEL_KEY : String'
|       2: Path s6.CUSTOM_LABEL_VALUE : String'
|       3: Path s6.WORKFLOW_EXECUTION_UUID : String'
|   map: TypeMapping : Mapped[(String', String', String', Option[Long'])]
|     0: ProductNode : (String', String', String', Option[Long'])
|       1: InsertColumn CUSTOM_LABEL_KEY : String'
|         0: Path s5._1 : String'
|       2: InsertColumn CUSTOM_LABEL_VALUE : String'
|         0: Path s5._2 : String'
|       3: InsertColumn WORKFLOW_EXECUTION_UUID : String'
|         0: Path s5._3 : String'
|       4: OptionApply : Option[Long']
|         0: InsertColumn CUSTOM_LABEL_ENTRY_ID : Long'

[2020-07-30 19:06:18,63] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,63] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,63] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,63] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,63] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_d... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,63] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,63] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[CUSTOM_LABEL_KEY, CUSTOM_LABEL_VALUE, WORKFLOW_EXECUTION_UUID, CUSTOM_LABEL_ENTRY_ID] : (String', String', String')
|   table s6: Table CUSTOM_LABEL_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String')
|     1: Path s6.CUSTOM_LABEL_KEY : String'
|     2: Path s6.CUSTOM_LABEL_VALUE : String'
|     3: Path s6.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:18,63] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=CUSTOM_LABEL_KEY : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=CUSTOM_LABEL_VALUE : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=WORKFLOW_EXECUTION_UUID : String'
|     4: CompoundResultConverter

[2020-07-30 19:06:18,63] [debug] Compiled server-side to:
| CompiledStatement "insert into "CUSTOM_LABEL_ENTRY" ("CUSTOM_LABEL_KEY","CUSTOM_LABEL_VALUE","WORKFLOW_EXECUTION_UUID")  values (?,?,?)" : (String', String', String')

[2020-07-30 19:06:18,63] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', String', String')]
|   from s5: CompiledStatement "insert into "CUSTOM_LABEL_ENTRY" ("CUSTOM_LABEL_KEY","CUSTOM_LABEL_VALUE","WORKFLOW_EXECUTION_UUID")  values (?,?,?)" : (String', String', String')
|   map: CompiledMapping : Mapped[(String', String', String', Option[Long'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=CUSTOM_LABEL_KEY : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=CUSTOM_LABEL_VALUE : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=WORKFLOW_EXECUTION_UUID : String'
|         4: CompoundResultConverter

[2020-07-30 19:06:18,63] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:18,63] [debug]       assignUniqueSymbols:    0.546933 ms
[2020-07-30 19:06:18,63] [debug]                inferTypes:    0.158268 ms
[2020-07-30 19:06:18,63] [debug]            insertCompiler:    1.208884 ms
[2020-07-30 19:06:18,63] [debug]                   codeGen:    1.732884 ms
[2020-07-30 19:06:18,63] [debug]                     TOTAL:    3.646969 ms
[2020-07-30 19:06:18,63] [debug] #12: SingleInsertAction [insert into "CUSTOM_LABEL_ENTRY" ("CUSTOM_LABEL_KEY","CUSTOM_LABEL_VALUE","WORKFLOW_EXECUTION_UUID")  values (?,?,?)]
[2020-07-30 19:06:18,63] [debug] Source:
| Bind
|   from s2: TableExpansion
|     table s3: Table CUSTOM_LABEL_ENTRY
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.CUSTOM_LABEL_KEY : String'
|         2: Path s3.CUSTOM_LABEL_VALUE : String'
|         3: Path s3.WORKFLOW_EXECUTION_UUID : String'
|         4: OptionApply
|           0: Path s3.CUSTOM_LABEL_ENTRY_ID : Long'
|   select: Pure t4
|     value: Path s2.CUSTOM_LABEL_ENTRY_ID : Long'

[2020-07-30 19:06:18,63] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:18,63] [debug] After phase assignUniqueSymbols:
| Bind
|   from s5: TableExpansion
|     table s6: Table CUSTOM_LABEL_ENTRY
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s6.CUSTOM_LABEL_KEY : String'
|         2: Path s6.CUSTOM_LABEL_VALUE : String'
|         3: Path s6.WORKFLOW_EXECUTION_UUID : String'
|         4: OptionApply
|           0: Path s6.CUSTOM_LABEL_ENTRY_ID : Long'
|   select: Pure t8
|     value: Path s5.CUSTOM_LABEL_ENTRY_ID : Long'

[2020-07-30 19:06:18,63] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:18,63] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(Long')]
|   from s9: Insert allFields=[CUSTOM_LABEL_ENTRY_ID] : (Long')
|     table s10: Table CUSTOM_LABEL_ENTRY : Vector[@t7<UnassignedType>]
|     linear: ProductNode : (Long')
|       1: Path s10.CUSTOM_LABEL_ENTRY_ID : Long'
|   map: InsertColumn CUSTOM_LABEL_ENTRY_ID : Long'
|     0: Path s9._1 : Long'

[2020-07-30 19:06:18,63] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[CUSTOM_LABEL_ENTRY_ID] : (Long')
|   table s10: Table CUSTOM_LABEL_ENTRY : Vector[@t7<UnassignedType>]
|   linear: ProductNode : (Long')
|     1: Path s10.CUSTOM_LABEL_ENTRY_ID : Long'

[2020-07-30 19:06:18,63] [debug] Compiled ResultConverter
| BaseResultConverter$mcJ$sp idx=1, name=CUSTOM_LABEL_ENTRY_ID : Long'

[2020-07-30 19:06:18,63] [debug] Compiled server-side to:
| CompiledStatement "insert into "CUSTOM_LABEL_ENTRY" ("CUSTOM_LABEL_ENTRY_ID")  values (?)" : (Long')

[2020-07-30 19:06:18,63] [debug] After phase codeGen:
| ResultSetMapping : Vector[(Long')]
|   from s9: CompiledStatement "insert into "CUSTOM_LABEL_ENTRY" ("CUSTOM_LABEL_ENTRY_ID")  values (?)" : (Long')
|   map: CompiledMapping : Long'
|     converter: BaseResultConverter$mcJ$sp idx=1, name=CUSTOM_LABEL_ENTRY_ID : Long'

[2020-07-30 19:06:18,63] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:18,63] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,63] [debug]       assignUniqueSymbols:    0.740159 ms
[2020-07-30 19:06:18,63] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_defaultRuntimeAttributes:timeout], [javax.sql.rowset.serial.SerialClob@1b394], [string], [org.hsqldb.types.TimestampData@674d246e]]]
[2020-07-30 19:06:18,63] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_defaultRuntimeAttributes:timeout], [javax.sql.rowset.serial.SerialClob@1b394], [string], [org.hsqldb.types.TimestampData@674d246e]]]
[2020-07-30 19:06:18,64] [debug]                inferTypes:    0.134188 ms
[2020-07-30 19:06:18,64] [debug]            insertCompiler:    0.531538 ms
[2020-07-30 19:06:18,64] [debug]                   codeGen:    0.943624 ms
[2020-07-30 19:06:18,64] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,64] [debug]                     TOTAL:    2.349509 ms
[2020-07-30 19:06:18,64] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,64] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,64] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,64] [debug] Preparing insert statement (returning: CUSTOM_LABEL_ENTRY_ID): insert into "CUSTOM_LABEL_ENTRY" ("CUSTOM_LABEL_KEY","CUSTOM_LABEL_VALUE","WORKFLOW_EXECUTION_UUID")  values (?,?,?)
[2020-07-30 19:06:18,64] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_d... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,64] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,64] [debug] Executing prepared update: HikariProxyPreparedStatement@2133917656 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@c3fd9c1[sql=[insert into "CUSTOM_LABEL_ENTRY" ("CUSTOM_LABEL_KEY","CUSTOM_LABEL_VALUE","WORKFLOW_EXECUTION_UUID")  values (?,?,?)], parameters=[[cromwell-workflow-id], [cromwell-8b168b0d-854f-4ba0-99b6-35b7259a96fc], [8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:18,64] [debug] Executing prepared update: HikariProxyPreparedStatement@2133917656 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@c3fd9c1[sql=[insert into "CUSTOM_LABEL_ENTRY" ("CUSTOM_LABEL_KEY","CUSTOM_LABEL_VALUE","WORKFLOW_EXECUTION_UUID")  values (?,?,?)], parameters=[[cromwell-workflow-id], [cromwell-8b168b0d-854f-4ba0-99b6-35b7259a96fc], [8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:18,64] [debug] /----------------------+---------------------------+---------------------------\
[2020-07-30 19:06:18,64] [debug] | 1                    | 2                         | 3                         |
[2020-07-30 19:06:18,64] [debug] | String               | String                    | String                    |
[2020-07-30 19:06:18,64] [debug] |----------------------+---------------------------+---------------------------|
[2020-07-30 19:06:18,64] [debug] | cromwell-workflow-id | cromwell-8b168b0d-854f... | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:18,64] [debug] \----------------------+---------------------------+---------------------------/
[2020-07-30 19:06:18,64] [debug] Execution of prepared update took 240µs
[2020-07-30 19:06:18,64] [debug] #13: success ()
[2020-07-30 19:06:18,64] [debug] #14: update [update "CUSTOM_LABEL_ENTRY" set "CUSTOM_LABEL_KEY" = ?, "CUSTOM_LABEL_VALUE" = ?, "WORKFLOW_EXECUTION_UUID" = ? where ("CUSTOM_LABEL_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("CUSTOM_LABEL_ENTRY"."CUSTOM_LABEL_KEY" = ?)]
[2020-07-30 19:06:18,64] [debug] Preparing statement: update "CUSTOM_LABEL_ENTRY" set "CUSTOM_LABEL_KEY" = ?, "CUSTOM_LABEL_VALUE" = ?, "WORKFLOW_EXECUTION_UUID" = ? where ("CUSTOM_LABEL_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("CUSTOM_LABEL_ENTRY"."CUSTOM_LABEL_KEY" = ?)
[2020-07-30 19:06:18,64] [debug] Executing prepared update: HikariProxyPreparedStatement@1614959382 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1241714e[sql=[update "CUSTOM_LABEL_ENTRY" set "CUSTOM_LABEL_KEY" = ?, "CUSTOM_LABEL_VALUE" = ?, "WORKFLOW_EXECUTION_UUID" = ? where ("CUSTOM_LABEL_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("CUSTOM_LABEL_ENTRY"."CUSTOM_LABEL_KEY" = ?)], parameters=[[cromwell-workflow-id], [cromwell-8b168b0d-854f-4ba0-99b6-35b7259a96fc], [8b168b0d-854f-4ba0-99b6-35b7259a96fc], [8b168b0d-854f-4ba0-99b6-35b7259a96fc], [cromwell-workflow-id]]]
[2020-07-30 19:06:18,64] [debug] Executing prepared update: HikariProxyPreparedStatement@1614959382 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1241714e[sql=[update "CUSTOM_LABEL_ENTRY" set "CUSTOM_LABEL_KEY" = ?, "CUSTOM_LABEL_VALUE" = ?, "WORKFLOW_EXECUTION_UUID" = ? where ("CUSTOM_LABEL_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("CUSTOM_LABEL_ENTRY"."CUSTOM_LABEL_KEY" = ?)], parameters=[[cromwell-workflow-id], [cromwell-8b168b0d-854f-4ba0-99b6-35b7259a96fc], [8b168b0d-854f-4ba0-99b6-35b7259a96fc], [8b168b0d-854f-4ba0-99b6-35b7259a96fc], [cromwell-workflow-id]]]
[2020-07-30 19:06:18,64] [debug] /----------------------+---------------------------+---------------------------+---------------------------+----------------------\
[2020-07-30 19:06:18,64] [debug] | 1                    | 2                         | 3                         | 4                         | 5                    |
[2020-07-30 19:06:18,64] [debug] | String               | String                    | String                    | String                    | String               |
[2020-07-30 19:06:18,64] [debug] |----------------------+---------------------------+---------------------------+---------------------------+----------------------|
[2020-07-30 19:06:18,64] [debug] | cromwell-workflow-id | cromwell-8b168b0d-854f... | 8b168b0d-854f-4ba0-99b... | 8b168b0d-854f-4ba0-99b... | cromwell-workflow-id |
[2020-07-30 19:06:18,64] [debug] \----------------------+---------------------------+---------------------------+---------------------------+----------------------/
[2020-07-30 19:06:18,64] [debug] Execution of prepared update took 387µs
[2020-07-30 19:06:18,64] [debug] #15: success ()
[2020-07-30 19:06:18,64] [debug] #16: success ()
[2020-07-30 19:06:18,64] [debug] #17: success ()
[2020-07-30 19:06:18,64] [debug] #18: success ((),Vector(9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048))
[2020-07-30 19:06:18,64] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: Apply Function in
|     0: Path s2.METADATA_JOURNAL_ID : Long'
|     1: ProductNode
|       1: LiteralNode 9041 (volatileHint=false)
|       2: LiteralNode 9042 (volatileHint=false)
|       3: LiteralNode 9043 (volatileHint=false)
|       4: LiteralNode 9044 (volatileHint=false)
|       5: LiteralNode 9045 (volatileHint=false)
|       6: LiteralNode 9046 (volatileHint=false)
|       7: LiteralNode 9047 (volatileHint=false)
|       8: LiteralNode 9048 (volatileHint=false)

[2020-07-30 19:06:18,64] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:18,64] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: Apply Function in
|     0: Path s4.METADATA_JOURNAL_ID : Long'
|     1: ProductNode
|       1: LiteralNode 9041 (volatileHint=false)
|       2: LiteralNode 9042 (volatileHint=false)
|       3: LiteralNode 9043 (volatileHint=false)
|       4: LiteralNode 9044 (volatileHint=false)
|       5: LiteralNode 9045 (volatileHint=false)
|       6: LiteralNode 9046 (volatileHint=false)
|       7: LiteralNode 9047 (volatileHint=false)
|       8: LiteralNode 9048 (volatileHint=false)

[2020-07-30 19:06:18,64] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:18,64] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,64] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:18,64] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@674d7f7e]]]
[2020-07-30 19:06:18,64] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:18,64] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:analyzeCovariates_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@674d7f7e]]]
[2020-07-30 19:06:18,64] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,64] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,64] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,64] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: Apply Function in : Boolean
|     0: Path s4.METADATA_JOURNAL_ID : Long'
|     1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|       1: LiteralNode 9041 (volatileHint=false) : Long'
|       2: LiteralNode 9042 (volatileHint=false) : Long'
|       3: LiteralNode 9043 (volatileHint=false) : Long'
|       4: LiteralNode 9044 (volatileHint=false) : Long'
|       5: LiteralNode 9045 (volatileHint=false) : Long'
|       6: LiteralNode 9046 (volatileHint=false) : Long'
|       7: LiteralNode 9047 (volatileHint=false) : Long'
|       8: LiteralNode 9048 (volatileHint=false) : Long'

[2020-07-30 19:06:18,64] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,64] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:analyzeCovariat... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,64] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:18,64] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,64] [debug] Expanding tables in result type
[2020-07-30 19:06:18,64] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: Apply Function in : Boolean
|       0: Path s4.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9041 (volatileHint=false) : Long'
|         2: LiteralNode 9042 (volatileHint=false) : Long'
|         3: LiteralNode 9043 (volatileHint=false) : Long'
|         4: LiteralNode 9044 (volatileHint=false) : Long'
|         5: LiteralNode 9045 (volatileHint=false) : Long'
|         6: LiteralNode 9046 (volatileHint=false) : Long'
|         7: LiteralNode 9047 (volatileHint=false) : Long'
|         8: LiteralNode 9048 (volatileHint=false) : Long'
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,65] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: Apply Function in : Boolean
|       0: Path s4.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9041 (volatileHint=false) : Long'
|         2: LiteralNode 9042 (volatileHint=false) : Long'
|         3: LiteralNode 9043 (volatileHint=false) : Long'
|         4: LiteralNode 9044 (volatileHint=false) : Long'
|         5: LiteralNode 9045 (volatileHint=false) : Long'
|         6: LiteralNode 9046 (volatileHint=false) : Long'
|         7: LiteralNode 9047 (volatileHint=false) : Long'
|         8: LiteralNode 9048 (volatileHint=false) : Long'
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,65] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: Apply Function in : Boolean
|       0: Path s4.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9041 (volatileHint=false) : Long'
|         2: LiteralNode 9042 (volatileHint=false) : Long'
|         3: LiteralNode 9043 (volatileHint=false) : Long'
|         4: LiteralNode 9044 (volatileHint=false) : Long'
|         5: LiteralNode 9045 (volatileHint=false) : Long'
|         6: LiteralNode 9046 (volatileHint=false) : Long'
|         7: LiteralNode 9047 (volatileHint=false) : Long'
|         8: LiteralNode 9048 (volatileHint=false) : Long'
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,65] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:18,65] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: Apply Function in : Boolean
|       0: Path s4.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9041 (volatileHint=false) : Long'
|         2: LiteralNode 9042 (volatileHint=false) : Long'
|         3: LiteralNode 9043 (volatileHint=false) : Long'
|         4: LiteralNode 9044 (volatileHint=false) : Long'
|         5: LiteralNode 9045 (volatileHint=false) : Long'
|         6: LiteralNode 9046 (volatileHint=false) : Long'
|         7: LiteralNode 9047 (volatileHint=false) : Long'
|         8: LiteralNode 9048 (volatileHint=false) : Long'
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,65] [debug] Analyzing s4.METADATA_JOURNAL_ID with symbols 
| Path s4.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,65] [debug] Translated s4.METADATA_JOURNAL_ID to:
| Path s4.METADATA_JOURNAL_ID

[2020-07-30 19:06:18,65] [debug] Flattening projection t8
[2020-07-30 19:06:18,65] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,65] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:18,65] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:18,65] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:18,65] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:18,65] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:18,65] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: Apply Function in : Boolean
|       0: Path s4.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9041 (volatileHint=false) : Long'
|         2: LiteralNode 9042 (volatileHint=false) : Long'
|         3: LiteralNode 9043 (volatileHint=false) : Long'
|         4: LiteralNode 9044 (volatileHint=false) : Long'
|         5: LiteralNode 9045 (volatileHint=false) : Long'
|         6: LiteralNode 9046 (volatileHint=false) : Long'
|         7: LiteralNode 9047 (volatileHint=false) : Long'
|         8: LiteralNode 9048 (volatileHint=false) : Long'
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,65] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:18,65] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:18,65] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:18,65] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:18,65] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:18,65] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:18,65] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:18,65] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:18,65] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:18,65] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:18,65] [debug] Creating mapping from Long'
[2020-07-30 19:06:18,65] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: Apply Function in : Boolean
|         0: Path s4.METADATA_JOURNAL_ID : Long'
|         1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|           1: LiteralNode 9041 (volatileHint=false) : Long'
|           2: LiteralNode 9042 (volatileHint=false) : Long'
|           3: LiteralNode 9043 (volatileHint=false) : Long'
|           4: LiteralNode 9044 (volatileHint=false) : Long'
|           5: LiteralNode 9045 (volatileHint=false) : Long'
|           6: LiteralNode 9046 (volatileHint=false) : Long'
|           7: LiteralNode 9047 (volatileHint=false) : Long'
|           8: LiteralNode 9048 (volatileHint=false) : Long'
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:18,65] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:18,65] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,65] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:18,65] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_jobMemory], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674d66ee]]]
[2020-07-30 19:06:18,65] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:splitStringToArray_jobMemory], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@674d66ee]]]
[2020-07-30 19:06:18,65] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:18,65] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,65] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,65] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,65] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,65] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:splitStringToAr... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,65] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,65] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: Apply Function in : Boolean
|         0: Path s4.METADATA_JOURNAL_ID : Long'
|         1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|           1: LiteralNode 9041 (volatileHint=false) : Long'
|           2: LiteralNode 9042 (volatileHint=false) : Long'
|           3: LiteralNode 9043 (volatileHint=false) : Long'
|           4: LiteralNode 9044 (volatileHint=false) : Long'
|           5: LiteralNode 9045 (volatileHint=false) : Long'
|           6: LiteralNode 9046 (volatileHint=false) : Long'
|           7: LiteralNode 9047 (volatileHint=false) : Long'
|           8: LiteralNode 9048 (volatileHint=false) : Long'
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:18,66] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:18,66] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:18,66] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:18,66] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:18,66] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:18,66] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,66] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:18,66] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: Apply Function in : Boolean
|     0: Path s4.METADATA_JOURNAL_ID : Long'
|     1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|       1: LiteralNode 9041 (volatileHint=false) : Long'
|       2: LiteralNode 9042 (volatileHint=false) : Long'
|       3: LiteralNode 9043 (volatileHint=false) : Long'
|       4: LiteralNode 9044 (volatileHint=false) : Long'
|       5: LiteralNode 9045 (volatileHint=false) : Long'
|       6: LiteralNode 9046 (volatileHint=false) : Long'
|       7: LiteralNode 9047 (volatileHint=false) : Long'
|       8: LiteralNode 9048 (volatileHint=false) : Long'

[2020-07-30 19:06:18,66] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: Apply Function in : Boolean
|     0: Path s13.METADATA_JOURNAL_ID : Long'
|     1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|       1: LiteralNode 9041 (volatileHint=false) : Long'
|       2: LiteralNode 9042 (volatileHint=false) : Long'
|       3: LiteralNode 9043 (volatileHint=false) : Long'
|       4: LiteralNode 9044 (volatileHint=false) : Long'
|       5: LiteralNode 9045 (volatileHint=false) : Long'
|       6: LiteralNode 9046 (volatileHint=false) : Long'
|       7: LiteralNode 9047 (volatileHint=false) : Long'
|       8: LiteralNode 9048 (volatileHint=false) : Long'

[2020-07-30 19:06:18,66] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,66] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: Apply Function in : Boolean
|     0: Path s13.METADATA_JOURNAL_ID : Long'
|     1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|       1: LiteralNode 9041 (volatileHint=false) : Long'
|       2: LiteralNode 9042 (volatileHint=false) : Long'
|       3: LiteralNode 9043 (volatileHint=false) : Long'
|       4: LiteralNode 9044 (volatileHint=false) : Long'
|       5: LiteralNode 9045 (volatileHint=false) : Long'
|       6: LiteralNode 9046 (volatileHint=false) : Long'
|       7: LiteralNode 9047 (volatileHint=false) : Long'
|       8: LiteralNode 9048 (volatileHint=false) : Long'

[2020-07-30 19:06:18,66] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:18,66] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:18,66] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,66] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@674d964e]]]
[2020-07-30 19:06:18,66] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:mergeSplitByIntervalBams_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@674d964e]]]
[2020-07-30 19:06:18,66] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,66] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,66] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,66] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: Apply Function in : Boolean
|       0: Path s13.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9041 (volatileHint=false) : Long'
|         2: LiteralNode 9042 (volatileHint=false) : Long'
|         3: LiteralNode 9043 (volatileHint=false) : Long'
|         4: LiteralNode 9044 (volatileHint=false) : Long'
|         5: LiteralNode 9045 (volatileHint=false) : Long'
|         6: LiteralNode 9046 (volatileHint=false) : Long'
|         7: LiteralNode 9047 (volatileHint=false) : Long'
|         8: LiteralNode 9048 (volatileHint=false) : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:18,66] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,66] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:mergeSplitByInt... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,66] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,66] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:18,66] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:18,66] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: Apply Function in : Boolean
|       0: Path s13.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9041 (volatileHint=false) : Long'
|         2: LiteralNode 9042 (volatileHint=false) : Long'
|         3: LiteralNode 9043 (volatileHint=false) : Long'
|         4: LiteralNode 9044 (volatileHint=false) : Long'
|         5: LiteralNode 9045 (volatileHint=false) : Long'
|         6: LiteralNode 9046 (volatileHint=false) : Long'
|         7: LiteralNode 9047 (volatileHint=false) : Long'
|         8: LiteralNode 9048 (volatileHint=false) : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:18,66] [debug] SSL Read Request Status: Status = OK HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 4394 bytesProduced = 4365, java.nio.HeapByteBuffer[pos=4365 lim=16709 cap=16709]
[2020-07-30 19:06:18,66] [debug] SSL Read Request Status: Status = BUFFER_UNDERFLOW HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 0 bytesProduced = 0, java.nio.HeapByteBuffer[pos=0 lim=16709 cap=16709]
[2020-07-30 19:06:18,66] [debug] SSL Read Request Status: Status = BUFFER_UNDERFLOW HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 0 bytesProduced = 0, java.nio.HeapByteBuffer[pos=0 lim=16709 cap=16709]
[2020-07-30 19:06:18,66] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: Apply Function in : Boolean
|       0: Path s13.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9041 (volatileHint=false) : Long'
|         2: LiteralNode 9042 (volatileHint=false) : Long'
|         3: LiteralNode 9043 (volatileHint=false) : Long'
|         4: LiteralNode 9044 (volatileHint=false) : Long'
|         5: LiteralNode 9045 (volatileHint=false) : Long'
|         6: LiteralNode 9046 (volatileHint=false) : Long'
|         7: LiteralNode 9047 (volatileHint=false) : Long'
|         8: LiteralNode 9048 (volatileHint=false) : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:18,66] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:18,66] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:18,67] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: Apply Function in : Boolean
|     0: Path s13.METADATA_JOURNAL_ID : Long'
|     1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long')
|       1: LiteralNode 9041 (volatileHint=false) : Long'
|       2: LiteralNode 9042 (volatileHint=false) : Long'
|       3: LiteralNode 9043 (volatileHint=false) : Long'
|       4: LiteralNode 9044 (volatileHint=false) : Long'
|       5: LiteralNode 9045 (volatileHint=false) : Long'
|       6: LiteralNode 9046 (volatileHint=false) : Long'
|       7: LiteralNode 9047 (volatileHint=false) : Long'
|       8: LiteralNode 9048 (volatileHint=false) : Long'

[2020-07-30 19:06:18,67] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:18,67] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048)" : Vector[t12<(Long')>]

[2020-07-30 19:06:18,67] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048)" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:18,67] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:18,67] [debug]       assignUniqueSymbols:    0.770534 ms
[2020-07-30 19:06:18,67] [debug]           unrollTailBinds:    0.095153 ms
[2020-07-30 19:06:18,67] [debug]                inferTypes:    0.132327 ms
[2020-07-30 19:06:18,67] [debug]              expandTables:    2.236934 ms
[2020-07-30 19:06:18,67] [debug]           forceOuterBinds:    0.922162 ms
[2020-07-30 19:06:18,67] [debug]         removeMappedTypes:    0.735009 ms
[2020-07-30 19:06:18,67] [debug]                expandSums:    0.052264 ms
[2020-07-30 19:06:18,67] [debug]             expandRecords:    0.745486 ms
[2020-07-30 19:06:18,67] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,67] [debug]        flattenProjections:    1.797837 ms
[2020-07-30 19:06:18,67] [debug]              rewriteJoins:    0.099794 ms
[2020-07-30 19:06:18,67] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_removeDuplicates], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@674db9fe]]]
[2020-07-30 19:06:18,67] [debug]             verifySymbols:    0.109017 ms
[2020-07-30 19:06:18,67] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_removeDuplicates], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@674db9fe]]]
[2020-07-30 19:06:18,67] [debug]             relabelUnions:    0.080856 ms
[2020-07-30 19:06:18,67] [debug]          createAggregates:    0.046777 ms
[2020-07-30 19:06:18,67] [debug]           resolveZipJoins:    0.081514 ms
[2020-07-30 19:06:18,67] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:18,67] [debug]          pruneProjections:    0.281311 ms
[2020-07-30 19:06:18,67] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:18,67] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String  | Timestamp                 |
[2020-07-30 19:06:18,67] [debug]           rewriteDistinct:    0.074507 ms
[2020-07-30 19:06:18,67] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:18,67] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_r... |      | boolean | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,67] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:18,67] [debug]    createResultSetMapping:    0.966722 ms
[2020-07-30 19:06:18,67] [debug]            hoistClientOps:    4.265033 ms
[2020-07-30 19:06:18,67] [debug]         reorderOperations:    0.161347 ms
[2020-07-30 19:06:18,67] [debug]     mergeToComprehensions:    5.438045 ms
[2020-07-30 19:06:18,67] [debug]            optimizeScalar:    0.125246 ms
[2020-07-30 19:06:18,67] [debug]          removeFieldNames:    3.524085 ms
[2020-07-30 19:06:18,67] [debug]      specializeParameters:    0.201858 ms
[2020-07-30 19:06:18,67] [debug]                   codeGen:    1.918911 ms
[2020-07-30 19:06:18,67] [debug]                     TOTAL:   24.862729 ms
[2020-07-30 19:06:18,67] [debug] #19: delete [delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048)]
[2020-07-30 19:06:18,67] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048)
[2020-07-30 19:06:18,68] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,68] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_intervals[]], [null], [null], [org.hsqldb.types.TimestampData@674c5a3e]]]
[2020-07-30 19:06:18,68] [debug] Executing prepared update: HikariProxyPreparedStatement@300737027 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@63c4d78e[sql=[delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048)]]
[2020-07-30 19:06:18,68] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_intervals[]], [null], [null], [org.hsqldb.types.TimestampData@674c5a3e]]]
[2020-07-30 19:06:18,68] [debug] Executing prepared update: HikariProxyPreparedStatement@300737027 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@63c4d78e[sql=[delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9041, 9042, 9043, 9044, 9045, 9046, 9047, 9048)]]
[2020-07-30 19:06:18,68] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:18,68] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:18,68] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:18,68] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:18,68] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:baseQualityScor... | NULL | NULL    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,68] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:18,68] [debug] Execution of batch insert took 16µs
[2020-07-30 19:06:18,68] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_modules], [javax.sql.rowset.serial.SerialClob@654a5323], [string], [org.hsqldb.types.TimestampData@674cbf8e]]]
[2020-07-30 19:06:18,68] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_modules], [javax.sql.rowset.serial.SerialClob@654a5323], [string], [org.hsqldb.types.TimestampData@674cbf8e]]]
[2020-07-30 19:06:18,68] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,68] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,68] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,68] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,68] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:applyBaseQualit... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,68] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,68] [debug] Execution of prepared update took 2ms
[2020-07-30 19:06:18,68] [debug] Shutting down response header timeout stage
[2020-07-30 19:06:18,68] [debug] Shutting down.
[2020-07-30 19:06:18,68] [debug] Removed mid-stage: ResponseHeaderTimeoutStage
[2020-07-30 19:06:18,68] [debug] #20: success 8
[2020-07-30 19:06:18,68] [debug] #21: Commit
[2020-07-30 19:06:18,68] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,68] [debug] #22: SetTransactionIsolation
[2020-07-30 19:06:18,68] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:reference], [javax.sql.rowset.serial.SerialClob@65da2f95], [string], [org.hsqldb.types.TimestampData@674ca316]]]
[2020-07-30 19:06:18,68] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:reference], [javax.sql.rowset.serial.SerialClob@65da2f95], [string], [org.hsqldb.types.TimestampData@674ca316]]]
[2020-07-30 19:06:18,68] [debug] #23: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:18,68] [debug] resuming
[2020-07-30 19:06:18,68] [debug] /---------------------------+---------+---------+---------+------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,68] [debug] | 1                         | 2       | 3       | 4       | 5                | 6    | 7      | 8                         |
[2020-07-30 19:06:18,68] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String           | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,68] [debug] |---------------------------+---------+---------+---------+------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,68] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:reference |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,68] [debug] \---------------------------+---------+---------+---------+------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,69] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:18,69] [debug] pausing
[2020-07-30 19:06:18,69] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:18,69] [debug] #3: StartTransaction
[2020-07-30 19:06:18,69] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:18,69] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:18,69] [debug] Executing prepared statement: HikariProxyPreparedStatement@1535339483 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6d6a21dc[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:18,69] [debug] Executing prepared statement: HikariProxyPreparedStatement@1535339483 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6d6a21dc[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:18,69] [debug] /---------------------------\
[2020-07-30 19:06:18,69] [debug] | 1                         |
[2020-07-30 19:06:18,69] [debug] | String                    |
[2020-07-30 19:06:18,69] [debug] |---------------------------|
[2020-07-30 19:06:18,69] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:18,69] [debug] \---------------------------/
[2020-07-30 19:06:18,69] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,69] [debug] Execution of prepared statement took 55µs
[2020-07-30 19:06:18,69] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_readFilters[]], [null], [null], [org.hsqldb.types.TimestampData@674cca86]]]
[2020-07-30 19:06:18,69] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessBam_readFilters[]], [null], [null], [org.hsqldb.types.TimestampData@674cca86]]]
[2020-07-30 19:06:18,69] [debug] /------------------\
[2020-07-30 19:06:18,69] [debug] | 1                |
[2020-07-30 19:06:18,69] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:18,69] [debug] |------------------|
[2020-07-30 19:06:18,69] [debug] \------------------/
[2020-07-30 19:06:18,69] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:18,69] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:18,69] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:18,69] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:18,69] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessBam_r... | NULL | NULL    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,69] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:18,69] [debug] Execution of batch insert took 18µs
[2020-07-30 19:06:18,69] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@674cf1de]]]
[2020-07-30 19:06:18,69] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:baseQualityScoreRecalibration_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@674cf1de]]]
[2020-07-30 19:06:18,69] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,69] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,69] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,69] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,69] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:baseQualityScor... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,69] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,69] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:18,69] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:18,69] [debug] Executing prepared statement: HikariProxyPreparedStatement@1105438266 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7d3b1c80[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:18,69] [debug] Executing prepared statement: HikariProxyPreparedStatement@1105438266 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7d3b1c80[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:18,69] [debug] /---------------------------\
[2020-07-30 19:06:18,69] [debug] | 1                         |
[2020-07-30 19:06:18,69] [debug] | String                    |
[2020-07-30 19:06:18,69] [debug] |---------------------------|
[2020-07-30 19:06:18,69] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:18,69] [debug] \---------------------------/
[2020-07-30 19:06:18,69] [debug] Execution of prepared statement took 39µs
[2020-07-30 19:06:18,69] [debug] /------------------\
[2020-07-30 19:06:18,69] [debug] | 1                |
[2020-07-30 19:06:18,69] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:18,69] [debug] |------------------|
[2020-07-30 19:06:18,69] [debug] \------------------/
[2020-07-30 19:06:18,69] [debug] #6: success None
[2020-07-30 19:06:18,69] [debug] #7: success 0
[2020-07-30 19:06:18,70] [debug] #8: success (0,0)
[2020-07-30 19:06:18,70] [debug] #9: success (0,0)
[2020-07-30 19:06:18,70] [debug] #10: Commit
[2020-07-30 19:06:18,70] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:18,70] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:18,70] [debug] resuming
[2020-07-30 19:06:18,70] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,70] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:18,70] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,70] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:18,70] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:18,70] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:18,70] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:18,70] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:18,70] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:18,70] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:18,70] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,70] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:18,70] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:cores], [null], [null], [org.hsqldb.types.TimestampData@67534f56]]]
[2020-07-30 19:06:18,70] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:cores], [null], [null], [org.hsqldb.types.TimestampData@67534f56]]]
[2020-07-30 19:06:18,70] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:18,70] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,70] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,70] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:18,70] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,70] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,70] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:18,70] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,70] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,70] [debug] Execution of batch insert took 17µs
[2020-07-30 19:06:18,70] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:overhead], [null], [null], [org.hsqldb.types.TimestampData@67536aee]]]
[2020-07-30 19:06:18,70] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:overhead], [null], [null], [org.hsqldb.types.TimestampData@67536aee]]]
[2020-07-30 19:06:18,70] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,70] [debug] Flattening projection t8
[2020-07-30 19:06:18,70] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,70] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,70] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:18,70] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,70] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,70] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,70] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:18,70] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,70] [debug] Execution of batch insert took 17µs
[2020-07-30 19:06:18,70] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:18,70] [debug] Flattening projection t7
[2020-07-30 19:06:18,70] [debug] Flattening projection t9
[2020-07-30 19:06:18,70] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:id], [javax.sql.rowset.serial.SerialClob@e3c48c44], [string], [org.hsqldb.types.TimestampData@67539606]]]
[2020-07-30 19:06:18,70] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,70] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:id], [javax.sql.rowset.serial.SerialClob@e3c48c44], [string], [org.hsqldb.types.TimestampData@67539606]]]
[2020-07-30 19:06:18,70] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:18,70] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:18,70] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:18,70] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:18,70] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:18,70] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+--------------------------\
[2020-07-30 19:06:18,70] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                        |
[2020-07-30 19:06:18,70] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                |
[2020-07-30 19:06:18,70] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:18,70] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+--------------------------|
[2020-07-30 19:06:18,70] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... |      | string | 2020-07-30 19:06:14.9469 |
[2020-07-30 19:06:18,70] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+--------------------------/
[2020-07-30 19:06:18,70] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:18,70] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:18,70] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:18,70] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:18,70] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,70] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,70] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,70] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,70] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:18,70] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:18,70] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:18,70] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:18,71] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:18,71] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:18,71] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:18,71] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:18,71] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:18,71] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:18,71] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:18,71] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:18,71] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:18,71] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:18,71] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:18,71] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:18,71] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:18,71] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:18,71] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:18,71] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,71] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:modules], [null], [null], [org.hsqldb.types.TimestampData@6753b9b6]]]
[2020-07-30 19:06:18,71] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:18,71] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:modules], [null], [null], [org.hsqldb.types.TimestampData@6753b9b6]]]
[2020-07-30 19:06:18,71] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:18,71] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:18,71] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,71] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,71] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,71] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,71] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,71] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,71] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:18,71] [debug] Execution of batch insert took 17µs
[2020-07-30 19:06:18,71] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6753ad3e]]]
[2020-07-30 19:06:18,71] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6753ad3e]]]
[2020-07-30 19:06:18,71] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:18,71] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,71] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:18,71] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,71] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,71] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,71] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,71] [debug] Table fields: Map()
[2020-07-30 19:06:18,71] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,71] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:18,71] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:18,71] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:18,71] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:18,71] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:18,71] [debug] Replacements are: Map()
[2020-07-30 19:06:18,71] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:18,71] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:18,71] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:18,71] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:18,71] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:18,71] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:18,71] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:18,71] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:18,71] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:18,71] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:18,71] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:18,71] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:18,71] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:18,71] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:18,71] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:18,72] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:18,72] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:18,72] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:18,72] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:18,72] [debug]       assignUniqueSymbols:    0.503145 ms
[2020-07-30 19:06:18,72] [debug]           unrollTailBinds:    0.090289 ms
[2020-07-30 19:06:18,72] [debug]                inferTypes:    0.100004 ms
[2020-07-30 19:06:18,72] [debug]              expandTables:    0.830536 ms
[2020-07-30 19:06:18,72] [debug]           forceOuterBinds:    0.776696 ms
[2020-07-30 19:06:18,72] [debug]         removeMappedTypes:    0.189914 ms
[2020-07-30 19:06:18,72] [debug]                expandSums:    0.114832 ms
[2020-07-30 19:06:18,72] [debug]             expandRecords:    0.562593 ms
[2020-07-30 19:06:18,72] [debug]        flattenProjections:    2.466916 ms
[2020-07-30 19:06:18,72] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,72] [debug]              rewriteJoins:    1.347805 ms
[2020-07-30 19:06:18,72] [debug]             verifySymbols:    0.104352 ms
[2020-07-30 19:06:18,72] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:memory], [javax.sql.rowset.serial.SerialClob@25fe9f], [int], [org.hsqldb.types.TimestampData@6753d086]]]
[2020-07-30 19:06:18,72] [debug]             relabelUnions:    0.070918 ms
[2020-07-30 19:06:18,72] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[0]:memory], [javax.sql.rowset.serial.SerialClob@25fe9f], [int], [org.hsqldb.types.TimestampData@6753d086]]]
[2020-07-30 19:06:18,72] [debug]          createAggregates:    3.322923 ms
[2020-07-30 19:06:18,72] [debug]           resolveZipJoins:    0.089504 ms
[2020-07-30 19:06:18,72] [debug]          pruneProjections:    0.278112 ms
[2020-07-30 19:06:18,72] [debug]           rewriteDistinct:    0.059619 ms
[2020-07-30 19:06:18,72] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,72] [debug]    createResultSetMapping:    0.646100 ms
[2020-07-30 19:06:18,72] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,72] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,72] [debug]            hoistClientOps:    1.110293 ms
[2020-07-30 19:06:18,72] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,72] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,72] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,72] [debug]         reorderOperations:    0.147205 ms
[2020-07-30 19:06:18,72] [debug]     mergeToComprehensions:    3.156905 ms
[2020-07-30 19:06:18,72] [debug]            optimizeScalar:    0.085346 ms
[2020-07-30 19:06:18,72] [debug]          removeFieldNames:    1.116119 ms
[2020-07-30 19:06:18,72] [debug]      specializeParameters:    0.145290 ms
[2020-07-30 19:06:18,72] [debug]                   codeGen:    1.146095 ms
[2020-07-30 19:06:18,72] [debug]                     TOTAL:   18.461511 ms
[2020-07-30 19:06:18,72] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:18,72] [debug] pausing
[2020-07-30 19:06:18,72] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:18,72] [debug] Executing prepared statement: HikariProxyPreparedStatement@2114619917 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5bf042ef[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:18,72] [debug] Executing prepared statement: HikariProxyPreparedStatement@2114619917 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5bf042ef[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:18,72] [debug] Execution of prepared statement took 210µs
[2020-07-30 19:06:18,72] [debug] /----\
[2020-07-30 19:06:18,72] [debug] | 1  |
[2020-07-30 19:06:18,72] [debug] | C1 |
[2020-07-30 19:06:18,72] [debug] |----|
[2020-07-30 19:06:18,72] [debug] | 0  |
[2020-07-30 19:06:18,72] [debug] \----/
[2020-07-30 19:06:18,72] [debug] resuming
[2020-07-30 19:06:18,72] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:cores], [null], [null], [org.hsqldb.types.TimestampData@6753efbe]]]
[2020-07-30 19:06:18,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:cores], [null], [null], [org.hsqldb.types.TimestampData@6753efbe]]]
[2020-07-30 19:06:18,73] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,73] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,73] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,73] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,73] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,73] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,73] [debug] Execution of batch insert took 16µs
[2020-07-30 19:06:18,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:overhead], [null], [null], [org.hsqldb.types.TimestampData@67521306]]]
[2020-07-30 19:06:18,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:overhead], [null], [null], [org.hsqldb.types.TimestampData@67521306]]]
[2020-07-30 19:06:18,73] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,73] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,73] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,73] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,73] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,73] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,73] [debug] Execution of batch insert took 16µs
[2020-07-30 19:06:18,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:id], [javax.sql.rowset.serial.SerialClob@c18e4208], [string], [org.hsqldb.types.TimestampData@6752068e]]]
[2020-07-30 19:06:18,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:id], [javax.sql.rowset.serial.SerialClob@c18e4208], [string], [org.hsqldb.types.TimestampData@6752068e]]]
[2020-07-30 19:06:18,73] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,73] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,73] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,73] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,73] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,73] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,73] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:modules], [null], [null], [org.hsqldb.types.TimestampData@67522a16]]]
[2020-07-30 19:06:18,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:modules], [null], [null], [org.hsqldb.types.TimestampData@67522a16]]]
[2020-07-30 19:06:18,74] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,74] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,74] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,74] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,74] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,74] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,74] [debug] Execution of batch insert took 25µs
[2020-07-30 19:06:18,74] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@675225f6]]]
[2020-07-30 19:06:18,74] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@675225f6]]]
[2020-07-30 19:06:18,74] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,74] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,74] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,74] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,74] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,74] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,74] [debug] Parse result: Some(java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]), content complete: true
[2020-07-30 19:06:18,75] [debug] Resetting org.http4s.client.blaze.Http1Connection after completing request.
[2020-07-30 19:06:18,75] [debug] Shutting down idle timeout stage
[2020-07-30 19:06:18,75] [debug] Shutting down.
[2020-07-30 19:06:18,75] [debug] Shutting down.
[2020-07-30 19:06:18,75] [debug] Shutting down.
[2020-07-30 19:06:18,75] [debug] Shutting down.
[2020-07-30 19:06:18,75] [debug] doClosePipeline(None)
[2020-07-30 19:06:18,75] [debug] Shutting down.
[2020-07-30 19:06:18,76] [debug] Recycling connection: curAllocated=1 idleQueues.size=0 waitQueue.size=0 maxWaitQueueLimit=256 closed=false
[2020-07-30 19:06:18,76] [debug] Shutting down idle timeout stage
[2020-07-30 19:06:18,76] [debug] Shutting down.
[2020-07-30 19:06:18,76] [debug] Removed mid-stage: IdleTimeoutStage
[2020-07-30 19:06:18,76] [debug] Connection could not be recycled, no pending requests. Shrinking pool: curAllocated=0 idleQueues.size=0 waitQueue.size=0 maxWaitQueueLimit=256 closed=false
[2020-07-30 19:06:18,77] [debug] Requesting connection: curAllocated=0 idleQueues.size=0 waitQueue.size=0 maxWaitQueueLimit=256 closed=false
[2020-07-30 19:06:18,77] [debug] Active connection not found. Creating new one. curAllocated=0 idleQueues.size=0 waitQueue.size=0 maxWaitQueueLimit=256 closed=false
[2020-07-30 19:06:18,80] [debug] Execution of batch insert took 58ms
[2020-07-30 19:06:18,80] [debug] Starting up.
[2020-07-30 19:06:18,80] [debug] Stage ByteBufferHead sending inbound command: Connected
[2020-07-30 19:06:18,80] [debug] Starting up.
[2020-07-30 19:06:18,80] [debug] Stage SSLStage sending inbound command: Connected
[2020-07-30 19:06:18,80] [debug] Stage started up. Beginning read buffering
[2020-07-30 19:06:18,81] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:memory], [javax.sql.rowset.serial.SerialClob@25fe9f], [int], [org.hsqldb.types.TimestampData@6752497e]]]
[2020-07-30 19:06:18,81] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[1]:memory], [javax.sql.rowset.serial.SerialClob@25fe9f], [int], [org.hsqldb.types.TimestampData@6752497e]]]
[2020-07-30 19:06:18,81] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,81] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,81] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,81] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,81] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,81] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,81] [debug] SSL Read Request Status: Status = OK HandshakeStatus = NEED_WRAP
bytesConsumed = 0 bytesProduced = 0, java.nio.HeapByteBuffer[pos=0 lim=16709 cap=16709]
[2020-07-30 19:06:18,81] [debug] Stage ReadBufferStage sending inbound command: Connected
[2020-07-30 19:06:18,81] [debug] Starting up.
[2020-07-30 19:06:18,82] [debug] Starting up.
[2020-07-30 19:06:18,82] [debug] Starting response header timeout stage with timeout of 10000 ms
[2020-07-30 19:06:18,82] [debug] Connection was idle. Running.
[2020-07-30 19:06:18,82] [debug] Beginning request: GET https://registry-1.docker.io/v2/g3chen/wgspipeline/manifests/sha256:3c0c292c460c8db19b9744be1ea81529c4d189e4c4f9ca9a63046edcf792087d
[2020-07-30 19:06:18,82] [debug] Starting idle timeout stage with timeout of 60000 ms
[2020-07-30 19:06:18,83] [debug] Execution of batch insert took 23ms
[2020-07-30 19:06:18,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:cores], [null], [null], [org.hsqldb.types.TimestampData@67526ca6]]]
[2020-07-30 19:06:18,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:cores], [null], [null], [org.hsqldb.types.TimestampData@67526ca6]]]
[2020-07-30 19:06:18,83] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,83] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,83] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,83] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,83] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... | NULL | null   | 2020-07-30 19:06:14.94696 |
[2020-07-30 19:06:18,83] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,83] [debug] Execution of batch insert took 22µs
[2020-07-30 19:06:18,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:overhead], [null], [null], [org.hsqldb.types.TimestampData@67528bfe]]]
[2020-07-30 19:06:18,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:overhead], [null], [null], [org.hsqldb.types.TimestampData@67528bfe]]]
[2020-07-30 19:06:18,83] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,83] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,83] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,83] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,83] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,83] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,83] [debug] Execution of batch insert took 19µs
[2020-07-30 19:06:18,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:id], [javax.sql.rowset.serial.SerialClob@18688], [string], [org.hsqldb.types.TimestampData@6752bf46]]]
[2020-07-30 19:06:18,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:id], [javax.sql.rowset.serial.SerialClob@18688], [string], [org.hsqldb.types.TimestampData@6752bf46]]]
[2020-07-30 19:06:18,83] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,84] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,84] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,84] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,84] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,84] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,84] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,84] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:modules], [null], [null], [org.hsqldb.types.TimestampData@6752a2ce]]]
[2020-07-30 19:06:18,84] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:modules], [null], [null], [org.hsqldb.types.TimestampData@6752a2ce]]]
[2020-07-30 19:06:18,84] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,84] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,84] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,84] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,84] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,84] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,84] [debug] Execution of batch insert took 26µs
[2020-07-30 19:06:18,84] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6752ca7e]]]
[2020-07-30 19:06:18,84] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@6752ca7e]]]
[2020-07-30 19:06:18,84] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,84] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,84] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,84] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,84] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,84] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,85] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,85] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:memory], [javax.sql.rowset.serial.SerialClob@25a487], [int], [org.hsqldb.types.TimestampData@6752f9c6]]]
[2020-07-30 19:06:18,85] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:preprocessingBamRuntimeAttributes[2]:memory], [javax.sql.rowset.serial.SerialClob@25a487], [int], [org.hsqldb.types.TimestampData@6752f9c6]]]
[2020-07-30 19:06:18,85] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,85] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,85] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,85] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,85] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:preprocessingBa... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,85] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,86] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:18,86] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@67511d2e]]]
[2020-07-30 19:06:18,86] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:applyBaseQualityScoreRecalibration_jobMemory], [javax.sql.rowset.serial.SerialClob@2609e2], [int], [org.hsqldb.types.TimestampData@67511d2e]]]
[2020-07-30 19:06:18,86] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,86] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,86] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,86] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,86] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:applyBaseQualit... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,86] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,87] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,87] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_downsamplingType], [null], [null], [org.hsqldb.types.TimestampData@6751045e]]]
[2020-07-30 19:06:18,87] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_downsamplingType], [null], [null], [org.hsqldb.types.TimestampData@6751045e]]]
[2020-07-30 19:06:18,87] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,87] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,87] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,87] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,87] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:realignerTarget... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,87] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,87] [debug] Execution of batch insert took 15µs
[2020-07-30 19:06:18,87] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@67512fce]]]
[2020-07-30 19:06:18,87] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:realignerTargetCreator_overhead], [javax.sql.rowset.serial.SerialClob@1b394], [int], [org.hsqldb.types.TimestampData@67512fce]]]
[2020-07-30 19:06:18,87] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,87] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,87] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,87] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,87] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:realignerTarget... |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,87] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,88] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:bamMergePreprocessing.applyBaseQualityScoreRecalibration.outputFileName], [null], [null], [org.hsqldb.types.TimestampData@67515356]]]
[2020-07-30 19:06:18,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:bamMergePreprocessing.applyBaseQualityScoreRecalibration.outputFileName], [null], [null], [org.hsqldb.types.TimestampData@67515356]]]
[2020-07-30 19:06:18,88] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,88] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,88] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | String | Timestamp                 |
[2020-07-30 19:06:18,88] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,88] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:bamMergePreproc... | NULL | null   | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,88] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,88] [debug] Execution of batch insert took 15µs
[2020-07-30 19:06:18,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@675146de]]]
[2020-07-30 19:06:18,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:indelRealign_cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@675146de]]]
[2020-07-30 19:06:18,88] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,88] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,88] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,88] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,88] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:indelRealign_cores |      | int    | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,88] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,88] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_outputFileName], [javax.sql.rowset.serial.SerialClob@f820c932], [string], [org.hsqldb.types.TimestampData@67516aa6]]]
[2020-07-30 19:06:18,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [inputs:gatherBQSRReports_outputFileName], [javax.sql.rowset.serial.SerialClob@f820c932], [string], [org.hsqldb.types.TimestampData@67516aa6]]]
[2020-07-30 19:06:18,89] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:18,89] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:18,89] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,89] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:18,89] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | inputs:gatherBQSRRepor... |      | string | 2020-07-30 19:06:14.94... |
[2020-07-30 19:06:18,89] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:18,89] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,89] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowRoot], [javax.sql.rowset.serial.SerialClob@25811d85], [string], [org.hsqldb.types.TimestampData@5647df3f]]]
[2020-07-30 19:06:18,89] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowRoot], [javax.sql.rowset.serial.SerialClob@25811d85], [string], [org.hsqldb.types.TimestampData@5647df3f]]]
[2020-07-30 19:06:18,89] [debug] /---------------------------+---------+---------+---------+--------------+------+--------+---------------------------\
[2020-07-30 19:06:18,89] [debug] | 1                         | 2       | 3       | 4       | 5            | 6    | 7      | 8                         |
[2020-07-30 19:06:18,89] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String       | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,89] [debug] |---------------------------+---------+---------+---------+--------------+------+--------+---------------------------|
[2020-07-30 19:06:18,89] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | workflowRoot |      | string | 2020-07-30 19:06:15.15... |
[2020-07-30 19:06:18,89] [debug] \---------------------------+---------+---------+---------+--------------+------+--------+---------------------------/
[2020-07-30 19:06:18,90] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,90] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [start], [javax.sql.rowset.serial.SerialClob@123c50a], [string], [org.hsqldb.types.TimestampData@4cd67589]]]
[2020-07-30 19:06:18,90] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [start], [javax.sql.rowset.serial.SerialClob@123c50a], [string], [org.hsqldb.types.TimestampData@4cd67589]]]
[2020-07-30 19:06:18,90] [debug] /---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:18,90] [debug] | 1                         | 2                         | 3       | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:18,90] [debug] | String                    | String                    | INTEGER | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,90] [debug] |---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:18,90] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | start  |      | string | 2020-07-30 19:06:17.33... |
[2020-07-30 19:06:18,90] [debug] \---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:18,91] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:18,91] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@b8145e73], [string], [org.hsqldb.types.TimestampData@4b3f4651]]]
[2020-07-30 19:06:18,91] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@b8145e73], [string], [org.hsqldb.types.TimestampData@4b3f4651]]]
[2020-07-30 19:06:18,91] [debug] /---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:18,91] [debug] | 1                         | 2                         | 3       | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:18,91] [debug] | String                    | String                    | INTEGER | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,91] [debug] |---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:18,91] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionStatus |      | string | 2020-07-30 19:06:17.33... |
[2020-07-30 19:06:18,91] [debug] \---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:18,92] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,92] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [backend], [javax.sql.rowset.serial.SerialClob@df45ea69], [string], [org.hsqldb.types.TimestampData@4b010f79]]]
[2020-07-30 19:06:18,92] [debug] Executing batch insert: HikariProxyPreparedStatement@1672339006 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4cbd3c76[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [backend], [javax.sql.rowset.serial.SerialClob@df45ea69], [string], [org.hsqldb.types.TimestampData@4b010f79]]]
[2020-07-30 19:06:18,92] [debug] /---------------------------+---------------------------+---------+-----+---------+------+--------+---------------------------\
[2020-07-30 19:06:18,92] [debug] | 1                         | 2                         | 3       | 4   | 5       | 6    | 7      | 8                         |
[2020-07-30 19:06:18,92] [debug] | String                    | String                    | INTEGER | Int | String  | Clob | String | Timestamp                 |
[2020-07-30 19:06:18,92] [debug] |---------------------------+---------------------------+---------+-----+---------+------+--------+---------------------------|
[2020-07-30 19:06:18,92] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | backend |      | string | 2020-07-30 19:06:17.33... |
[2020-07-30 19:06:18,92] [debug] \---------------------------+---------------------------+---------+-----+---------+------+--------+---------------------------/
[2020-07-30 19:06:18,93] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:18,95] [debug] SSL Read Request Status: Status = BUFFER_UNDERFLOW HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 0 bytesProduced = 0, java.nio.HeapByteBuffer[pos=0 lim=16709 cap=16709]
[2020-07-30 19:06:18,95] [debug] Execution of batch took 27ms
[2020-07-30 19:06:19,01] [debug] SSL Read Request Status: Status = OK HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 6005 bytesProduced = 5976, java.nio.HeapByteBuffer[pos=5976 lim=16709 cap=16709]
[2020-07-30 19:06:19,01] [debug] SSL Read Request Status: Status = BUFFER_UNDERFLOW HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 0 bytesProduced = 0, java.nio.HeapByteBuffer[pos=0 lim=16709 cap=16709]
[2020-07-30 19:06:19,01] [debug] SSL Read Request Status: Status = BUFFER_UNDERFLOW HandshakeStatus = NOT_HANDSHAKING
bytesConsumed = 0 bytesProduced = 0, java.nio.HeapByteBuffer[pos=0 lim=16709 cap=16709]
[2020-07-30 19:06:19,02] [debug] Resetting org.http4s.client.blaze.Http1Connection after completing request.
[2020-07-30 19:06:19,02] [debug] Shutting down response header timeout stage
[2020-07-30 19:06:19,02] [debug] Shutting down.
[2020-07-30 19:06:19,02] [debug] Removed mid-stage: ResponseHeaderTimeoutStage
[2020-07-30 19:06:19,04] [debug] Recycling connection: curAllocated=1 idleQueues.size=0 waitQueue.size=0 maxWaitQueueLimit=256 closed=false
[2020-07-30 19:06:19,04] [debug] Shutting down idle timeout stage
[2020-07-30 19:06:19,04] [debug] Shutting down.
[2020-07-30 19:06:19,04] [debug] Removed mid-stage: IdleTimeoutStage
[2020-07-30 19:06:19,04] [debug] Returning idle connection to pool: curAllocated=1 idleQueues.size=0 waitQueue.size=0 maxWaitQueueLimit=256 closed=false
[2020-07-30 19:06:19,06] [debug] Source:
| TableExpansion
|   table s2: Table DOCKER_HASH_STORE_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s2.DOCKER_TAG : String'
|       3: Path s2.DOCKER_HASH : String'
|       4: Path s2.DOCKER_SIZE : Option[Long']
|       5: OptionApply
|         0: Path s2.DOCKER_HASH_STORE_ENTRY_ID : Int'

[2020-07-30 19:06:19,06] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:19,06] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table DOCKER_HASH_STORE_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s3.DOCKER_TAG : String'
|       3: Path s3.DOCKER_HASH : String'
|       4: Path s3.DOCKER_SIZE : Option[Long']
|       5: OptionApply
|         0: Path s3.DOCKER_HASH_STORE_ENTRY_ID : Int'

[2020-07-30 19:06:19,06] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,06] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', String', Option[Long'])]
|   from s5: Insert allFields=[WORKFLOW_EXECUTION_UUID, DOCKER_TAG, DOCKER_HASH, DOCKER_SIZE, DOCKER_HASH_STORE_ENTRY_ID] : (String', String', String', Option[Long'])
|     table s6: Table DOCKER_HASH_STORE_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', String', Option[Long'])
|       1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s6.DOCKER_TAG : String'
|       3: Path s6.DOCKER_HASH : String'
|       4: Path s6.DOCKER_SIZE : Option[Long']
|   map: TypeMapping : Mapped[(String', String', String', Option[Long'], Option[Int'])]
|     0: ProductNode : (String', String', String', Option[Long'], Option[Int'])
|       1: InsertColumn WORKFLOW_EXECUTION_UUID : String'
|         0: Path s5._1 : String'
|       2: InsertColumn DOCKER_TAG : String'
|         0: Path s5._2 : String'
|       3: InsertColumn DOCKER_HASH : String'
|         0: Path s5._3 : String'
|       4: InsertColumn DOCKER_SIZE : Option[Long']
|         0: Path s5._4 : Option[Long']
|       5: OptionApply : Option[Int']
|         0: InsertColumn DOCKER_HASH_STORE_ENTRY_ID : Int'

[2020-07-30 19:06:19,06] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[WORKFLOW_EXECUTION_UUID, DOCKER_TAG, DOCKER_HASH, DOCKER_SIZE, DOCKER_HASH_STORE_ENTRY_ID] : (String', String', String', Option[Long'])
|   table s6: Table DOCKER_HASH_STORE_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', String', Option[Long'])
|     1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|     2: Path s6.DOCKER_TAG : String'
|     3: Path s6.DOCKER_HASH : String'
|     4: Path s6.DOCKER_SIZE : Option[Long']

[2020-07-30 19:06:19,06] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=DOCKER_TAG : String'
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=DOCKER_HASH : String'
|     4: OptionResultConverter$mcJ$sp idx=4 : Long'
|     5: CompoundResultConverter

[2020-07-30 19:06:19,06] [debug] Compiled server-side to:
| CompiledStatement "insert into "DOCKER_HASH_STORE_ENTRY" ("WORKFLOW_EXECUTION_UUID","DOCKER_TAG","DOCKER_HASH","DOCKER_SIZE")  values (?,?,?,?)" : (String', String', String', Option[Long'])

[2020-07-30 19:06:19,06] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', String', String', Option[Long'])]
|   from s5: CompiledStatement "insert into "DOCKER_HASH_STORE_ENTRY" ("WORKFLOW_EXECUTION_UUID","DOCKER_TAG","DOCKER_HASH","DOCKER_SIZE")  values (?,?,?,?)" : (String', String', String', Option[Long'])
|   map: CompiledMapping : Mapped[(String', String', String', Option[Long'], Option[Int'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=DOCKER_TAG : String'
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=DOCKER_HASH : String'
|         4: OptionResultConverter$mcJ$sp idx=4 : Long'
|         5: CompoundResultConverter

[2020-07-30 19:06:19,06] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,06] [debug]       assignUniqueSymbols:    0.625414 ms
[2020-07-30 19:06:19,06] [debug]                inferTypes:    0.128581 ms
[2020-07-30 19:06:19,06] [debug]            insertCompiler:    0.869031 ms
[2020-07-30 19:06:19,06] [debug]                   codeGen:    1.294757 ms
[2020-07-30 19:06:19,06] [debug]                     TOTAL:    2.917783 ms
[2020-07-30 19:06:19,06] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@4e801f70
          base: SetTransactionIsolation
[2020-07-30 19:06:19,07] [debug] Preparing statement: insert into "DOCKER_HASH_STORE_ENTRY" ("WORKFLOW_EXECUTION_UUID","DOCKER_TAG","DOCKER_HASH","DOCKER_SIZE")  values (?,?,?,?)
[2020-07-30 19:06:19,07] [debug] Executing prepared update: HikariProxyPreparedStatement@2018560999 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@76973b45[sql=[insert into "DOCKER_HASH_STORE_ENTRY" ("WORKFLOW_EXECUTION_UUID","DOCKER_TAG","DOCKER_HASH","DOCKER_SIZE")  values (?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [g3chen/wgspipeline@sha256:3c0c292c460c8db19b9744be1ea81529c4d189e4c4f9ca9a63046edcf792087d], [sha256:3c0c292c460c8db19b9744be1ea81529c4d189e4c4f9ca9a63046edcf792087d], [3680493535]]]
[2020-07-30 19:06:19,07] [debug] Executing prepared update: HikariProxyPreparedStatement@2018560999 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@76973b45[sql=[insert into "DOCKER_HASH_STORE_ENTRY" ("WORKFLOW_EXECUTION_UUID","DOCKER_TAG","DOCKER_HASH","DOCKER_SIZE")  values (?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [g3chen/wgspipeline@sha256:3c0c292c460c8db19b9744be1ea81529c4d189e4c4f9ca9a63046edcf792087d], [sha256:3c0c292c460c8db19b9744be1ea81529c4d189e4c4f9ca9a63046edcf792087d], [3680493535]]]
[2020-07-30 19:06:19,07] [debug] /---------------------------+---------------------------+---------------------------+------------\
[2020-07-30 19:06:19,07] [debug] | 1                         | 2                         | 3                         | 4          |
[2020-07-30 19:06:19,07] [debug] | String                    | String                    | String                    | Long       |
[2020-07-30 19:06:19,07] [debug] |---------------------------+---------------------------+---------------------------+------------|
[2020-07-30 19:06:19,07] [debug] | 8b168b0d-854f-4ba0-99b... | g3chen/wgspipeline@sha... | sha256:3c0c292c460c8db... | 3680493535 |
[2020-07-30 19:06:19,07] [debug] \---------------------------+---------------------------+---------------------------+------------/
[2020-07-30 19:06:19,07] [debug] Execution of prepared update took 210µs
[2020-07-30 19:06:19,08] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: Filter s4
|       from s4: Filter s5
|         from s5: Filter s6
|           from s6: Filter s7
|             from s7: TableExpansion
|               table s8: Table JOB_KEY_VALUE_ENTRY
|               columns: TypeMapping
|                 0: ProductNode
|                   1: Path s8.WORKFLOW_EXECUTION_UUID : String'
|                   2: Path s8.CALL_FULLY_QUALIFIED_NAME : String'
|                   3: Path s8.JOB_INDEX : Int'
|                   4: Path s8.JOB_ATTEMPT : Int'
|                   5: Path s8.STORE_KEY : String'
|                   6: Path s8.STORE_VALUE : String'
|                   7: OptionApply
|                     0: Path s8.JOB_KEY_VALUE_ENTRY_ID : Int'
|             where: Apply Function =
|               0: Path s7.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e
|           where: Apply Function =
|             0: Path s6.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7
|         where: Apply Function =
|           0: Path s5.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc
|       where: Apply Function =
|         0: Path s4.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69
|     where: Apply Function =
|       0: Path s3.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c
|   select: Pure t14
|     value: Path s2.STORE_VALUE : String'

[2020-07-30 19:06:19,08] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:19,08] [debug] After phase assignUniqueSymbols:
| Bind
|   from s15: Filter s16
|     from s16: Filter s17
|       from s17: Filter s18
|         from s18: Filter s19
|           from s19: Filter s20
|             from s20: TableExpansion
|               table s21: Table JOB_KEY_VALUE_ENTRY
|               columns: TypeMapping
|                 0: ProductNode
|                   1: Path s21.WORKFLOW_EXECUTION_UUID : String'
|                   2: Path s21.CALL_FULLY_QUALIFIED_NAME : String'
|                   3: Path s21.JOB_INDEX : Int'
|                   4: Path s21.JOB_ATTEMPT : Int'
|                   5: Path s21.STORE_KEY : String'
|                   6: Path s21.STORE_VALUE : String'
|                   7: OptionApply
|                     0: Path s21.JOB_KEY_VALUE_ENTRY_ID : Int'
|             where: Apply Function =
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e
|           where: Apply Function =
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7
|         where: Apply Function =
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc
|       where: Apply Function =
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69
|     where: Apply Function =
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c
|   select: Pure t23
|     value: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:19,08] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:19,08] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,08] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.JOB_KEY_VALUE_ENTRY)
[2020-07-30 19:06:19,08] [debug] With correct table types:
| Bind : Vector[t23<String'>]
|   from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             where: Apply Function = : Boolean
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|           where: Apply Function = : Boolean
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|         where: Apply Function = : Boolean
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|       where: Apply Function = : Boolean
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|     where: Apply Function = : Boolean
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'
|   select: Pure t23 : Vector[t23<String'>]
|     value: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:19,08] [debug] Table expansions: @t22 -> (s21,TypeMapping)
[2020-07-30 19:06:19,08] [debug] After phase expandTables:
| Bind : Vector[t23<String'>]
|   from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             where: Apply Function = : Boolean
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|           where: Apply Function = : Boolean
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|         where: Apply Function = : Boolean
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|       where: Apply Function = : Boolean
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|     where: Apply Function = : Boolean
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'
|   select: Pure t23 : Vector[t23<String'>]
|     value: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:19,08] [debug] After phase forceOuterBinds:
| Bind : Vector[t23<String'>]
|   from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             where: Apply Function = : Boolean
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|           where: Apply Function = : Boolean
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|         where: Apply Function = : Boolean
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|       where: Apply Function = : Boolean
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|     where: Apply Function = : Boolean
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'
|   select: Pure t23 : Vector[t23<String'>]
|     value: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:19,08] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:19,08] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:19,08] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:19,08] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,08] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,08] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,08] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:19,08] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:19,08] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,08] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,08] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,08] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:19,08] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:19,08] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,08] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,08] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,08] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:19,08] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:19,08] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,08] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,08] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,08] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:19,08] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:19,08] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,08] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,08] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,08] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:19,08] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:19,08] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,08] [debug] Translated type: Vector[t23<String'>] -> Vector[t23<String'>]
[2020-07-30 19:06:19,08] [debug] Translated type: Vector[t23<String'>] -> Vector[t23<String'>]
[2020-07-30 19:06:19,08] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:19,08] [debug] After phase expandRecords:
| Bind : Vector[t23<String'>]
|   from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             where: Apply Function = : Boolean
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|           where: Apply Function = : Boolean
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|         where: Apply Function = : Boolean
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|       where: Apply Function = : Boolean
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|     where: Apply Function = : Boolean
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'
|   select: Pure t23 : Vector[t23<String'>]
|     value: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:19,08] [debug] Analyzing s20.WORKFLOW_EXECUTION_UUID with symbols 
| Path s20.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:19,08] [debug] Translated s20.WORKFLOW_EXECUTION_UUID to:
| Path s20.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:19,08] [debug] Analyzing s19.CALL_FULLY_QUALIFIED_NAME with symbols 
| Path s19.CALL_FULLY_QUALIFIED_NAME : String'

[2020-07-30 19:06:19,08] [debug] Translated s19.CALL_FULLY_QUALIFIED_NAME to:
| Path s19.CALL_FULLY_QUALIFIED_NAME

[2020-07-30 19:06:19,09] [debug] Analyzing s18.JOB_INDEX with symbols 
| Path s18.JOB_INDEX : Int'

[2020-07-30 19:06:19,09] [debug] Translated s18.JOB_INDEX to:
| Path s18.JOB_INDEX

[2020-07-30 19:06:19,09] [debug] Analyzing s17.JOB_ATTEMPT with symbols 
| Path s17.JOB_ATTEMPT : Int'

[2020-07-30 19:06:19,09] [debug] Translated s17.JOB_ATTEMPT to:
| Path s17.JOB_ATTEMPT

[2020-07-30 19:06:19,09] [debug] Analyzing s16.STORE_KEY with symbols 
| Path s16.STORE_KEY : String'

[2020-07-30 19:06:19,09] [debug] Translated s16.STORE_KEY to:
| Path s16.STORE_KEY

[2020-07-30 19:06:19,09] [debug] Flattening projection t23
[2020-07-30 19:06:19,09] [debug] Analyzing s15.STORE_VALUE with symbols 
| Path s15.STORE_VALUE : String'

[2020-07-30 19:06:19,09] [debug] Translated s15.STORE_VALUE to:
| Path s15.STORE_VALUE

[2020-07-30 19:06:19,09] [debug] Flattening node at Path 
| Path s15.STORE_VALUE

[2020-07-30 19:06:19,09] [debug] Adding definition: s24 -> Path s15.STORE_VALUE
[2020-07-30 19:06:19,09] [debug] Adding translation for t23: (Map(List() -> s24), UnassignedType)
[2020-07-30 19:06:19,09] [debug] Flattened projection to
| Pure t23
|   value: StructNode
|     s24: Path s15.STORE_VALUE

[2020-07-30 19:06:19,09] [debug] After phase flattenProjections:
| Bind : Vector[t23<{s24: String'}>]
|   from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             where: Apply Function = : Boolean
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|           where: Apply Function = : Boolean
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|         where: Apply Function = : Boolean
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|       where: Apply Function = : Boolean
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|     where: Apply Function = : Boolean
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'
|   select: Pure t23 : Vector[t23<{s24: String'}>]
|     value: StructNode : {s24: String'}
|       s24: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:19,09] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:19,09] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:19,09] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:19,09] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:19,09] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:19,09] [debug] Unreferenced: t23; Field refs: (@t22,CALL_FULLY_QUALIFIED_NAME), (@t22,STORE_VALUE), (@t22,JOB_INDEX), (@t22,JOB_ATTEMPT), (@t22,WORKFLOW_EXECUTION_UUID), (@t22,STORE_KEY)
[2020-07-30 19:06:19,09] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:19,09] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:19,09] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:19,09] [debug] Creating mapping from t23<String'>
[2020-07-30 19:06:19,09] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[String']
|   from s25: Bind : Vector[t23<{s24: String'}>]
|     from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|               from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|               where: Apply Function = : Boolean
|                 0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|                 1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|             where: Apply Function = : Boolean
|               0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|               1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|           where: Apply Function = : Boolean
|             0: Path s18.JOB_INDEX : Int'
|             1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|         where: Apply Function = : Boolean
|           0: Path s17.JOB_ATTEMPT : Int'
|           1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|       where: Apply Function = : Boolean
|         0: Path s16.STORE_KEY : String'
|         1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'
|     select: Pure t23 : Vector[t23<{s24: String'}>]
|       value: StructNode : {s24: String'}
|         s24: Path s15.STORE_VALUE : String'
|   map: Path s25.s24 : String'

[2020-07-30 19:06:19,09] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:19,09] [debug] New defs: Map(0 -> (Path s15.STORE_VALUE,s26))
[2020-07-30 19:06:19,09] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[String']
|   from s25: Bind : Vector[t27<{s26: String'}>]
|     from s15: ...
|     select: Pure t27 : Vector[t27<{s26: String'}>]
|       value: StructNode : {s26: String'}
|         s26: Path s15.STORE_VALUE : String'
|   map: Path s25.s26 : String'

[2020-07-30 19:06:19,09] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[String']
|   from s25: Bind : Vector[t27<{s26: String'}>]
|     from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|               from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|               where: Apply Function = : Boolean
|                 0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|                 1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|             where: Apply Function = : Boolean
|               0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|               1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|           where: Apply Function = : Boolean
|             0: Path s18.JOB_INDEX : Int'
|             1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|         where: Apply Function = : Boolean
|           0: Path s17.JOB_ATTEMPT : Int'
|           1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|       where: Apply Function = : Boolean
|         0: Path s16.STORE_KEY : String'
|         1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'
|     select: Pure t27 : Vector[t27<{s26: String'}>]
|       value: StructNode : {s26: String'}
|         s26: Path s15.STORE_VALUE : String'
|   map: Path s25.s26 : String'

[2020-07-30 19:06:19,09] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:19,09] [debug] Table fields: Map(@t22 -> Vector(WORKFLOW_EXECUTION_UUID, CALL_FULLY_QUALIFIED_NAME, JOB_INDEX, JOB_ATTEMPT, STORE_KEY, STORE_VALUE))
[2020-07-30 19:06:19,09] [debug] Creating source from TableNode:
| Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]

[2020-07-30 19:06:19,09] [debug] Mappings are: ConstArray(((@t22,WORKFLOW_EXECUTION_UUID),List(WORKFLOW_EXECUTION_UUID)), ((@t22,CALL_FULLY_QUALIFIED_NAME),List(CALL_FULLY_QUALIFIED_NAME)), ((@t22,JOB_INDEX),List(JOB_INDEX)), ((@t22,JOB_ATTEMPT),List(JOB_ATTEMPT)), ((@t22,STORE_KEY),List(STORE_KEY)), ((@t22,STORE_VALUE),List(STORE_VALUE)))
[2020-07-30 19:06:19,09] [debug] Building new Comprehension from:
| Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]

[2020-07-30 19:06:19,09] [debug] Built new Comprehension:
| Comprehension s28, None, None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'

[2020-07-30 19:06:19,09] [debug] Replacements are: Map((@t22,CALL_FULLY_QUALIFIED_NAME) -> s31, (@t22,STORE_VALUE) -> s35, (@t22,JOB_INDEX) -> s32, (@t22,JOB_ATTEMPT) -> s33, (@t22,WORKFLOW_EXECUTION_UUID) -> s30, (@t22,STORE_KEY) -> s34)
[2020-07-30 19:06:19,09] [debug] Merging Filter into Comprehension:
| Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   from s20: ...
|   where: Apply Function = : Boolean
|     0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'

[2020-07-30 19:06:19,09] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'
|   where: Apply Function = : Boolean
|     0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'

[2020-07-30 19:06:19,09] [debug] Merging Filter into Comprehension:
| Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   from s19: ...
|   where: Apply Function = : Boolean
|     0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|     1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'

[2020-07-30 19:06:19,09] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|     1: Apply Function = : Boolean
|       0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'

[2020-07-30 19:06:19,09] [debug] Merging Filter into Comprehension:
| Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   from s18: ...
|   where: Apply Function = : Boolean
|     0: Path s18.JOB_INDEX : Int'
|     1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'

[2020-07-30 19:06:19,10] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|       1: Apply Function = : Boolean
|         0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|         1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|     1: Apply Function = : Boolean
|       0: Path s28.JOB_INDEX : Int'
|       1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'

[2020-07-30 19:06:19,10] [debug] Merging Filter into Comprehension:
| Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   from s17: ...
|   where: Apply Function = : Boolean
|     0: Path s17.JOB_ATTEMPT : Int'
|     1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'

[2020-07-30 19:06:19,10] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|           1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|         1: Apply Function = : Boolean
|           0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|           1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|       1: Apply Function = : Boolean
|         0: Path s28.JOB_INDEX : Int'
|         1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|     1: Apply Function = : Boolean
|       0: Path s28.JOB_ATTEMPT : Int'
|       1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'

[2020-07-30 19:06:19,10] [debug] Merging Filter into Comprehension:
| Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   from s16: ...
|   where: Apply Function = : Boolean
|     0: Path s16.STORE_KEY : String'
|     1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'

[2020-07-30 19:06:19,10] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|             1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|           1: Apply Function = : Boolean
|             0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|     1: Apply Function = : Boolean
|       0: Path s28.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'

[2020-07-30 19:06:19,10] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t27<{s26: String'}>]
|   from s15: ...
|   select: Pure t27 : Vector[t27<{s26: String'}>]
|     value: StructNode : {s26: String'}
|       s26: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:19,10] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<{s26: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t27 : Vector[t27<{s26: String'}>]
|     value: StructNode : {s26: String'}
|       s26: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|             1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|           1: Apply Function = : Boolean
|             0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|     1: Apply Function = : Boolean
|       0: Path s28.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'

[2020-07-30 19:06:19,10] [debug] Replacements are: Map((t27,s26) -> s26)
[2020-07-30 19:06:19,10] [debug] Mappings are: ConstArray(((t27,s26),List(s26)))
[2020-07-30 19:06:19,10] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[String']
|   from s25: Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<{s26: String'}>]
|     from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     select: Pure t27 : Vector[t27<{s26: String'}>]
|       value: StructNode : {s26: String'}
|         s26: Path s28.STORE_VALUE : String'
|     where: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|             1: Apply Function = : Boolean
|               0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|               1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|           1: Apply Function = : Boolean
|             0: Path s28.JOB_INDEX : Int'
|             1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_ATTEMPT : Int'
|           1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.STORE_KEY : String'
|         1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'
|   map: Path s25.s26 : String'

[2020-07-30 19:06:19,10] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:19,10] [debug] Required symbols: s26 -> 0
[2020-07-30 19:06:19,10] [debug] Transformed RSM: 
| ResultSetMapping
|   from s25: Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<(String')>]
|     from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     select: Pure t27 : Vector[t27<(String')>]
|       value: ProductNode : (String')
|         1: Path s28.STORE_VALUE : String'
|     where: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|             1: Apply Function = : Boolean
|               0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|               1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|           1: Apply Function = : Boolean
|             0: Path s28.JOB_INDEX : Int'
|             1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_ATTEMPT : Int'
|           1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.STORE_KEY : String'
|         1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'
|   map: Path s25.s26 : String'

[2020-07-30 19:06:19,11] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[String']
|   from s25: Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<(String')>]
|     from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     select: Pure t27 : Vector[t27<(String')>]
|       value: ProductNode : (String')
|         1: Path s28.STORE_VALUE : String'
|     where: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|             1: Apply Function = : Boolean
|               0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|               1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|           1: Apply Function = : Boolean
|             0: Path s28.JOB_INDEX : Int'
|             1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_ATTEMPT : Int'
|           1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.STORE_KEY : String'
|         1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'
|   map: Path s25._1 : String'

[2020-07-30 19:06:19,11] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:19,11] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:19,11] [debug] Compiling server-side and mapping with server-side:
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<(String')>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t27 : Vector[t27<(String')>]
|     value: ProductNode : (String')
|       1: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|             1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@30d7c1e : String'
|           1: Apply Function = : Boolean
|             0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@29f3a1b7 : String'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@3204cddc : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@61338a69 : Int'
|     1: Apply Function = : Boolean
|       0: Path s28.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@2223a93c : String'

[2020-07-30 19:06:19,11] [debug] Compiled ResultConverter
| SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'

[2020-07-30 19:06:19,11] [debug] Compiled server-side to:
| CompiledStatement "select "STORE_VALUE" from "JOB_KEY_VALUE_ENTRY" where (((("WORKFLOW_EXECUTION_UUID" = ?) and ("CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_INDEX" = ?)) and ("JOB_ATTEMPT" = ?)) and ("STORE_KEY" = ?)" : Vector[t27<(String')>]

[2020-07-30 19:06:19,11] [debug] After phase codeGen:
| ResultSetMapping : Vector[String']
|   from s25: CompiledStatement "select "STORE_VALUE" from "JOB_KEY_VALUE_ENTRY" where (((("WORKFLOW_EXECUTION_UUID" = ?) and ("CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_INDEX" = ?)) and ("JOB_ATTEMPT" = ?)) and ("STORE_KEY" = ?)" : Vector[t27<(String')>]
|   map: CompiledMapping : String'
|     converter: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'

[2020-07-30 19:06:19,11] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,11] [debug]       assignUniqueSymbols:    1.118809 ms
[2020-07-30 19:06:19,11] [debug]           unrollTailBinds:    0.121900 ms
[2020-07-30 19:06:19,11] [debug]                inferTypes:    0.194427 ms
[2020-07-30 19:06:19,11] [debug]              expandTables:    2.449994 ms
[2020-07-30 19:06:19,11] [debug]           forceOuterBinds:    1.203253 ms
[2020-07-30 19:06:19,11] [debug]         removeMappedTypes:    0.170534 ms
[2020-07-30 19:06:19,11] [debug]                expandSums:    2.147266 ms
[2020-07-30 19:06:19,11] [debug]             expandRecords:    0.826598 ms
[2020-07-30 19:06:19,11] [debug]        flattenProjections:    2.224750 ms
[2020-07-30 19:06:19,11] [debug]              rewriteJoins:    0.114079 ms
[2020-07-30 19:06:19,11] [debug]             verifySymbols:    0.121683 ms
[2020-07-30 19:06:19,11] [debug]             relabelUnions:    0.066235 ms
[2020-07-30 19:06:19,11] [debug]          createAggregates:    0.033670 ms
[2020-07-30 19:06:19,11] [debug]           resolveZipJoins:    0.064994 ms
[2020-07-30 19:06:19,11] [debug]          pruneProjections:    0.312848 ms
[2020-07-30 19:06:19,11] [debug]           rewriteDistinct:    0.086249 ms
[2020-07-30 19:06:19,11] [debug]    createResultSetMapping:    1.058873 ms
[2020-07-30 19:06:19,11] [debug]            hoistClientOps:    1.582797 ms
[2020-07-30 19:06:19,11] [debug]         reorderOperations:    0.147836 ms
[2020-07-30 19:06:19,11] [debug]     mergeToComprehensions:   11.852118 ms
[2020-07-30 19:06:19,11] [debug]            optimizeScalar:    0.108322 ms
[2020-07-30 19:06:19,11] [debug]          removeFieldNames:    2.932672 ms
[2020-07-30 19:06:19,11] [debug]      specializeParameters:    0.184221 ms
[2020-07-30 19:06:19,11] [debug]                   codeGen:    2.390062 ms
[2020-07-30 19:06:19,11] [debug]                     TOTAL:   31.514190 ms
[2020-07-30 19:06:19,11] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@6bc99efc
          base: SetTransactionIsolation
[2020-07-30 19:06:19,11] [debug] Preparing statement: select "STORE_VALUE" from "JOB_KEY_VALUE_ENTRY" where (((("WORKFLOW_EXECUTION_UUID" = ?) and ("CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_INDEX" = ?)) and ("JOB_ATTEMPT" = ?)) and ("STORE_KEY" = ?)
[2020-07-30 19:06:19,11] [debug] Executing prepared statement: HikariProxyPreparedStatement@1704879944 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6cdbad2e[sql=[select "STORE_VALUE" from "JOB_KEY_VALUE_ENTRY" where (((("WORKFLOW_EXECUTION_UUID" = ?) and ("CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_INDEX" = ?)) and ("JOB_ATTEMPT" = ?)) and ("STORE_KEY" = ?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [-1], [1], [FailedRetryCount]]]
[2020-07-30 19:06:19,11] [debug] Executing prepared statement: HikariProxyPreparedStatement@1704879944 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6cdbad2e[sql=[select "STORE_VALUE" from "JOB_KEY_VALUE_ENTRY" where (((("WORKFLOW_EXECUTION_UUID" = ?) and ("CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_INDEX" = ?)) and ("JOB_ATTEMPT" = ?)) and ("STORE_KEY" = ?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [-1], [1], [FailedRetryCount]]]
[2020-07-30 19:06:19,11] [debug] /---------------------------+---------------------------+-----+-----+------------------\
[2020-07-30 19:06:19,11] [debug] | 1                         | 2                         | 3   | 4   | 5                |
[2020-07-30 19:06:19,11] [debug] | String                    | String                    | Int | Int | String           |
[2020-07-30 19:06:19,11] [debug] |---------------------------+---------------------------+-----+-----+------------------|
[2020-07-30 19:06:19,11] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | -1  | 1   | FailedRetryCount |
[2020-07-30 19:06:19,11] [debug] \---------------------------+---------------------------+-----+-----+------------------/
[2020-07-30 19:06:19,11] [debug] Execution of prepared statement took 82µs
[2020-07-30 19:06:19,11] [debug] /-------------\
[2020-07-30 19:06:19,11] [debug] | 1           |
[2020-07-30 19:06:19,11] [debug] | STORE_VALUE |
[2020-07-30 19:06:19,11] [debug] |-------------|
[2020-07-30 19:06:19,11] [debug] \-------------/
[2020-07-30 19:06:19,19] [debug] Source:
| Apply Function exists
|   0: Bind
|     from s2: Filter s3
|       from s3: TableExpansion
|         table s4: Table CALL_CACHING_ENTRY
|         columns: TypeMapping
|           0: ProductNode
|             1: Path s4.WORKFLOW_EXECUTION_UUID : String'
|             2: Path s4.CALL_FULLY_QUALIFIED_NAME : String'
|             3: Path s4.JOB_INDEX : Int'
|             4: Path s4.JOB_ATTEMPT : Option[Int']
|             5: Path s4.RETURN_CODE : Option[Int']
|             6: Path s4.ALLOW_RESULT_REUSE : Boolean'
|             7: OptionApply
|               0: Path s4.CALL_CACHING_ENTRY_ID : Int'
|       where: Path s3.ALLOW_RESULT_REUSE : Boolean'
|     select: Bind
|       from s5: Filter s6
|         from s6: Filter s7
|           from s7: TableExpansion
|             table s8: Table CALL_CACHING_AGGREGATION_ENTRY
|             columns: TypeMapping
|               0: ProductNode
|                 1: Path s8.BASE_AGGREGATION : String'
|                 2: Path s8.INPUT_FILES_AGGREGATION : Option[String']
|                 3: OptionApply
|                   0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|                 4: OptionApply
|                   0: Path s8.CALL_CACHING_AGGREGATION_ENTRY_ID : Int'
|           where: Apply Function =
|             0: Path s2.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         where: Apply Function =
|           0: Path s6.BASE_AGGREGATION : String'
|           1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|       select: Pure t10
|         value: ProductNode

[2020-07-30 19:06:19,19] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:19,19] [debug] After phase assignUniqueSymbols:
| Apply Function exists
|   0: Bind
|     from s11: Filter s12
|       from s12: TableExpansion
|         table s13: Table CALL_CACHING_ENTRY
|         columns: TypeMapping
|           0: ProductNode
|             1: Path s13.WORKFLOW_EXECUTION_UUID : String'
|             2: Path s13.CALL_FULLY_QUALIFIED_NAME : String'
|             3: Path s13.JOB_INDEX : Int'
|             4: Path s13.JOB_ATTEMPT : Option[Int']
|             5: Path s13.RETURN_CODE : Option[Int']
|             6: Path s13.ALLOW_RESULT_REUSE : Boolean'
|             7: OptionApply
|               0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|       where: Path s12.ALLOW_RESULT_REUSE : Boolean'
|     select: Bind
|       from s15: Filter s16
|         from s16: Filter s17
|           from s17: TableExpansion
|             table s18: Table CALL_CACHING_AGGREGATION_ENTRY
|             columns: TypeMapping
|               0: ProductNode
|                 1: Path s18.BASE_AGGREGATION : String'
|                 2: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 3: OptionApply
|                   0: Path s18.CALL_CACHING_ENTRY_ID : Int'
|                 4: OptionApply
|                   0: Path s18.CALL_CACHING_AGGREGATION_ENTRY_ID : Int'
|           where: Apply Function =
|             0: Path s11.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s17.CALL_CACHING_ENTRY_ID : Int'
|         where: Apply Function =
|           0: Path s16.BASE_AGGREGATION : String'
|           1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|       select: Pure t20
|         value: ProductNode

[2020-07-30 19:06:19,19] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:19,19] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,19] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.CALL_CACHING_ENTRY), @(slick.jdbc.HsqldbProfile$._.CALL_CACHING_AGGREGATION_ENTRY)
[2020-07-30 19:06:19,19] [debug] With correct table types:
| Apply Function exists : Boolean
|   0: Bind : Vector[t20<()>]
|     from s11: Filter s12 : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s12: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Path s12.ALLOW_RESULT_REUSE : Boolean'
|     select: Bind : Vector[t20<()>]
|       from s15: Filter s16 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|         from s16: Filter s17 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           from s17: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           where: Apply Function = : Boolean
|             0: Path s11.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s17.CALL_CACHING_ENTRY_ID : Int'
|         where: Apply Function = : Boolean
|           0: Path s16.BASE_AGGREGATION : String'
|           1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|       select: Pure t20 : Vector[t20<()>]
|         value: ProductNode : ()

[2020-07-30 19:06:19,19] [debug] Table expansions: @t19 -> (s18,TypeMapping), @t14 -> (s13,TypeMapping)
[2020-07-30 19:06:19,19] [debug] After phase expandTables:
| Apply Function exists : Boolean
|   0: Bind : Vector[t20<()>]
|     from s11: Filter s12 : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s12: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Path s12.ALLOW_RESULT_REUSE : Boolean'
|     select: Bind : Vector[t20<()>]
|       from s15: Filter s16 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|         from s16: Filter s17 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           from s17: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           where: Apply Function = : Boolean
|             0: Path s11.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s17.CALL_CACHING_ENTRY_ID : Int'
|         where: Apply Function = : Boolean
|           0: Path s16.BASE_AGGREGATION : String'
|           1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|       select: Pure t20 : Vector[t20<()>]
|         value: ProductNode : ()

[2020-07-30 19:06:19,19] [debug] Introducing new Bind s21 for Pure t22
[2020-07-30 19:06:19,19] [debug] After phase forceOuterBinds:
| First : t22<Boolean>
|   0: Bind : Vector[t22<Boolean>]
|     from s21: Pure t23 : Vector[t23<()>]
|       value: ProductNode : ()
|     select: Pure t22 : Vector[t22<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t20<()>]
|           from s11: Filter s12 : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             from s12: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             where: Path s12.ALLOW_RESULT_REUSE : Boolean'
|           select: Bind : Vector[t20<()>]
|             from s15: Filter s16 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s16: Filter s17 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s17: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s11.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s17.CALL_CACHING_ENTRY_ID : Int'
|               where: Apply Function = : Boolean
|                 0: Path s16.BASE_AGGREGATION : String'
|                 1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|             select: Pure t20 : Vector[t20<()>]
|               value: ProductNode : ()

[2020-07-30 19:06:19,20] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:19,20] [debug] Translated type: () -> ()
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[t23<()>] -> Vector[t23<()>]
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>] -> Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
[2020-07-30 19:06:19,20] [debug] Translated type: @t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}> -> @t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
[2020-07-30 19:06:19,20] [debug] Translated type: Boolean' -> Boolean'
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>] -> Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,20] [debug] Translated type: @t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}> -> @t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
[2020-07-30 19:06:19,20] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,20] [debug] Translated type: @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,20] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,20] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,20] [debug] Translated type: @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,20] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,20] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,20] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,20] [debug] Translated type: () -> ()
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[t20<()>] -> Vector[t20<()>]
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[t20<()>] -> Vector[t20<()>]
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[t20<()>] -> Vector[t20<()>]
[2020-07-30 19:06:19,20] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[t22<Boolean>] -> Vector[t22<Boolean>]
[2020-07-30 19:06:19,20] [debug] Translated type: Vector[t22<Boolean>] -> Vector[t22<Boolean>]
[2020-07-30 19:06:19,20] [debug] Translated type: t22<Boolean> -> t22<Boolean>
[2020-07-30 19:06:19,20] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:19,20] [debug] After phase expandRecords:
| First : t22<Boolean>
|   0: Bind : Vector[t22<Boolean>]
|     from s21: Pure t23 : Vector[t23<()>]
|       value: ProductNode : ()
|     select: Pure t22 : Vector[t22<Boolean>]
|       value: Apply Function exists : Boolean
|         0: Bind : Vector[t20<()>]
|           from s11: Filter s12 : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             from s12: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             where: Path s12.ALLOW_RESULT_REUSE : Boolean'
|           select: Bind : Vector[t20<()>]
|             from s15: Filter s16 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s16: Filter s17 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s17: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s11.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s17.CALL_CACHING_ENTRY_ID : Int'
|               where: Apply Function = : Boolean
|                 0: Path s16.BASE_AGGREGATION : String'
|                 1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|             select: Pure t20 : Vector[t20<()>]
|               value: ProductNode : ()

[2020-07-30 19:06:19,20] [debug] Flattening projection t23
[2020-07-30 19:06:19,20] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:19,20] [debug] Adding translation for t23: (Map(), UnassignedType)
[2020-07-30 19:06:19,20] [debug] Flattened projection to
| Pure t23
|   value: StructNode

[2020-07-30 19:06:19,20] [debug] Flattening projection t22
[2020-07-30 19:06:19,20] [debug] Analyzing s12.ALLOW_RESULT_REUSE with symbols t23
| Path s12.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,20] [debug] Translated s12.ALLOW_RESULT_REUSE to:
| Path s12.ALLOW_RESULT_REUSE

[2020-07-30 19:06:19,20] [debug] Analyzing s11.CALL_CACHING_ENTRY_ID with symbols t23
| Path s11.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,20] [debug] Translated s11.CALL_CACHING_ENTRY_ID to:
| Path s11.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,20] [debug] Analyzing s17.CALL_CACHING_ENTRY_ID with symbols t23
| Path s17.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,20] [debug] Translated s17.CALL_CACHING_ENTRY_ID to:
| Path s17.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,20] [debug] Analyzing s16.BASE_AGGREGATION with symbols t23
| Path s16.BASE_AGGREGATION : String'

[2020-07-30 19:06:19,20] [debug] Translated s16.BASE_AGGREGATION to:
| Path s16.BASE_AGGREGATION

[2020-07-30 19:06:19,20] [debug] Flattening projection t20
[2020-07-30 19:06:19,20] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:19,20] [debug] Adding translation for t20: (Map(), UnassignedType)
[2020-07-30 19:06:19,20] [debug] Flattened projection to
| Pure t20
|   value: StructNode

[2020-07-30 19:06:19,20] [debug] Flattening node at Path 
| Apply Function exists
|   0: Bind
|     from s11: Filter s12
|       from s12: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Path s12.ALLOW_RESULT_REUSE
|     select: Bind
|       from s15: Filter s16
|         from s16: Filter s17
|           from s17: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           where: Apply Function =
|             0: Path s11.CALL_CACHING_ENTRY_ID
|             1: Path s17.CALL_CACHING_ENTRY_ID
|         where: Apply Function =
|           0: Path s16.BASE_AGGREGATION
|           1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|       select: Pure t20
|         value: StructNode

[2020-07-30 19:06:19,20] [debug] Adding definition: s24 -> Apply Function exists
[2020-07-30 19:06:19,20] [debug] Adding translation for t22: (Map(List() -> s24), UnassignedType)
[2020-07-30 19:06:19,20] [debug] Flattened projection to
| Pure t22
|   value: StructNode
|     s24: Apply Function exists
|       0: Bind
|         from s11: Filter s12
|           from s12: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           where: Path s12.ALLOW_RESULT_REUSE
|         select: Bind
|           from s15: Filter s16
|             from s16: Filter s17
|               from s17: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               where: Apply Function =
|                 0: Path s11.CALL_CACHING_ENTRY_ID
|                 1: Path s17.CALL_CACHING_ENTRY_ID
|             where: Apply Function =
|               0: Path s16.BASE_AGGREGATION
|               1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|           select: Pure t20
|             value: StructNode

[2020-07-30 19:06:19,20] [debug] After phase flattenProjections:
| First : t22<{s24: Boolean}>
|   0: Bind : Vector[t22<{s24: Boolean}>]
|     from s21: Pure t23 : Vector[t23<{}>]
|       value: StructNode : {}
|     select: Pure t22 : Vector[t22<{s24: Boolean}>]
|       value: StructNode : {s24: Boolean}
|         s24: Apply Function exists : Boolean
|           0: Bind : Vector[t20<{}>]
|             from s11: Filter s12 : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|               from s12: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|               where: Path s12.ALLOW_RESULT_REUSE : Boolean'
|             select: Bind : Vector[t20<{}>]
|               from s15: Filter s16 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s16: Filter s17 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                   from s17: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                   where: Apply Function = : Boolean
|                     0: Path s11.CALL_CACHING_ENTRY_ID : Int'
|                     1: Path s17.CALL_CACHING_ENTRY_ID : Int'
|                 where: Apply Function = : Boolean
|                   0: Path s16.BASE_AGGREGATION : String'
|                   1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|               select: Pure t20 : Vector[t20<{}>]
|                 value: StructNode : {}

[2020-07-30 19:06:19,20] [debug] Hoisting flatMapped Filter from:
| Bind : Vector[t20<{}>]
|   from s11: ...
|   select: Bind : Vector[t20<{}>]
|     from s15: Filter s16 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       from s16: ...
|       where: Apply Function = : Boolean
|         0: Path s16.BASE_AGGREGATION : String'
|         1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t20 : Vector[t20<{}>]
|       value: StructNode : {}

[2020-07-30 19:06:19,21] [debug] Hoisting join filters from:
| Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s25: Filter s12 : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s12: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     where: Path s12.ALLOW_RESULT_REUSE : Boolean'
|   right s26: Filter s17 : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     from s17: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     where: Apply Function = : Boolean
|       0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|       1: Path s17.CALL_CACHING_ENTRY_ID : Int'
|   on: Apply Function = : Boolean
|     0: Path s26.BASE_AGGREGATION : String'
|     1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:19,21] [debug] Hoisted join filters in:
| Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|         1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|       1: Apply Function = : Boolean
|         0: Path s26.BASE_AGGREGATION : String'
|         1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:19,21] [debug] Hoisted flatMapped Filter in:
| Bind : Vector[t20<{}>]
|   from s27: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s25: ...
|     right s26: ...
|     on: Apply Function and
|       0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s26.BASE_AGGREGATION : String'
|           1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t20 : Vector[t20<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:19,21] [debug] Inlining Pure 'from' in:
| Bind : Vector[t22<{s24: Boolean}>]
|   from s21: Pure t23 : Vector[t23<{}>]
|     value: StructNode : {}
|   select: Pure t22 : Vector[t22<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t20<{}>]
|           from s27: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|             left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             on: Apply Function and
|               0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|               1: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                 1: Apply Function = : Boolean
|                   0: Path s26.BASE_AGGREGATION : String'
|                   1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|           select: Pure t20 : Vector[t20<{}>]
|             value: StructNode : {}

[2020-07-30 19:06:19,21] [debug] Inlined Pure 'from' in:
| Bind : Vector[t22<{s24: Boolean}>]
|   from s21: Pure t28 : Vector[t28<{}>]
|     value: StructNode : {}
|   select: Pure t22 : Vector[t22<{s24: Boolean}>]
|     value: StructNode : {s24: Boolean}
|       s24: Apply Function exists : Boolean
|         0: Bind : Vector[t20<{}>]
|           from s27: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|             left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             on: Apply Function and
|               0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|               1: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                 1: Apply Function = : Boolean
|                   0: Path s26.BASE_AGGREGATION : String'
|                   1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|           select: Pure t20 : Vector[t20<{}>]
|             value: StructNode : {}

[2020-07-30 19:06:19,21] [debug] After phase rewriteJoins:
| First : t22<{s24: Boolean}>
|   0: Bind : Vector[t22<{s24: Boolean}>]
|     from s21: Pure t28 : Vector[t28<{}>]
|       value: StructNode : {}
|     select: Pure t22 : Vector[t22<{s24: Boolean}>]
|       value: StructNode : {s24: Boolean}
|         s24: Apply Function exists : Boolean
|           0: Bind : Vector[t20<{}>]
|             from s27: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|               left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|               right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               on: Apply Function and
|                 0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|                 1: Apply Function and : Boolean
|                   0: Apply Function = : Boolean
|                     0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                     1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                   1: Apply Function = : Boolean
|                     0: Path s26.BASE_AGGREGATION : String'
|                     1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|             select: Pure t20 : Vector[t20<{}>]
|               value: StructNode : {}

[2020-07-30 19:06:19,21] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:19,21] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:19,21] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:19,21] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:19,21] [debug] Unreferenced: t22, t20, t28; Field refs: (@t19,CALL_CACHING_ENTRY_ID), (@t14,ALLOW_RESULT_REUSE), (@t19,BASE_AGGREGATION), (@t14,CALL_CACHING_ENTRY_ID)
[2020-07-30 19:06:19,21] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:19,21] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:19,21] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:19,21] [debug] Creating mapping from t22<Boolean>
[2020-07-30 19:06:19,21] [debug] After phase createResultSetMapping:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s29: Bind : Vector[t22<{s24: Boolean}>]
|       from s21: Pure t28 : Vector[t28<{}>]
|         value: StructNode : {}
|       select: Pure t22 : Vector[t22<{s24: Boolean}>]
|         value: StructNode : {s24: Boolean}
|           s24: Apply Function exists : Boolean
|             0: Bind : Vector[t20<{}>]
|               from s27: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|                 left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|                 right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 on: Apply Function and
|                   0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|                   1: Apply Function and : Boolean
|                     0: Apply Function = : Boolean
|                       0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                       1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                     1: Apply Function = : Boolean
|                       0: Path s26.BASE_AGGREGATION : String'
|                       1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|               select: Pure t20 : Vector[t20<{}>]
|                 value: StructNode : {}
|     map: Path s29.s24 : Boolean

[2020-07-30 19:06:19,21] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:19,21] [debug] New defs: Map(0 -> (Apply Function exists,s30))
[2020-07-30 19:06:19,21] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Boolean]
|   from s29: Bind : Vector[t31<{s30: Boolean}>]
|     from s21: ...
|     select: Pure t31 : Vector[t31<{s30: Boolean}>]
|       value: StructNode : {s30: Boolean}
|         s30: Apply Function exists : Boolean
|           0: Bind : Vector[t20<{}>]
|             from s27: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|               left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|               right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               on: Apply Function and
|                 0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|                 1: Apply Function and : Boolean
|                   0: Apply Function = : Boolean
|                     0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                     1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                   1: Apply Function = : Boolean
|                     0: Path s26.BASE_AGGREGATION : String'
|                     1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|             select: Pure t20 : Vector[t20<{}>]
|               value: StructNode : {}
|   map: Path s29.s30 : Boolean

[2020-07-30 19:06:19,22] [debug] After phase hoistClientOps:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s29: Bind : Vector[t31<{s30: Boolean}>]
|       from s21: Pure t28 : Vector[t28<{}>]
|         value: StructNode : {}
|       select: Pure t31 : Vector[t31<{s30: Boolean}>]
|         value: StructNode : {s30: Boolean}
|           s30: Apply Function exists : Boolean
|             0: Bind : Vector[t20<{}>]
|               from s27: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|                 left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|                 right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 on: Apply Function and
|                   0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|                   1: Apply Function and : Boolean
|                     0: Apply Function = : Boolean
|                       0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                       1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                     1: Apply Function = : Boolean
|                       0: Path s26.BASE_AGGREGATION : String'
|                       1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|               select: Pure t20 : Vector[t20<{}>]
|                 value: StructNode : {}
|     map: Path s29.s30 : Boolean

[2020-07-30 19:06:19,22] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:19,22] [debug] Table fields: Map(@t19 -> Vector(CALL_CACHING_ENTRY_ID, BASE_AGGREGATION), @t14 -> Vector(ALLOW_RESULT_REUSE, CALL_CACHING_ENTRY_ID))
[2020-07-30 19:06:19,22] [debug] Creating source from Pure:
| Pure t28 : Vector[t28<{}>]
|   value: StructNode : {}

[2020-07-30 19:06:19,22] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:19,22] [debug] Building new Comprehension from:
| Pure t28 : Vector[t28<{}>]
|   value: StructNode : {}

[2020-07-30 19:06:19,22] [debug] Built new Comprehension:
| Comprehension s32, None, None, ConstArray(), None, None, None, None, false : Vector[t33<{}>]
|   from s32: Pure t28 : Vector[t28<{}>]
|     value: StructNode : {}
|   select: Pure t33 : Vector[t33<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:19,22] [debug] Replacements are: Map()
[2020-07-30 19:06:19,22] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t31<{s30: Boolean}>]
|   from s21: ...
|   select: Pure t31 : Vector[t31<{s30: Boolean}>]
|     value: StructNode : {s30: Boolean}
|       s30: Apply Function exists : Boolean
|         0: Bind : Vector[t20<{}>]
|           from s27: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|             left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             on: Apply Function and
|               0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|               1: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                 1: Apply Function = : Boolean
|                   0: Path s26.BASE_AGGREGATION : String'
|                   1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|           select: Pure t20 : Vector[t20<{}>]
|             value: StructNode : {}

[2020-07-30 19:06:19,22] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s32, None, None, ConstArray(), None, None, None, None, false : Vector[t31<{s30: Boolean}>]
|   from s32: Pure t28 : Vector[t28<{}>]
|     value: StructNode : {}
|   select: Pure t31 : Vector[t31<{s30: Boolean}>]
|     value: StructNode : {s30: Boolean}
|       s30: Apply Function exists : Boolean
|         0: Bind : Vector[t20<{}>]
|           from s27: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|             left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             on: Apply Function and
|               0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|               1: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                 1: Apply Function = : Boolean
|                   0: Path s26.BASE_AGGREGATION : String'
|                   1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|           select: Pure t20 : Vector[t20<{}>]
|             value: StructNode : {}

[2020-07-30 19:06:19,22] [debug] Replacements are: Map((t31,s30) -> s30)
[2020-07-30 19:06:19,22] [debug] Mappings are: ConstArray(((t31,s30),List(s30)))
[2020-07-30 19:06:19,22] [debug] Creating source from Join s25/s26:
| Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|         1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|       1: Apply Function = : Boolean
|         0: Path s26.BASE_AGGREGATION : String'
|         1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:19,22] [debug] Creating source from TableNode:
| Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]

[2020-07-30 19:06:19,22] [debug] Mappings are: ConstArray(((@t14,ALLOW_RESULT_REUSE),List(ALLOW_RESULT_REUSE)), ((@t14,CALL_CACHING_ENTRY_ID),List(CALL_CACHING_ENTRY_ID)))
[2020-07-30 19:06:19,22] [debug] Creating source from TableNode:
| Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]

[2020-07-30 19:06:19,22] [debug] Mappings are: ConstArray(((@t19,CALL_CACHING_ENTRY_ID),List(CALL_CACHING_ENTRY_ID)), ((@t19,BASE_AGGREGATION),List(BASE_AGGREGATION)))
[2020-07-30 19:06:19,22] [debug] Converted left side of Join s25/s26:
| Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]

[2020-07-30 19:06:19,22] [debug] Converted right side of Join s25/s26:
| Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]

[2020-07-30 19:06:19,22] [debug] Mappings for [38;5;5mon[0m clause in Join s25/s26: Map((@t14,ALLOW_RESULT_REUSE) -> List(_1, ALLOW_RESULT_REUSE), (@t14,CALL_CACHING_ENTRY_ID) -> List(_1, CALL_CACHING_ENTRY_ID), (@t19,CALL_CACHING_ENTRY_ID) -> List(_2, CALL_CACHING_ENTRY_ID), (@t19,BASE_AGGREGATION) -> List(_2, BASE_AGGREGATION))
[2020-07-30 19:06:19,22] [debug] Transformed [38;5;5mon[0m clause in Join s25/s26:
| Apply Function and
|   0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|   1: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|       1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|     1: Apply Function = : Boolean
|       0: Path s26.BASE_AGGREGATION : String'
|       1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:19,22] [debug] Created source from Join s25/s26:
| Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|         1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|       1: Apply Function = : Boolean
|         0: Path s26.BASE_AGGREGATION : String'
|         1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:19,22] [debug] Building new Comprehension from:
| Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|         1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|       1: Apply Function = : Boolean
|         0: Path s26.BASE_AGGREGATION : String'
|         1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:19,22] [debug] Built new Comprehension:
| Comprehension s34, None, None, ConstArray(), None, None, None, None, false : Vector[t35<{s36: Boolean', s37: Int', s38: Int', s39: String'}>]
|   from s34: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s26.BASE_AGGREGATION : String'
|           1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t35 : Vector[t35<{s36: Boolean', s37: Int', s38: Int', s39: String'}>]
|     value: StructNode : {s36: Boolean', s37: Int', s38: Int', s39: String'}
|       s36: Path s34._1.ALLOW_RESULT_REUSE : Boolean'
|       s37: Path s34._1.CALL_CACHING_ENTRY_ID : Int'
|       s38: Path s34._2.CALL_CACHING_ENTRY_ID : Int'
|       s39: Path s34._2.BASE_AGGREGATION : String'

[2020-07-30 19:06:19,22] [debug] Replacements are: Map((@t14,ALLOW_RESULT_REUSE) -> s36, (@t14,CALL_CACHING_ENTRY_ID) -> s37, (@t19,CALL_CACHING_ENTRY_ID) -> s38, (@t19,BASE_AGGREGATION) -> s39)
[2020-07-30 19:06:19,22] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t20<{}>]
|   from s27: ...
|   select: Pure t20 : Vector[t20<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:19,22] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s34, None, None, ConstArray(), None, None, None, None, false : Vector[t20<{}>]
|   from s34: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s26.BASE_AGGREGATION : String'
|           1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t20 : Vector[t20<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:19,22] [debug] Replacements are: Map()
[2020-07-30 19:06:19,22] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:19,23] [debug] After phase mergeToComprehensions:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s29: Comprehension s32, None, None, ConstArray(), None, None, None, None, false : Vector[t31<{s30: Boolean}>]
|       from s32: Pure t28 : Vector[t28<{}>]
|         value: StructNode : {}
|       select: Pure t31 : Vector[t31<{s30: Boolean}>]
|         value: StructNode : {s30: Boolean}
|           s30: Apply Function exists : Boolean
|             0: Comprehension s34, None, None, ConstArray(), None, None, None, None, false : Vector[t40<{s41: Int}>]
|               from s34: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|                 left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|                 right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 on: Apply Function and
|                   0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|                   1: Apply Function and : Boolean
|                     0: Apply Function = : Boolean
|                       0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                       1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                     1: Apply Function = : Boolean
|                       0: Path s26.BASE_AGGREGATION : String'
|                       1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|               select: Pure t40 : Vector[t40<{s41: Int}>]
|                 value: StructNode : {s41: Int}
|                   s41: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s29.s30 : Boolean

[2020-07-30 19:06:19,23] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:19,23] [debug] Required symbols: s30 -> 0
[2020-07-30 19:06:19,23] [debug] Transformed RSM: 
| ResultSetMapping
|   from s29: Comprehension s32, None, None, ConstArray(), None, None, None, None, false : Vector[t31<(Boolean)>]
|     from s32: Pure t28 : Vector[t28<()>]
|       value: ProductNode : ()
|     select: Pure t31 : Vector[t31<(Boolean)>]
|       value: ProductNode : (Boolean)
|         1: Apply Function exists : Boolean
|           0: Comprehension s34, None, None, ConstArray(), None, None, None, None, false : Vector[t40<Int>]
|             from s34: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|               left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|               right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               on: Apply Function and
|                 0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|                 1: Apply Function and : Boolean
|                   0: Apply Function = : Boolean
|                     0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                     1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                   1: Apply Function = : Boolean
|                     0: Path s26.BASE_AGGREGATION : String'
|                     1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|             select: Pure t40 : Vector[t40<Int>]
|               value: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s29.s30 : Boolean

[2020-07-30 19:06:19,23] [debug] After phase removeFieldNames:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s29: Comprehension s32, None, None, ConstArray(), None, None, None, None, false : Vector[t31<(Boolean)>]
|       from s32: Pure t28 : Vector[t28<()>]
|         value: ProductNode : ()
|       select: Pure t31 : Vector[t31<(Boolean)>]
|         value: ProductNode : (Boolean)
|           1: Apply Function exists : Boolean
|             0: Comprehension s34, None, None, ConstArray(), None, None, None, None, false : Vector[t40<Int>]
|               from s34: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|                 left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|                 right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 on: Apply Function and
|                   0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|                   1: Apply Function and : Boolean
|                     0: Apply Function = : Boolean
|                       0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                       1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                     1: Apply Function = : Boolean
|                       0: Path s26.BASE_AGGREGATION : String'
|                       1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|               select: Pure t40 : Vector[t40<Int>]
|                 value: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s29._1 : Boolean

[2020-07-30 19:06:19,23] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:19,23] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:19,23] [debug] Compiling server-side and mapping with server-side:
| Comprehension s32, None, None, ConstArray(), None, None, None, None, false : Vector[t31<(Boolean)>]
|   from s32: Pure t28 : Vector[t28<()>]
|     value: ProductNode : ()
|   select: Pure t31 : Vector[t31<(Boolean)>]
|     value: ProductNode : (Boolean)
|       1: Apply Function exists : Boolean
|         0: Comprehension s34, None, None, ConstArray(), None, None, None, None, false : Vector[t40<Int>]
|           from s34: Join Inner : Vector[(@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|             left s25: Table CALL_CACHING_ENTRY : Vector[@t14<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             right s26: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t19<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             on: Apply Function and
|               0: Path s25.ALLOW_RESULT_REUSE : Boolean'
|               1: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s25.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s26.CALL_CACHING_ENTRY_ID : Int'
|                 1: Apply Function = : Boolean
|                   0: Path s26.BASE_AGGREGATION : String'
|                   1: QueryParameter s9 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|           select: Pure t40 : Vector[t40<Int>]
|             value: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:19,23] [debug] Compiled ResultConverter
| BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

[2020-07-30 19:06:19,23] [debug] Compiled server-side to:
| CompiledStatement "select exists(select 1 from "CALL_CACHING_ENTRY" s25, "CALL_CACHING_AGGREGATION_ENTRY" s26 where s25."ALLOW_RESULT_REUSE" and ((s25."CALL_CACHING_ENTRY_ID" = s26."CALL_CACHING_ENTRY_ID") and (s26."BASE_AGGREGATION" = ?))) from (VALUES (0))" : Vector[t31<(Boolean)>]

[2020-07-30 19:06:19,23] [debug] After phase codeGen:
| First : Boolean
|   0: ResultSetMapping : Vector[Boolean]
|     from s29: CompiledStatement "select exists(select 1 from "CALL_CACHING_ENTRY" s25, "CALL_CACHING_AGGREGATION_ENTRY" s26 where s25."ALLOW_RESULT_REUSE" and ((s25."CALL_CACHING_ENTRY_ID" = s26."CALL_CACHING_ENTRY_ID") and (s26."BASE_AGGREGATION" = ?))) from (VALUES (0))" : Vector[t31<(Boolean)>]
|     map: CompiledMapping : Boolean
|       converter: BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

[2020-07-30 19:06:19,23] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,23] [debug]       assignUniqueSymbols:    2.388415 ms
[2020-07-30 19:06:19,23] [debug]           unrollTailBinds:    0.222453 ms
[2020-07-30 19:06:19,23] [debug]                inferTypes:    0.375982 ms
[2020-07-30 19:06:19,23] [debug]              expandTables:    2.331086 ms
[2020-07-30 19:06:19,23] [debug]           forceOuterBinds:    1.211546 ms
[2020-07-30 19:06:19,23] [debug]         removeMappedTypes:    0.256141 ms
[2020-07-30 19:06:19,23] [debug]                expandSums:    1.983449 ms
[2020-07-30 19:06:19,23] [debug]             expandRecords:    0.953787 ms
[2020-07-30 19:06:19,23] [debug]        flattenProjections:    4.099185 ms
[2020-07-30 19:06:19,23] [debug]              rewriteJoins:    8.499728 ms
[2020-07-30 19:06:19,23] [debug]             verifySymbols:    0.205371 ms
[2020-07-30 19:06:19,23] [debug]             relabelUnions:    0.096023 ms
[2020-07-30 19:06:19,23] [debug]          createAggregates:    0.048213 ms
[2020-07-30 19:06:19,23] [debug]           resolveZipJoins:    0.082437 ms
[2020-07-30 19:06:19,23] [debug]          pruneProjections:    0.379180 ms
[2020-07-30 19:06:19,23] [debug]           rewriteDistinct:    0.109386 ms
[2020-07-30 19:06:19,23] [debug]    createResultSetMapping:    1.026753 ms
[2020-07-30 19:06:19,23] [debug]            hoistClientOps:    2.398002 ms
[2020-07-30 19:06:19,23] [debug]         reorderOperations:    0.136736 ms
[2020-07-30 19:06:19,23] [debug]     mergeToComprehensions:   10.766163 ms
[2020-07-30 19:06:19,23] [debug]            optimizeScalar:    0.174445 ms
[2020-07-30 19:06:19,23] [debug]          removeFieldNames:    2.599291 ms
[2020-07-30 19:06:19,23] [debug]      specializeParameters:    0.201052 ms
[2020-07-30 19:06:19,24] [debug]                   codeGen:    3.171769 ms
[2020-07-30 19:06:19,24] [debug]                     TOTAL:   43.716593 ms
[2020-07-30 19:06:19,24] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@44787400
          base: SetTransactionIsolation
[2020-07-30 19:06:19,24] [debug] Preparing statement: select exists(select 1 from "CALL_CACHING_ENTRY" s25, "CALL_CACHING_AGGREGATION_ENTRY" s26 where s25."ALLOW_RESULT_REUSE" and ((s25."CALL_CACHING_ENTRY_ID" = s26."CALL_CACHING_ENTRY_ID") and (s26."BASE_AGGREGATION" = ?))) from (VALUES (0))
[2020-07-30 19:06:19,24] [debug] Executing prepared statement: HikariProxyPreparedStatement@1407332268 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@59423e93[sql=[select exists(select 1 from "CALL_CACHING_ENTRY" s25, "CALL_CACHING_AGGREGATION_ENTRY" s26 where s25."ALLOW_RESULT_REUSE" and ((s25."CALL_CACHING_ENTRY_ID" = s26."CALL_CACHING_ENTRY_ID") and (s26."BASE_AGGREGATION" = ?))) from (VALUES (0))], parameters=[[65F2F0AC1615D0CCB745BB8773FAB356]]]
[2020-07-30 19:06:19,24] [debug] Executing prepared statement: HikariProxyPreparedStatement@1407332268 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@59423e93[sql=[select exists(select 1 from "CALL_CACHING_ENTRY" s25, "CALL_CACHING_AGGREGATION_ENTRY" s26 where s25."ALLOW_RESULT_REUSE" and ((s25."CALL_CACHING_ENTRY_ID" = s26."CALL_CACHING_ENTRY_ID") and (s26."BASE_AGGREGATION" = ?))) from (VALUES (0))], parameters=[[65F2F0AC1615D0CCB745BB8773FAB356]]]
[2020-07-30 19:06:19,24] [debug] /---------------------------\
[2020-07-30 19:06:19,24] [debug] | 1                         |
[2020-07-30 19:06:19,24] [debug] | String                    |
[2020-07-30 19:06:19,24] [debug] |---------------------------|
[2020-07-30 19:06:19,24] [debug] | 65F2F0AC1615D0CCB745BB... |
[2020-07-30 19:06:19,24] [debug] \---------------------------/
[2020-07-30 19:06:19,24] [debug] Execution of prepared statement took 472µs
[2020-07-30 19:06:19,24] [debug] /------\
[2020-07-30 19:06:19,24] [debug] | 1    |
[2020-07-30 19:06:19,24] [debug] | C1   |
[2020-07-30 19:06:19,24] [debug] |------|
[2020-07-30 19:06:19,24] [debug] | true |
[2020-07-30 19:06:19,24] [debug] \------/
[2020-07-30 19:06:19,25] [debug] Source:
| Take
|   from: Drop
|     from: Bind
|       from s2: Filter s3
|         from s3: TableExpansion
|           table s4: Table CALL_CACHING_ENTRY
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s4.WORKFLOW_EXECUTION_UUID : String'
|               2: Path s4.CALL_FULLY_QUALIFIED_NAME : String'
|               3: Path s4.JOB_INDEX : Int'
|               4: Path s4.JOB_ATTEMPT : Option[Int']
|               5: Path s4.RETURN_CODE : Option[Int']
|               6: Path s4.ALLOW_RESULT_REUSE : Boolean'
|               7: OptionApply
|                 0: Path s4.CALL_CACHING_ENTRY_ID : Int'
|         where: Path s3.ALLOW_RESULT_REUSE : Boolean'
|       select: Bind
|         from s5: Filter s6
|           from s6: Filter s7
|             from s7: Filter s8
|               from s8: TableExpansion
|                 table s9: Table CALL_CACHING_AGGREGATION_ENTRY
|                 columns: TypeMapping
|                   0: ProductNode
|                     1: Path s9.BASE_AGGREGATION : String'
|                     2: Path s9.INPUT_FILES_AGGREGATION : Option[String']
|                     3: OptionApply
|                       0: Path s9.CALL_CACHING_ENTRY_ID : Int'
|                     4: OptionApply
|                       0: Path s9.CALL_CACHING_AGGREGATION_ENTRY_ID : Int'
|               where: Apply Function =
|                 0: Path s2.CALL_CACHING_ENTRY_ID : Int'
|                 1: Path s8.CALL_CACHING_ENTRY_ID : Int'
|             where: Apply Function =
|               0: Path s7.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false)
|           where: Apply Function or
|             0: Apply Function and
|               0: OptionFold
|                 from s10: Path s6.INPUT_FILES_AGGREGATION : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false)
|                 map: LiteralNode false (volatileHint=false)
|               1: OptionFold
|                 from s11: LiteralNode None (volatileHint=false)
|                 ifEmpty: LiteralNode true (volatileHint=false)
|                 map: LiteralNode false (volatileHint=false)
|             1: Apply Function =
|               0: Path s6.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false)
|         select: Pure t12
|           value: Path s5.CALL_CACHING_ENTRY_ID : Int'
|     count: LiteralNode 0 (volatileHint=false)
|   count: LiteralNode 1 (volatileHint=false)

[2020-07-30 19:06:19,25] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:19,25] [debug] After phase assignUniqueSymbols:
| Take
|   from: Drop
|     from: Bind
|       from s13: Filter s14
|         from s14: TableExpansion
|           table s15: Table CALL_CACHING_ENTRY
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s15.WORKFLOW_EXECUTION_UUID : String'
|               2: Path s15.CALL_FULLY_QUALIFIED_NAME : String'
|               3: Path s15.JOB_INDEX : Int'
|               4: Path s15.JOB_ATTEMPT : Option[Int']
|               5: Path s15.RETURN_CODE : Option[Int']
|               6: Path s15.ALLOW_RESULT_REUSE : Boolean'
|               7: OptionApply
|                 0: Path s15.CALL_CACHING_ENTRY_ID : Int'
|         where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|       select: Bind
|         from s17: Filter s18
|           from s18: Filter s19
|             from s19: Filter s20
|               from s20: TableExpansion
|                 table s21: Table CALL_CACHING_AGGREGATION_ENTRY
|                 columns: TypeMapping
|                   0: ProductNode
|                     1: Path s21.BASE_AGGREGATION : String'
|                     2: Path s21.INPUT_FILES_AGGREGATION : Option[String']
|                     3: OptionApply
|                       0: Path s21.CALL_CACHING_ENTRY_ID : Int'
|                     4: OptionApply
|                       0: Path s21.CALL_CACHING_AGGREGATION_ENTRY_ID : Int'
|               where: Apply Function =
|                 0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                 1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|             where: Apply Function =
|               0: Path s19.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false)
|           where: Apply Function or
|             0: Apply Function and
|               0: OptionFold
|                 from s23: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false)
|                 map: LiteralNode false (volatileHint=false)
|               1: OptionFold
|                 from s24: LiteralNode None (volatileHint=false)
|                 ifEmpty: LiteralNode true (volatileHint=false)
|                 map: LiteralNode false (volatileHint=false)
|             1: Apply Function =
|               0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false)
|         select: Pure t25
|           value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|     count: LiteralNode 0 (volatileHint=false)
|   count: LiteralNode 1 (volatileHint=false)

[2020-07-30 19:06:19,25] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:19,25] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,25] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.CALL_CACHING_ENTRY), @(slick.jdbc.HsqldbProfile$._.CALL_CACHING_AGGREGATION_ENTRY)
[2020-07-30 19:06:19,25] [debug] With correct table types:
| Take : Vector[t25<Int'>]
|   from: Drop : Vector[t25<Int'>]
|     from: Bind : Vector[t25<Int'>]
|       from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|         from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|         where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|       select: Bind : Vector[t25<Int'>]
|         from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               where: Apply Function = : Boolean
|                 0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                 1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|             where: Apply Function = : Boolean
|               0: Path s19.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|           where: Apply Function or : SOption[Boolean]
|             0: Apply Function and : Boolean
|               0: OptionFold : Boolean
|                 from s23: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                 map: LiteralNode false (volatileHint=false) : Boolean
|               1: OptionFold : Boolean
|                 from s24: LiteralNode None (volatileHint=false) : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                 map: LiteralNode false (volatileHint=false) : Boolean
|             1: Apply Function = : SOption[Boolean]
|               0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false) : Option[String']
|         select: Pure t25 : Vector[t25<Int'>]
|           value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|     count: LiteralNode 0 (volatileHint=false) : Long
|   count: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,25] [debug] Table expansions: @t16 -> (s15,TypeMapping), @t22 -> (s21,TypeMapping)
[2020-07-30 19:06:19,26] [debug] After phase expandTables:
| Take : Vector[t25<Int'>]
|   from: Drop : Vector[t25<Int'>]
|     from: Bind : Vector[t25<Int'>]
|       from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|         from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|         where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|       select: Bind : Vector[t25<Int'>]
|         from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               where: Apply Function = : Boolean
|                 0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                 1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|             where: Apply Function = : Boolean
|               0: Path s19.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|           where: Apply Function or : SOption[Boolean]
|             0: Apply Function and : Boolean
|               0: OptionFold : Boolean
|                 from s23: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                 map: LiteralNode false (volatileHint=false) : Boolean
|               1: OptionFold : Boolean
|                 from s24: LiteralNode None (volatileHint=false) : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                 map: LiteralNode false (volatileHint=false) : Boolean
|             1: Apply Function = : SOption[Boolean]
|               0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false) : Option[String']
|         select: Pure t25 : Vector[t25<Int'>]
|           value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|     count: LiteralNode 0 (volatileHint=false) : Long
|   count: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,26] [debug] Introducing new Bind s26 for Take
[2020-07-30 19:06:19,26] [debug] After phase forceOuterBinds:
| Bind : Vector[t27<t25<Int'>>]
|   from s26: Take : Vector[t25<Int'>]
|     from: Drop : Vector[t25<Int'>]
|       from: Bind : Vector[t25<Int'>]
|         from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|         select: Bind : Vector[t25<Int'>]
|           from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|               where: Apply Function = : Boolean
|                 0: Path s19.BASE_AGGREGATION : String'
|                 1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|             where: Apply Function or : SOption[Boolean]
|               0: Apply Function and : Boolean
|                 0: OptionFold : Boolean
|                   from s23: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                   ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                   map: LiteralNode false (volatileHint=false) : Boolean
|                 1: OptionFold : Boolean
|                   from s24: LiteralNode None (volatileHint=false) : Option[String']
|                   ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                   map: LiteralNode false (volatileHint=false) : Boolean
|               1: Apply Function = : SOption[Boolean]
|                 0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<Int'>]
|             value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|       count: LiteralNode 0 (volatileHint=false) : Long
|     count: LiteralNode 1 (volatileHint=false) : Long
|   select: Pure t27 : Vector[t27<t25<Int'>>]
|     value: Ref s26 : t25<Int'>

[2020-07-30 19:06:19,26] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>] -> Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
[2020-07-30 19:06:19,26] [debug] Translated type: @t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}> -> @t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
[2020-07-30 19:06:19,26] [debug] Translated type: Boolean' -> Boolean'
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>] -> Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,26] [debug] Translated type: @t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}> -> @t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
[2020-07-30 19:06:19,26] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,26] [debug] Translated type: @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,26] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,26] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,26] [debug] Translated type: @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,26] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,26] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,26] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,26] [debug] Translated type: @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,26] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:19,26] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,26] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,26] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,26] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:19,26] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,26] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,26] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,26] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,26] [debug] Translated type: @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,26] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:19,26] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:19,26] [debug] Translated type: SOption[Boolean] -> SOption[Boolean]
[2020-07-30 19:06:19,26] [debug] Translated type: SOption[Boolean] -> SOption[Boolean]
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,26] [debug] Translated type: @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,26] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[t25<Int'>] -> Vector[t25<Int'>]
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[t25<Int'>] -> Vector[t25<Int'>]
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[t25<Int'>] -> Vector[t25<Int'>]
[2020-07-30 19:06:19,26] [debug] Translated type: Long -> Long
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[t25<Int'>] -> Vector[t25<Int'>]
[2020-07-30 19:06:19,26] [debug] Translated type: Long -> Long
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[t25<Int'>] -> Vector[t25<Int'>]
[2020-07-30 19:06:19,26] [debug] Translated type: t25<Int'> -> t25<Int'>
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[t27<t25<Int'>>] -> Vector[t27<t25<Int'>>]
[2020-07-30 19:06:19,26] [debug] Translated type: Vector[t27<t25<Int'>>] -> Vector[t27<t25<Int'>>]
[2020-07-30 19:06:19,26] [debug] After phase expandSums:
| Bind : Vector[t27<t25<Int'>>]
|   from s26: Take : Vector[t25<Int'>]
|     from: Drop : Vector[t25<Int'>]
|       from: Bind : Vector[t25<Int'>]
|         from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|         select: Bind : Vector[t25<Int'>]
|           from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|               where: Apply Function = : Boolean
|                 0: Path s19.BASE_AGGREGATION : String'
|                 1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|             where: Apply Function or : SOption[Boolean]
|               0: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|                 1: Apply Function = : Boolean
|                   0: LiteralNode None (volatileHint=false) : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : SOption[Boolean]
|                 0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<Int'>]
|             value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|       count: LiteralNode 0 (volatileHint=false) : Long
|     count: LiteralNode 1 (volatileHint=false) : Long
|   select: Pure t27 : Vector[t27<t25<Int'>>]
|     value: Ref s26 : t25<Int'>

[2020-07-30 19:06:19,26] [debug] After phase expandRecords:
| Bind : Vector[t27<t25<Int'>>]
|   from s26: Take : Vector[t25<Int'>]
|     from: Drop : Vector[t25<Int'>]
|       from: Bind : Vector[t25<Int'>]
|         from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|         select: Bind : Vector[t25<Int'>]
|           from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|               where: Apply Function = : Boolean
|                 0: Path s19.BASE_AGGREGATION : String'
|                 1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|             where: Apply Function or : SOption[Boolean]
|               0: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|                 1: Apply Function = : Boolean
|                   0: LiteralNode None (volatileHint=false) : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : SOption[Boolean]
|                 0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<Int'>]
|             value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|       count: LiteralNode 0 (volatileHint=false) : Long
|     count: LiteralNode 1 (volatileHint=false) : Long
|   select: Pure t27 : Vector[t27<t25<Int'>>]
|     value: Ref s26 : t25<Int'>

[2020-07-30 19:06:19,26] [debug] Analyzing s14.ALLOW_RESULT_REUSE with symbols 
| Path s14.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,26] [debug] Translated s14.ALLOW_RESULT_REUSE to:
| Path s14.ALLOW_RESULT_REUSE

[2020-07-30 19:06:19,26] [debug] Analyzing s13.CALL_CACHING_ENTRY_ID with symbols 
| Path s13.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,26] [debug] Translated s13.CALL_CACHING_ENTRY_ID to:
| Path s13.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,26] [debug] Analyzing s20.CALL_CACHING_ENTRY_ID with symbols 
| Path s20.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,26] [debug] Translated s20.CALL_CACHING_ENTRY_ID to:
| Path s20.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,26] [debug] Analyzing s19.BASE_AGGREGATION with symbols 
| Path s19.BASE_AGGREGATION : String'

[2020-07-30 19:06:19,26] [debug] Translated s19.BASE_AGGREGATION to:
| Path s19.BASE_AGGREGATION

[2020-07-30 19:06:19,26] [debug] Analyzing s18.INPUT_FILES_AGGREGATION with symbols 
| Path s18.INPUT_FILES_AGGREGATION : Option[String']

[2020-07-30 19:06:19,26] [debug] Translated s18.INPUT_FILES_AGGREGATION to:
| Path s18.INPUT_FILES_AGGREGATION

[2020-07-30 19:06:19,26] [debug] Analyzing s18.INPUT_FILES_AGGREGATION with symbols 
| Path s18.INPUT_FILES_AGGREGATION : Option[String']

[2020-07-30 19:06:19,26] [debug] Translated s18.INPUT_FILES_AGGREGATION to:
| Path s18.INPUT_FILES_AGGREGATION

[2020-07-30 19:06:19,26] [debug] Flattening projection t25
[2020-07-30 19:06:19,26] [debug] Analyzing s17.CALL_CACHING_ENTRY_ID with symbols 
| Path s17.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,26] [debug] Translated s17.CALL_CACHING_ENTRY_ID to:
| Path s17.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,26] [debug] Flattening node at Path 
| Path s17.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,26] [debug] Adding definition: s28 -> Path s17.CALL_CACHING_ENTRY_ID
[2020-07-30 19:06:19,26] [debug] Adding translation for t25: (Map(List() -> s28), UnassignedType)
[2020-07-30 19:06:19,26] [debug] Flattened projection to
| Pure t25
|   value: StructNode
|     s28: Path s17.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,26] [debug] Flattening projection t27
[2020-07-30 19:06:19,26] [debug] Analyzing s26 with symbols t25
| Ref s26 : t25<Int'>

[2020-07-30 19:06:19,26] [debug] Found s26 with local part Path  over t25
[2020-07-30 19:06:19,27] [debug]   Translation for t25: Map(List() -> s28)
[2020-07-30 19:06:19,27] [debug] Translated s26 to:
| Path s26.s28

[2020-07-30 19:06:19,27] [debug] Flattening node at Path 
| Path s26.s28

[2020-07-30 19:06:19,27] [debug] Adding definition: s29 -> Path s26.s28
[2020-07-30 19:06:19,27] [debug] Adding translation for t27: (Map(List() -> s29), UnassignedType)
[2020-07-30 19:06:19,27] [debug] Flattened projection to
| Pure t27
|   value: StructNode
|     s29: Path s26.s28

[2020-07-30 19:06:19,27] [debug] After phase flattenProjections:
| Bind : Vector[t27<{s29: Int'}>]
|   from s26: Take : Vector[t25<{s28: Int'}>]
|     from: Drop : Vector[t25<{s28: Int'}>]
|       from: Bind : Vector[t25<{s28: Int'}>]
|         from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|         select: Bind : Vector[t25<{s28: Int'}>]
|           from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|               where: Apply Function = : Boolean
|                 0: Path s19.BASE_AGGREGATION : String'
|                 1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|             where: Apply Function or : SOption[Boolean]
|               0: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|                 1: Apply Function = : Boolean
|                   0: LiteralNode None (volatileHint=false) : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : SOption[Boolean]
|                 0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<{s28: Int'}>]
|             value: StructNode : {s28: Int'}
|               s28: Path s17.CALL_CACHING_ENTRY_ID : Int'
|       count: LiteralNode 0 (volatileHint=false) : Long
|     count: LiteralNode 1 (volatileHint=false) : Long
|   select: Pure t27 : Vector[t27<{s29: Int'}>]
|     value: StructNode : {s29: Int'}
|       s29: Path s26.s28 : Int'

[2020-07-30 19:06:19,27] [debug] Hoisting flatMapped Filter from:
| Bind : Vector[t25<{s28: Int'}>]
|   from s13: ...
|   select: Bind : Vector[t25<{s28: Int'}>]
|     from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       from s18: ...
|       where: Apply Function or : SOption[Boolean]
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : Boolean
|             0: LiteralNode None (volatileHint=false) : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : SOption[Boolean]
|           0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode None (volatileHint=false) : Option[String']
|     select: Pure t25 : Vector[t25<{s28: Int'}>]
|       value: StructNode : {s28: Int'}
|         s28: Path s17.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,27] [debug] Hoisting join filters from:
| Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s30: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|   right s31: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|         1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|     where: Apply Function = : Boolean
|       0: Path s19.BASE_AGGREGATION : String'
|       1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|   on: Apply Function or : SOption[Boolean]
|     0: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|         1: LiteralNode null (volatileHint=false) : Null
|       1: Apply Function = : Boolean
|         0: LiteralNode None (volatileHint=false) : Option[String']
|         1: LiteralNode null (volatileHint=false) : Null
|     1: Apply Function = : SOption[Boolean]
|       0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|       1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,27] [debug] Hoisted join filters in:
| Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : SOption[Boolean]
|       0: Apply Function and
|         0: Apply Function = : Boolean
|           0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s31.BASE_AGGREGATION : String'
|           1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|       1: Apply Function or : SOption[Boolean]
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : Boolean
|             0: LiteralNode None (volatileHint=false) : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : SOption[Boolean]
|           0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,27] [debug] Hoisted flatMapped Filter in:
| Bind : Vector[t25<{s28: Int'}>]
|   from s32: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: ...
|     right s31: ...
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t25 : Vector[t25<{s28: Int'}>]
|     value: StructNode : {s28: Int'}
|       s28: Path s32._2.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,27] [debug] After phase rewriteJoins:
| Bind : Vector[t27<{s29: Int'}>]
|   from s26: Take : Vector[t25<{s28: Int'}>]
|     from: Drop : Vector[t25<{s28: Int'}>]
|       from: Bind : Vector[t25<{s28: Int'}>]
|         from s32: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|           left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           on: Apply Function and
|             0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|             1: Apply Function and : SOption[Boolean]
|               0: Apply Function and
|                 0: Apply Function = : Boolean
|                   0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|                 1: Apply Function = : Boolean
|                   0: Path s31.BASE_AGGREGATION : String'
|                   1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|               1: Apply Function or : SOption[Boolean]
|                 0: Apply Function and : Boolean
|                   0: Apply Function = : Boolean
|                     0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                     1: LiteralNode null (volatileHint=false) : Null
|                   1: Apply Function = : Boolean
|                     0: LiteralNode None (volatileHint=false) : Option[String']
|                     1: LiteralNode null (volatileHint=false) : Null
|                 1: Apply Function = : SOption[Boolean]
|                   0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                   1: LiteralNode None (volatileHint=false) : Option[String']
|         select: Pure t25 : Vector[t25<{s28: Int'}>]
|           value: StructNode : {s28: Int'}
|             s28: Path s32._2.CALL_CACHING_ENTRY_ID : Int'
|       count: LiteralNode 0 (volatileHint=false) : Long
|     count: LiteralNode 1 (volatileHint=false) : Long
|   select: Pure t27 : Vector[t27<{s29: Int'}>]
|     value: StructNode : {s29: Int'}
|       s29: Path s26.s28 : Int'

[2020-07-30 19:06:19,27] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:19,27] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:19,27] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:19,27] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:19,27] [debug] Unreferenced: t27; Field refs: (@t22,INPUT_FILES_AGGREGATION), (@t16,CALL_CACHING_ENTRY_ID), (@t22,CALL_CACHING_ENTRY_ID), (@t16,ALLOW_RESULT_REUSE), (@t22,BASE_AGGREGATION), (t25,s28)
[2020-07-30 19:06:19,27] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:19,27] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:19,27] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:19,27] [debug] Creating mapping from t27<t25<Int'>>
[2020-07-30 19:06:19,28] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Int']
|   from s33: Bind : Vector[t27<{s29: Int'}>]
|     from s26: Take : Vector[t25<{s28: Int'}>]
|       from: Drop : Vector[t25<{s28: Int'}>]
|         from: Bind : Vector[t25<{s28: Int'}>]
|           from s32: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|             left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             on: Apply Function and
|               0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|               1: Apply Function and : SOption[Boolean]
|                 0: Apply Function and
|                   0: Apply Function = : Boolean
|                     0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|                     1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|                   1: Apply Function = : Boolean
|                     0: Path s31.BASE_AGGREGATION : String'
|                     1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|                 1: Apply Function or : SOption[Boolean]
|                   0: Apply Function and : Boolean
|                     0: Apply Function = : Boolean
|                       0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                       1: LiteralNode null (volatileHint=false) : Null
|                     1: Apply Function = : Boolean
|                       0: LiteralNode None (volatileHint=false) : Option[String']
|                       1: LiteralNode null (volatileHint=false) : Null
|                   1: Apply Function = : SOption[Boolean]
|                     0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                     1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<{s28: Int'}>]
|             value: StructNode : {s28: Int'}
|               s28: Path s32._2.CALL_CACHING_ENTRY_ID : Int'
|         count: LiteralNode 0 (volatileHint=false) : Long
|       count: LiteralNode 1 (volatileHint=false) : Long
|     select: Pure t27 : Vector[t27<{s29: Int'}>]
|       value: StructNode : {s29: Int'}
|         s29: Path s26.s28 : Int'
|   map: Path s33.s29 : Int'

[2020-07-30 19:06:19,28] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:19,28] [debug] New defs: Map(0 -> (Path s26.s28,s34))
[2020-07-30 19:06:19,28] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int']
|   from s33: Bind : Vector[t35<{s34: Int'}>]
|     from s26: ...
|     select: Pure t35 : Vector[t35<{s34: Int'}>]
|       value: StructNode : {s34: Int'}
|         s34: Path s26.s28 : Int'
|   map: Path s33.s34 : Int'

[2020-07-30 19:06:19,28] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Int']
|   from s33: Bind : Vector[t35<{s34: Int'}>]
|     from s26: Take : Vector[t25<{s28: Int'}>]
|       from: Drop : Vector[t25<{s28: Int'}>]
|         from: Bind : Vector[t25<{s28: Int'}>]
|           from s32: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|             left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             on: Apply Function and
|               0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|               1: Apply Function and : SOption[Boolean]
|                 0: Apply Function and
|                   0: Apply Function = : Boolean
|                     0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|                     1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|                   1: Apply Function = : Boolean
|                     0: Path s31.BASE_AGGREGATION : String'
|                     1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|                 1: Apply Function or : SOption[Boolean]
|                   0: Apply Function and : Boolean
|                     0: Apply Function = : Boolean
|                       0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                       1: LiteralNode null (volatileHint=false) : Null
|                     1: Apply Function = : Boolean
|                       0: LiteralNode None (volatileHint=false) : Option[String']
|                       1: LiteralNode null (volatileHint=false) : Null
|                   1: Apply Function = : SOption[Boolean]
|                     0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                     1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<{s28: Int'}>]
|             value: StructNode : {s28: Int'}
|               s28: Path s32._2.CALL_CACHING_ENTRY_ID : Int'
|         count: LiteralNode 0 (volatileHint=false) : Long
|       count: LiteralNode 1 (volatileHint=false) : Long
|     select: Pure t35 : Vector[t35<{s34: Int'}>]
|       value: StructNode : {s34: Int'}
|         s34: Path s26.s28 : Int'
|   map: Path s33.s34 : Int'

[2020-07-30 19:06:19,28] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:19,28] [debug] Table fields: Map(@t16 -> Vector(ALLOW_RESULT_REUSE, CALL_CACHING_ENTRY_ID), @t22 -> Vector(CALL_CACHING_ENTRY_ID, BASE_AGGREGATION, INPUT_FILES_AGGREGATION))
[2020-07-30 19:06:19,28] [debug] Creating source from Join s30/s31:
| Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : SOption[Boolean]
|       0: Apply Function and
|         0: Apply Function = : Boolean
|           0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s31.BASE_AGGREGATION : String'
|           1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|       1: Apply Function or : SOption[Boolean]
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : Boolean
|             0: LiteralNode None (volatileHint=false) : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : SOption[Boolean]
|           0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,28] [debug] Creating source from TableNode:
| Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]

[2020-07-30 19:06:19,28] [debug] Mappings are: ConstArray(((@t16,ALLOW_RESULT_REUSE),List(ALLOW_RESULT_REUSE)), ((@t16,CALL_CACHING_ENTRY_ID),List(CALL_CACHING_ENTRY_ID)))
[2020-07-30 19:06:19,28] [debug] Creating source from TableNode:
| Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]

[2020-07-30 19:06:19,28] [debug] Mappings are: ConstArray(((@t22,CALL_CACHING_ENTRY_ID),List(CALL_CACHING_ENTRY_ID)), ((@t22,BASE_AGGREGATION),List(BASE_AGGREGATION)), ((@t22,INPUT_FILES_AGGREGATION),List(INPUT_FILES_AGGREGATION)))
[2020-07-30 19:06:19,28] [debug] Converted left side of Join s30/s31:
| Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]

[2020-07-30 19:06:19,28] [debug] Converted right side of Join s30/s31:
| Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]

[2020-07-30 19:06:19,28] [debug] Mappings for [38;5;5mon[0m clause in Join s30/s31: Map((@t22,INPUT_FILES_AGGREGATION) -> List(_2, INPUT_FILES_AGGREGATION), (@t16,CALL_CACHING_ENTRY_ID) -> List(_1, CALL_CACHING_ENTRY_ID), (@t22,CALL_CACHING_ENTRY_ID) -> List(_2, CALL_CACHING_ENTRY_ID), (@t16,ALLOW_RESULT_REUSE) -> List(_1, ALLOW_RESULT_REUSE), (@t22,BASE_AGGREGATION) -> List(_2, BASE_AGGREGATION))
[2020-07-30 19:06:19,28] [debug] Transformed [38;5;5mon[0m clause in Join s30/s31:
| Apply Function and
|   0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|   1: Apply Function and : SOption[Boolean]
|     0: Apply Function and
|       0: Apply Function = : Boolean
|         0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|         1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|       1: Apply Function = : Boolean
|         0: Path s31.BASE_AGGREGATION : String'
|         1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|     1: Apply Function or : SOption[Boolean]
|       0: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : Boolean
|           0: LiteralNode None (volatileHint=false) : Option[String']
|           1: LiteralNode null (volatileHint=false) : Null
|       1: Apply Function = : SOption[Boolean]
|         0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|         1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,28] [debug] Created source from Join s30/s31:
| Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : SOption[Boolean]
|       0: Apply Function and
|         0: Apply Function = : Boolean
|           0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s31.BASE_AGGREGATION : String'
|           1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|       1: Apply Function or : SOption[Boolean]
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : Boolean
|             0: LiteralNode None (volatileHint=false) : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : SOption[Boolean]
|           0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,28] [debug] Building new Comprehension from:
| Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : SOption[Boolean]
|       0: Apply Function and
|         0: Apply Function = : Boolean
|           0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s31.BASE_AGGREGATION : String'
|           1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|       1: Apply Function or : SOption[Boolean]
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : Boolean
|             0: LiteralNode None (volatileHint=false) : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : SOption[Boolean]
|           0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,28] [debug] Built new Comprehension:
| Comprehension s36, None, None, ConstArray(), None, None, None, None, false : Vector[t37<{s38: Boolean', s39: Int', s40: Int', s41: String', s42: Option[String']}>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t37 : Vector[t37<{s38: Boolean', s39: Int', s40: Int', s41: String', s42: Option[String']}>]
|     value: StructNode : {s38: Boolean', s39: Int', s40: Int', s41: String', s42: Option[String']}
|       s38: Path s36._1.ALLOW_RESULT_REUSE : Boolean'
|       s39: Path s36._1.CALL_CACHING_ENTRY_ID : Int'
|       s40: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|       s41: Path s36._2.BASE_AGGREGATION : String'
|       s42: Path s36._2.INPUT_FILES_AGGREGATION : Option[String']

[2020-07-30 19:06:19,28] [debug] Replacements are: Map((@t22,INPUT_FILES_AGGREGATION) -> s42, (@t16,CALL_CACHING_ENTRY_ID) -> s39, (@t22,CALL_CACHING_ENTRY_ID) -> s40, (@t16,ALLOW_RESULT_REUSE) -> s38, (@t22,BASE_AGGREGATION) -> s41)
[2020-07-30 19:06:19,29] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t25<{s28: Int'}>]
|   from s32: ...
|   select: Pure t25 : Vector[t25<{s28: Int'}>]
|     value: StructNode : {s28: Int'}
|       s28: Path s32._2.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,29] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s36, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s28: Int'}>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t25 : Vector[t25<{s28: Int'}>]
|     value: StructNode : {s28: Int'}
|       s28: Path s36._2.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,29] [debug] Replacements are: Map((t25,s28) -> s28)
[2020-07-30 19:06:19,29] [debug] Merging Drop into Comprehension:
| Drop : Vector[t25<{s28: Int'}>]
|   from: ...
|   count: LiteralNode 0 (volatileHint=false) : Long

[2020-07-30 19:06:19,29] [debug] Merged Drop into Comprehension:
| Comprehension s36, None, None, ConstArray(), None, None, None, Some(LiteralNode 0 (volatileHint=false)), false : Vector[t25<{s28: Int'}>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t25 : Vector[t25<{s28: Int'}>]
|     value: StructNode : {s28: Int'}
|       s28: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|   offset: LiteralNode 0 (volatileHint=false) : Long

[2020-07-30 19:06:19,29] [debug] Merging Take into Comprehension:
| Take : Vector[t25<{s28: Int'}>]
|   from: ...
|   count: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,29] [debug] Merged Take into Comprehension:
| Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 0 (volatileHint=false)), false : Vector[t25<{s28: Int'}>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t25 : Vector[t25<{s28: Int'}>]
|     value: StructNode : {s28: Int'}
|       s28: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|   fetch: LiteralNode 1 (volatileHint=false) : Long
|   offset: LiteralNode 0 (volatileHint=false) : Long

[2020-07-30 19:06:19,29] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t35<{s34: Int'}>]
|   from s26: ...
|   select: Pure t35 : Vector[t35<{s34: Int'}>]
|     value: StructNode : {s34: Int'}
|       s34: Path s26.s28 : Int'

[2020-07-30 19:06:19,29] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 0 (volatileHint=false)), false : Vector[t35<{s34: Int'}>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t35 : Vector[t35<{s34: Int'}>]
|     value: StructNode : {s34: Int'}
|       s34: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|   fetch: LiteralNode 1 (volatileHint=false) : Long
|   offset: LiteralNode 0 (volatileHint=false) : Long

[2020-07-30 19:06:19,29] [debug] Replacements are: Map((t35,s34) -> s34)
[2020-07-30 19:06:19,29] [debug] Mappings are: ConstArray(((t35,s34),List(s34)))
[2020-07-30 19:06:19,29] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Int']
|   from s33: Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 0 (volatileHint=false)), false : Vector[t35<{s34: Int'}>]
|     from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|       left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       on: Apply Function and
|         0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|         1: Apply Function and : SOption[Boolean]
|           0: Apply Function and
|             0: Apply Function = : Boolean
|               0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|               1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|             1: Apply Function = : Boolean
|               0: Path s31.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|           1: Apply Function or : SOption[Boolean]
|             0: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : Boolean
|                 0: LiteralNode None (volatileHint=false) : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : SOption[Boolean]
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false) : Option[String']
|     select: Pure t35 : Vector[t35<{s34: Int'}>]
|       value: StructNode : {s34: Int'}
|         s34: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|     fetch: LiteralNode 1 (volatileHint=false) : Long
|     offset: LiteralNode 0 (volatileHint=false) : Long
|   map: Path s33.s34 : Int'

[2020-07-30 19:06:19,29] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:19,29] [debug] Required symbols: s34 -> 0
[2020-07-30 19:06:19,30] [debug] Transformed RSM: 
| ResultSetMapping
|   from s33: Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 0 (volatileHint=false)), false : Vector[t35<(Int')>]
|     from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|       left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       on: Apply Function and
|         0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|         1: Apply Function and : SOption[Boolean]
|           0: Apply Function and
|             0: Apply Function = : Boolean
|               0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|               1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|             1: Apply Function = : Boolean
|               0: Path s31.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|           1: Apply Function or : SOption[Boolean]
|             0: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : Boolean
|                 0: LiteralNode None (volatileHint=false) : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : SOption[Boolean]
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false) : Option[String']
|     select: Pure t35 : Vector[t35<(Int')>]
|       value: ProductNode : (Int')
|         1: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|     fetch: LiteralNode 1 (volatileHint=false) : Long
|     offset: LiteralNode 0 (volatileHint=false) : Long
|   map: Path s33.s34 : Int'

[2020-07-30 19:06:19,30] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Int']
|   from s33: Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 0 (volatileHint=false)), false : Vector[t35<(Int')>]
|     from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|       left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       on: Apply Function and
|         0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|         1: Apply Function and : SOption[Boolean]
|           0: Apply Function and
|             0: Apply Function = : Boolean
|               0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|               1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|             1: Apply Function = : Boolean
|               0: Path s31.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|           1: Apply Function or : SOption[Boolean]
|             0: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : Boolean
|                 0: LiteralNode None (volatileHint=false) : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : SOption[Boolean]
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false) : Option[String']
|     select: Pure t35 : Vector[t35<(Int')>]
|       value: ProductNode : (Int')
|         1: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|     fetch: LiteralNode 1 (volatileHint=false) : Long
|     offset: LiteralNode 0 (volatileHint=false) : Long
|   map: Path s33._1 : Int'

[2020-07-30 19:06:19,30] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:19,30] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:19,30] [debug] Compiling server-side and mapping with server-side:
| Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 0 (volatileHint=false)), false : Vector[t35<(Int')>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t35 : Vector[t35<(Int')>]
|     value: ProductNode : (Int')
|       1: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|   fetch: LiteralNode 1 (volatileHint=false) : Long
|   offset: LiteralNode 0 (volatileHint=false) : Long

[2020-07-30 19:06:19,30] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:19,30] [debug] Compiled server-side to:
| CompiledStatement "select s31."CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" s30, "CALL_CACHING_AGGREGATION_ENTRY" s31 where s30."ALLOW_RESULT_REUSE" and (((s30."CALL_CACHING_ENTRY_ID" = s31."CALL_CACHING_ENTRY_ID") and (s31."BASE_AGGREGATION" = cast('65F2F0AC1615D0CCB745BB8773FAB356' as varchar(16777216)))) and (((s31."INPUT_FILES_AGGREGATION" is null) and (null is null)) or (s31."INPUT_FILES_AGGREGATION" = null))) limit 1 offset 0" : Vector[t35<(Int')>]

[2020-07-30 19:06:19,30] [debug] After phase codeGen:
| ResultSetMapping : Vector[Int']
|   from s33: CompiledStatement "select s31."CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" s30, "CALL_CACHING_AGGREGATION_ENTRY" s31 where s30."ALLOW_RESULT_REUSE" and (((s30."CALL_CACHING_ENTRY_ID" = s31."CALL_CACHING_ENTRY_ID") and (s31."BASE_AGGREGATION" = cast('65F2F0AC1615D0CCB745BB8773FAB356' as varchar(16777216)))) and (((s31."INPUT_FILES_AGGREGATION" is null) and (null is null)) or (s31."INPUT_FILES_AGGREGATION" = null))) limit 1 offset 0" : Vector[t35<(Int')>]
|   map: CompiledMapping : Int'
|     converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:19,30] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,30] [debug]       assignUniqueSymbols:    1.798010 ms
[2020-07-30 19:06:19,30] [debug]           unrollTailBinds:    0.124990 ms
[2020-07-30 19:06:19,30] [debug]                inferTypes:    0.334666 ms
[2020-07-30 19:06:19,30] [debug]              expandTables:    2.991129 ms
[2020-07-30 19:06:19,30] [debug]           forceOuterBinds:    1.458362 ms
[2020-07-30 19:06:19,30] [debug]         removeMappedTypes:    0.249319 ms
[2020-07-30 19:06:19,30] [debug]                expandSums:    4.113418 ms
[2020-07-30 19:06:19,30] [debug]             expandRecords:    1.243685 ms
[2020-07-30 19:06:19,30] [debug]        flattenProjections:    3.895281 ms
[2020-07-30 19:06:19,30] [debug]              rewriteJoins:    6.148765 ms
[2020-07-30 19:06:19,30] [debug]             verifySymbols:    0.157806 ms
[2020-07-30 19:06:19,30] [debug]             relabelUnions:    0.099337 ms
[2020-07-30 19:06:19,30] [debug]          createAggregates:    0.043713 ms
[2020-07-30 19:06:19,30] [debug]           resolveZipJoins:    0.088651 ms
[2020-07-30 19:06:19,30] [debug]          pruneProjections:    0.396712 ms
[2020-07-30 19:06:19,30] [debug]           rewriteDistinct:    0.149958 ms
[2020-07-30 19:06:19,30] [debug]    createResultSetMapping:    1.591992 ms
[2020-07-30 19:06:19,30] [debug]            hoistClientOps:    2.134748 ms
[2020-07-30 19:06:19,30] [debug]         reorderOperations:    0.150913 ms
[2020-07-30 19:06:19,30] [debug]     mergeToComprehensions:   16.180661 ms
[2020-07-30 19:06:19,30] [debug]            optimizeScalar:    0.259146 ms
[2020-07-30 19:06:19,30] [debug]          removeFieldNames:    3.103307 ms
[2020-07-30 19:06:19,30] [debug]      specializeParameters:    0.196771 ms
[2020-07-30 19:06:19,30] [debug]                   codeGen:    3.942002 ms
[2020-07-30 19:06:19,30] [debug]                     TOTAL:   50.853342 ms
[2020-07-30 19:06:19,31] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@650e7df5
          base: SetTransactionIsolation
[2020-07-30 19:06:19,31] [debug] Preparing statement: select s31."CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" s30, "CALL_CACHING_AGGREGATION_ENTRY" s31 where s30."ALLOW_RESULT_REUSE" and (((s30."CALL_CACHING_ENTRY_ID" = s31."CALL_CACHING_ENTRY_ID") and (s31."BASE_AGGREGATION" = cast('65F2F0AC1615D0CCB745BB8773FAB356' as varchar(16777216)))) and (((s31."INPUT_FILES_AGGREGATION" is null) and (null is null)) or (s31."INPUT_FILES_AGGREGATION" = null))) limit 1 offset 0
[2020-07-30 19:06:19,31] [debug] Executing prepared statement: HikariProxyPreparedStatement@329985426 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@519ae5e[sql=[select s31."CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" s30, "CALL_CACHING_AGGREGATION_ENTRY" s31 where s30."ALLOW_RESULT_REUSE" and (((s30."CALL_CACHING_ENTRY_ID" = s31."CALL_CACHING_ENTRY_ID") and (s31."BASE_AGGREGATION" = cast('65F2F0AC1615D0CCB745BB8773FAB356' as varchar(16777216)))) and (((s31."INPUT_FILES_AGGREGATION" is null) and (null is null)) or (s31."INPUT_FILES_AGGREGATION" = null))) limit 1 offset 0]]
[2020-07-30 19:06:19,31] [debug] Executing prepared statement: HikariProxyPreparedStatement@329985426 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@519ae5e[sql=[select s31."CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" s30, "CALL_CACHING_AGGREGATION_ENTRY" s31 where s30."ALLOW_RESULT_REUSE" and (((s30."CALL_CACHING_ENTRY_ID" = s31."CALL_CACHING_ENTRY_ID") and (s31."BASE_AGGREGATION" = cast('65F2F0AC1615D0CCB745BB8773FAB356' as varchar(16777216)))) and (((s31."INPUT_FILES_AGGREGATION" is null) and (null is null)) or (s31."INPUT_FILES_AGGREGATION" = null))) limit 1 offset 0]]
[2020-07-30 19:06:19,31] [debug] Execution of prepared statement took 348µs
[2020-07-30 19:06:19,31] [debug] /----------------------\
[2020-07-30 19:06:19,31] [debug] | 1                    |
[2020-07-30 19:06:19,31] [debug] | CALL_CACHING_ENTR... |
[2020-07-30 19:06:19,31] [debug] |----------------------|
[2020-07-30 19:06:19,31] [debug] | 30                   |
[2020-07-30 19:06:19,31] [debug] \----------------------/
[2020-07-30 19:06:19,32] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table CALL_CACHING_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s4.CALL_FULLY_QUALIFIED_NAME : String'
|           3: Path s4.JOB_INDEX : Int'
|           4: Path s4.JOB_ATTEMPT : Option[Int']
|           5: Path s4.RETURN_CODE : Option[Int']
|           6: Path s4.ALLOW_RESULT_REUSE : Boolean'
|           7: OptionApply
|             0: Path s4.CALL_CACHING_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s3.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t6
|     value: Ref s2

[2020-07-30 19:06:19,32] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:19,32] [debug] After phase assignUniqueSymbols:
| Bind
|   from s7: Filter s8
|     from s8: TableExpansion
|       table s9: Table CALL_CACHING_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s9.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s9.CALL_FULLY_QUALIFIED_NAME : String'
|           3: Path s9.JOB_INDEX : Int'
|           4: Path s9.JOB_ATTEMPT : Option[Int']
|           5: Path s9.RETURN_CODE : Option[Int']
|           6: Path s9.ALLOW_RESULT_REUSE : Boolean'
|           7: OptionApply
|             0: Path s9.CALL_CACHING_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t11
|     value: Ref s7

[2020-07-30 19:06:19,32] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:19,32] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,32] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.CALL_CACHING_ENTRY)
[2020-07-30 19:06:19,32] [debug] With correct table types:
| Bind : Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t11 : Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>]
|     value: Ref s7 : @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>

[2020-07-30 19:06:19,32] [debug] Table expansions: @t10 -> (s9,TypeMapping)
[2020-07-30 19:06:19,32] [debug] Expanding tables in result type
[2020-07-30 19:06:19,32] [debug] After phase expandTables:
| Bind : Vector[t13<Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]>]
|   from s12: Bind : Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>]
|       value: Ref s7 : @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
|   select: Pure t13 : Vector[t13<Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]>]
|     value: TypeMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|       0: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|         1: Path s12.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s12.CALL_FULLY_QUALIFIED_NAME : String'
|         3: Path s12.JOB_INDEX : Int'
|         4: Path s12.JOB_ATTEMPT : Option[Int']
|         5: Path s12.RETURN_CODE : Option[Int']
|         6: Path s12.ALLOW_RESULT_REUSE : Boolean'
|         7: OptionApply : Option[Int']
|           0: Path s12.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,32] [debug] After phase forceOuterBinds:
| Bind : Vector[t13<Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]>]
|   from s12: Bind : Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>]
|       value: Ref s7 : @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
|   select: Pure t13 : Vector[t13<Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]>]
|     value: TypeMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|       0: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|         1: Path s12.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s12.CALL_FULLY_QUALIFIED_NAME : String'
|         3: Path s12.JOB_INDEX : Int'
|         4: Path s12.JOB_ATTEMPT : Option[Int']
|         5: Path s12.RETURN_CODE : Option[Int']
|         6: Path s12.ALLOW_RESULT_REUSE : Boolean'
|         7: OptionApply : Option[Int']
|           0: Path s12.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,32] [debug] After phase removeMappedTypes:
| Bind : Vector[t13<(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])>]
|   from s12: Bind : Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>]
|       value: Ref s7 : @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
|   select: Pure t13 : Vector[t13<(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])>]
|     value: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|       1: Path s12.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s12.CALL_FULLY_QUALIFIED_NAME : String'
|       3: Path s12.JOB_INDEX : Int'
|       4: Path s12.JOB_ATTEMPT : Option[Int']
|       5: Path s12.RETURN_CODE : Option[Int']
|       6: Path s12.ALLOW_RESULT_REUSE : Boolean'
|       7: OptionApply : Option[Int']
|         0: Path s12.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,32] [debug] Translated type: Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>] -> Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
[2020-07-30 19:06:19,32] [debug] Translated type: @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}> -> @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
[2020-07-30 19:06:19,32] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,32] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,32] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,32] [debug] Translated type: Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>] -> Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
[2020-07-30 19:06:19,32] [debug] Translated type: @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}> -> @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
[2020-07-30 19:06:19,32] [debug] Translated type: Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>] -> Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>]
[2020-07-30 19:06:19,32] [debug] Translated type: Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>] -> Vector[t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>]
[2020-07-30 19:06:19,32] [debug] Translated type: t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>> -> t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>
[2020-07-30 19:06:19,32] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,32] [debug] Translated type: t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>> -> t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>
[2020-07-30 19:06:19,32] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,32] [debug] Translated type: t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>> -> t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>
[2020-07-30 19:06:19,32] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,32] [debug] Translated type: t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>> -> t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>
[2020-07-30 19:06:19,32] [debug] Translated type: Option[Int'] -> Option[Int']
[2020-07-30 19:06:19,32] [debug] Translated type: t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>> -> t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>
[2020-07-30 19:06:19,32] [debug] Translated type: Option[Int'] -> Option[Int']
[2020-07-30 19:06:19,32] [debug] Translated type: t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>> -> t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>
[2020-07-30 19:06:19,32] [debug] Translated type: Boolean' -> Boolean'
[2020-07-30 19:06:19,32] [debug] Translated type: t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>> -> t11<@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>>
[2020-07-30 19:06:19,32] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,32] [debug] Translated type: Option[Int'] -> Option[Int']
[2020-07-30 19:06:19,32] [debug] Translated type: (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int']) -> (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
[2020-07-30 19:06:19,32] [debug] Translated type: Vector[t13<(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])>] -> Vector[t13<(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])>]
[2020-07-30 19:06:19,32] [debug] Translated type: Vector[t13<(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])>] -> Vector[t13<(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])>]
[2020-07-30 19:06:19,32] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:19,32] [debug] After phase expandRecords:
| Bind : Vector[t13<(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])>]
|   from s12: Bind : Vector[t11<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       value: StructNode : {WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}
|         WORKFLOW_EXECUTION_UUID: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         JOB_ATTEMPT: Path s7.JOB_ATTEMPT : Option[Int']
|         CALL_CACHING_ENTRY_ID: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         ALLOW_RESULT_REUSE: Path s7.ALLOW_RESULT_REUSE : Boolean'
|         JOB_INDEX: Path s7.JOB_INDEX : Int'
|         CALL_FULLY_QUALIFIED_NAME: Path s7.CALL_FULLY_QUALIFIED_NAME : String'
|         RETURN_CODE: Path s7.RETURN_CODE : Option[Int']
|   select: Pure t13 : Vector[t13<(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])>]
|     value: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|       1: Path s12.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s12.CALL_FULLY_QUALIFIED_NAME : String'
|       3: Path s12.JOB_INDEX : Int'
|       4: Path s12.JOB_ATTEMPT : Option[Int']
|       5: Path s12.RETURN_CODE : Option[Int']
|       6: Path s12.ALLOW_RESULT_REUSE : Boolean'
|       7: OptionApply : Option[Int']
|         0: Path s12.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,32] [debug] Analyzing s8.CALL_CACHING_ENTRY_ID with symbols 
| Path s8.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,32] [debug] Translated s8.CALL_CACHING_ENTRY_ID to:
| Path s8.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,32] [debug] Flattening projection t11
[2020-07-30 19:06:19,32] [debug] Analyzing s7.WORKFLOW_EXECUTION_UUID with symbols 
| Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:19,32] [debug] Translated s7.WORKFLOW_EXECUTION_UUID to:
| Path s7.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:19,32] [debug] Analyzing s7.JOB_ATTEMPT with symbols 
| Path s7.JOB_ATTEMPT : Option[Int']

[2020-07-30 19:06:19,32] [debug] Translated s7.JOB_ATTEMPT to:
| Path s7.JOB_ATTEMPT

[2020-07-30 19:06:19,32] [debug] Analyzing s7.CALL_CACHING_ENTRY_ID with symbols 
| Path s7.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,32] [debug] Translated s7.CALL_CACHING_ENTRY_ID to:
| Path s7.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,32] [debug] Analyzing s7.ALLOW_RESULT_REUSE with symbols 
| Path s7.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,32] [debug] Translated s7.ALLOW_RESULT_REUSE to:
| Path s7.ALLOW_RESULT_REUSE

[2020-07-30 19:06:19,32] [debug] Analyzing s7.JOB_INDEX with symbols 
| Path s7.JOB_INDEX : Int'

[2020-07-30 19:06:19,32] [debug] Translated s7.JOB_INDEX to:
| Path s7.JOB_INDEX

[2020-07-30 19:06:19,32] [debug] Analyzing s7.CALL_FULLY_QUALIFIED_NAME with symbols 
| Path s7.CALL_FULLY_QUALIFIED_NAME : String'

[2020-07-30 19:06:19,32] [debug] Translated s7.CALL_FULLY_QUALIFIED_NAME to:
| Path s7.CALL_FULLY_QUALIFIED_NAME

[2020-07-30 19:06:19,32] [debug] Analyzing s7.RETURN_CODE with symbols 
| Path s7.RETURN_CODE : Option[Int']

[2020-07-30 19:06:19,32] [debug] Translated s7.RETURN_CODE to:
| Path s7.RETURN_CODE

[2020-07-30 19:06:19,32] [debug] Flattening node at Path 
| StructNode
|   WORKFLOW_EXECUTION_UUID: Path s7.WORKFLOW_EXECUTION_UUID
|   JOB_ATTEMPT: Path s7.JOB_ATTEMPT
|   CALL_CACHING_ENTRY_ID: Path s7.CALL_CACHING_ENTRY_ID
|   ALLOW_RESULT_REUSE: Path s7.ALLOW_RESULT_REUSE
|   JOB_INDEX: Path s7.JOB_INDEX
|   CALL_FULLY_QUALIFIED_NAME: Path s7.CALL_FULLY_QUALIFIED_NAME
|   RETURN_CODE: Path s7.RETURN_CODE

[2020-07-30 19:06:19,32] [debug] Flattening node at Path WORKFLOW_EXECUTION_UUID
| Path s7.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:19,32] [debug] Adding definition: s14 -> Path s7.WORKFLOW_EXECUTION_UUID
[2020-07-30 19:06:19,32] [debug] Flattening node at Path JOB_ATTEMPT
| Path s7.JOB_ATTEMPT

[2020-07-30 19:06:19,32] [debug] Adding definition: s15 -> Path s7.JOB_ATTEMPT
[2020-07-30 19:06:19,32] [debug] Flattening node at Path CALL_CACHING_ENTRY_ID
| Path s7.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,32] [debug] Adding definition: s16 -> Path s7.CALL_CACHING_ENTRY_ID
[2020-07-30 19:06:19,32] [debug] Flattening node at Path ALLOW_RESULT_REUSE
| Path s7.ALLOW_RESULT_REUSE

[2020-07-30 19:06:19,32] [debug] Adding definition: s17 -> Path s7.ALLOW_RESULT_REUSE
[2020-07-30 19:06:19,32] [debug] Flattening node at Path JOB_INDEX
| Path s7.JOB_INDEX

[2020-07-30 19:06:19,32] [debug] Adding definition: s18 -> Path s7.JOB_INDEX
[2020-07-30 19:06:19,32] [debug] Flattening node at Path CALL_FULLY_QUALIFIED_NAME
| Path s7.CALL_FULLY_QUALIFIED_NAME

[2020-07-30 19:06:19,32] [debug] Adding definition: s19 -> Path s7.CALL_FULLY_QUALIFIED_NAME
[2020-07-30 19:06:19,32] [debug] Flattening node at Path RETURN_CODE
| Path s7.RETURN_CODE

[2020-07-30 19:06:19,32] [debug] Adding definition: s20 -> Path s7.RETURN_CODE
[2020-07-30 19:06:19,32] [debug] Adding translation for t11: (Map(List(CALL_CACHING_ENTRY_ID) -> s16, List(WORKFLOW_EXECUTION_UUID) -> s14, List(RETURN_CODE) -> s20, List(JOB_ATTEMPT) -> s15, List(CALL_FULLY_QUALIFIED_NAME) -> s19, List(ALLOW_RESULT_REUSE) -> s17, List(JOB_INDEX) -> s18), UnassignedType)
[2020-07-30 19:06:19,32] [debug] Flattened projection to
| Pure t11
|   value: StructNode
|     s14: Path s7.WORKFLOW_EXECUTION_UUID
|     s15: Path s7.JOB_ATTEMPT
|     s16: Path s7.CALL_CACHING_ENTRY_ID
|     s17: Path s7.ALLOW_RESULT_REUSE
|     s18: Path s7.JOB_INDEX
|     s19: Path s7.CALL_FULLY_QUALIFIED_NAME
|     s20: Path s7.RETURN_CODE

[2020-07-30 19:06:19,32] [debug] Flattening projection t13
[2020-07-30 19:06:19,32] [debug] Analyzing s12.WORKFLOW_EXECUTION_UUID with symbols t11
| Path s12.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:19,32] [debug] Found s12.WORKFLOW_EXECUTION_UUID with local part Path WORKFLOW_EXECUTION_UUID over t11
[2020-07-30 19:06:19,32] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s16, List(WORKFLOW_EXECUTION_UUID) -> s14, List(RETURN_CODE) -> s20, List(JOB_ATTEMPT) -> s15, List(CALL_FULLY_QUALIFIED_NAME) -> s19, List(ALLOW_RESULT_REUSE) -> s17, List(JOB_INDEX) -> s18)
[2020-07-30 19:06:19,32] [debug] Translated s12.WORKFLOW_EXECUTION_UUID to:
| Path s12.s14

[2020-07-30 19:06:19,32] [debug] Analyzing s12.CALL_FULLY_QUALIFIED_NAME with symbols t11
| Path s12.CALL_FULLY_QUALIFIED_NAME : String'

[2020-07-30 19:06:19,32] [debug] Found s12.CALL_FULLY_QUALIFIED_NAME with local part Path CALL_FULLY_QUALIFIED_NAME over t11
[2020-07-30 19:06:19,33] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s16, List(WORKFLOW_EXECUTION_UUID) -> s14, List(RETURN_CODE) -> s20, List(JOB_ATTEMPT) -> s15, List(CALL_FULLY_QUALIFIED_NAME) -> s19, List(ALLOW_RESULT_REUSE) -> s17, List(JOB_INDEX) -> s18)
[2020-07-30 19:06:19,33] [debug] Translated s12.CALL_FULLY_QUALIFIED_NAME to:
| Path s12.s19

[2020-07-30 19:06:19,33] [debug] Analyzing s12.JOB_INDEX with symbols t11
| Path s12.JOB_INDEX : Int'

[2020-07-30 19:06:19,33] [debug] Found s12.JOB_INDEX with local part Path JOB_INDEX over t11
[2020-07-30 19:06:19,33] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s16, List(WORKFLOW_EXECUTION_UUID) -> s14, List(RETURN_CODE) -> s20, List(JOB_ATTEMPT) -> s15, List(CALL_FULLY_QUALIFIED_NAME) -> s19, List(ALLOW_RESULT_REUSE) -> s17, List(JOB_INDEX) -> s18)
[2020-07-30 19:06:19,33] [debug] Translated s12.JOB_INDEX to:
| Path s12.s18

[2020-07-30 19:06:19,33] [debug] Analyzing s12.JOB_ATTEMPT with symbols t11
| Path s12.JOB_ATTEMPT : Option[Int']

[2020-07-30 19:06:19,33] [debug] Found s12.JOB_ATTEMPT with local part Path JOB_ATTEMPT over t11
[2020-07-30 19:06:19,33] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s16, List(WORKFLOW_EXECUTION_UUID) -> s14, List(RETURN_CODE) -> s20, List(JOB_ATTEMPT) -> s15, List(CALL_FULLY_QUALIFIED_NAME) -> s19, List(ALLOW_RESULT_REUSE) -> s17, List(JOB_INDEX) -> s18)
[2020-07-30 19:06:19,33] [debug] Translated s12.JOB_ATTEMPT to:
| Path s12.s15

[2020-07-30 19:06:19,33] [debug] Analyzing s12.RETURN_CODE with symbols t11
| Path s12.RETURN_CODE : Option[Int']

[2020-07-30 19:06:19,33] [debug] Found s12.RETURN_CODE with local part Path RETURN_CODE over t11
[2020-07-30 19:06:19,33] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s16, List(WORKFLOW_EXECUTION_UUID) -> s14, List(RETURN_CODE) -> s20, List(JOB_ATTEMPT) -> s15, List(CALL_FULLY_QUALIFIED_NAME) -> s19, List(ALLOW_RESULT_REUSE) -> s17, List(JOB_INDEX) -> s18)
[2020-07-30 19:06:19,33] [debug] Translated s12.RETURN_CODE to:
| Path s12.s20

[2020-07-30 19:06:19,33] [debug] Analyzing s12.ALLOW_RESULT_REUSE with symbols t11
| Path s12.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,33] [debug] Found s12.ALLOW_RESULT_REUSE with local part Path ALLOW_RESULT_REUSE over t11
[2020-07-30 19:06:19,33] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s16, List(WORKFLOW_EXECUTION_UUID) -> s14, List(RETURN_CODE) -> s20, List(JOB_ATTEMPT) -> s15, List(CALL_FULLY_QUALIFIED_NAME) -> s19, List(ALLOW_RESULT_REUSE) -> s17, List(JOB_INDEX) -> s18)
[2020-07-30 19:06:19,33] [debug] Translated s12.ALLOW_RESULT_REUSE to:
| Path s12.s17

[2020-07-30 19:06:19,33] [debug] Analyzing s12.CALL_CACHING_ENTRY_ID with symbols t11
| Path s12.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,33] [debug] Found s12.CALL_CACHING_ENTRY_ID with local part Path CALL_CACHING_ENTRY_ID over t11
[2020-07-30 19:06:19,33] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s16, List(WORKFLOW_EXECUTION_UUID) -> s14, List(RETURN_CODE) -> s20, List(JOB_ATTEMPT) -> s15, List(CALL_FULLY_QUALIFIED_NAME) -> s19, List(ALLOW_RESULT_REUSE) -> s17, List(JOB_INDEX) -> s18)
[2020-07-30 19:06:19,33] [debug] Translated s12.CALL_CACHING_ENTRY_ID to:
| Path s12.s16

[2020-07-30 19:06:19,33] [debug] Flattening node at Path 
| ProductNode
|   1: Path s12.s14
|   2: Path s12.s19
|   3: Path s12.s18
|   4: Path s12.s15
|   5: Path s12.s20
|   6: Path s12.s17
|   7: OptionApply
|     0: Path s12.s16

[2020-07-30 19:06:19,33] [debug] Flattening node at Path _1
| Path s12.s14

[2020-07-30 19:06:19,33] [debug] Adding definition: s21 -> Path s12.s14
[2020-07-30 19:06:19,33] [debug] Flattening node at Path _2
| Path s12.s19

[2020-07-30 19:06:19,33] [debug] Adding definition: s22 -> Path s12.s19
[2020-07-30 19:06:19,33] [debug] Flattening node at Path _3
| Path s12.s18

[2020-07-30 19:06:19,33] [debug] Adding definition: s23 -> Path s12.s18
[2020-07-30 19:06:19,33] [debug] Flattening node at Path _4
| Path s12.s15

[2020-07-30 19:06:19,33] [debug] Adding definition: s24 -> Path s12.s15
[2020-07-30 19:06:19,33] [debug] Flattening node at Path _5
| Path s12.s20

[2020-07-30 19:06:19,33] [debug] Adding definition: s25 -> Path s12.s20
[2020-07-30 19:06:19,33] [debug] Flattening node at Path _6
| Path s12.s17

[2020-07-30 19:06:19,33] [debug] Adding definition: s26 -> Path s12.s17
[2020-07-30 19:06:19,33] [debug] Flattening node at Path _7
| OptionApply
|   0: Path s12.s16

[2020-07-30 19:06:19,33] [debug] Adding definition: s27 -> OptionApply
[2020-07-30 19:06:19,33] [debug] Adding translation for t13: (Map(List(_2) -> s22, List(_4) -> s24, List(_5) -> s25, List(_3) -> s23, List(_1) -> s21, List(_7) -> s27, List(_6) -> s26), UnassignedType)
[2020-07-30 19:06:19,33] [debug] Flattened projection to
| Pure t13
|   value: StructNode
|     s21: Path s12.s14
|     s22: Path s12.s19
|     s23: Path s12.s18
|     s24: Path s12.s15
|     s25: Path s12.s20
|     s26: Path s12.s17
|     s27: OptionApply
|       0: Path s12.s16

[2020-07-30 19:06:19,33] [debug] After phase flattenProjections:
| Bind : Vector[t13<{s21: String', s22: String', s23: Int', s24: Option[Int'], s25: Option[Int'], s26: Boolean', s27: Option[Int']}>]
|   from s12: Bind : Vector[t11<{s14: String', s15: Option[Int'], s16: Int', s17: Boolean', s18: Int', s19: String', s20: Option[Int']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<{s14: String', s15: Option[Int'], s16: Int', s17: Boolean', s18: Int', s19: String', s20: Option[Int']}>]
|       value: StructNode : {s14: String', s15: Option[Int'], s16: Int', s17: Boolean', s18: Int', s19: String', s20: Option[Int']}
|         s14: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         s15: Path s7.JOB_ATTEMPT : Option[Int']
|         s16: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s17: Path s7.ALLOW_RESULT_REUSE : Boolean'
|         s18: Path s7.JOB_INDEX : Int'
|         s19: Path s7.CALL_FULLY_QUALIFIED_NAME : String'
|         s20: Path s7.RETURN_CODE : Option[Int']
|   select: Pure t13 : Vector[t13<{s21: String', s22: String', s23: Int', s24: Option[Int'], s25: Option[Int'], s26: Boolean', s27: Option[Int']}>]
|     value: StructNode : {s21: String', s22: String', s23: Int', s24: Option[Int'], s25: Option[Int'], s26: Boolean', s27: Option[Int']}
|       s21: Path s12.s14 : String'
|       s22: Path s12.s19 : String'
|       s23: Path s12.s18 : Int'
|       s24: Path s12.s15 : Option[Int']
|       s25: Path s12.s20 : Option[Int']
|       s26: Path s12.s17 : Boolean'
|       s27: OptionApply : Option[Int']
|         0: Path s12.s16 : Int'

[2020-07-30 19:06:19,33] [debug] Bind(s12) is aliasing. Merging Bind(s12, Bind(s7)) to Bind(s7)
[2020-07-30 19:06:19,33] [debug] After phase rewriteJoins:
| Bind : Vector[t13<{s21: String', s22: String', s23: Int', s24: Option[Int'], s25: Option[Int'], s26: Boolean', s27: Option[Int']}>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t13 : Vector[t13<{s21: String', s22: String', s23: Int', s24: Option[Int'], s25: Option[Int'], s26: Boolean', s27: Option[Int']}>]
|     value: StructNode : {s21: String', s22: String', s23: Int', s24: Option[Int'], s25: Option[Int'], s26: Boolean', s27: Option[Int']}
|       s21: Path s7.WORKFLOW_EXECUTION_UUID : String'
|       s22: Path s7.CALL_FULLY_QUALIFIED_NAME : String'
|       s23: Path s7.JOB_INDEX : Int'
|       s24: Path s7.JOB_ATTEMPT : Option[Int']
|       s25: Path s7.RETURN_CODE : Option[Int']
|       s26: Path s7.ALLOW_RESULT_REUSE : Boolean'
|       s27: OptionApply : Option[Int']
|         0: Path s7.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,33] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:19,33] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:19,33] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:19,33] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:19,33] [debug] Unreferenced: t13; Field refs: (@t10,CALL_CACHING_ENTRY_ID), (@t10,JOB_INDEX), (@t10,JOB_ATTEMPT), (@t10,CALL_FULLY_QUALIFIED_NAME), (@t10,ALLOW_RESULT_REUSE), (@t10,WORKFLOW_EXECUTION_UUID), (@t10,RETURN_CODE)
[2020-07-30 19:06:19,33] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:19,33] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:19,33] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:19,33] [debug] Creating mapping from t13<Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]>
[2020-07-30 19:06:19,33] [debug] Creating mapping from (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
[2020-07-30 19:06:19,33] [debug] Creating mapping from String'
[2020-07-30 19:06:19,33] [debug] Creating mapping from String'
[2020-07-30 19:06:19,33] [debug] Creating mapping from Int'
[2020-07-30 19:06:19,33] [debug] Creating mapping from Option[Int']
[2020-07-30 19:06:19,33] [debug] Creating mapping from Option[Int']
[2020-07-30 19:06:19,33] [debug] Creating mapping from Boolean'
[2020-07-30 19:06:19,33] [debug] Creating mapping from Option[Int']
[2020-07-30 19:06:19,33] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]]
|   from s28: Bind : Vector[t13<{s21: String', s22: String', s23: Int', s24: Option[Int'], s25: Option[Int'], s26: Boolean', s27: Option[Int']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t13 : Vector[t13<{s21: String', s22: String', s23: Int', s24: Option[Int'], s25: Option[Int'], s26: Boolean', s27: Option[Int']}>]
|       value: StructNode : {s21: String', s22: String', s23: Int', s24: Option[Int'], s25: Option[Int'], s26: Boolean', s27: Option[Int']}
|         s21: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         s22: Path s7.CALL_FULLY_QUALIFIED_NAME : String'
|         s23: Path s7.JOB_INDEX : Int'
|         s24: Path s7.JOB_ATTEMPT : Option[Int']
|         s25: Path s7.RETURN_CODE : Option[Int']
|         s26: Path s7.ALLOW_RESULT_REUSE : Boolean'
|         s27: OptionApply : Option[Int']
|           0: Path s7.CALL_CACHING_ENTRY_ID : Int'
|   map: TypeMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|     0: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|       1: Path s28.s21 : String'
|       2: Path s28.s22 : String'
|       3: Path s28.s23 : Int'
|       4: Path s28.s24 : Option[Int']
|       5: Path s28.s25 : Option[Int']
|       6: Path s28.s26 : Boolean'
|       7: Path s28.s27 : Option[Int']

[2020-07-30 19:06:19,33] [debug] Hoisting operations from defs: s27
[2020-07-30 19:06:19,33] [debug] New defs: Map(0 -> (Path s7.WORKFLOW_EXECUTION_UUID,s29), 5 -> (Path s7.ALLOW_RESULT_REUSE,s30), 1 -> (Path s7.CALL_FULLY_QUALIFIED_NAME,s31), 6 -> (Path s7.CALL_CACHING_ENTRY_ID,s32), 2 -> (Path s7.JOB_INDEX,s33), 3 -> (Path s7.JOB_ATTEMPT,s34), 4 -> (Path s7.RETURN_CODE,s35))
[2020-07-30 19:06:19,33] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]]
|   from s28: Bind : Vector[t36<{s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}>]
|     from s7: ...
|     select: Pure t36 : Vector[t36<{s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}>]
|       value: StructNode : {s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}
|         s33: Path s7.JOB_INDEX : Int'
|         s29: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         s32: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s31: Path s7.CALL_FULLY_QUALIFIED_NAME : String'
|         s30: Path s7.ALLOW_RESULT_REUSE : Boolean'
|         s35: Path s7.RETURN_CODE : Option[Int']
|         s34: Path s7.JOB_ATTEMPT : Option[Int']
|   map: TypeMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|     0: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|       1: Path s28.s29 : String'
|       2: Path s28.s31 : String'
|       3: Path s28.s33 : Int'
|       4: Path s28.s34 : Option[Int']
|       5: Path s28.s35 : Option[Int']
|       6: Path s28.s30 : Boolean'
|       7: OptionApply : Option[Int']
|         0: Path s28.s32 : Int'

[2020-07-30 19:06:19,33] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]]
|   from s28: Bind : Vector[t36<{s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t36 : Vector[t36<{s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}>]
|       value: StructNode : {s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}
|         s33: Path s7.JOB_INDEX : Int'
|         s29: Path s7.WORKFLOW_EXECUTION_UUID : String'
|         s32: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s31: Path s7.CALL_FULLY_QUALIFIED_NAME : String'
|         s30: Path s7.ALLOW_RESULT_REUSE : Boolean'
|         s35: Path s7.RETURN_CODE : Option[Int']
|         s34: Path s7.JOB_ATTEMPT : Option[Int']
|   map: TypeMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|     0: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|       1: Path s28.s29 : String'
|       2: Path s28.s31 : String'
|       3: Path s28.s33 : Int'
|       4: Path s28.s34 : Option[Int']
|       5: Path s28.s35 : Option[Int']
|       6: Path s28.s30 : Boolean'
|       7: OptionApply : Option[Int']
|         0: Path s28.s32 : Int'

[2020-07-30 19:06:19,33] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:19,33] [debug] Table fields: Map(@t10 -> Vector(CALL_CACHING_ENTRY_ID, JOB_INDEX, WORKFLOW_EXECUTION_UUID, CALL_FULLY_QUALIFIED_NAME, ALLOW_RESULT_REUSE, RETURN_CODE, JOB_ATTEMPT))
[2020-07-30 19:06:19,33] [debug] Creating source from TableNode:
| Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]

[2020-07-30 19:06:19,33] [debug] Mappings are: ConstArray(((@t10,CALL_CACHING_ENTRY_ID),List(CALL_CACHING_ENTRY_ID)), ((@t10,JOB_INDEX),List(JOB_INDEX)), ((@t10,WORKFLOW_EXECUTION_UUID),List(WORKFLOW_EXECUTION_UUID)), ((@t10,CALL_FULLY_QUALIFIED_NAME),List(CALL_FULLY_QUALIFIED_NAME)), ((@t10,ALLOW_RESULT_REUSE),List(ALLOW_RESULT_REUSE)), ((@t10,RETURN_CODE),List(RETURN_CODE)), ((@t10,JOB_ATTEMPT),List(JOB_ATTEMPT)))
[2020-07-30 19:06:19,33] [debug] Building new Comprehension from:
| Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]

[2020-07-30 19:06:19,34] [debug] Built new Comprehension:
| Comprehension s37, None, None, ConstArray(), None, None, None, None, false : Vector[t38<{s39: Int', s40: Int', s41: String', s42: String', s43: Boolean', s44: Option[Int'], s45: Option[Int']}>]
|   from s37: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   select: Pure t38 : Vector[t38<{s39: Int', s40: Int', s41: String', s42: String', s43: Boolean', s44: Option[Int'], s45: Option[Int']}>]
|     value: StructNode : {s39: Int', s40: Int', s41: String', s42: String', s43: Boolean', s44: Option[Int'], s45: Option[Int']}
|       s39: Path s37.CALL_CACHING_ENTRY_ID : Int'
|       s40: Path s37.JOB_INDEX : Int'
|       s41: Path s37.WORKFLOW_EXECUTION_UUID : String'
|       s42: Path s37.CALL_FULLY_QUALIFIED_NAME : String'
|       s43: Path s37.ALLOW_RESULT_REUSE : Boolean'
|       s44: Path s37.RETURN_CODE : Option[Int']
|       s45: Path s37.JOB_ATTEMPT : Option[Int']

[2020-07-30 19:06:19,34] [debug] Replacements are: Map((@t10,CALL_CACHING_ENTRY_ID) -> s39, (@t10,JOB_INDEX) -> s40, (@t10,JOB_ATTEMPT) -> s45, (@t10,CALL_FULLY_QUALIFIED_NAME) -> s42, (@t10,ALLOW_RESULT_REUSE) -> s43, (@t10,WORKFLOW_EXECUTION_UUID) -> s41, (@t10,RETURN_CODE) -> s44)
[2020-07-30 19:06:19,34] [debug] Merging Filter into Comprehension:
| Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   from s8: ...
|   where: Apply Function = : Boolean
|     0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,34] [debug] Merged Filter into Comprehension:
| Comprehension s37, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t38<{s39: Int', s40: Int', s41: String', s42: String', s43: Boolean', s44: Option[Int'], s45: Option[Int']}>]
|   from s37: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   select: Pure t38 : Vector[t38<{s39: Int', s40: Int', s41: String', s42: String', s43: Boolean', s44: Option[Int'], s45: Option[Int']}>]
|     value: StructNode : {s39: Int', s40: Int', s41: String', s42: String', s43: Boolean', s44: Option[Int'], s45: Option[Int']}
|       s39: Path s37.CALL_CACHING_ENTRY_ID : Int'
|       s40: Path s37.JOB_INDEX : Int'
|       s41: Path s37.WORKFLOW_EXECUTION_UUID : String'
|       s42: Path s37.CALL_FULLY_QUALIFIED_NAME : String'
|       s43: Path s37.ALLOW_RESULT_REUSE : Boolean'
|       s44: Path s37.RETURN_CODE : Option[Int']
|       s45: Path s37.JOB_ATTEMPT : Option[Int']
|   where: Apply Function = : Boolean
|     0: Path s37.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,34] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t36<{s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}>]
|   from s7: ...
|   select: Pure t36 : Vector[t36<{s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}>]
|     value: StructNode : {s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}
|       s33: Path s7.JOB_INDEX : Int'
|       s29: Path s7.WORKFLOW_EXECUTION_UUID : String'
|       s32: Path s7.CALL_CACHING_ENTRY_ID : Int'
|       s31: Path s7.CALL_FULLY_QUALIFIED_NAME : String'
|       s30: Path s7.ALLOW_RESULT_REUSE : Boolean'
|       s35: Path s7.RETURN_CODE : Option[Int']
|       s34: Path s7.JOB_ATTEMPT : Option[Int']

[2020-07-30 19:06:19,34] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s37, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t36<{s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}>]
|   from s37: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   select: Pure t36 : Vector[t36<{s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}>]
|     value: StructNode : {s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}
|       s33: Path s37.JOB_INDEX : Int'
|       s29: Path s37.WORKFLOW_EXECUTION_UUID : String'
|       s32: Path s37.CALL_CACHING_ENTRY_ID : Int'
|       s31: Path s37.CALL_FULLY_QUALIFIED_NAME : String'
|       s30: Path s37.ALLOW_RESULT_REUSE : Boolean'
|       s35: Path s37.RETURN_CODE : Option[Int']
|       s34: Path s37.JOB_ATTEMPT : Option[Int']
|   where: Apply Function = : Boolean
|     0: Path s37.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,34] [debug] Replacements are: Map((t36,s32) -> s32, (t36,s29) -> s29, (t36,s30) -> s30, (t36,s33) -> s33, (t36,s31) -> s31, (t36,s35) -> s35, (t36,s34) -> s34)
[2020-07-30 19:06:19,34] [debug] Mappings are: ConstArray(((t36,s32),List(s32)), ((t36,s29),List(s29)), ((t36,s30),List(s30)), ((t36,s33),List(s33)), ((t36,s31),List(s31)), ((t36,s35),List(s35)), ((t36,s34),List(s34)))
[2020-07-30 19:06:19,34] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]]
|   from s28: Comprehension s37, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t36<{s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}>]
|     from s37: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     select: Pure t36 : Vector[t36<{s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}>]
|       value: StructNode : {s33: Int', s29: String', s32: Int', s31: String', s30: Boolean', s35: Option[Int'], s34: Option[Int']}
|         s33: Path s37.JOB_INDEX : Int'
|         s29: Path s37.WORKFLOW_EXECUTION_UUID : String'
|         s32: Path s37.CALL_CACHING_ENTRY_ID : Int'
|         s31: Path s37.CALL_FULLY_QUALIFIED_NAME : String'
|         s30: Path s37.ALLOW_RESULT_REUSE : Boolean'
|         s35: Path s37.RETURN_CODE : Option[Int']
|         s34: Path s37.JOB_ATTEMPT : Option[Int']
|     where: Apply Function = : Boolean
|       0: Path s37.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: TypeMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|     0: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|       1: Path s28.s29 : String'
|       2: Path s28.s31 : String'
|       3: Path s28.s33 : Int'
|       4: Path s28.s34 : Option[Int']
|       5: Path s28.s35 : Option[Int']
|       6: Path s28.s30 : Boolean'
|       7: OptionApply : Option[Int']
|         0: Path s28.s32 : Int'

[2020-07-30 19:06:19,34] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:19,34] [debug] Required symbols: s33 -> 2, s29 -> 0, s32 -> 6, s31 -> 1, s30 -> 5, s35 -> 4, s34 -> 3
[2020-07-30 19:06:19,34] [debug] Transformed RSM: 
| ResultSetMapping
|   from s28: Comprehension s37, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t36<(String', String', Int', Option[Int'], Option[Int'], Boolean', Int')>]
|     from s37: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     select: Pure t36 : Vector[t36<(String', String', Int', Option[Int'], Option[Int'], Boolean', Int')>]
|       value: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Int')
|         1: Path s37.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s37.CALL_FULLY_QUALIFIED_NAME : String'
|         3: Path s37.JOB_INDEX : Int'
|         4: Path s37.JOB_ATTEMPT : Option[Int']
|         5: Path s37.RETURN_CODE : Option[Int']
|         6: Path s37.ALLOW_RESULT_REUSE : Boolean'
|         7: Path s37.CALL_CACHING_ENTRY_ID : Int'
|     where: Apply Function = : Boolean
|       0: Path s37.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: TypeMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|     0: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|       1: Path s28.s29 : String'
|       2: Path s28.s31 : String'
|       3: Path s28.s33 : Int'
|       4: Path s28.s34 : Option[Int']
|       5: Path s28.s35 : Option[Int']
|       6: Path s28.s30 : Boolean'
|       7: OptionApply : Option[Int']
|         0: Path s28.s32 : Int'

[2020-07-30 19:06:19,34] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]]
|   from s28: Comprehension s37, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t36<(String', String', Int', Option[Int'], Option[Int'], Boolean', Int')>]
|     from s37: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     select: Pure t36 : Vector[t36<(String', String', Int', Option[Int'], Option[Int'], Boolean', Int')>]
|       value: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Int')
|         1: Path s37.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s37.CALL_FULLY_QUALIFIED_NAME : String'
|         3: Path s37.JOB_INDEX : Int'
|         4: Path s37.JOB_ATTEMPT : Option[Int']
|         5: Path s37.RETURN_CODE : Option[Int']
|         6: Path s37.ALLOW_RESULT_REUSE : Boolean'
|         7: Path s37.CALL_CACHING_ENTRY_ID : Int'
|     where: Apply Function = : Boolean
|       0: Path s37.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: TypeMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|     0: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|       1: Path s28._1 : String'
|       2: Path s28._2 : String'
|       3: Path s28._3 : Int'
|       4: Path s28._4 : Option[Int']
|       5: Path s28._5 : Option[Int']
|       6: Path s28._6 : Boolean'
|       7: OptionApply : Option[Int']
|         0: Path s28._7 : Int'

[2020-07-30 19:06:19,34] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:19,34] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:19,34] [debug] Compiling server-side and mapping with server-side:
| Comprehension s37, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t36<(String', String', Int', Option[Int'], Option[Int'], Boolean', Int')>]
|   from s37: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   select: Pure t36 : Vector[t36<(String', String', Int', Option[Int'], Option[Int'], Boolean', Int')>]
|     value: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Int')
|       1: Path s37.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s37.CALL_FULLY_QUALIFIED_NAME : String'
|       3: Path s37.JOB_INDEX : Int'
|       4: Path s37.JOB_ATTEMPT : Option[Int']
|       5: Path s37.RETURN_CODE : Option[Int']
|       6: Path s37.ALLOW_RESULT_REUSE : Boolean'
|       7: Path s37.CALL_CACHING_ENTRY_ID : Int'
|   where: Apply Function = : Boolean
|     0: Path s37.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,34] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|     3: BaseResultConverter$mcI$sp idx=3, name=<computed> : Int'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'
|     5: OptionResultConverter$mcI$sp idx=5 : Int'
|     6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|     7: OptionResultConverter$mcI$sp idx=7 : Int'

[2020-07-30 19:06:19,34] [debug] Compiled server-side to:
| CompiledStatement "select "WORKFLOW_EXECUTION_UUID", "CALL_FULLY_QUALIFIED_NAME", "JOB_INDEX", "JOB_ATTEMPT", "RETURN_CODE", "ALLOW_RESULT_REUSE", "CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?" : Vector[t36<(String', String', Int', Option[Int'], Option[Int'], Boolean', Int')>]

[2020-07-30 19:06:19,34] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]]
|   from s28: CompiledStatement "select "WORKFLOW_EXECUTION_UUID", "CALL_FULLY_QUALIFIED_NAME", "JOB_INDEX", "JOB_ATTEMPT", "RETURN_CODE", "ALLOW_RESULT_REUSE", "CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?" : Vector[t36<(String', String', Int', Option[Int'], Option[Int'], Boolean', Int')>]
|   map: CompiledMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=<computed> : String'
|         3: BaseResultConverter$mcI$sp idx=3, name=<computed> : Int'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'
|         5: OptionResultConverter$mcI$sp idx=5 : Int'
|         6: BaseResultConverter$mcZ$sp idx=6, name=<computed> : Boolean'
|         7: OptionResultConverter$mcI$sp idx=7 : Int'

[2020-07-30 19:06:19,34] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,34] [debug]       assignUniqueSymbols:    0.768032 ms
[2020-07-30 19:06:19,34] [debug]           unrollTailBinds:    0.081929 ms
[2020-07-30 19:06:19,34] [debug]                inferTypes:    0.183332 ms
[2020-07-30 19:06:19,34] [debug]              expandTables:    1.646208 ms
[2020-07-30 19:06:19,34] [debug]           forceOuterBinds:    0.654435 ms
[2020-07-30 19:06:19,34] [debug]         removeMappedTypes:    0.602491 ms
[2020-07-30 19:06:19,34] [debug]                expandSums:    1.744975 ms
[2020-07-30 19:06:19,34] [debug]             expandRecords:    0.819383 ms
[2020-07-30 19:06:19,34] [debug]        flattenProjections:    6.299634 ms
[2020-07-30 19:06:19,34] [debug]              rewriteJoins:    2.446983 ms
[2020-07-30 19:06:19,34] [debug]             verifySymbols:    0.141171 ms
[2020-07-30 19:06:19,34] [debug]             relabelUnions:    0.078093 ms
[2020-07-30 19:06:19,34] [debug]          createAggregates:    0.035955 ms
[2020-07-30 19:06:19,34] [debug]           resolveZipJoins:    0.060880 ms
[2020-07-30 19:06:19,34] [debug]          pruneProjections:    0.244561 ms
[2020-07-30 19:06:19,34] [debug]           rewriteDistinct:    0.057479 ms
[2020-07-30 19:06:19,34] [debug]    createResultSetMapping:    1.093439 ms
[2020-07-30 19:06:19,34] [debug]            hoistClientOps:    1.527666 ms
[2020-07-30 19:06:19,34] [debug]         reorderOperations:    0.113042 ms
[2020-07-30 19:06:19,34] [debug]     mergeToComprehensions:    3.605901 ms
[2020-07-30 19:06:19,34] [debug]            optimizeScalar:    0.128491 ms
[2020-07-30 19:06:19,34] [debug]          removeFieldNames:    1.600381 ms
[2020-07-30 19:06:19,34] [debug]      specializeParameters:    0.164674 ms
[2020-07-30 19:06:19,34] [debug]                   codeGen:    1.662104 ms
[2020-07-30 19:06:19,34] [debug]                     TOTAL:   25.761239 ms
[2020-07-30 19:06:19,34] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:19,34] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:19,34] [debug] #3: StartTransaction
[2020-07-30 19:06:19,34] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "WORKFLOW_EXECUTION_UUID", "CALL_FULLY_QUALIFIED_NAME", "JOB_INDEX", "JOB_ATTEMPT", "RETURN_CODE", "ALLOW_RESULT_REUSE", "CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?]
[2020-07-30 19:06:19,35] [debug] Preparing statement: select "WORKFLOW_EXECUTION_UUID", "CALL_FULLY_QUALIFIED_NAME", "JOB_INDEX", "JOB_ATTEMPT", "RETURN_CODE", "ALLOW_RESULT_REUSE", "CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?
[2020-07-30 19:06:19,35] [debug] Executing prepared statement: HikariProxyPreparedStatement@100014613 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4d5526bf[sql=[select "WORKFLOW_EXECUTION_UUID", "CALL_FULLY_QUALIFIED_NAME", "JOB_INDEX", "JOB_ATTEMPT", "RETURN_CODE", "ALLOW_RESULT_REUSE", "CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?], parameters=[[30]]]
[2020-07-30 19:06:19,35] [debug] Executing prepared statement: HikariProxyPreparedStatement@100014613 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4d5526bf[sql=[select "WORKFLOW_EXECUTION_UUID", "CALL_FULLY_QUALIFIED_NAME", "JOB_INDEX", "JOB_ATTEMPT", "RETURN_CODE", "ALLOW_RESULT_REUSE", "CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?], parameters=[[30]]]
[2020-07-30 19:06:19,35] [debug] /-----\
[2020-07-30 19:06:19,35] [debug] | 1   |
[2020-07-30 19:06:19,35] [debug] | Int |
[2020-07-30 19:06:19,35] [debug] |-----|
[2020-07-30 19:06:19,35] [debug] | 30  |
[2020-07-30 19:06:19,35] [debug] \-----/
[2020-07-30 19:06:19,35] [debug] Execution of prepared statement took 82µs
[2020-07-30 19:06:19,35] [debug] /----------------------+----------------------+-----------+-------------+-------------+--------------------+----------------------\
[2020-07-30 19:06:19,35] [debug] | 1                    | 2                    | 3         | 4           | 5           | 6                  | 7                    |
[2020-07-30 19:06:19,35] [debug] | WORKFLOW_EXECUTIO... | CALL_FULLY_QUALIF... | JOB_INDEX | JOB_ATTEMPT | RETURN_CODE | ALLOW_RESULT_REUSE | CALL_CACHING_ENTR... |
[2020-07-30 19:06:19,35] [debug] |----------------------+----------------------+-----------+-------------+-------------+--------------------+----------------------|
[2020-07-30 19:06:19,35] [debug] | cc0ab3b6-9a6b-4a0... | bamMergePreproces... | -1        | 1           | 0           | true               | 30                   |
[2020-07-30 19:06:19,35] [debug] \----------------------+----------------------+-----------+-------------+-------------+--------------------+----------------------/
[2020-07-30 19:06:19,35] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table CALL_CACHING_SIMPLETON_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.SIMPLETON_KEY : String'
|           2: Path s4.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           3: Path s4.WDL_TYPE : String'
|           4: OptionApply
|             0: Path s4.CALL_CACHING_ENTRY_ID : Int'
|           5: OptionApply
|             0: Path s4.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s3.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t6
|     value: Ref s2

[2020-07-30 19:06:19,35] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:19,35] [debug] After phase assignUniqueSymbols:
| Bind
|   from s7: Filter s8
|     from s8: TableExpansion
|       table s9: Table CALL_CACHING_SIMPLETON_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s9.SIMPLETON_KEY : String'
|           2: Path s9.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           3: Path s9.WDL_TYPE : String'
|           4: OptionApply
|             0: Path s9.CALL_CACHING_ENTRY_ID : Int'
|           5: OptionApply
|             0: Path s9.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t11
|     value: Ref s7

[2020-07-30 19:06:19,35] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:19,35] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,35] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.CALL_CACHING_SIMPLETON_ENTRY)
[2020-07-30 19:06:19,35] [debug] With correct table types:
| Bind : Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>]
|   from s7: Filter s8 : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|     from s8: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t11 : Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>]
|     value: Ref s7 : @t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>

[2020-07-30 19:06:19,35] [debug] Table expansions: @t10 -> (s9,TypeMapping)
[2020-07-30 19:06:19,35] [debug] Expanding tables in result type
[2020-07-30 19:06:19,35] [debug] After phase expandTables:
| Bind : Vector[t13<Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]>]
|   from s12: Bind : Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>]
|     from s7: Filter s8 : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       from s8: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>]
|       value: Ref s7 : @t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>
|   select: Pure t13 : Vector[t13<Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]>]
|     value: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|       0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|         1: Path s12.SIMPLETON_KEY : String'
|         2: Path s12.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         3: Path s12.WDL_TYPE : String'
|         4: OptionApply : Option[Int']
|           0: Path s12.CALL_CACHING_ENTRY_ID : Int'
|         5: OptionApply : Option[Int']
|           0: Path s12.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'

[2020-07-30 19:06:19,35] [debug] After phase forceOuterBinds:
| Bind : Vector[t13<Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]>]
|   from s12: Bind : Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>]
|     from s7: Filter s8 : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       from s8: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>]
|       value: Ref s7 : @t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>
|   select: Pure t13 : Vector[t13<Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]>]
|     value: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|       0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|         1: Path s12.SIMPLETON_KEY : String'
|         2: Path s12.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         3: Path s12.WDL_TYPE : String'
|         4: OptionApply : Option[Int']
|           0: Path s12.CALL_CACHING_ENTRY_ID : Int'
|         5: OptionApply : Option[Int']
|           0: Path s12.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'

[2020-07-30 19:06:19,35] [debug] After phase removeMappedTypes:
| Bind : Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])>]
|   from s12: Bind : Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>]
|     from s7: Filter s8 : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       from s8: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>]
|       value: Ref s7 : @t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>
|   select: Pure t13 : Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])>]
|     value: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|       1: Path s12.SIMPLETON_KEY : String'
|       2: Path s12.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s12.WDL_TYPE : String'
|       4: OptionApply : Option[Int']
|         0: Path s12.CALL_CACHING_ENTRY_ID : Int'
|       5: OptionApply : Option[Int']
|         0: Path s12.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'

[2020-07-30 19:06:19,35] [debug] Translated type: Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>] -> Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
[2020-07-30 19:06:19,35] [debug] Translated type: @t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}> -> @t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>
[2020-07-30 19:06:19,35] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,35] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,35] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,35] [debug] Translated type: Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>] -> Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
[2020-07-30 19:06:19,35] [debug] Translated type: @t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}> -> @t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>
[2020-07-30 19:06:19,35] [debug] Translated type: Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>] -> Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>]
[2020-07-30 19:06:19,35] [debug] Translated type: Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>] -> Vector[t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>]
[2020-07-30 19:06:19,35] [debug] Translated type: t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>> -> t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>
[2020-07-30 19:06:19,35] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,35] [debug] Translated type: t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>> -> t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>
[2020-07-30 19:06:19,35] [debug] Translated type: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']] -> Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
[2020-07-30 19:06:19,35] [debug] Translated type: t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>> -> t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>
[2020-07-30 19:06:19,35] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,35] [debug] Translated type: t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>> -> t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>
[2020-07-30 19:06:19,35] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,35] [debug] Translated type: Option[Int'] -> Option[Int']
[2020-07-30 19:06:19,35] [debug] Translated type: t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>> -> t11<@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>>
[2020-07-30 19:06:19,35] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,35] [debug] Translated type: Option[Int'] -> Option[Int']
[2020-07-30 19:06:19,35] [debug] Translated type: (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int']) -> (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
[2020-07-30 19:06:19,35] [debug] Translated type: Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])>] -> Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])>]
[2020-07-30 19:06:19,35] [debug] Translated type: Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])>] -> Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])>]
[2020-07-30 19:06:19,35] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:19,35] [debug] After phase expandRecords:
| Bind : Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])>]
|   from s12: Bind : Vector[t11<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|     from s7: Filter s8 : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       from s8: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       value: StructNode : {SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}
|         SIMPLETON_VALUE: Path s7.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         SIMPLETON_KEY: Path s7.SIMPLETON_KEY : String'
|         CALL_CACHING_SIMPLETON_ENTRY_ID: Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|         CALL_CACHING_ENTRY_ID: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         WDL_TYPE: Path s7.WDL_TYPE : String'
|   select: Pure t13 : Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])>]
|     value: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|       1: Path s12.SIMPLETON_KEY : String'
|       2: Path s12.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s12.WDL_TYPE : String'
|       4: OptionApply : Option[Int']
|         0: Path s12.CALL_CACHING_ENTRY_ID : Int'
|       5: OptionApply : Option[Int']
|         0: Path s12.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'

[2020-07-30 19:06:19,35] [debug] Analyzing s8.CALL_CACHING_ENTRY_ID with symbols 
| Path s8.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,35] [debug] Translated s8.CALL_CACHING_ENTRY_ID to:
| Path s8.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,35] [debug] Flattening projection t11
[2020-07-30 19:06:19,36] [debug] Analyzing s7.SIMPLETON_VALUE with symbols 
| Path s7.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]

[2020-07-30 19:06:19,36] [debug] Translated s7.SIMPLETON_VALUE to:
| Path s7.SIMPLETON_VALUE

[2020-07-30 19:06:19,36] [debug] Analyzing s7.SIMPLETON_KEY with symbols 
| Path s7.SIMPLETON_KEY : String'

[2020-07-30 19:06:19,36] [debug] Translated s7.SIMPLETON_KEY to:
| Path s7.SIMPLETON_KEY

[2020-07-30 19:06:19,36] [debug] Analyzing s7.CALL_CACHING_SIMPLETON_ENTRY_ID with symbols 
| Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'

[2020-07-30 19:06:19,36] [debug] Translated s7.CALL_CACHING_SIMPLETON_ENTRY_ID to:
| Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID

[2020-07-30 19:06:19,36] [debug] Analyzing s7.CALL_CACHING_ENTRY_ID with symbols 
| Path s7.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,36] [debug] Translated s7.CALL_CACHING_ENTRY_ID to:
| Path s7.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,36] [debug] Analyzing s7.WDL_TYPE with symbols 
| Path s7.WDL_TYPE : String'

[2020-07-30 19:06:19,36] [debug] Translated s7.WDL_TYPE to:
| Path s7.WDL_TYPE

[2020-07-30 19:06:19,36] [debug] Flattening node at Path 
| StructNode
|   SIMPLETON_VALUE: Path s7.SIMPLETON_VALUE
|   SIMPLETON_KEY: Path s7.SIMPLETON_KEY
|   CALL_CACHING_SIMPLETON_ENTRY_ID: Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID
|   CALL_CACHING_ENTRY_ID: Path s7.CALL_CACHING_ENTRY_ID
|   WDL_TYPE: Path s7.WDL_TYPE

[2020-07-30 19:06:19,36] [debug] Flattening node at Path SIMPLETON_VALUE
| Path s7.SIMPLETON_VALUE

[2020-07-30 19:06:19,36] [debug] Adding definition: s14 -> Path s7.SIMPLETON_VALUE
[2020-07-30 19:06:19,36] [debug] Flattening node at Path SIMPLETON_KEY
| Path s7.SIMPLETON_KEY

[2020-07-30 19:06:19,36] [debug] Adding definition: s15 -> Path s7.SIMPLETON_KEY
[2020-07-30 19:06:19,36] [debug] Flattening node at Path CALL_CACHING_SIMPLETON_ENTRY_ID
| Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID

[2020-07-30 19:06:19,36] [debug] Adding definition: s16 -> Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID
[2020-07-30 19:06:19,36] [debug] Flattening node at Path CALL_CACHING_ENTRY_ID
| Path s7.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,36] [debug] Adding definition: s17 -> Path s7.CALL_CACHING_ENTRY_ID
[2020-07-30 19:06:19,36] [debug] Flattening node at Path WDL_TYPE
| Path s7.WDL_TYPE

[2020-07-30 19:06:19,36] [debug] Adding definition: s18 -> Path s7.WDL_TYPE
[2020-07-30 19:06:19,36] [debug] Adding translation for t11: (Map(List(CALL_CACHING_ENTRY_ID) -> s17, List(SIMPLETON_KEY) -> s15, List(CALL_CACHING_SIMPLETON_ENTRY_ID) -> s16, List(SIMPLETON_VALUE) -> s14, List(WDL_TYPE) -> s18), UnassignedType)
[2020-07-30 19:06:19,36] [debug] Flattened projection to
| Pure t11
|   value: StructNode
|     s14: Path s7.SIMPLETON_VALUE
|     s15: Path s7.SIMPLETON_KEY
|     s16: Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID
|     s17: Path s7.CALL_CACHING_ENTRY_ID
|     s18: Path s7.WDL_TYPE

[2020-07-30 19:06:19,36] [debug] Flattening projection t13
[2020-07-30 19:06:19,36] [debug] Analyzing s12.SIMPLETON_KEY with symbols t11
| Path s12.SIMPLETON_KEY : String'

[2020-07-30 19:06:19,36] [debug] Found s12.SIMPLETON_KEY with local part Path SIMPLETON_KEY over t11
[2020-07-30 19:06:19,36] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s17, List(SIMPLETON_KEY) -> s15, List(CALL_CACHING_SIMPLETON_ENTRY_ID) -> s16, List(SIMPLETON_VALUE) -> s14, List(WDL_TYPE) -> s18)
[2020-07-30 19:06:19,36] [debug] Translated s12.SIMPLETON_KEY to:
| Path s12.s15

[2020-07-30 19:06:19,36] [debug] Analyzing s12.SIMPLETON_VALUE with symbols t11
| Path s12.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]

[2020-07-30 19:06:19,36] [debug] Found s12.SIMPLETON_VALUE with local part Path SIMPLETON_VALUE over t11
[2020-07-30 19:06:19,36] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s17, List(SIMPLETON_KEY) -> s15, List(CALL_CACHING_SIMPLETON_ENTRY_ID) -> s16, List(SIMPLETON_VALUE) -> s14, List(WDL_TYPE) -> s18)
[2020-07-30 19:06:19,36] [debug] Translated s12.SIMPLETON_VALUE to:
| Path s12.s14

[2020-07-30 19:06:19,36] [debug] Analyzing s12.WDL_TYPE with symbols t11
| Path s12.WDL_TYPE : String'

[2020-07-30 19:06:19,36] [debug] Found s12.WDL_TYPE with local part Path WDL_TYPE over t11
[2020-07-30 19:06:19,36] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s17, List(SIMPLETON_KEY) -> s15, List(CALL_CACHING_SIMPLETON_ENTRY_ID) -> s16, List(SIMPLETON_VALUE) -> s14, List(WDL_TYPE) -> s18)
[2020-07-30 19:06:19,36] [debug] Translated s12.WDL_TYPE to:
| Path s12.s18

[2020-07-30 19:06:19,36] [debug] Analyzing s12.CALL_CACHING_ENTRY_ID with symbols t11
| Path s12.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,36] [debug] Found s12.CALL_CACHING_ENTRY_ID with local part Path CALL_CACHING_ENTRY_ID over t11
[2020-07-30 19:06:19,36] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s17, List(SIMPLETON_KEY) -> s15, List(CALL_CACHING_SIMPLETON_ENTRY_ID) -> s16, List(SIMPLETON_VALUE) -> s14, List(WDL_TYPE) -> s18)
[2020-07-30 19:06:19,36] [debug] Translated s12.CALL_CACHING_ENTRY_ID to:
| Path s12.s17

[2020-07-30 19:06:19,36] [debug] Analyzing s12.CALL_CACHING_SIMPLETON_ENTRY_ID with symbols t11
| Path s12.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'

[2020-07-30 19:06:19,36] [debug] Found s12.CALL_CACHING_SIMPLETON_ENTRY_ID with local part Path CALL_CACHING_SIMPLETON_ENTRY_ID over t11
[2020-07-30 19:06:19,36] [debug]   Translation for t11: Map(List(CALL_CACHING_ENTRY_ID) -> s17, List(SIMPLETON_KEY) -> s15, List(CALL_CACHING_SIMPLETON_ENTRY_ID) -> s16, List(SIMPLETON_VALUE) -> s14, List(WDL_TYPE) -> s18)
[2020-07-30 19:06:19,36] [debug] Translated s12.CALL_CACHING_SIMPLETON_ENTRY_ID to:
| Path s12.s16

[2020-07-30 19:06:19,36] [debug] Flattening node at Path 
| ProductNode
|   1: Path s12.s15
|   2: Path s12.s14
|   3: Path s12.s18
|   4: OptionApply
|     0: Path s12.s17
|   5: OptionApply
|     0: Path s12.s16

[2020-07-30 19:06:19,36] [debug] Flattening node at Path _1
| Path s12.s15

[2020-07-30 19:06:19,36] [debug] Adding definition: s19 -> Path s12.s15
[2020-07-30 19:06:19,36] [debug] Flattening node at Path _2
| Path s12.s14

[2020-07-30 19:06:19,36] [debug] Adding definition: s20 -> Path s12.s14
[2020-07-30 19:06:19,36] [debug] Flattening node at Path _3
| Path s12.s18

[2020-07-30 19:06:19,36] [debug] Adding definition: s21 -> Path s12.s18
[2020-07-30 19:06:19,36] [debug] Flattening node at Path _4
| OptionApply
|   0: Path s12.s17

[2020-07-30 19:06:19,36] [debug] Adding definition: s22 -> OptionApply
[2020-07-30 19:06:19,36] [debug] Flattening node at Path _5
| OptionApply
|   0: Path s12.s16

[2020-07-30 19:06:19,36] [debug] Adding definition: s23 -> OptionApply
[2020-07-30 19:06:19,36] [debug] Adding translation for t13: (Map(List(_2) -> s20, List(_4) -> s22, List(_5) -> s23, List(_3) -> s21, List(_1) -> s19), UnassignedType)
[2020-07-30 19:06:19,36] [debug] Flattened projection to
| Pure t13
|   value: StructNode
|     s19: Path s12.s15
|     s20: Path s12.s14
|     s21: Path s12.s18
|     s22: OptionApply
|       0: Path s12.s17
|     s23: OptionApply
|       0: Path s12.s16

[2020-07-30 19:06:19,36] [debug] After phase flattenProjections:
| Bind : Vector[t13<{s19: String', s20: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s21: String', s22: Option[Int'], s23: Option[Int']}>]
|   from s12: Bind : Vector[t11<{s14: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s15: String', s16: Int', s17: Int', s18: String'}>]
|     from s7: Filter s8 : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       from s8: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<{s14: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s15: String', s16: Int', s17: Int', s18: String'}>]
|       value: StructNode : {s14: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s15: String', s16: Int', s17: Int', s18: String'}
|         s14: Path s7.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s15: Path s7.SIMPLETON_KEY : String'
|         s16: Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|         s17: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s18: Path s7.WDL_TYPE : String'
|   select: Pure t13 : Vector[t13<{s19: String', s20: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s21: String', s22: Option[Int'], s23: Option[Int']}>]
|     value: StructNode : {s19: String', s20: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s21: String', s22: Option[Int'], s23: Option[Int']}
|       s19: Path s12.s15 : String'
|       s20: Path s12.s14 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s21: Path s12.s18 : String'
|       s22: OptionApply : Option[Int']
|         0: Path s12.s17 : Int'
|       s23: OptionApply : Option[Int']
|         0: Path s12.s16 : Int'

[2020-07-30 19:06:19,36] [debug] Bind(s12) is aliasing. Merging Bind(s12, Bind(s7)) to Bind(s7)
[2020-07-30 19:06:19,36] [debug] After phase rewriteJoins:
| Bind : Vector[t13<{s19: String', s20: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s21: String', s22: Option[Int'], s23: Option[Int']}>]
|   from s7: Filter s8 : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|     from s8: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t13 : Vector[t13<{s19: String', s20: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s21: String', s22: Option[Int'], s23: Option[Int']}>]
|     value: StructNode : {s19: String', s20: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s21: String', s22: Option[Int'], s23: Option[Int']}
|       s19: Path s7.SIMPLETON_KEY : String'
|       s20: Path s7.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s21: Path s7.WDL_TYPE : String'
|       s22: OptionApply : Option[Int']
|         0: Path s7.CALL_CACHING_ENTRY_ID : Int'
|       s23: OptionApply : Option[Int']
|         0: Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'

[2020-07-30 19:06:19,36] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:19,36] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:19,36] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:19,36] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:19,36] [debug] Unreferenced: t13; Field refs: (@t10,CALL_CACHING_ENTRY_ID), (@t10,WDL_TYPE), (@t10,SIMPLETON_KEY), (@t10,SIMPLETON_VALUE), (@t10,CALL_CACHING_SIMPLETON_ENTRY_ID)
[2020-07-30 19:06:19,36] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:19,36] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:19,36] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:19,36] [debug] Creating mapping from t13<Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]>
[2020-07-30 19:06:19,36] [debug] Creating mapping from (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
[2020-07-30 19:06:19,36] [debug] Creating mapping from String'
[2020-07-30 19:06:19,36] [debug] Creating mapping from Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
[2020-07-30 19:06:19,36] [debug] Creating mapping from String'
[2020-07-30 19:06:19,36] [debug] Creating mapping from Option[Int']
[2020-07-30 19:06:19,36] [debug] Creating mapping from Option[Int']
[2020-07-30 19:06:19,36] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]]
|   from s24: Bind : Vector[t13<{s19: String', s20: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s21: String', s22: Option[Int'], s23: Option[Int']}>]
|     from s7: Filter s8 : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       from s8: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t13 : Vector[t13<{s19: String', s20: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s21: String', s22: Option[Int'], s23: Option[Int']}>]
|       value: StructNode : {s19: String', s20: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s21: String', s22: Option[Int'], s23: Option[Int']}
|         s19: Path s7.SIMPLETON_KEY : String'
|         s20: Path s7.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s21: Path s7.WDL_TYPE : String'
|         s22: OptionApply : Option[Int']
|           0: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s23: OptionApply : Option[Int']
|           0: Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|       1: Path s24.s19 : String'
|       2: Path s24.s20 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s24.s21 : String'
|       4: Path s24.s22 : Option[Int']
|       5: Path s24.s23 : Option[Int']

[2020-07-30 19:06:19,36] [debug] Hoisting operations from defs: s22, s23
[2020-07-30 19:06:19,36] [debug] New defs: Map(0 -> (Path s7.SIMPLETON_KEY,s25), 1 -> (Path s7.SIMPLETON_VALUE,s26), 2 -> (Path s7.WDL_TYPE,s27), 3 -> (Path s7.CALL_CACHING_ENTRY_ID,s28), 4 -> (Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID,s29))
[2020-07-30 19:06:19,36] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]]
|   from s24: Bind : Vector[t30<{s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}>]
|     from s7: ...
|     select: Pure t30 : Vector[t30<{s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}>]
|       value: StructNode : {s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}
|         s26: Path s7.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s27: Path s7.WDL_TYPE : String'
|         s29: Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|         s28: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s25: Path s7.SIMPLETON_KEY : String'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|       1: Path s24.s25 : String'
|       2: Path s24.s26 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s24.s27 : String'
|       4: OptionApply : Option[Int']
|         0: Path s24.s28 : Int'
|       5: OptionApply : Option[Int']
|         0: Path s24.s29 : Int'

[2020-07-30 19:06:19,36] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]]
|   from s24: Bind : Vector[t30<{s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}>]
|     from s7: Filter s8 : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       from s8: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t30 : Vector[t30<{s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}>]
|       value: StructNode : {s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}
|         s26: Path s7.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s27: Path s7.WDL_TYPE : String'
|         s29: Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|         s28: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s25: Path s7.SIMPLETON_KEY : String'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|       1: Path s24.s25 : String'
|       2: Path s24.s26 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s24.s27 : String'
|       4: OptionApply : Option[Int']
|         0: Path s24.s28 : Int'
|       5: OptionApply : Option[Int']
|         0: Path s24.s29 : Int'

[2020-07-30 19:06:19,36] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:19,36] [debug] Table fields: Map(@t10 -> Vector(CALL_CACHING_ENTRY_ID, SIMPLETON_VALUE, WDL_TYPE, CALL_CACHING_SIMPLETON_ENTRY_ID, SIMPLETON_KEY))
[2020-07-30 19:06:19,36] [debug] Creating source from TableNode:
| Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]

[2020-07-30 19:06:19,36] [debug] Mappings are: ConstArray(((@t10,CALL_CACHING_ENTRY_ID),List(CALL_CACHING_ENTRY_ID)), ((@t10,SIMPLETON_VALUE),List(SIMPLETON_VALUE)), ((@t10,WDL_TYPE),List(WDL_TYPE)), ((@t10,CALL_CACHING_SIMPLETON_ENTRY_ID),List(CALL_CACHING_SIMPLETON_ENTRY_ID)), ((@t10,SIMPLETON_KEY),List(SIMPLETON_KEY)))
[2020-07-30 19:06:19,36] [debug] Building new Comprehension from:
| Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]

[2020-07-30 19:06:19,36] [debug] Built new Comprehension:
| Comprehension s31, None, None, ConstArray(), None, None, None, None, false : Vector[t32<{s33: Int', s34: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s35: String', s36: Int', s37: String'}>]
|   from s31: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|   select: Pure t32 : Vector[t32<{s33: Int', s34: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s35: String', s36: Int', s37: String'}>]
|     value: StructNode : {s33: Int', s34: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s35: String', s36: Int', s37: String'}
|       s33: Path s31.CALL_CACHING_ENTRY_ID : Int'
|       s34: Path s31.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s35: Path s31.WDL_TYPE : String'
|       s36: Path s31.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|       s37: Path s31.SIMPLETON_KEY : String'

[2020-07-30 19:06:19,37] [debug] Replacements are: Map((@t10,CALL_CACHING_ENTRY_ID) -> s33, (@t10,WDL_TYPE) -> s35, (@t10,SIMPLETON_KEY) -> s37, (@t10,SIMPLETON_VALUE) -> s34, (@t10,CALL_CACHING_SIMPLETON_ENTRY_ID) -> s36)
[2020-07-30 19:06:19,37] [debug] Merging Filter into Comprehension:
| Filter s8 : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|   from s8: ...
|   where: Apply Function = : Boolean
|     0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,37] [debug] Merged Filter into Comprehension:
| Comprehension s31, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t32<{s33: Int', s34: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s35: String', s36: Int', s37: String'}>]
|   from s31: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|   select: Pure t32 : Vector[t32<{s33: Int', s34: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s35: String', s36: Int', s37: String'}>]
|     value: StructNode : {s33: Int', s34: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s35: String', s36: Int', s37: String'}
|       s33: Path s31.CALL_CACHING_ENTRY_ID : Int'
|       s34: Path s31.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s35: Path s31.WDL_TYPE : String'
|       s36: Path s31.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|       s37: Path s31.SIMPLETON_KEY : String'
|   where: Apply Function = : Boolean
|     0: Path s31.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,37] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t30<{s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}>]
|   from s7: ...
|   select: Pure t30 : Vector[t30<{s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}>]
|     value: StructNode : {s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}
|       s26: Path s7.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s27: Path s7.WDL_TYPE : String'
|       s29: Path s7.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|       s28: Path s7.CALL_CACHING_ENTRY_ID : Int'
|       s25: Path s7.SIMPLETON_KEY : String'

[2020-07-30 19:06:19,37] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s31, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}>]
|   from s31: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|   select: Pure t30 : Vector[t30<{s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}>]
|     value: StructNode : {s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}
|       s26: Path s31.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s27: Path s31.WDL_TYPE : String'
|       s29: Path s31.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|       s28: Path s31.CALL_CACHING_ENTRY_ID : Int'
|       s25: Path s31.SIMPLETON_KEY : String'
|   where: Apply Function = : Boolean
|     0: Path s31.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,37] [debug] Replacements are: Map((t30,s25) -> s25, (t30,s29) -> s29, (t30,s27) -> s27, (t30,s26) -> s26, (t30,s28) -> s28)
[2020-07-30 19:06:19,37] [debug] Mappings are: ConstArray(((t30,s25),List(s25)), ((t30,s29),List(s29)), ((t30,s27),List(s27)), ((t30,s26),List(s26)), ((t30,s28),List(s28)))
[2020-07-30 19:06:19,37] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]]
|   from s24: Comprehension s31, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<{s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}>]
|     from s31: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|     select: Pure t30 : Vector[t30<{s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}>]
|       value: StructNode : {s26: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s27: String', s29: Int', s28: Int', s25: String'}
|         s26: Path s31.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s27: Path s31.WDL_TYPE : String'
|         s29: Path s31.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|         s28: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         s25: Path s31.SIMPLETON_KEY : String'
|     where: Apply Function = : Boolean
|       0: Path s31.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|       1: Path s24.s25 : String'
|       2: Path s24.s26 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s24.s27 : String'
|       4: OptionApply : Option[Int']
|         0: Path s24.s28 : Int'
|       5: OptionApply : Option[Int']
|         0: Path s24.s29 : Int'

[2020-07-30 19:06:19,37] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:19,37] [debug] Required symbols: s26 -> 1, s27 -> 2, s29 -> 4, s28 -> 3, s25 -> 0
[2020-07-30 19:06:19,37] [debug] Transformed RSM: 
| ResultSetMapping
|   from s24: Comprehension s31, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')>]
|     from s31: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|     select: Pure t30 : Vector[t30<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')>]
|       value: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')
|         1: Path s31.SIMPLETON_KEY : String'
|         2: Path s31.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         3: Path s31.WDL_TYPE : String'
|         4: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         5: Path s31.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|     where: Apply Function = : Boolean
|       0: Path s31.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|       1: Path s24.s25 : String'
|       2: Path s24.s26 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s24.s27 : String'
|       4: OptionApply : Option[Int']
|         0: Path s24.s28 : Int'
|       5: OptionApply : Option[Int']
|         0: Path s24.s29 : Int'

[2020-07-30 19:06:19,37] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]]
|   from s24: Comprehension s31, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')>]
|     from s31: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|     select: Pure t30 : Vector[t30<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')>]
|       value: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')
|         1: Path s31.SIMPLETON_KEY : String'
|         2: Path s31.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         3: Path s31.WDL_TYPE : String'
|         4: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         5: Path s31.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|     where: Apply Function = : Boolean
|       0: Path s31.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|       1: Path s24._1 : String'
|       2: Path s24._2 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s24._3 : String'
|       4: OptionApply : Option[Int']
|         0: Path s24._4 : Int'
|       5: OptionApply : Option[Int']
|         0: Path s24._5 : Int'

[2020-07-30 19:06:19,37] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:19,37] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:19,37] [debug] Compiling server-side and mapping with server-side:
| Comprehension s31, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t30<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')>]
|   from s31: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t10<{SIMPLETON_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], SIMPLETON_KEY: String', CALL_CACHING_SIMPLETON_ENTRY_ID: Int', CALL_CACHING_ENTRY_ID: Int', WDL_TYPE: String'}>]
|   select: Pure t30 : Vector[t30<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')>]
|     value: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')
|       1: Path s31.SIMPLETON_KEY : String'
|       2: Path s31.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s31.WDL_TYPE : String'
|       4: Path s31.CALL_CACHING_ENTRY_ID : Int'
|       5: Path s31.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'
|   where: Apply Function = : Boolean
|     0: Path s31.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,37] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'
|     5: OptionResultConverter$mcI$sp idx=5 : Int'

[2020-07-30 19:06:19,37] [debug] Compiled server-side to:
| CompiledStatement "select "SIMPLETON_KEY", "SIMPLETON_VALUE", "WDL_TYPE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_SIMPLETON_ENTRY_ID" from "CALL_CACHING_SIMPLETON_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?" : Vector[t30<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')>]

[2020-07-30 19:06:19,37] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]]
|   from s24: CompiledStatement "select "SIMPLETON_KEY", "SIMPLETON_VALUE", "WDL_TYPE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_SIMPLETON_ENTRY_ID" from "CALL_CACHING_SIMPLETON_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?" : Vector[t30<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int', Int')>]
|   map: CompiledMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=<computed> : String'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'
|         5: OptionResultConverter$mcI$sp idx=5 : Int'

[2020-07-30 19:06:19,37] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,37] [debug]       assignUniqueSymbols:    0.600071 ms
[2020-07-30 19:06:19,37] [debug]           unrollTailBinds:    0.074592 ms
[2020-07-30 19:06:19,37] [debug]                inferTypes:    0.126710 ms
[2020-07-30 19:06:19,37] [debug]              expandTables:    1.419567 ms
[2020-07-30 19:06:19,37] [debug]           forceOuterBinds:    0.678947 ms
[2020-07-30 19:06:19,37] [debug]         removeMappedTypes:    0.672605 ms
[2020-07-30 19:06:19,37] [debug]                expandSums:    1.841214 ms
[2020-07-30 19:06:19,37] [debug]             expandRecords:    0.688823 ms
[2020-07-30 19:06:19,37] [debug]        flattenProjections:    4.627519 ms
[2020-07-30 19:06:19,37] [debug]              rewriteJoins:    0.670898 ms
[2020-07-30 19:06:19,37] [debug]             verifySymbols:    0.092204 ms
[2020-07-30 19:06:19,37] [debug]             relabelUnions:    0.076502 ms
[2020-07-30 19:06:19,37] [debug]          createAggregates:    0.035272 ms
[2020-07-30 19:06:19,37] [debug]           resolveZipJoins:    0.066019 ms
[2020-07-30 19:06:19,37] [debug]          pruneProjections:    0.212681 ms
[2020-07-30 19:06:19,37] [debug]           rewriteDistinct:    0.055228 ms
[2020-07-30 19:06:19,37] [debug]    createResultSetMapping:    0.903037 ms
[2020-07-30 19:06:19,37] [debug]            hoistClientOps:    2.424587 ms
[2020-07-30 19:06:19,37] [debug]         reorderOperations:    0.128772 ms
[2020-07-30 19:06:19,37] [debug]     mergeToComprehensions:    3.325154 ms
[2020-07-30 19:06:19,37] [debug]            optimizeScalar:    0.123514 ms
[2020-07-30 19:06:19,37] [debug]          removeFieldNames:    1.651737 ms
[2020-07-30 19:06:19,37] [debug]      specializeParameters:    0.162748 ms
[2020-07-30 19:06:19,37] [debug]                   codeGen:    1.525235 ms
[2020-07-30 19:06:19,37] [debug]                     TOTAL:   22.183636 ms
[2020-07-30 19:06:19,37] [debug] #5: result [select "SIMPLETON_KEY", "SIMPLETON_VALUE", "WDL_TYPE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_SIMPLETON_ENTRY_ID" from "CALL_CACHING_SIMPLETON_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?]
[2020-07-30 19:06:19,37] [debug] Preparing statement: select "SIMPLETON_KEY", "SIMPLETON_VALUE", "WDL_TYPE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_SIMPLETON_ENTRY_ID" from "CALL_CACHING_SIMPLETON_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?
[2020-07-30 19:06:19,37] [debug] Executing prepared statement: HikariProxyPreparedStatement@1561068392 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@15f201e3[sql=[select "SIMPLETON_KEY", "SIMPLETON_VALUE", "WDL_TYPE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_SIMPLETON_ENTRY_ID" from "CALL_CACHING_SIMPLETON_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?], parameters=[[30]]]
[2020-07-30 19:06:19,37] [debug] Executing prepared statement: HikariProxyPreparedStatement@1561068392 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@15f201e3[sql=[select "SIMPLETON_KEY", "SIMPLETON_VALUE", "WDL_TYPE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_SIMPLETON_ENTRY_ID" from "CALL_CACHING_SIMPLETON_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?], parameters=[[30]]]
[2020-07-30 19:06:19,37] [debug] /-----\
[2020-07-30 19:06:19,37] [debug] | 1   |
[2020-07-30 19:06:19,37] [debug] | Int |
[2020-07-30 19:06:19,37] [debug] |-----|
[2020-07-30 19:06:19,37] [debug] | 30  |
[2020-07-30 19:06:19,37] [debug] \-----/
[2020-07-30 19:06:19,38] [debug] Execution of prepared statement took 240µs
[2020-07-30 19:06:19,38] [debug] /----------------------+----------------------+----------+----------------------+----------------------\
[2020-07-30 19:06:19,38] [debug] | 1                    | 2                    | 3        | 4                    | 5                    |
[2020-07-30 19:06:19,38] [debug] | SIMPLETON_KEY        | SIMPLETON_VALUE      | WDL_TYPE | CALL_CACHING_ENTR... | CALL_CACHING_SIMP... |
[2020-07-30 19:06:19,38] [debug] |----------------------+----------------------+----------+----------------------+----------------------|
[2020-07-30 19:06:19,38] [debug] | intervalsList:int... | org.hsqldb.jdbc.J... | String   | 30                   | 105                  |
[2020-07-30 19:06:19,38] [debug] | intervalsList:int... | org.hsqldb.jdbc.J... | String   | 30                   | 106                  |
[2020-07-30 19:06:19,38] [debug] | intervalsList:int... | org.hsqldb.jdbc.J... | String   | 30                   | 107                  |
[2020-07-30 19:06:19,38] [debug] | intervalsList:int... | org.hsqldb.jdbc.J... | String   | 30                   | 108                  |
[2020-07-30 19:06:19,38] [debug] | intervalsList:int... | org.hsqldb.jdbc.J... | String   | 30                   | 109                  |
[2020-07-30 19:06:19,38] [debug] \----------------------+----------------------+----------+----------------------+----------------------/
[2020-07-30 19:06:19,38] [debug] 1 more rows read (6 total)
[2020-07-30 19:06:19,38] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table CALL_CACHING_DETRITUS_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.DETRITUS_KEY : String'
|           2: Path s4.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           3: OptionApply
|             0: Path s4.CALL_CACHING_ENTRY_ID : Int'
|           4: OptionApply
|             0: Path s4.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s3.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t6
|     value: Ref s2

[2020-07-30 19:06:19,38] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:19,38] [debug] After phase assignUniqueSymbols:
| Bind
|   from s7: Filter s8
|     from s8: TableExpansion
|       table s9: Table CALL_CACHING_DETRITUS_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s9.DETRITUS_KEY : String'
|           2: Path s9.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           3: OptionApply
|             0: Path s9.CALL_CACHING_ENTRY_ID : Int'
|           4: OptionApply
|             0: Path s9.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t11
|     value: Ref s7

[2020-07-30 19:06:19,38] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:19,38] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,38] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.CALL_CACHING_DETRITUS_ENTRY)
[2020-07-30 19:06:19,38] [debug] With correct table types:
| Bind : Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>]
|   from s7: Filter s8 : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|     from s8: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t11 : Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>]
|     value: Ref s7 : @t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>

[2020-07-30 19:06:19,38] [debug] Table expansions: @t10 -> (s9,TypeMapping)
[2020-07-30 19:06:19,38] [debug] Expanding tables in result type
[2020-07-30 19:06:19,39] [debug] After phase expandTables:
| Bind : Vector[t13<Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]>]
|   from s12: Bind : Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>]
|     from s7: Filter s8 : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       from s8: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>]
|       value: Ref s7 : @t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>
|   select: Pure t13 : Vector[t13<Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]>]
|     value: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|       0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|         1: Path s12.DETRITUS_KEY : String'
|         2: Path s12.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         3: OptionApply : Option[Int']
|           0: Path s12.CALL_CACHING_ENTRY_ID : Int'
|         4: OptionApply : Option[Int']
|           0: Path s12.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:19,39] [debug] After phase forceOuterBinds:
| Bind : Vector[t13<Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]>]
|   from s12: Bind : Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>]
|     from s7: Filter s8 : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       from s8: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>]
|       value: Ref s7 : @t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>
|   select: Pure t13 : Vector[t13<Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]>]
|     value: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|       0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|         1: Path s12.DETRITUS_KEY : String'
|         2: Path s12.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         3: OptionApply : Option[Int']
|           0: Path s12.CALL_CACHING_ENTRY_ID : Int'
|         4: OptionApply : Option[Int']
|           0: Path s12.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:19,39] [debug] After phase removeMappedTypes:
| Bind : Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])>]
|   from s12: Bind : Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>]
|     from s7: Filter s8 : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       from s8: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>]
|       value: Ref s7 : @t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>
|   select: Pure t13 : Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])>]
|     value: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|       1: Path s12.DETRITUS_KEY : String'
|       2: Path s12.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: OptionApply : Option[Int']
|         0: Path s12.CALL_CACHING_ENTRY_ID : Int'
|       4: OptionApply : Option[Int']
|         0: Path s12.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:19,39] [debug] Translated type: Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>] -> Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,39] [debug] Translated type: @t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}> -> @t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,39] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,39] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,39] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,39] [debug] Translated type: Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>] -> Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,39] [debug] Translated type: @t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}> -> @t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,39] [debug] Translated type: Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>] -> Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>]
[2020-07-30 19:06:19,39] [debug] Translated type: Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>] -> Vector[t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>]
[2020-07-30 19:06:19,39] [debug] Translated type: t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>> -> t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>
[2020-07-30 19:06:19,39] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,39] [debug] Translated type: t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>> -> t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>
[2020-07-30 19:06:19,39] [debug] Translated type: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']] -> Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
[2020-07-30 19:06:19,39] [debug] Translated type: t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>> -> t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>
[2020-07-30 19:06:19,39] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,39] [debug] Translated type: Option[Int'] -> Option[Int']
[2020-07-30 19:06:19,39] [debug] Translated type: t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>> -> t11<@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>>
[2020-07-30 19:06:19,39] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,39] [debug] Translated type: Option[Int'] -> Option[Int']
[2020-07-30 19:06:19,39] [debug] Translated type: (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int']) -> (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
[2020-07-30 19:06:19,39] [debug] Translated type: Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])>] -> Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])>]
[2020-07-30 19:06:19,39] [debug] Translated type: Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])>] -> Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])>]
[2020-07-30 19:06:19,39] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:19,39] [debug] After phase expandRecords:
| Bind : Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])>]
|   from s12: Bind : Vector[t11<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|     from s7: Filter s8 : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       from s8: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       value: StructNode : {DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}
|         DETRITUS_KEY: Path s7.DETRITUS_KEY : String'
|         DETRITUS_VALUE: Path s7.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         CALL_CACHING_ENTRY_ID: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         CALL_CACHING_DETRITUS_ENTRY_ID: Path s7.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|   select: Pure t13 : Vector[t13<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])>]
|     value: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|       1: Path s12.DETRITUS_KEY : String'
|       2: Path s12.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: OptionApply : Option[Int']
|         0: Path s12.CALL_CACHING_ENTRY_ID : Int'
|       4: OptionApply : Option[Int']
|         0: Path s12.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:19,39] [debug] Analyzing s8.CALL_CACHING_ENTRY_ID with symbols 
| Path s8.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,39] [debug] Translated s8.CALL_CACHING_ENTRY_ID to:
| Path s8.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,39] [debug] Flattening projection t11
[2020-07-30 19:06:19,39] [debug] Analyzing s7.DETRITUS_KEY with symbols 
| Path s7.DETRITUS_KEY : String'

[2020-07-30 19:06:19,39] [debug] Translated s7.DETRITUS_KEY to:
| Path s7.DETRITUS_KEY

[2020-07-30 19:06:19,39] [debug] Analyzing s7.DETRITUS_VALUE with symbols 
| Path s7.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]

[2020-07-30 19:06:19,39] [debug] Translated s7.DETRITUS_VALUE to:
| Path s7.DETRITUS_VALUE

[2020-07-30 19:06:19,39] [debug] Analyzing s7.CALL_CACHING_ENTRY_ID with symbols 
| Path s7.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,39] [debug] Translated s7.CALL_CACHING_ENTRY_ID to:
| Path s7.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,39] [debug] Analyzing s7.CALL_CACHING_DETRITUS_ENTRY_ID with symbols 
| Path s7.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:19,39] [debug] Translated s7.CALL_CACHING_DETRITUS_ENTRY_ID to:
| Path s7.CALL_CACHING_DETRITUS_ENTRY_ID

[2020-07-30 19:06:19,39] [debug] Flattening node at Path 
| StructNode
|   DETRITUS_KEY: Path s7.DETRITUS_KEY
|   DETRITUS_VALUE: Path s7.DETRITUS_VALUE
|   CALL_CACHING_ENTRY_ID: Path s7.CALL_CACHING_ENTRY_ID
|   CALL_CACHING_DETRITUS_ENTRY_ID: Path s7.CALL_CACHING_DETRITUS_ENTRY_ID

[2020-07-30 19:06:19,39] [debug] Flattening node at Path DETRITUS_KEY
| Path s7.DETRITUS_KEY

[2020-07-30 19:06:19,39] [debug] Adding definition: s14 -> Path s7.DETRITUS_KEY
[2020-07-30 19:06:19,39] [debug] Flattening node at Path DETRITUS_VALUE
| Path s7.DETRITUS_VALUE

[2020-07-30 19:06:19,39] [debug] Adding definition: s15 -> Path s7.DETRITUS_VALUE
[2020-07-30 19:06:19,39] [debug] Flattening node at Path CALL_CACHING_ENTRY_ID
| Path s7.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,39] [debug] Adding definition: s16 -> Path s7.CALL_CACHING_ENTRY_ID
[2020-07-30 19:06:19,39] [debug] Flattening node at Path CALL_CACHING_DETRITUS_ENTRY_ID
| Path s7.CALL_CACHING_DETRITUS_ENTRY_ID

[2020-07-30 19:06:19,39] [debug] Adding definition: s17 -> Path s7.CALL_CACHING_DETRITUS_ENTRY_ID
[2020-07-30 19:06:19,39] [debug] Adding translation for t11: (Map(List(CALL_CACHING_DETRITUS_ENTRY_ID) -> s17, List(CALL_CACHING_ENTRY_ID) -> s16, List(DETRITUS_VALUE) -> s15, List(DETRITUS_KEY) -> s14), UnassignedType)
[2020-07-30 19:06:19,39] [debug] Flattened projection to
| Pure t11
|   value: StructNode
|     s14: Path s7.DETRITUS_KEY
|     s15: Path s7.DETRITUS_VALUE
|     s16: Path s7.CALL_CACHING_ENTRY_ID
|     s17: Path s7.CALL_CACHING_DETRITUS_ENTRY_ID

[2020-07-30 19:06:19,39] [debug] Flattening projection t13
[2020-07-30 19:06:19,39] [debug] Analyzing s12.DETRITUS_KEY with symbols t11
| Path s12.DETRITUS_KEY : String'

[2020-07-30 19:06:19,39] [debug] Found s12.DETRITUS_KEY with local part Path DETRITUS_KEY over t11
[2020-07-30 19:06:19,39] [debug]   Translation for t11: Map(List(CALL_CACHING_DETRITUS_ENTRY_ID) -> s17, List(CALL_CACHING_ENTRY_ID) -> s16, List(DETRITUS_VALUE) -> s15, List(DETRITUS_KEY) -> s14)
[2020-07-30 19:06:19,39] [debug] Translated s12.DETRITUS_KEY to:
| Path s12.s14

[2020-07-30 19:06:19,39] [debug] Analyzing s12.DETRITUS_VALUE with symbols t11
| Path s12.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]

[2020-07-30 19:06:19,39] [debug] Found s12.DETRITUS_VALUE with local part Path DETRITUS_VALUE over t11
[2020-07-30 19:06:19,39] [debug]   Translation for t11: Map(List(CALL_CACHING_DETRITUS_ENTRY_ID) -> s17, List(CALL_CACHING_ENTRY_ID) -> s16, List(DETRITUS_VALUE) -> s15, List(DETRITUS_KEY) -> s14)
[2020-07-30 19:06:19,39] [debug] Translated s12.DETRITUS_VALUE to:
| Path s12.s15

[2020-07-30 19:06:19,39] [debug] Analyzing s12.CALL_CACHING_ENTRY_ID with symbols t11
| Path s12.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,39] [debug] Found s12.CALL_CACHING_ENTRY_ID with local part Path CALL_CACHING_ENTRY_ID over t11
[2020-07-30 19:06:19,39] [debug]   Translation for t11: Map(List(CALL_CACHING_DETRITUS_ENTRY_ID) -> s17, List(CALL_CACHING_ENTRY_ID) -> s16, List(DETRITUS_VALUE) -> s15, List(DETRITUS_KEY) -> s14)
[2020-07-30 19:06:19,39] [debug] Translated s12.CALL_CACHING_ENTRY_ID to:
| Path s12.s16

[2020-07-30 19:06:19,39] [debug] Analyzing s12.CALL_CACHING_DETRITUS_ENTRY_ID with symbols t11
| Path s12.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:19,39] [debug] Found s12.CALL_CACHING_DETRITUS_ENTRY_ID with local part Path CALL_CACHING_DETRITUS_ENTRY_ID over t11
[2020-07-30 19:06:19,39] [debug]   Translation for t11: Map(List(CALL_CACHING_DETRITUS_ENTRY_ID) -> s17, List(CALL_CACHING_ENTRY_ID) -> s16, List(DETRITUS_VALUE) -> s15, List(DETRITUS_KEY) -> s14)
[2020-07-30 19:06:19,39] [debug] Translated s12.CALL_CACHING_DETRITUS_ENTRY_ID to:
| Path s12.s17

[2020-07-30 19:06:19,39] [debug] Flattening node at Path 
| ProductNode
|   1: Path s12.s14
|   2: Path s12.s15
|   3: OptionApply
|     0: Path s12.s16
|   4: OptionApply
|     0: Path s12.s17

[2020-07-30 19:06:19,39] [debug] Flattening node at Path _1
| Path s12.s14

[2020-07-30 19:06:19,39] [debug] Adding definition: s18 -> Path s12.s14
[2020-07-30 19:06:19,39] [debug] Flattening node at Path _2
| Path s12.s15

[2020-07-30 19:06:19,39] [debug] Adding definition: s19 -> Path s12.s15
[2020-07-30 19:06:19,39] [debug] Flattening node at Path _3
| OptionApply
|   0: Path s12.s16

[2020-07-30 19:06:19,39] [debug] Adding definition: s20 -> OptionApply
[2020-07-30 19:06:19,39] [debug] Flattening node at Path _4
| OptionApply
|   0: Path s12.s17

[2020-07-30 19:06:19,39] [debug] Adding definition: s21 -> OptionApply
[2020-07-30 19:06:19,39] [debug] Adding translation for t13: (Map(List(_2) -> s19, List(_1) -> s18, List(_3) -> s20, List(_4) -> s21), UnassignedType)
[2020-07-30 19:06:19,39] [debug] Flattened projection to
| Pure t13
|   value: StructNode
|     s18: Path s12.s14
|     s19: Path s12.s15
|     s20: OptionApply
|       0: Path s12.s16
|     s21: OptionApply
|       0: Path s12.s17

[2020-07-30 19:06:19,39] [debug] After phase flattenProjections:
| Bind : Vector[t13<{s18: String', s19: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s20: Option[Int'], s21: Option[Int']}>]
|   from s12: Bind : Vector[t11<{s14: String', s15: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s16: Int', s17: Int'}>]
|     from s7: Filter s8 : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       from s8: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<{s14: String', s15: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s16: Int', s17: Int'}>]
|       value: StructNode : {s14: String', s15: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s16: Int', s17: Int'}
|         s14: Path s7.DETRITUS_KEY : String'
|         s15: Path s7.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s16: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s17: Path s7.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|   select: Pure t13 : Vector[t13<{s18: String', s19: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s20: Option[Int'], s21: Option[Int']}>]
|     value: StructNode : {s18: String', s19: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s20: Option[Int'], s21: Option[Int']}
|       s18: Path s12.s14 : String'
|       s19: Path s12.s15 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s20: OptionApply : Option[Int']
|         0: Path s12.s16 : Int'
|       s21: OptionApply : Option[Int']
|         0: Path s12.s17 : Int'

[2020-07-30 19:06:19,39] [debug] Bind(s12) is aliasing. Merging Bind(s12, Bind(s7)) to Bind(s7)
[2020-07-30 19:06:19,39] [debug] After phase rewriteJoins:
| Bind : Vector[t13<{s18: String', s19: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s20: Option[Int'], s21: Option[Int']}>]
|   from s7: Filter s8 : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|     from s8: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t13 : Vector[t13<{s18: String', s19: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s20: Option[Int'], s21: Option[Int']}>]
|     value: StructNode : {s18: String', s19: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s20: Option[Int'], s21: Option[Int']}
|       s18: Path s7.DETRITUS_KEY : String'
|       s19: Path s7.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s20: OptionApply : Option[Int']
|         0: Path s7.CALL_CACHING_ENTRY_ID : Int'
|       s21: OptionApply : Option[Int']
|         0: Path s7.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:19,39] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:19,39] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:19,39] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:19,39] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:19,39] [debug] Unreferenced: t13; Field refs: (@t10,DETRITUS_VALUE), (@t10,CALL_CACHING_DETRITUS_ENTRY_ID), (@t10,DETRITUS_KEY), (@t10,CALL_CACHING_ENTRY_ID)
[2020-07-30 19:06:19,39] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:19,39] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:19,39] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:19,39] [debug] Creating mapping from t13<Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]>
[2020-07-30 19:06:19,39] [debug] Creating mapping from (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
[2020-07-30 19:06:19,39] [debug] Creating mapping from String'
[2020-07-30 19:06:19,39] [debug] Creating mapping from Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
[2020-07-30 19:06:19,39] [debug] Creating mapping from Option[Int']
[2020-07-30 19:06:19,40] [debug] Creating mapping from Option[Int']
[2020-07-30 19:06:19,40] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]]
|   from s22: Bind : Vector[t13<{s18: String', s19: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s20: Option[Int'], s21: Option[Int']}>]
|     from s7: Filter s8 : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       from s8: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t13 : Vector[t13<{s18: String', s19: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s20: Option[Int'], s21: Option[Int']}>]
|       value: StructNode : {s18: String', s19: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s20: Option[Int'], s21: Option[Int']}
|         s18: Path s7.DETRITUS_KEY : String'
|         s19: Path s7.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s20: OptionApply : Option[Int']
|           0: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s21: OptionApply : Option[Int']
|           0: Path s7.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|       1: Path s22.s18 : String'
|       2: Path s22.s19 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s22.s20 : Option[Int']
|       4: Path s22.s21 : Option[Int']

[2020-07-30 19:06:19,40] [debug] Hoisting operations from defs: s20, s21
[2020-07-30 19:06:19,40] [debug] New defs: Map(0 -> (Path s7.DETRITUS_KEY,s23), 1 -> (Path s7.DETRITUS_VALUE,s24), 2 -> (Path s7.CALL_CACHING_ENTRY_ID,s25), 3 -> (Path s7.CALL_CACHING_DETRITUS_ENTRY_ID,s26))
[2020-07-30 19:06:19,40] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]]
|   from s22: Bind : Vector[t27<{s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}>]
|     from s7: ...
|     select: Pure t27 : Vector[t27<{s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}>]
|       value: StructNode : {s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}
|         s23: Path s7.DETRITUS_KEY : String'
|         s24: Path s7.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s25: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s26: Path s7.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|       1: Path s22.s23 : String'
|       2: Path s22.s24 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: OptionApply : Option[Int']
|         0: Path s22.s25 : Int'
|       4: OptionApply : Option[Int']
|         0: Path s22.s26 : Int'

[2020-07-30 19:06:19,40] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]]
|   from s22: Bind : Vector[t27<{s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}>]
|     from s7: Filter s8 : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       from s8: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t27 : Vector[t27<{s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}>]
|       value: StructNode : {s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}
|         s23: Path s7.DETRITUS_KEY : String'
|         s24: Path s7.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s25: Path s7.CALL_CACHING_ENTRY_ID : Int'
|         s26: Path s7.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|       1: Path s22.s23 : String'
|       2: Path s22.s24 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: OptionApply : Option[Int']
|         0: Path s22.s25 : Int'
|       4: OptionApply : Option[Int']
|         0: Path s22.s26 : Int'

[2020-07-30 19:06:19,40] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:19,40] [debug] Table fields: Map(@t10 -> Vector(CALL_CACHING_ENTRY_ID, DETRITUS_KEY, DETRITUS_VALUE, CALL_CACHING_DETRITUS_ENTRY_ID))
[2020-07-30 19:06:19,40] [debug] Creating source from TableNode:
| Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]

[2020-07-30 19:06:19,40] [debug] Mappings are: ConstArray(((@t10,CALL_CACHING_ENTRY_ID),List(CALL_CACHING_ENTRY_ID)), ((@t10,DETRITUS_KEY),List(DETRITUS_KEY)), ((@t10,DETRITUS_VALUE),List(DETRITUS_VALUE)), ((@t10,CALL_CACHING_DETRITUS_ENTRY_ID),List(CALL_CACHING_DETRITUS_ENTRY_ID)))
[2020-07-30 19:06:19,40] [debug] Building new Comprehension from:
| Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]

[2020-07-30 19:06:19,40] [debug] Built new Comprehension:
| Comprehension s28, None, None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: Int', s31: String', s32: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s33: Int'}>]
|   from s28: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|   select: Pure t29 : Vector[t29<{s30: Int', s31: String', s32: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s33: Int'}>]
|     value: StructNode : {s30: Int', s31: String', s32: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s33: Int'}
|       s30: Path s28.CALL_CACHING_ENTRY_ID : Int'
|       s31: Path s28.DETRITUS_KEY : String'
|       s32: Path s28.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s33: Path s28.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:19,40] [debug] Replacements are: Map((@t10,CALL_CACHING_ENTRY_ID) -> s30, (@t10,DETRITUS_KEY) -> s31, (@t10,DETRITUS_VALUE) -> s32, (@t10,CALL_CACHING_DETRITUS_ENTRY_ID) -> s33)
[2020-07-30 19:06:19,40] [debug] Merging Filter into Comprehension:
| Filter s8 : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|   from s8: ...
|   where: Apply Function = : Boolean
|     0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,40] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: Int', s31: String', s32: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s33: Int'}>]
|   from s28: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|   select: Pure t29 : Vector[t29<{s30: Int', s31: String', s32: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s33: Int'}>]
|     value: StructNode : {s30: Int', s31: String', s32: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s33: Int'}
|       s30: Path s28.CALL_CACHING_ENTRY_ID : Int'
|       s31: Path s28.DETRITUS_KEY : String'
|       s32: Path s28.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s33: Path s28.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|   where: Apply Function = : Boolean
|     0: Path s28.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,40] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t27<{s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}>]
|   from s7: ...
|   select: Pure t27 : Vector[t27<{s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}>]
|     value: StructNode : {s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}
|       s23: Path s7.DETRITUS_KEY : String'
|       s24: Path s7.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s25: Path s7.CALL_CACHING_ENTRY_ID : Int'
|       s26: Path s7.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:19,40] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t27<{s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}>]
|   from s28: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|   select: Pure t27 : Vector[t27<{s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}>]
|     value: StructNode : {s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}
|       s23: Path s28.DETRITUS_KEY : String'
|       s24: Path s28.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       s25: Path s28.CALL_CACHING_ENTRY_ID : Int'
|       s26: Path s28.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|   where: Apply Function = : Boolean
|     0: Path s28.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,40] [debug] Replacements are: Map((t27,s23) -> s23, (t27,s24) -> s24, (t27,s25) -> s25, (t27,s26) -> s26)
[2020-07-30 19:06:19,40] [debug] Mappings are: ConstArray(((t27,s23),List(s23)), ((t27,s24),List(s24)), ((t27,s25),List(s25)), ((t27,s26),List(s26)))
[2020-07-30 19:06:19,40] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]]
|   from s22: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t27<{s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}>]
|     from s28: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|     select: Pure t27 : Vector[t27<{s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}>]
|       value: StructNode : {s23: String', s24: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], s25: Int', s26: Int'}
|         s23: Path s28.DETRITUS_KEY : String'
|         s24: Path s28.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         s25: Path s28.CALL_CACHING_ENTRY_ID : Int'
|         s26: Path s28.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|     where: Apply Function = : Boolean
|       0: Path s28.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|       1: Path s22.s23 : String'
|       2: Path s22.s24 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: OptionApply : Option[Int']
|         0: Path s22.s25 : Int'
|       4: OptionApply : Option[Int']
|         0: Path s22.s26 : Int'

[2020-07-30 19:06:19,40] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:19,40] [debug] Required symbols: s23 -> 0, s24 -> 1, s25 -> 2, s26 -> 3
[2020-07-30 19:06:19,40] [debug] Transformed RSM: 
| ResultSetMapping
|   from s22: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t27<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')>]
|     from s28: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|     select: Pure t27 : Vector[t27<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')>]
|       value: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')
|         1: Path s28.DETRITUS_KEY : String'
|         2: Path s28.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         3: Path s28.CALL_CACHING_ENTRY_ID : Int'
|         4: Path s28.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|     where: Apply Function = : Boolean
|       0: Path s28.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|       1: Path s22.s23 : String'
|       2: Path s22.s24 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: OptionApply : Option[Int']
|         0: Path s22.s25 : Int'
|       4: OptionApply : Option[Int']
|         0: Path s22.s26 : Int'

[2020-07-30 19:06:19,40] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]]
|   from s22: Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t27<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')>]
|     from s28: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|     select: Pure t27 : Vector[t27<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')>]
|       value: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')
|         1: Path s28.DETRITUS_KEY : String'
|         2: Path s28.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         3: Path s28.CALL_CACHING_ENTRY_ID : Int'
|         4: Path s28.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|     where: Apply Function = : Boolean
|       0: Path s28.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|       1: Path s22._1 : String'
|       2: Path s22._2 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: OptionApply : Option[Int']
|         0: Path s22._3 : Int'
|       4: OptionApply : Option[Int']
|         0: Path s22._4 : Int'

[2020-07-30 19:06:19,40] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:19,40] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:19,40] [debug] Compiling server-side and mapping with server-side:
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t27<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')>]
|   from s28: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t10<{DETRITUS_KEY: String', DETRITUS_VALUE: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_DETRITUS_ENTRY_ID: Int'}>]
|   select: Pure t27 : Vector[t27<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')>]
|     value: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')
|       1: Path s28.DETRITUS_KEY : String'
|       2: Path s28.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s28.CALL_CACHING_ENTRY_ID : Int'
|       4: Path s28.CALL_CACHING_DETRITUS_ENTRY_ID : Int'
|   where: Apply Function = : Boolean
|     0: Path s28.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,40] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|     3: OptionResultConverter$mcI$sp idx=3 : Int'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'

[2020-07-30 19:06:19,40] [debug] Compiled server-side to:
| CompiledStatement "select "DETRITUS_KEY", "DETRITUS_VALUE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_DETRITUS_ENTRY_ID" from "CALL_CACHING_DETRITUS_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?" : Vector[t27<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')>]

[2020-07-30 19:06:19,40] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]]
|   from s22: CompiledStatement "select "DETRITUS_KEY", "DETRITUS_VALUE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_DETRITUS_ENTRY_ID" from "CALL_CACHING_DETRITUS_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?" : Vector[t27<(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int', Int')>]
|   map: CompiledMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|         3: OptionResultConverter$mcI$sp idx=3 : Int'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'

[2020-07-30 19:06:19,40] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,40] [debug]       assignUniqueSymbols:    0.600945 ms
[2020-07-30 19:06:19,40] [debug]           unrollTailBinds:    0.071862 ms
[2020-07-30 19:06:19,40] [debug]                inferTypes:    0.142358 ms
[2020-07-30 19:06:19,40] [debug]              expandTables:    1.310859 ms
[2020-07-30 19:06:19,40] [debug]           forceOuterBinds:    0.629754 ms
[2020-07-30 19:06:19,40] [debug]         removeMappedTypes:    0.627704 ms
[2020-07-30 19:06:19,40] [debug]                expandSums:    2.158448 ms
[2020-07-30 19:06:19,40] [debug]             expandRecords:    0.707689 ms
[2020-07-30 19:06:19,40] [debug]        flattenProjections:    4.151371 ms
[2020-07-30 19:06:19,40] [debug]              rewriteJoins:    0.590206 ms
[2020-07-30 19:06:19,40] [debug]             verifySymbols:    0.091719 ms
[2020-07-30 19:06:19,40] [debug]             relabelUnions:    0.082752 ms
[2020-07-30 19:06:19,40] [debug]          createAggregates:    0.036834 ms
[2020-07-30 19:06:19,41] [debug]           resolveZipJoins:    0.058905 ms
[2020-07-30 19:06:19,41] [debug]          pruneProjections:    0.225130 ms
[2020-07-30 19:06:19,41] [debug]           rewriteDistinct:    0.067437 ms
[2020-07-30 19:06:19,41] [debug]    createResultSetMapping:    0.944299 ms
[2020-07-30 19:06:19,41] [debug]            hoistClientOps:    1.513488 ms
[2020-07-30 19:06:19,41] [debug]         reorderOperations:    0.111097 ms
[2020-07-30 19:06:19,41] [debug]     mergeToComprehensions:    3.352190 ms
[2020-07-30 19:06:19,41] [debug]            optimizeScalar:    0.103506 ms
[2020-07-30 19:06:19,41] [debug]          removeFieldNames:    1.447718 ms
[2020-07-30 19:06:19,41] [debug]      specializeParameters:    0.138447 ms
[2020-07-30 19:06:19,41] [debug]                   codeGen:    1.593474 ms
[2020-07-30 19:06:19,41] [debug]                     TOTAL:   20.758192 ms
[2020-07-30 19:06:19,41] [debug] #6: result [select "DETRITUS_KEY", "DETRITUS_VALUE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_DETRITUS_ENTRY_ID" from "CALL_CACHING_DETRITUS_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?]
[2020-07-30 19:06:19,41] [debug] Preparing statement: select "DETRITUS_KEY", "DETRITUS_VALUE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_DETRITUS_ENTRY_ID" from "CALL_CACHING_DETRITUS_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?
[2020-07-30 19:06:19,41] [debug] Executing prepared statement: HikariProxyPreparedStatement@635138786 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@415fc4a8[sql=[select "DETRITUS_KEY", "DETRITUS_VALUE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_DETRITUS_ENTRY_ID" from "CALL_CACHING_DETRITUS_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?], parameters=[[30]]]
[2020-07-30 19:06:19,41] [debug] Executing prepared statement: HikariProxyPreparedStatement@635138786 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@415fc4a8[sql=[select "DETRITUS_KEY", "DETRITUS_VALUE", "CALL_CACHING_ENTRY_ID", "CALL_CACHING_DETRITUS_ENTRY_ID" from "CALL_CACHING_DETRITUS_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?], parameters=[[30]]]
[2020-07-30 19:06:19,41] [debug] /-----\
[2020-07-30 19:06:19,41] [debug] | 1   |
[2020-07-30 19:06:19,41] [debug] | Int |
[2020-07-30 19:06:19,41] [debug] |-----|
[2020-07-30 19:06:19,41] [debug] | 30  |
[2020-07-30 19:06:19,41] [debug] \-----/
[2020-07-30 19:06:19,41] [debug] Execution of prepared statement took 342µs
[2020-07-30 19:06:19,41] [debug] /--------------+----------------------+----------------------+----------------------\
[2020-07-30 19:06:19,41] [debug] | 1            | 2                    | 3                    | 4                    |
[2020-07-30 19:06:19,41] [debug] | DETRITUS_KEY | DETRITUS_VALUE       | CALL_CACHING_ENTR... | CALL_CACHING_DETR... |
[2020-07-30 19:06:19,41] [debug] |--------------+----------------------+----------------------+----------------------|
[2020-07-30 19:06:19,41] [debug] | callRootPath | org.hsqldb.jdbc.J... | 30                   | 152                  |
[2020-07-30 19:06:19,41] [debug] | returnCode   | org.hsqldb.jdbc.J... | 30                   | 151                  |
[2020-07-30 19:06:19,41] [debug] | script       | org.hsqldb.jdbc.J... | 30                   | 154                  |
[2020-07-30 19:06:19,41] [debug] | stderr       | org.hsqldb.jdbc.J... | 30                   | 153                  |
[2020-07-30 19:06:19,41] [debug] | stdout       | org.hsqldb.jdbc.J... | 30                   | 150                  |
[2020-07-30 19:06:19,41] [debug] \--------------+----------------------+----------------------+----------------------/
[2020-07-30 19:06:19,41] [debug] #7: success Some(CallCachingJoin(CallCachingEntry(cc0ab3b6-9a6b-4a0b-b293-c103eaad343a,bamMergePreprocessing.splitStringToArray,-1,Some(1),Some(0),true,Some(30)),List(),None,Vector(CallCachingSimpletonEntry(intervalsList:intervalsList[0]:id,Some(javax.sql.rowset.serial.SerialClob@e3c48c44),String,Some(30),Some(105)), CallCachingSimpletonEntry(intervalsList:intervalsList[0]:intervalsList[0],Some(javax.sql.rowset.serial.SerialClob@e3c48c44),String,Some(30),Some(106)), CallCachingSimpletonEntry(intervalsList:intervalsList[1]:id,Some(javax.sql.rowset.serial.SerialClob@e3c49005),String,Some(30),Some(107)), CallCachingSimpletonEntry(intervalsList:intervalsList[1]:intervalsList[0],Some(javax.sql.rowset.serial.SerialClob@e3c49005),String,Some(30),Some(108)), CallCachingSimpletonEntry(intervalsList:intervalsList[2]:id,Some(javax.sql.rowset.serial.SerialClob@e3c493c6),String,Some(30),Some(109)), CallCachingSimpletonEntry(intervalsList:intervalsList[2]:intervalsList[0],Some(javax.sql.rowset.serial.SerialClob@e3c493c6),String,Some(30),Some(110))),Vector(CallCachingDetritusEntry(callRootPath,Some(javax.sql.rowset.serial.SerialClob@9cb4498b),Some(30),Some(152)), CallCachingDetritusEntry(returnCode,Some(javax.sql.rowset.serial.SerialClob@56d3c20a),Some(30),Some(151)), CallCachingDetritusEntry(script,Some(javax.sql.rowset.serial.SerialClob@2b07f9a4),Some(30),Some(154)), CallCachingDetritusEntry(stderr,Some(javax.sql.rowset.serial.SerialClob@9636937b),Some(30),Some(153)), CallCachingDetritusEntry(stdout,Some(javax.sql.rowset.serial.SerialClob@96c4e324),Some(30),Some(150)))))
[2020-07-30 19:06:19,41] [debug] #8: Commit
[2020-07-30 19:06:19,41] [debug] #9: SetTransactionIsolation
[2020-07-30 19:06:19,41] [debug] #10: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:19,47] [[38;5;220mwarn[0m] Localization via hard link has failed: /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/stdout -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stdout
[2020-07-30 19:06:19,48] [[38;5;220mwarn[0m] Localization via copy has failed: /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stdout
[2020-07-30 19:06:19,48] [[38;5;220mwarn[0m] Localization via hard link has failed: /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/rc -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/rc
[2020-07-30 19:06:19,48] [[38;5;220mwarn[0m] Localization via copy has failed: /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/rc
[2020-07-30 19:06:19,48] [[38;5;220mwarn[0m] Localization via hard link has failed: /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/stderr -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stderr
[2020-07-30 19:06:19,48] [[38;5;220mwarn[0m] Localization via copy has failed: /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stderr
[2020-07-30 19:06:19,48] [[38;5;220mwarn[0m] Localization via hard link has failed: /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/script -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/script
[2020-07-30 19:06:19,48] [[38;5;220mwarn[0m] Localization via copy has failed: /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/script
[INFO] [07/30/2020 19:06:19.492] [cromwell-system-akka.dispatchers.engine-dispatcher-31] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowExecutionActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1] 8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1 [UUID(8b168b0d)]: Failure copying cache results for job BackendJobDescriptorKey_CommandCallNode_bamMergePreprocessing.splitStringToArray:-1:1 (AggregatedException: :
Could not cache /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stdout -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/stdout:
	/home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stdout doesn't exist
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/stdout -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stdout
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stdout
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stdout
Could not cache /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/rc -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/rc:
	/home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/rc doesn't exist
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/rc -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/rc
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/rc
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/rc
Could not cache /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stderr -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/stderr:
	/home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stderr doesn't exist
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/stderr -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stderr
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stderr
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/stderr
Could not cache /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/script -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/script:
	/home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/script doesn't exist
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/cacheCopy/execution/script -> /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/script
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/script
	File not found /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/cc0ab3b6-9a6b-4a0b-b293-c103eaad343a/call-splitStringToArray/execution/script)
[WARN] [07/30/2020 19:06:19.492] [cromwell-system-akka.dispatchers.engine-dispatcher-31] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowExecutionActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1] 8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1 [UUID(8b168b0d)]: Invalidating cache entry CallCachingEntryId(30) (Cache entry details: Some(cc0ab3b6-9a6b-4a0b-b293-c103eaad343a:bamMergePreprocessing.splitStringToArray:-1))
[2020-07-30 19:06:19,49] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table CALL_CACHING_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s4.CALL_FULLY_QUALIFIED_NAME : String'
|           3: Path s4.JOB_INDEX : Int'
|           4: Path s4.JOB_ATTEMPT : Option[Int']
|           5: Path s4.RETURN_CODE : Option[Int']
|           6: Path s4.ALLOW_RESULT_REUSE : Boolean'
|           7: OptionApply
|             0: Path s4.CALL_CACHING_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s3.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t6
|     value: Path s2.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,49] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:19,49] [debug] After phase assignUniqueSymbols:
| Bind
|   from s7: Filter s8
|     from s8: TableExpansion
|       table s9: Table CALL_CACHING_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s9.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s9.CALL_FULLY_QUALIFIED_NAME : String'
|           3: Path s9.JOB_INDEX : Int'
|           4: Path s9.JOB_ATTEMPT : Option[Int']
|           5: Path s9.RETURN_CODE : Option[Int']
|           6: Path s9.ALLOW_RESULT_REUSE : Boolean'
|           7: OptionApply
|             0: Path s9.CALL_CACHING_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t11
|     value: Path s7.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,49] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:19,49] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,49] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.CALL_CACHING_ENTRY)
[2020-07-30 19:06:19,49] [debug] With correct table types:
| Bind : Vector[t11<Boolean'>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t11 : Vector[t11<Boolean'>]
|     value: Path s7.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,49] [debug] Table expansions: @t10 -> (s9,TypeMapping)
[2020-07-30 19:06:19,49] [debug] After phase expandTables:
| Bind : Vector[t11<Boolean'>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t11 : Vector[t11<Boolean'>]
|     value: Path s7.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,49] [debug] After phase forceOuterBinds:
| Bind : Vector[t11<Boolean'>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t11 : Vector[t11<Boolean'>]
|     value: Path s7.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,49] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:19,49] [debug] Translated type: Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>] -> Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
[2020-07-30 19:06:19,49] [debug] Translated type: @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}> -> @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
[2020-07-30 19:06:19,49] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,49] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,49] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,49] [debug] Translated type: Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>] -> Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
[2020-07-30 19:06:19,49] [debug] Translated type: @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}> -> @t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
[2020-07-30 19:06:19,49] [debug] Translated type: Boolean' -> Boolean'
[2020-07-30 19:06:19,49] [debug] Translated type: Vector[t11<Boolean'>] -> Vector[t11<Boolean'>]
[2020-07-30 19:06:19,49] [debug] Translated type: Vector[t11<Boolean'>] -> Vector[t11<Boolean'>]
[2020-07-30 19:06:19,49] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:19,50] [debug] After phase expandRecords:
| Bind : Vector[t11<Boolean'>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t11 : Vector[t11<Boolean'>]
|     value: Path s7.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,50] [debug] Analyzing s8.CALL_CACHING_ENTRY_ID with symbols 
| Path s8.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,50] [debug] Translated s8.CALL_CACHING_ENTRY_ID to:
| Path s8.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,50] [debug] Flattening projection t11
[2020-07-30 19:06:19,50] [debug] Analyzing s7.ALLOW_RESULT_REUSE with symbols 
| Path s7.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,50] [debug] Translated s7.ALLOW_RESULT_REUSE to:
| Path s7.ALLOW_RESULT_REUSE

[2020-07-30 19:06:19,50] [debug] Flattening node at Path 
| Path s7.ALLOW_RESULT_REUSE

[2020-07-30 19:06:19,50] [debug] Adding definition: s12 -> Path s7.ALLOW_RESULT_REUSE
[2020-07-30 19:06:19,50] [debug] Adding translation for t11: (Map(List() -> s12), UnassignedType)
[2020-07-30 19:06:19,50] [debug] Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.ALLOW_RESULT_REUSE

[2020-07-30 19:06:19,50] [debug] After phase flattenProjections:
| Bind : Vector[t11<{s12: Boolean'}>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     where: Apply Function = : Boolean
|       0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   select: Pure t11 : Vector[t11<{s12: Boolean'}>]
|     value: StructNode : {s12: Boolean'}
|       s12: Path s7.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,50] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:19,50] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:19,50] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:19,50] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:19,50] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:19,50] [debug] Unreferenced: t11; Field refs: (@t10,CALL_CACHING_ENTRY_ID), (@t10,ALLOW_RESULT_REUSE)
[2020-07-30 19:06:19,50] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:19,50] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:19,50] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:19,50] [debug] Creating mapping from t11<Boolean'>
[2020-07-30 19:06:19,50] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Boolean']
|   from s13: Bind : Vector[t11<{s12: Boolean'}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t11 : Vector[t11<{s12: Boolean'}>]
|       value: StructNode : {s12: Boolean'}
|         s12: Path s7.ALLOW_RESULT_REUSE : Boolean'
|   map: Path s13.s12 : Boolean'

[2020-07-30 19:06:19,50] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:19,50] [debug] New defs: Map(0 -> (Path s7.ALLOW_RESULT_REUSE,s14))
[2020-07-30 19:06:19,50] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Boolean']
|   from s13: Bind : Vector[t15<{s14: Boolean'}>]
|     from s7: ...
|     select: Pure t15 : Vector[t15<{s14: Boolean'}>]
|       value: StructNode : {s14: Boolean'}
|         s14: Path s7.ALLOW_RESULT_REUSE : Boolean'
|   map: Path s13.s14 : Boolean'

[2020-07-30 19:06:19,50] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Boolean']
|   from s13: Bind : Vector[t15<{s14: Boolean'}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       from s8: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       where: Apply Function = : Boolean
|         0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|     select: Pure t15 : Vector[t15<{s14: Boolean'}>]
|       value: StructNode : {s14: Boolean'}
|         s14: Path s7.ALLOW_RESULT_REUSE : Boolean'
|   map: Path s13.s14 : Boolean'

[2020-07-30 19:06:19,50] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:19,50] [debug] Table fields: Map(@t10 -> Vector(CALL_CACHING_ENTRY_ID, ALLOW_RESULT_REUSE))
[2020-07-30 19:06:19,50] [debug] Creating source from TableNode:
| Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]

[2020-07-30 19:06:19,50] [debug] Mappings are: ConstArray(((@t10,CALL_CACHING_ENTRY_ID),List(CALL_CACHING_ENTRY_ID)), ((@t10,ALLOW_RESULT_REUSE),List(ALLOW_RESULT_REUSE)))
[2020-07-30 19:06:19,50] [debug] Building new Comprehension from:
| Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]

[2020-07-30 19:06:19,50] [debug] Built new Comprehension:
| Comprehension s16, None, None, ConstArray(), None, None, None, None, false : Vector[t17<{s18: Int', s19: Boolean'}>]
|   from s16: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   select: Pure t17 : Vector[t17<{s18: Int', s19: Boolean'}>]
|     value: StructNode : {s18: Int', s19: Boolean'}
|       s18: Path s16.CALL_CACHING_ENTRY_ID : Int'
|       s19: Path s16.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,50] [debug] Replacements are: Map((@t10,CALL_CACHING_ENTRY_ID) -> s18, (@t10,ALLOW_RESULT_REUSE) -> s19)
[2020-07-30 19:06:19,50] [debug] Merging Filter into Comprehension:
| Filter s8 : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   from s8: ...
|   where: Apply Function = : Boolean
|     0: Path s8.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,50] [debug] Merged Filter into Comprehension:
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t17<{s18: Int', s19: Boolean'}>]
|   from s16: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   select: Pure t17 : Vector[t17<{s18: Int', s19: Boolean'}>]
|     value: StructNode : {s18: Int', s19: Boolean'}
|       s18: Path s16.CALL_CACHING_ENTRY_ID : Int'
|       s19: Path s16.ALLOW_RESULT_REUSE : Boolean'
|   where: Apply Function = : Boolean
|     0: Path s16.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,50] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t15<{s14: Boolean'}>]
|   from s7: ...
|   select: Pure t15 : Vector[t15<{s14: Boolean'}>]
|     value: StructNode : {s14: Boolean'}
|       s14: Path s7.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,50] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<{s14: Boolean'}>]
|   from s16: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   select: Pure t15 : Vector[t15<{s14: Boolean'}>]
|     value: StructNode : {s14: Boolean'}
|       s14: Path s16.ALLOW_RESULT_REUSE : Boolean'
|   where: Apply Function = : Boolean
|     0: Path s16.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,50] [debug] Replacements are: Map((t15,s14) -> s14)
[2020-07-30 19:06:19,50] [debug] Mappings are: ConstArray(((t15,s14),List(s14)))
[2020-07-30 19:06:19,50] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Boolean']
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<{s14: Boolean'}>]
|     from s16: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     select: Pure t15 : Vector[t15<{s14: Boolean'}>]
|       value: StructNode : {s14: Boolean'}
|         s14: Path s16.ALLOW_RESULT_REUSE : Boolean'
|     where: Apply Function = : Boolean
|       0: Path s16.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: Path s13.s14 : Boolean'

[2020-07-30 19:06:19,50] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:19,50] [debug] Required symbols: s14 -> 0
[2020-07-30 19:06:19,50] [debug] Transformed RSM: 
| ResultSetMapping
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(Boolean')>]
|     from s16: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     select: Pure t15 : Vector[t15<(Boolean')>]
|       value: ProductNode : (Boolean')
|         1: Path s16.ALLOW_RESULT_REUSE : Boolean'
|     where: Apply Function = : Boolean
|       0: Path s16.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: Path s13.s14 : Boolean'

[2020-07-30 19:06:19,50] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Boolean']
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(Boolean')>]
|     from s16: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     select: Pure t15 : Vector[t15<(Boolean')>]
|       value: ProductNode : (Boolean')
|         1: Path s16.ALLOW_RESULT_REUSE : Boolean'
|     where: Apply Function = : Boolean
|       0: Path s16.CALL_CACHING_ENTRY_ID : Int'
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'
|   map: Path s13._1 : Boolean'

[2020-07-30 19:06:19,50] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:19,50] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:19,50] [debug] Compiling server-side and mapping with server-side:
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(Boolean')>]
|   from s16: Table CALL_CACHING_ENTRY : Vector[@t10<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   select: Pure t15 : Vector[t15<(Boolean')>]
|     value: ProductNode : (Boolean')
|       1: Path s16.ALLOW_RESULT_REUSE : Boolean'
|   where: Apply Function = : Boolean
|     0: Path s16.CALL_CACHING_ENTRY_ID : Int'
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : Int'

[2020-07-30 19:06:19,50] [debug] Compiled ResultConverter
| BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

[2020-07-30 19:06:19,50] [debug] Compiled server-side to:
| CompiledStatement "update "CALL_CACHING_ENTRY" set "ALLOW_RESULT_REUSE" = ? where "CALL_CACHING_ENTRY"."CALL_CACHING_ENTRY_ID" = ?" : Vector[t15<(Boolean')>]

[2020-07-30 19:06:19,50] [debug] After phase codeGen:
| ResultSetMapping : Vector[Boolean']
|   from s13: CompiledStatement "update "CALL_CACHING_ENTRY" set "ALLOW_RESULT_REUSE" = ? where "CALL_CACHING_ENTRY"."CALL_CACHING_ENTRY_ID" = ?" : Vector[t15<(Boolean')>]
|   map: CompiledMapping : Boolean'
|     converter: BaseResultConverter$mcZ$sp idx=1, name=<computed> : Boolean'

[2020-07-30 19:06:19,50] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,50] [debug]       assignUniqueSymbols:    0.748292 ms
[2020-07-30 19:06:19,50] [debug]           unrollTailBinds:    0.091230 ms
[2020-07-30 19:06:19,50] [debug]                inferTypes:    0.173515 ms
[2020-07-30 19:06:19,50] [debug]              expandTables:    1.211058 ms
[2020-07-30 19:06:19,50] [debug]           forceOuterBinds:    0.343130 ms
[2020-07-30 19:06:19,50] [debug]         removeMappedTypes:    0.111119 ms
[2020-07-30 19:06:19,50] [debug]                expandSums:    0.639843 ms
[2020-07-30 19:06:19,50] [debug]             expandRecords:    0.335956 ms
[2020-07-30 19:06:19,50] [debug]        flattenProjections:    1.091120 ms
[2020-07-30 19:06:19,50] [debug]              rewriteJoins:    0.071339 ms
[2020-07-30 19:06:19,50] [debug]             verifySymbols:    0.066309 ms
[2020-07-30 19:06:19,50] [debug]             relabelUnions:    0.064833 ms
[2020-07-30 19:06:19,50] [debug]          createAggregates:    0.037134 ms
[2020-07-30 19:06:19,50] [debug]           resolveZipJoins:    0.054260 ms
[2020-07-30 19:06:19,50] [debug]          pruneProjections:    0.201795 ms
[2020-07-30 19:06:19,50] [debug]           rewriteDistinct:    0.058255 ms
[2020-07-30 19:06:19,51] [debug]    createResultSetMapping:    0.421295 ms
[2020-07-30 19:06:19,51] [debug]            hoistClientOps:    0.985215 ms
[2020-07-30 19:06:19,51] [debug]         reorderOperations:    0.077928 ms
[2020-07-30 19:06:19,51] [debug]     mergeToComprehensions:    3.102658 ms
[2020-07-30 19:06:19,51] [debug]            optimizeScalar:    0.081596 ms
[2020-07-30 19:06:19,51] [debug]          removeFieldNames:    1.031649 ms
[2020-07-30 19:06:19,51] [debug]      specializeParameters:    0.138580 ms
[2020-07-30 19:06:19,51] [debug]                   codeGen:    1.141912 ms
[2020-07-30 19:06:19,51] [debug]                     TOTAL:   12.280021 ms
[2020-07-30 19:06:19,51] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:19,51] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:19,51] [debug] #3: StartTransaction
[2020-07-30 19:06:19,51] [debug] #4: update [update "CALL_CACHING_ENTRY" set "ALLOW_RESULT_REUSE" = ? where "CALL_CACHING_ENTRY"."CALL_CACHING_ENTRY_ID" = ?]
[2020-07-30 19:06:19,51] [debug] Preparing statement: update "CALL_CACHING_ENTRY" set "ALLOW_RESULT_REUSE" = ? where "CALL_CACHING_ENTRY"."CALL_CACHING_ENTRY_ID" = ?
[2020-07-30 19:06:19,51] [debug] Executing prepared update: HikariProxyPreparedStatement@472719726 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7fc119f6[sql=[update "CALL_CACHING_ENTRY" set "ALLOW_RESULT_REUSE" = ? where "CALL_CACHING_ENTRY"."CALL_CACHING_ENTRY_ID" = ?], parameters=[[false], [30]]]
[2020-07-30 19:06:19,51] [debug] Executing prepared update: HikariProxyPreparedStatement@472719726 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7fc119f6[sql=[update "CALL_CACHING_ENTRY" set "ALLOW_RESULT_REUSE" = ? where "CALL_CACHING_ENTRY"."CALL_CACHING_ENTRY_ID" = ?], parameters=[[false], [30]]]
[2020-07-30 19:06:19,51] [debug] /---------+-----\
[2020-07-30 19:06:19,51] [debug] | 1       | 2   |
[2020-07-30 19:06:19,51] [debug] | Boolean | Int |
[2020-07-30 19:06:19,51] [debug] |---------+-----|
[2020-07-30 19:06:19,51] [debug] | false   | 30  |
[2020-07-30 19:06:19,51] [debug] \---------+-----/
[2020-07-30 19:06:19,51] [debug] Execution of prepared update took 284µs
[2020-07-30 19:06:19,51] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "WORKFLOW_EXECUTION_UUID", "CALL_FULLY_QUALIFIED_NAME", "JOB_INDEX", "JOB_ATTEMPT", "RETURN_CODE", "ALLOW_RESULT_REUSE", "CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?]
[2020-07-30 19:06:19,51] [debug] Preparing statement: select "WORKFLOW_EXECUTION_UUID", "CALL_FULLY_QUALIFIED_NAME", "JOB_INDEX", "JOB_ATTEMPT", "RETURN_CODE", "ALLOW_RESULT_REUSE", "CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?
[2020-07-30 19:06:19,51] [debug] Executing prepared statement: HikariProxyPreparedStatement@1661663079 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@27cd0ff[sql=[select "WORKFLOW_EXECUTION_UUID", "CALL_FULLY_QUALIFIED_NAME", "JOB_INDEX", "JOB_ATTEMPT", "RETURN_CODE", "ALLOW_RESULT_REUSE", "CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?], parameters=[[30]]]
[2020-07-30 19:06:19,51] [debug] Executing prepared statement: HikariProxyPreparedStatement@1661663079 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@27cd0ff[sql=[select "WORKFLOW_EXECUTION_UUID", "CALL_FULLY_QUALIFIED_NAME", "JOB_INDEX", "JOB_ATTEMPT", "RETURN_CODE", "ALLOW_RESULT_REUSE", "CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" where "CALL_CACHING_ENTRY_ID" = ?], parameters=[[30]]]
[2020-07-30 19:06:19,51] [debug] /-----\
[2020-07-30 19:06:19,51] [debug] | 1   |
[2020-07-30 19:06:19,51] [debug] | Int |
[2020-07-30 19:06:19,51] [debug] |-----|
[2020-07-30 19:06:19,51] [debug] | 30  |
[2020-07-30 19:06:19,51] [debug] \-----/
[2020-07-30 19:06:19,51] [debug] Execution of prepared statement took 93µs
[2020-07-30 19:06:19,51] [debug] /----------------------+----------------------+-----------+-------------+-------------+--------------------+----------------------\
[2020-07-30 19:06:19,51] [debug] | 1                    | 2                    | 3         | 4           | 5           | 6                  | 7                    |
[2020-07-30 19:06:19,51] [debug] | WORKFLOW_EXECUTIO... | CALL_FULLY_QUALIF... | JOB_INDEX | JOB_ATTEMPT | RETURN_CODE | ALLOW_RESULT_REUSE | CALL_CACHING_ENTR... |
[2020-07-30 19:06:19,51] [debug] |----------------------+----------------------+-----------+-------------+-------------+--------------------+----------------------|
[2020-07-30 19:06:19,51] [debug] | cc0ab3b6-9a6b-4a0... | bamMergePreproces... | -1        | 1           | 0           | false              | 30                   |
[2020-07-30 19:06:19,51] [debug] \----------------------+----------------------+-----------+-------------+-------------+--------------------+----------------------/
[2020-07-30 19:06:19,51] [debug] #6: success Some(CallCachingEntry(cc0ab3b6-9a6b-4a0b-b293-c103eaad343a,bamMergePreprocessing.splitStringToArray,-1,Some(1),Some(0),false,Some(30)))
[2020-07-30 19:06:19,51] [debug] #7: Commit
[2020-07-30 19:06:19,52] [debug] #8: SetTransactionIsolation
[2020-07-30 19:06:19,52] [debug] #9: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:19,52] [debug] Source:
| Take
|   from: Drop
|     from: Bind
|       from s2: Filter s3
|         from s3: TableExpansion
|           table s4: Table CALL_CACHING_ENTRY
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s4.WORKFLOW_EXECUTION_UUID : String'
|               2: Path s4.CALL_FULLY_QUALIFIED_NAME : String'
|               3: Path s4.JOB_INDEX : Int'
|               4: Path s4.JOB_ATTEMPT : Option[Int']
|               5: Path s4.RETURN_CODE : Option[Int']
|               6: Path s4.ALLOW_RESULT_REUSE : Boolean'
|               7: OptionApply
|                 0: Path s4.CALL_CACHING_ENTRY_ID : Int'
|         where: Path s3.ALLOW_RESULT_REUSE : Boolean'
|       select: Bind
|         from s5: Filter s6
|           from s6: Filter s7
|             from s7: Filter s8
|               from s8: TableExpansion
|                 table s9: Table CALL_CACHING_AGGREGATION_ENTRY
|                 columns: TypeMapping
|                   0: ProductNode
|                     1: Path s9.BASE_AGGREGATION : String'
|                     2: Path s9.INPUT_FILES_AGGREGATION : Option[String']
|                     3: OptionApply
|                       0: Path s9.CALL_CACHING_ENTRY_ID : Int'
|                     4: OptionApply
|                       0: Path s9.CALL_CACHING_AGGREGATION_ENTRY_ID : Int'
|               where: Apply Function =
|                 0: Path s2.CALL_CACHING_ENTRY_ID : Int'
|                 1: Path s8.CALL_CACHING_ENTRY_ID : Int'
|             where: Apply Function =
|               0: Path s7.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false)
|           where: Apply Function or
|             0: Apply Function and
|               0: OptionFold
|                 from s10: Path s6.INPUT_FILES_AGGREGATION : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false)
|                 map: LiteralNode false (volatileHint=false)
|               1: OptionFold
|                 from s11: LiteralNode None (volatileHint=false)
|                 ifEmpty: LiteralNode true (volatileHint=false)
|                 map: LiteralNode false (volatileHint=false)
|             1: Apply Function =
|               0: Path s6.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false)
|         select: Pure t12
|           value: Path s5.CALL_CACHING_ENTRY_ID : Int'
|     count: LiteralNode 1 (volatileHint=false)
|   count: LiteralNode 1 (volatileHint=false)

[2020-07-30 19:06:19,52] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:19,52] [debug] After phase assignUniqueSymbols:
| Take
|   from: Drop
|     from: Bind
|       from s13: Filter s14
|         from s14: TableExpansion
|           table s15: Table CALL_CACHING_ENTRY
|           columns: TypeMapping
|             0: ProductNode
|               1: Path s15.WORKFLOW_EXECUTION_UUID : String'
|               2: Path s15.CALL_FULLY_QUALIFIED_NAME : String'
|               3: Path s15.JOB_INDEX : Int'
|               4: Path s15.JOB_ATTEMPT : Option[Int']
|               5: Path s15.RETURN_CODE : Option[Int']
|               6: Path s15.ALLOW_RESULT_REUSE : Boolean'
|               7: OptionApply
|                 0: Path s15.CALL_CACHING_ENTRY_ID : Int'
|         where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|       select: Bind
|         from s17: Filter s18
|           from s18: Filter s19
|             from s19: Filter s20
|               from s20: TableExpansion
|                 table s21: Table CALL_CACHING_AGGREGATION_ENTRY
|                 columns: TypeMapping
|                   0: ProductNode
|                     1: Path s21.BASE_AGGREGATION : String'
|                     2: Path s21.INPUT_FILES_AGGREGATION : Option[String']
|                     3: OptionApply
|                       0: Path s21.CALL_CACHING_ENTRY_ID : Int'
|                     4: OptionApply
|                       0: Path s21.CALL_CACHING_AGGREGATION_ENTRY_ID : Int'
|               where: Apply Function =
|                 0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                 1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|             where: Apply Function =
|               0: Path s19.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false)
|           where: Apply Function or
|             0: Apply Function and
|               0: OptionFold
|                 from s23: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false)
|                 map: LiteralNode false (volatileHint=false)
|               1: OptionFold
|                 from s24: LiteralNode None (volatileHint=false)
|                 ifEmpty: LiteralNode true (volatileHint=false)
|                 map: LiteralNode false (volatileHint=false)
|             1: Apply Function =
|               0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false)
|         select: Pure t25
|           value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|     count: LiteralNode 1 (volatileHint=false)
|   count: LiteralNode 1 (volatileHint=false)

[2020-07-30 19:06:19,52] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:19,52] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,53] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.CALL_CACHING_ENTRY), @(slick.jdbc.HsqldbProfile$._.CALL_CACHING_AGGREGATION_ENTRY)
[2020-07-30 19:06:19,53] [debug] With correct table types:
| Take : Vector[t25<Int'>]
|   from: Drop : Vector[t25<Int'>]
|     from: Bind : Vector[t25<Int'>]
|       from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|         from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|         where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|       select: Bind : Vector[t25<Int'>]
|         from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               where: Apply Function = : Boolean
|                 0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                 1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|             where: Apply Function = : Boolean
|               0: Path s19.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|           where: Apply Function or : SOption[Boolean]
|             0: Apply Function and : Boolean
|               0: OptionFold : Boolean
|                 from s23: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                 map: LiteralNode false (volatileHint=false) : Boolean
|               1: OptionFold : Boolean
|                 from s24: LiteralNode None (volatileHint=false) : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                 map: LiteralNode false (volatileHint=false) : Boolean
|             1: Apply Function = : SOption[Boolean]
|               0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false) : Option[String']
|         select: Pure t25 : Vector[t25<Int'>]
|           value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|     count: LiteralNode 1 (volatileHint=false) : Long
|   count: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,53] [debug] Table expansions: @t22 -> (s21,TypeMapping), @t16 -> (s15,TypeMapping)
[2020-07-30 19:06:19,53] [debug] After phase expandTables:
| Take : Vector[t25<Int'>]
|   from: Drop : Vector[t25<Int'>]
|     from: Bind : Vector[t25<Int'>]
|       from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|         from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|         where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|       select: Bind : Vector[t25<Int'>]
|         from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               where: Apply Function = : Boolean
|                 0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                 1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|             where: Apply Function = : Boolean
|               0: Path s19.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|           where: Apply Function or : SOption[Boolean]
|             0: Apply Function and : Boolean
|               0: OptionFold : Boolean
|                 from s23: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                 map: LiteralNode false (volatileHint=false) : Boolean
|               1: OptionFold : Boolean
|                 from s24: LiteralNode None (volatileHint=false) : Option[String']
|                 ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                 map: LiteralNode false (volatileHint=false) : Boolean
|             1: Apply Function = : SOption[Boolean]
|               0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false) : Option[String']
|         select: Pure t25 : Vector[t25<Int'>]
|           value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|     count: LiteralNode 1 (volatileHint=false) : Long
|   count: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,53] [debug] Introducing new Bind s26 for Take
[2020-07-30 19:06:19,53] [debug] After phase forceOuterBinds:
| Bind : Vector[t27<t25<Int'>>]
|   from s26: Take : Vector[t25<Int'>]
|     from: Drop : Vector[t25<Int'>]
|       from: Bind : Vector[t25<Int'>]
|         from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|         select: Bind : Vector[t25<Int'>]
|           from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|               where: Apply Function = : Boolean
|                 0: Path s19.BASE_AGGREGATION : String'
|                 1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|             where: Apply Function or : SOption[Boolean]
|               0: Apply Function and : Boolean
|                 0: OptionFold : Boolean
|                   from s23: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                   ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                   map: LiteralNode false (volatileHint=false) : Boolean
|                 1: OptionFold : Boolean
|                   from s24: LiteralNode None (volatileHint=false) : Option[String']
|                   ifEmpty: LiteralNode true (volatileHint=false) : Boolean
|                   map: LiteralNode false (volatileHint=false) : Boolean
|               1: Apply Function = : SOption[Boolean]
|                 0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<Int'>]
|             value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|       count: LiteralNode 1 (volatileHint=false) : Long
|     count: LiteralNode 1 (volatileHint=false) : Long
|   select: Pure t27 : Vector[t27<t25<Int'>>]
|     value: Ref s26 : t25<Int'>

[2020-07-30 19:06:19,53] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>] -> Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
[2020-07-30 19:06:19,53] [debug] Translated type: @t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}> -> @t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
[2020-07-30 19:06:19,53] [debug] Translated type: Boolean' -> Boolean'
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>] -> Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,53] [debug] Translated type: @t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}> -> @t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>
[2020-07-30 19:06:19,53] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,53] [debug] Translated type: @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,53] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,53] [debug] Translated type: @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,53] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,53] [debug] Translated type: String' -> String'
[2020-07-30 19:06:19,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,53] [debug] Translated type: @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,53] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:19,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,53] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:19,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:19,53] [debug] Translated type: @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,53] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:19,53] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:19,53] [debug] Translated type: SOption[Boolean] -> SOption[Boolean]
[2020-07-30 19:06:19,53] [debug] Translated type: SOption[Boolean] -> SOption[Boolean]
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>] -> Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
[2020-07-30 19:06:19,53] [debug] Translated type: @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}> -> @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>
[2020-07-30 19:06:19,53] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[t25<Int'>] -> Vector[t25<Int'>]
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[t25<Int'>] -> Vector[t25<Int'>]
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[t25<Int'>] -> Vector[t25<Int'>]
[2020-07-30 19:06:19,53] [debug] Translated type: Long -> Long
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[t25<Int'>] -> Vector[t25<Int'>]
[2020-07-30 19:06:19,53] [debug] Translated type: Long -> Long
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[t25<Int'>] -> Vector[t25<Int'>]
[2020-07-30 19:06:19,53] [debug] Translated type: t25<Int'> -> t25<Int'>
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[t27<t25<Int'>>] -> Vector[t27<t25<Int'>>]
[2020-07-30 19:06:19,53] [debug] Translated type: Vector[t27<t25<Int'>>] -> Vector[t27<t25<Int'>>]
[2020-07-30 19:06:19,53] [debug] After phase expandSums:
| Bind : Vector[t27<t25<Int'>>]
|   from s26: Take : Vector[t25<Int'>]
|     from: Drop : Vector[t25<Int'>]
|       from: Bind : Vector[t25<Int'>]
|         from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|         select: Bind : Vector[t25<Int'>]
|           from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|               where: Apply Function = : Boolean
|                 0: Path s19.BASE_AGGREGATION : String'
|                 1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|             where: Apply Function or : SOption[Boolean]
|               0: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|                 1: Apply Function = : Boolean
|                   0: LiteralNode None (volatileHint=false) : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : SOption[Boolean]
|                 0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<Int'>]
|             value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|       count: LiteralNode 1 (volatileHint=false) : Long
|     count: LiteralNode 1 (volatileHint=false) : Long
|   select: Pure t27 : Vector[t27<t25<Int'>>]
|     value: Ref s26 : t25<Int'>

[2020-07-30 19:06:19,53] [debug] After phase expandRecords:
| Bind : Vector[t27<t25<Int'>>]
|   from s26: Take : Vector[t25<Int'>]
|     from: Drop : Vector[t25<Int'>]
|       from: Bind : Vector[t25<Int'>]
|         from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|         select: Bind : Vector[t25<Int'>]
|           from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|               where: Apply Function = : Boolean
|                 0: Path s19.BASE_AGGREGATION : String'
|                 1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|             where: Apply Function or : SOption[Boolean]
|               0: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|                 1: Apply Function = : Boolean
|                   0: LiteralNode None (volatileHint=false) : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : SOption[Boolean]
|                 0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<Int'>]
|             value: Path s17.CALL_CACHING_ENTRY_ID : Int'
|       count: LiteralNode 1 (volatileHint=false) : Long
|     count: LiteralNode 1 (volatileHint=false) : Long
|   select: Pure t27 : Vector[t27<t25<Int'>>]
|     value: Ref s26 : t25<Int'>

[2020-07-30 19:06:19,53] [debug] Analyzing s14.ALLOW_RESULT_REUSE with symbols 
| Path s14.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:19,53] [debug] Translated s14.ALLOW_RESULT_REUSE to:
| Path s14.ALLOW_RESULT_REUSE

[2020-07-30 19:06:19,53] [debug] Analyzing s13.CALL_CACHING_ENTRY_ID with symbols 
| Path s13.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,53] [debug] Translated s13.CALL_CACHING_ENTRY_ID to:
| Path s13.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,53] [debug] Analyzing s20.CALL_CACHING_ENTRY_ID with symbols 
| Path s20.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,53] [debug] Translated s20.CALL_CACHING_ENTRY_ID to:
| Path s20.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,53] [debug] Analyzing s19.BASE_AGGREGATION with symbols 
| Path s19.BASE_AGGREGATION : String'

[2020-07-30 19:06:19,53] [debug] Translated s19.BASE_AGGREGATION to:
| Path s19.BASE_AGGREGATION

[2020-07-30 19:06:19,53] [debug] Analyzing s18.INPUT_FILES_AGGREGATION with symbols 
| Path s18.INPUT_FILES_AGGREGATION : Option[String']

[2020-07-30 19:06:19,53] [debug] Translated s18.INPUT_FILES_AGGREGATION to:
| Path s18.INPUT_FILES_AGGREGATION

[2020-07-30 19:06:19,53] [debug] Analyzing s18.INPUT_FILES_AGGREGATION with symbols 
| Path s18.INPUT_FILES_AGGREGATION : Option[String']

[2020-07-30 19:06:19,54] [debug] Translated s18.INPUT_FILES_AGGREGATION to:
| Path s18.INPUT_FILES_AGGREGATION

[2020-07-30 19:06:19,54] [debug] Flattening projection t25
[2020-07-30 19:06:19,54] [debug] Analyzing s17.CALL_CACHING_ENTRY_ID with symbols 
| Path s17.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,54] [debug] Translated s17.CALL_CACHING_ENTRY_ID to:
| Path s17.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,54] [debug] Flattening node at Path 
| Path s17.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,54] [debug] Adding definition: s28 -> Path s17.CALL_CACHING_ENTRY_ID
[2020-07-30 19:06:19,54] [debug] Adding translation for t25: (Map(List() -> s28), UnassignedType)
[2020-07-30 19:06:19,54] [debug] Flattened projection to
| Pure t25
|   value: StructNode
|     s28: Path s17.CALL_CACHING_ENTRY_ID

[2020-07-30 19:06:19,54] [debug] Flattening projection t27
[2020-07-30 19:06:19,54] [debug] Analyzing s26 with symbols t25
| Ref s26 : t25<Int'>

[2020-07-30 19:06:19,54] [debug] Found s26 with local part Path  over t25
[2020-07-30 19:06:19,54] [debug]   Translation for t25: Map(List() -> s28)
[2020-07-30 19:06:19,54] [debug] Translated s26 to:
| Path s26.s28

[2020-07-30 19:06:19,54] [debug] Flattening node at Path 
| Path s26.s28

[2020-07-30 19:06:19,54] [debug] Adding definition: s29 -> Path s26.s28
[2020-07-30 19:06:19,54] [debug] Adding translation for t27: (Map(List() -> s29), UnassignedType)
[2020-07-30 19:06:19,54] [debug] Flattened projection to
| Pure t27
|   value: StructNode
|     s29: Path s26.s28

[2020-07-30 19:06:19,54] [debug] After phase flattenProjections:
| Bind : Vector[t27<{s29: Int'}>]
|   from s26: Take : Vector[t25<{s28: Int'}>]
|     from: Drop : Vector[t25<{s28: Int'}>]
|       from: Bind : Vector[t25<{s28: Int'}>]
|         from s13: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|         select: Bind : Vector[t25<{s28: Int'}>]
|           from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             from s18: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|               from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|                 where: Apply Function = : Boolean
|                   0: Path s13.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|               where: Apply Function = : Boolean
|                 0: Path s19.BASE_AGGREGATION : String'
|                 1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|             where: Apply Function or : SOption[Boolean]
|               0: Apply Function and : Boolean
|                 0: Apply Function = : Boolean
|                   0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|                 1: Apply Function = : Boolean
|                   0: LiteralNode None (volatileHint=false) : Option[String']
|                   1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : SOption[Boolean]
|                 0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<{s28: Int'}>]
|             value: StructNode : {s28: Int'}
|               s28: Path s17.CALL_CACHING_ENTRY_ID : Int'
|       count: LiteralNode 1 (volatileHint=false) : Long
|     count: LiteralNode 1 (volatileHint=false) : Long
|   select: Pure t27 : Vector[t27<{s29: Int'}>]
|     value: StructNode : {s29: Int'}
|       s29: Path s26.s28 : Int'

[2020-07-30 19:06:19,54] [debug] Hoisting flatMapped Filter from:
| Bind : Vector[t25<{s28: Int'}>]
|   from s13: ...
|   select: Bind : Vector[t25<{s28: Int'}>]
|     from s17: Filter s18 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       from s18: ...
|       where: Apply Function or : SOption[Boolean]
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : Boolean
|             0: LiteralNode None (volatileHint=false) : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : SOption[Boolean]
|           0: Path s18.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode None (volatileHint=false) : Option[String']
|     select: Pure t25 : Vector[t25<{s28: Int'}>]
|       value: StructNode : {s28: Int'}
|         s28: Path s17.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,54] [debug] Hoisting join filters from:
| Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s30: Filter s14 : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     from s14: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     where: Path s14.ALLOW_RESULT_REUSE : Boolean'
|   right s31: Filter s19 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     from s19: Filter s20 : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       from s20: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       where: Apply Function = : Boolean
|         0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|         1: Path s20.CALL_CACHING_ENTRY_ID : Int'
|     where: Apply Function = : Boolean
|       0: Path s19.BASE_AGGREGATION : String'
|       1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|   on: Apply Function or : SOption[Boolean]
|     0: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|         1: LiteralNode null (volatileHint=false) : Null
|       1: Apply Function = : Boolean
|         0: LiteralNode None (volatileHint=false) : Option[String']
|         1: LiteralNode null (volatileHint=false) : Null
|     1: Apply Function = : SOption[Boolean]
|       0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|       1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,54] [debug] Hoisted join filters in:
| Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : SOption[Boolean]
|       0: Apply Function and
|         0: Apply Function = : Boolean
|           0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s31.BASE_AGGREGATION : String'
|           1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|       1: Apply Function or : SOption[Boolean]
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : Boolean
|             0: LiteralNode None (volatileHint=false) : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : SOption[Boolean]
|           0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,54] [debug] Hoisted flatMapped Filter in:
| Bind : Vector[t25<{s28: Int'}>]
|   from s32: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: ...
|     right s31: ...
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t25 : Vector[t25<{s28: Int'}>]
|     value: StructNode : {s28: Int'}
|       s28: Path s32._2.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,54] [debug] After phase rewriteJoins:
| Bind : Vector[t27<{s29: Int'}>]
|   from s26: Take : Vector[t25<{s28: Int'}>]
|     from: Drop : Vector[t25<{s28: Int'}>]
|       from: Bind : Vector[t25<{s28: Int'}>]
|         from s32: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|           left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|           right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|           on: Apply Function and
|             0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|             1: Apply Function and : SOption[Boolean]
|               0: Apply Function and
|                 0: Apply Function = : Boolean
|                   0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|                   1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|                 1: Apply Function = : Boolean
|                   0: Path s31.BASE_AGGREGATION : String'
|                   1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|               1: Apply Function or : SOption[Boolean]
|                 0: Apply Function and : Boolean
|                   0: Apply Function = : Boolean
|                     0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                     1: LiteralNode null (volatileHint=false) : Null
|                   1: Apply Function = : Boolean
|                     0: LiteralNode None (volatileHint=false) : Option[String']
|                     1: LiteralNode null (volatileHint=false) : Null
|                 1: Apply Function = : SOption[Boolean]
|                   0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                   1: LiteralNode None (volatileHint=false) : Option[String']
|         select: Pure t25 : Vector[t25<{s28: Int'}>]
|           value: StructNode : {s28: Int'}
|             s28: Path s32._2.CALL_CACHING_ENTRY_ID : Int'
|       count: LiteralNode 1 (volatileHint=false) : Long
|     count: LiteralNode 1 (volatileHint=false) : Long
|   select: Pure t27 : Vector[t27<{s29: Int'}>]
|     value: StructNode : {s29: Int'}
|       s29: Path s26.s28 : Int'

[2020-07-30 19:06:19,54] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:19,54] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:19,54] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:19,54] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:19,54] [debug] Unreferenced: t27; Field refs: (@t22,BASE_AGGREGATION), (@t22,CALL_CACHING_ENTRY_ID), (@t22,INPUT_FILES_AGGREGATION), (@t16,ALLOW_RESULT_REUSE), (@t16,CALL_CACHING_ENTRY_ID), (t25,s28)
[2020-07-30 19:06:19,54] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:19,54] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:19,54] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:19,54] [debug] Creating mapping from t27<t25<Int'>>
[2020-07-30 19:06:19,54] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Int']
|   from s33: Bind : Vector[t27<{s29: Int'}>]
|     from s26: Take : Vector[t25<{s28: Int'}>]
|       from: Drop : Vector[t25<{s28: Int'}>]
|         from: Bind : Vector[t25<{s28: Int'}>]
|           from s32: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|             left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             on: Apply Function and
|               0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|               1: Apply Function and : SOption[Boolean]
|                 0: Apply Function and
|                   0: Apply Function = : Boolean
|                     0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|                     1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|                   1: Apply Function = : Boolean
|                     0: Path s31.BASE_AGGREGATION : String'
|                     1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|                 1: Apply Function or : SOption[Boolean]
|                   0: Apply Function and : Boolean
|                     0: Apply Function = : Boolean
|                       0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                       1: LiteralNode null (volatileHint=false) : Null
|                     1: Apply Function = : Boolean
|                       0: LiteralNode None (volatileHint=false) : Option[String']
|                       1: LiteralNode null (volatileHint=false) : Null
|                   1: Apply Function = : SOption[Boolean]
|                     0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                     1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<{s28: Int'}>]
|             value: StructNode : {s28: Int'}
|               s28: Path s32._2.CALL_CACHING_ENTRY_ID : Int'
|         count: LiteralNode 1 (volatileHint=false) : Long
|       count: LiteralNode 1 (volatileHint=false) : Long
|     select: Pure t27 : Vector[t27<{s29: Int'}>]
|       value: StructNode : {s29: Int'}
|         s29: Path s26.s28 : Int'
|   map: Path s33.s29 : Int'

[2020-07-30 19:06:19,54] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:19,54] [debug] New defs: Map(0 -> (Path s26.s28,s34))
[2020-07-30 19:06:19,54] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int']
|   from s33: Bind : Vector[t35<{s34: Int'}>]
|     from s26: ...
|     select: Pure t35 : Vector[t35<{s34: Int'}>]
|       value: StructNode : {s34: Int'}
|         s34: Path s26.s28 : Int'
|   map: Path s33.s34 : Int'

[2020-07-30 19:06:19,55] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Int']
|   from s33: Bind : Vector[t35<{s34: Int'}>]
|     from s26: Take : Vector[t25<{s28: Int'}>]
|       from: Drop : Vector[t25<{s28: Int'}>]
|         from: Bind : Vector[t25<{s28: Int'}>]
|           from s32: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|             left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|             right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|             on: Apply Function and
|               0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|               1: Apply Function and : SOption[Boolean]
|                 0: Apply Function and
|                   0: Apply Function = : Boolean
|                     0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|                     1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|                   1: Apply Function = : Boolean
|                     0: Path s31.BASE_AGGREGATION : String'
|                     1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|                 1: Apply Function or : SOption[Boolean]
|                   0: Apply Function and : Boolean
|                     0: Apply Function = : Boolean
|                       0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                       1: LiteralNode null (volatileHint=false) : Null
|                     1: Apply Function = : Boolean
|                       0: LiteralNode None (volatileHint=false) : Option[String']
|                       1: LiteralNode null (volatileHint=false) : Null
|                   1: Apply Function = : SOption[Boolean]
|                     0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                     1: LiteralNode None (volatileHint=false) : Option[String']
|           select: Pure t25 : Vector[t25<{s28: Int'}>]
|             value: StructNode : {s28: Int'}
|               s28: Path s32._2.CALL_CACHING_ENTRY_ID : Int'
|         count: LiteralNode 1 (volatileHint=false) : Long
|       count: LiteralNode 1 (volatileHint=false) : Long
|     select: Pure t35 : Vector[t35<{s34: Int'}>]
|       value: StructNode : {s34: Int'}
|         s34: Path s26.s28 : Int'
|   map: Path s33.s34 : Int'

[2020-07-30 19:06:19,55] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:19,55] [debug] Table fields: Map(@t22 -> Vector(CALL_CACHING_ENTRY_ID, BASE_AGGREGATION, INPUT_FILES_AGGREGATION), @t16 -> Vector(ALLOW_RESULT_REUSE, CALL_CACHING_ENTRY_ID))
[2020-07-30 19:06:19,55] [debug] Creating source from Join s30/s31:
| Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : SOption[Boolean]
|       0: Apply Function and
|         0: Apply Function = : Boolean
|           0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s31.BASE_AGGREGATION : String'
|           1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|       1: Apply Function or : SOption[Boolean]
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : Boolean
|             0: LiteralNode None (volatileHint=false) : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : SOption[Boolean]
|           0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,55] [debug] Creating source from TableNode:
| Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]

[2020-07-30 19:06:19,55] [debug] Mappings are: ConstArray(((@t16,ALLOW_RESULT_REUSE),List(ALLOW_RESULT_REUSE)), ((@t16,CALL_CACHING_ENTRY_ID),List(CALL_CACHING_ENTRY_ID)))
[2020-07-30 19:06:19,55] [debug] Creating source from TableNode:
| Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]

[2020-07-30 19:06:19,55] [debug] Mappings are: ConstArray(((@t22,CALL_CACHING_ENTRY_ID),List(CALL_CACHING_ENTRY_ID)), ((@t22,BASE_AGGREGATION),List(BASE_AGGREGATION)), ((@t22,INPUT_FILES_AGGREGATION),List(INPUT_FILES_AGGREGATION)))
[2020-07-30 19:06:19,55] [debug] Converted left side of Join s30/s31:
| Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]

[2020-07-30 19:06:19,55] [debug] Converted right side of Join s30/s31:
| Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]

[2020-07-30 19:06:19,55] [debug] Mappings for [38;5;5mon[0m clause in Join s30/s31: Map((@t22,BASE_AGGREGATION) -> List(_2, BASE_AGGREGATION), (@t22,CALL_CACHING_ENTRY_ID) -> List(_2, CALL_CACHING_ENTRY_ID), (@t22,INPUT_FILES_AGGREGATION) -> List(_2, INPUT_FILES_AGGREGATION), (@t16,ALLOW_RESULT_REUSE) -> List(_1, ALLOW_RESULT_REUSE), (@t16,CALL_CACHING_ENTRY_ID) -> List(_1, CALL_CACHING_ENTRY_ID))
[2020-07-30 19:06:19,55] [debug] Transformed [38;5;5mon[0m clause in Join s30/s31:
| Apply Function and
|   0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|   1: Apply Function and : SOption[Boolean]
|     0: Apply Function and
|       0: Apply Function = : Boolean
|         0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|         1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|       1: Apply Function = : Boolean
|         0: Path s31.BASE_AGGREGATION : String'
|         1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|     1: Apply Function or : SOption[Boolean]
|       0: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : Boolean
|           0: LiteralNode None (volatileHint=false) : Option[String']
|           1: LiteralNode null (volatileHint=false) : Null
|       1: Apply Function = : SOption[Boolean]
|         0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|         1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,55] [debug] Created source from Join s30/s31:
| Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : SOption[Boolean]
|       0: Apply Function and
|         0: Apply Function = : Boolean
|           0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s31.BASE_AGGREGATION : String'
|           1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|       1: Apply Function or : SOption[Boolean]
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : Boolean
|             0: LiteralNode None (volatileHint=false) : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : SOption[Boolean]
|           0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,55] [debug] Building new Comprehension from:
| Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|   left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|   right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|   on: Apply Function and
|     0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|     1: Apply Function and : SOption[Boolean]
|       0: Apply Function and
|         0: Apply Function = : Boolean
|           0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|           1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|         1: Apply Function = : Boolean
|           0: Path s31.BASE_AGGREGATION : String'
|           1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|       1: Apply Function or : SOption[Boolean]
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : Boolean
|             0: LiteralNode None (volatileHint=false) : Option[String']
|             1: LiteralNode null (volatileHint=false) : Null
|         1: Apply Function = : SOption[Boolean]
|           0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|           1: LiteralNode None (volatileHint=false) : Option[String']

[2020-07-30 19:06:19,55] [debug] Built new Comprehension:
| Comprehension s36, None, None, ConstArray(), None, None, None, None, false : Vector[t37<{s38: Boolean', s39: Int', s40: Int', s41: String', s42: Option[String']}>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t37 : Vector[t37<{s38: Boolean', s39: Int', s40: Int', s41: String', s42: Option[String']}>]
|     value: StructNode : {s38: Boolean', s39: Int', s40: Int', s41: String', s42: Option[String']}
|       s38: Path s36._1.ALLOW_RESULT_REUSE : Boolean'
|       s39: Path s36._1.CALL_CACHING_ENTRY_ID : Int'
|       s40: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|       s41: Path s36._2.BASE_AGGREGATION : String'
|       s42: Path s36._2.INPUT_FILES_AGGREGATION : Option[String']

[2020-07-30 19:06:19,55] [debug] Replacements are: Map((@t22,BASE_AGGREGATION) -> s41, (@t22,CALL_CACHING_ENTRY_ID) -> s40, (@t22,INPUT_FILES_AGGREGATION) -> s42, (@t16,ALLOW_RESULT_REUSE) -> s38, (@t16,CALL_CACHING_ENTRY_ID) -> s39)
[2020-07-30 19:06:19,55] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t25<{s28: Int'}>]
|   from s32: ...
|   select: Pure t25 : Vector[t25<{s28: Int'}>]
|     value: StructNode : {s28: Int'}
|       s28: Path s32._2.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,55] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s36, None, None, ConstArray(), None, None, None, None, false : Vector[t25<{s28: Int'}>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t25 : Vector[t25<{s28: Int'}>]
|     value: StructNode : {s28: Int'}
|       s28: Path s36._2.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:19,55] [debug] Replacements are: Map((t25,s28) -> s28)
[2020-07-30 19:06:19,55] [debug] Merging Drop into Comprehension:
| Drop : Vector[t25<{s28: Int'}>]
|   from: ...
|   count: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,55] [debug] Merged Drop into Comprehension:
| Comprehension s36, None, None, ConstArray(), None, None, None, Some(LiteralNode 1 (volatileHint=false)), false : Vector[t25<{s28: Int'}>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t25 : Vector[t25<{s28: Int'}>]
|     value: StructNode : {s28: Int'}
|       s28: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|   offset: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,55] [debug] Merging Take into Comprehension:
| Take : Vector[t25<{s28: Int'}>]
|   from: ...
|   count: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,55] [debug] Merged Take into Comprehension:
| Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 1 (volatileHint=false)), false : Vector[t25<{s28: Int'}>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t25 : Vector[t25<{s28: Int'}>]
|     value: StructNode : {s28: Int'}
|       s28: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|   fetch: LiteralNode 1 (volatileHint=false) : Long
|   offset: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,55] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t35<{s34: Int'}>]
|   from s26: ...
|   select: Pure t35 : Vector[t35<{s34: Int'}>]
|     value: StructNode : {s34: Int'}
|       s34: Path s26.s28 : Int'

[2020-07-30 19:06:19,56] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 1 (volatileHint=false)), false : Vector[t35<{s34: Int'}>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t35 : Vector[t35<{s34: Int'}>]
|     value: StructNode : {s34: Int'}
|       s34: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|   fetch: LiteralNode 1 (volatileHint=false) : Long
|   offset: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,56] [debug] Replacements are: Map((t35,s34) -> s34)
[2020-07-30 19:06:19,56] [debug] Mappings are: ConstArray(((t35,s34),List(s34)))
[2020-07-30 19:06:19,56] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Int']
|   from s33: Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 1 (volatileHint=false)), false : Vector[t35<{s34: Int'}>]
|     from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|       left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       on: Apply Function and
|         0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|         1: Apply Function and : SOption[Boolean]
|           0: Apply Function and
|             0: Apply Function = : Boolean
|               0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|               1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|             1: Apply Function = : Boolean
|               0: Path s31.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|           1: Apply Function or : SOption[Boolean]
|             0: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : Boolean
|                 0: LiteralNode None (volatileHint=false) : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : SOption[Boolean]
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false) : Option[String']
|     select: Pure t35 : Vector[t35<{s34: Int'}>]
|       value: StructNode : {s34: Int'}
|         s34: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|     fetch: LiteralNode 1 (volatileHint=false) : Long
|     offset: LiteralNode 1 (volatileHint=false) : Long
|   map: Path s33.s34 : Int'

[2020-07-30 19:06:19,56] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:19,56] [debug] Required symbols: s34 -> 0
[2020-07-30 19:06:19,56] [debug] Transformed RSM: 
| ResultSetMapping
|   from s33: Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 1 (volatileHint=false)), false : Vector[t35<(Int')>]
|     from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|       left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       on: Apply Function and
|         0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|         1: Apply Function and : SOption[Boolean]
|           0: Apply Function and
|             0: Apply Function = : Boolean
|               0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|               1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|             1: Apply Function = : Boolean
|               0: Path s31.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|           1: Apply Function or : SOption[Boolean]
|             0: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : Boolean
|                 0: LiteralNode None (volatileHint=false) : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : SOption[Boolean]
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false) : Option[String']
|     select: Pure t35 : Vector[t35<(Int')>]
|       value: ProductNode : (Int')
|         1: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|     fetch: LiteralNode 1 (volatileHint=false) : Long
|     offset: LiteralNode 1 (volatileHint=false) : Long
|   map: Path s33.s34 : Int'

[2020-07-30 19:06:19,56] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Int']
|   from s33: Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 1 (volatileHint=false)), false : Vector[t35<(Int')>]
|     from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|       left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|       right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|       on: Apply Function and
|         0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|         1: Apply Function and : SOption[Boolean]
|           0: Apply Function and
|             0: Apply Function = : Boolean
|               0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|               1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|             1: Apply Function = : Boolean
|               0: Path s31.BASE_AGGREGATION : String'
|               1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|           1: Apply Function or : SOption[Boolean]
|             0: Apply Function and : Boolean
|               0: Apply Function = : Boolean
|                 0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|               1: Apply Function = : Boolean
|                 0: LiteralNode None (volatileHint=false) : Option[String']
|                 1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : SOption[Boolean]
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode None (volatileHint=false) : Option[String']
|     select: Pure t35 : Vector[t35<(Int')>]
|       value: ProductNode : (Int')
|         1: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|     fetch: LiteralNode 1 (volatileHint=false) : Long
|     offset: LiteralNode 1 (volatileHint=false) : Long
|   map: Path s33._1 : Int'

[2020-07-30 19:06:19,56] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:19,56] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:19,56] [debug] Compiling server-side and mapping with server-side:
| Comprehension s36, None, None, ConstArray(), None, None, Some(LiteralNode 1 (volatileHint=false)), Some(LiteralNode 1 (volatileHint=false)), false : Vector[t35<(Int')>]
|   from s36: Join Inner : Vector[(@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>, @t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>)]
|     left s30: Table CALL_CACHING_ENTRY : Vector[@t16<{WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Option[Int'], CALL_CACHING_ENTRY_ID: Int', ALLOW_RESULT_REUSE: Boolean', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String', RETURN_CODE: Option[Int']}>]
|     right s31: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t22<{BASE_AGGREGATION: String', INPUT_FILES_AGGREGATION: Option[String'], CALL_CACHING_ENTRY_ID: Int', CALL_CACHING_AGGREGATION_ENTRY_ID: Int'}>]
|     on: Apply Function and
|       0: Path s30.ALLOW_RESULT_REUSE : Boolean'
|       1: Apply Function and : SOption[Boolean]
|         0: Apply Function and
|           0: Apply Function = : Boolean
|             0: Path s30.CALL_CACHING_ENTRY_ID : Int'
|             1: Path s31.CALL_CACHING_ENTRY_ID : Int'
|           1: Apply Function = : Boolean
|             0: Path s31.BASE_AGGREGATION : String'
|             1: LiteralNode 65F2F0AC1615D0CCB745BB8773FAB356 (volatileHint=false) : String'
|         1: Apply Function or : SOption[Boolean]
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|             1: Apply Function = : Boolean
|               0: LiteralNode None (volatileHint=false) : Option[String']
|               1: LiteralNode null (volatileHint=false) : Null
|           1: Apply Function = : SOption[Boolean]
|             0: Path s31.INPUT_FILES_AGGREGATION : Option[String']
|             1: LiteralNode None (volatileHint=false) : Option[String']
|   select: Pure t35 : Vector[t35<(Int')>]
|     value: ProductNode : (Int')
|       1: Path s36._2.CALL_CACHING_ENTRY_ID : Int'
|   fetch: LiteralNode 1 (volatileHint=false) : Long
|   offset: LiteralNode 1 (volatileHint=false) : Long

[2020-07-30 19:06:19,56] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:19,56] [debug] Compiled server-side to:
| CompiledStatement "select s31."CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" s30, "CALL_CACHING_AGGREGATION_ENTRY" s31 where s30."ALLOW_RESULT_REUSE" and (((s30."CALL_CACHING_ENTRY_ID" = s31."CALL_CACHING_ENTRY_ID") and (s31."BASE_AGGREGATION" = cast('65F2F0AC1615D0CCB745BB8773FAB356' as varchar(16777216)))) and (((s31."INPUT_FILES_AGGREGATION" is null) and (null is null)) or (s31."INPUT_FILES_AGGREGATION" = null))) limit 1 offset 1" : Vector[t35<(Int')>]

[2020-07-30 19:06:19,56] [debug] After phase codeGen:
| ResultSetMapping : Vector[Int']
|   from s33: CompiledStatement "select s31."CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" s30, "CALL_CACHING_AGGREGATION_ENTRY" s31 where s30."ALLOW_RESULT_REUSE" and (((s30."CALL_CACHING_ENTRY_ID" = s31."CALL_CACHING_ENTRY_ID") and (s31."BASE_AGGREGATION" = cast('65F2F0AC1615D0CCB745BB8773FAB356' as varchar(16777216)))) and (((s31."INPUT_FILES_AGGREGATION" is null) and (null is null)) or (s31."INPUT_FILES_AGGREGATION" = null))) limit 1 offset 1" : Vector[t35<(Int')>]
|   map: CompiledMapping : Int'
|     converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:19,56] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,56] [debug]       assignUniqueSymbols:    1.802558 ms
[2020-07-30 19:06:19,56] [debug]           unrollTailBinds:    0.152889 ms
[2020-07-30 19:06:19,56] [debug]                inferTypes:    0.759487 ms
[2020-07-30 19:06:19,56] [debug]              expandTables:    3.348087 ms
[2020-07-30 19:06:19,56] [debug]           forceOuterBinds:    1.280490 ms
[2020-07-30 19:06:19,56] [debug]         removeMappedTypes:    0.158953 ms
[2020-07-30 19:06:19,56] [debug]                expandSums:    3.607972 ms
[2020-07-30 19:06:19,56] [debug]             expandRecords:    0.932376 ms
[2020-07-30 19:06:19,56] [debug]        flattenProjections:    2.794521 ms
[2020-07-30 19:06:19,56] [debug]              rewriteJoins:    4.749668 ms
[2020-07-30 19:06:19,56] [debug]             verifySymbols:    0.186250 ms
[2020-07-30 19:06:19,56] [debug]             relabelUnions:    0.097359 ms
[2020-07-30 19:06:19,56] [debug]          createAggregates:    0.037443 ms
[2020-07-30 19:06:19,56] [debug]           resolveZipJoins:    0.075220 ms
[2020-07-30 19:06:19,56] [debug]          pruneProjections:    0.324843 ms
[2020-07-30 19:06:19,56] [debug]           rewriteDistinct:    0.057995 ms
[2020-07-30 19:06:19,56] [debug]    createResultSetMapping:    1.199027 ms
[2020-07-30 19:06:19,56] [debug]            hoistClientOps:    1.648563 ms
[2020-07-30 19:06:19,56] [debug]         reorderOperations:    0.139338 ms
[2020-07-30 19:06:19,56] [debug]     mergeToComprehensions:   11.156217 ms
[2020-07-30 19:06:19,56] [debug]            optimizeScalar:    0.110386 ms
[2020-07-30 19:06:19,56] [debug]          removeFieldNames:    2.158802 ms
[2020-07-30 19:06:19,56] [debug]      specializeParameters:    0.174611 ms
[2020-07-30 19:06:19,56] [debug]                   codeGen:    1.888884 ms
[2020-07-30 19:06:19,56] [debug]                     TOTAL:   38.841939 ms
[2020-07-30 19:06:19,56] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@17af2eb
          base: SetTransactionIsolation
[2020-07-30 19:06:19,56] [debug] Preparing statement: select s31."CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" s30, "CALL_CACHING_AGGREGATION_ENTRY" s31 where s30."ALLOW_RESULT_REUSE" and (((s30."CALL_CACHING_ENTRY_ID" = s31."CALL_CACHING_ENTRY_ID") and (s31."BASE_AGGREGATION" = cast('65F2F0AC1615D0CCB745BB8773FAB356' as varchar(16777216)))) and (((s31."INPUT_FILES_AGGREGATION" is null) and (null is null)) or (s31."INPUT_FILES_AGGREGATION" = null))) limit 1 offset 1
[2020-07-30 19:06:19,56] [debug] Executing prepared statement: HikariProxyPreparedStatement@1364423388 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@24801173[sql=[select s31."CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" s30, "CALL_CACHING_AGGREGATION_ENTRY" s31 where s30."ALLOW_RESULT_REUSE" and (((s30."CALL_CACHING_ENTRY_ID" = s31."CALL_CACHING_ENTRY_ID") and (s31."BASE_AGGREGATION" = cast('65F2F0AC1615D0CCB745BB8773FAB356' as varchar(16777216)))) and (((s31."INPUT_FILES_AGGREGATION" is null) and (null is null)) or (s31."INPUT_FILES_AGGREGATION" = null))) limit 1 offset 1]]
[2020-07-30 19:06:19,56] [debug] Executing prepared statement: HikariProxyPreparedStatement@1364423388 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@24801173[sql=[select s31."CALL_CACHING_ENTRY_ID" from "CALL_CACHING_ENTRY" s30, "CALL_CACHING_AGGREGATION_ENTRY" s31 where s30."ALLOW_RESULT_REUSE" and (((s30."CALL_CACHING_ENTRY_ID" = s31."CALL_CACHING_ENTRY_ID") and (s31."BASE_AGGREGATION" = cast('65F2F0AC1615D0CCB745BB8773FAB356' as varchar(16777216)))) and (((s31."INPUT_FILES_AGGREGATION" is null) and (null is null)) or (s31."INPUT_FILES_AGGREGATION" = null))) limit 1 offset 1]]
[2020-07-30 19:06:19,56] [debug] Execution of prepared statement took 187µs
[2020-07-30 19:06:19,57] [debug] /----------------------\
[2020-07-30 19:06:19,57] [debug] | 1                    |
[2020-07-30 19:06:19,57] [debug] | CALL_CACHING_ENTR... |
[2020-07-30 19:06:19,57] [debug] |----------------------|
[2020-07-30 19:06:19,57] [debug] \----------------------/
[INFO] [07/30/2020 19:06:19.570] [cromwell-system-akka.dispatchers.engine-dispatcher-33] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowExecutionActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1] 8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1 [UUID(8b168b0d)]: Could not copy a suitable cache hit for 8b168b0d:bamMergePreprocessing.splitStringToArray:-1:1. EJEA attempted to copy 1 cache hits before failing. Of these 1 failed to copy and 0 were already blacklisted from previous attempts). Falling back to running job.
[WARN] [07/30/2020 19:06:19.588] [cromwell-system-akka.dispatchers.backend-dispatcher-52] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowExecutionActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1/8b168b0d-854f-4ba0-99b6-35b7259a96fc-BackendJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1/BackgroundConfigAsyncJobExecutionActor] BackgroundConfigAsyncJobExecutionActor [UUID(8b168b0d)bamMergePreprocessing.splitStringToArray:NA:1]: Unrecognized runtime attribute keys: cpu, timeout, memory
[INFO] [07/30/2020 19:06:19.639] [cromwell-system-akka.dispatchers.backend-dispatcher-52] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowExecutionActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1/8b168b0d-854f-4ba0-99b6-35b7259a96fc-BackendJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1/BackgroundConfigAsyncJobExecutionActor] BackgroundConfigAsyncJobExecutionActor [UUID(8b168b0d)bamMergePreprocessing.splitStringToArray:NA:1]: `source /home/ubuntu/.bashrc 
module load python/3.7 || exit 20;  

set -euo pipefail

python3 <<CODE
import json

intervals = []
for i in "chr1,chr2,chr3".split(","):
  interval = {"id": i, "intervalsList": i.split("+")}
  intervals.append(interval)

# wrap intervals in intervalsList for cromwell
print(json.dumps({"intervalsList": intervals}))
CODE`
[2020-07-30 19:06:19,72] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:19,72] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:19,72] [debug] #3: StartTransaction
[2020-07-30 19:06:19,72] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:19,72] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:19,72] [debug] Executing prepared statement: HikariProxyPreparedStatement@1606576942 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4730c47a[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:19,72] [debug] Executing prepared statement: HikariProxyPreparedStatement@1606576942 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4730c47a[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:19,72] [debug] /------\
[2020-07-30 19:06:19,72] [debug] | 1    |
[2020-07-30 19:06:19,72] [debug] | Long |
[2020-07-30 19:06:19,72] [debug] |------|
[2020-07-30 19:06:19,72] [debug] | 5000 |
[2020-07-30 19:06:19,72] [debug] \------/
[2020-07-30 19:06:19,72] [debug] Execution of prepared statement took 117µs
[2020-07-30 19:06:19,72] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:19,72] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:19,72] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:19,72] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:19,72] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:19,72] [debug] #5: success Vector()
[2020-07-30 19:06:19,72] [debug] #6: success Vector()
[2020-07-30 19:06:19,72] [debug] #7: success ()
[2020-07-30 19:06:19,72] [debug] #8: success ((),Vector())
[2020-07-30 19:06:19,72] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:19,72] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:19,72] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:19,72] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:19,72] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,72] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:19,72] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:19,72] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:19,72] [debug] Expanding tables in result type
[2020-07-30 19:06:19,72] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,72] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,72] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,72] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:19,72] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,72] [debug] Flattening projection t8
[2020-07-30 19:06:19,72] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,72] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:19,72] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:19,72] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:19,72] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:19,72] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:19,72] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,72] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:19,72] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:19,72] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:19,72] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:19,72] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:19,72] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:19,72] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:19,72] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:19,72] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:19,72] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:19,72] [debug] Creating mapping from Long'
[2020-07-30 19:06:19,72] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:19,72] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:19,72] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:19,73] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:19,73] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:19,73] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:19,73] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:19,73] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:19,73] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:19,73] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:19,73] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,73] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:19,73] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:19,73] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:19,73] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,73] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:19,73] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:19,73] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:19,73] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:19,73] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:19,73] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:19,73] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:19,73] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:19,73] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:19,73] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:19,73] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:19,73] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:19,73] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:19,73] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:19,73] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,73] [debug]       assignUniqueSymbols:    0.404083 ms
[2020-07-30 19:06:19,73] [debug]           unrollTailBinds:    0.066872 ms
[2020-07-30 19:06:19,73] [debug]                inferTypes:    0.105504 ms
[2020-07-30 19:06:19,73] [debug]              expandTables:    0.946020 ms
[2020-07-30 19:06:19,73] [debug]           forceOuterBinds:    0.304960 ms
[2020-07-30 19:06:19,73] [debug]         removeMappedTypes:    0.277706 ms
[2020-07-30 19:06:19,73] [debug]                expandSums:    0.043569 ms
[2020-07-30 19:06:19,73] [debug]             expandRecords:    0.268502 ms
[2020-07-30 19:06:19,73] [debug]        flattenProjections:    0.788411 ms
[2020-07-30 19:06:19,73] [debug]              rewriteJoins:    0.087109 ms
[2020-07-30 19:06:19,73] [debug]             verifySymbols:    0.067136 ms
[2020-07-30 19:06:19,73] [debug]             relabelUnions:    0.064637 ms
[2020-07-30 19:06:19,73] [debug]          createAggregates:    0.051163 ms
[2020-07-30 19:06:19,73] [debug]           resolveZipJoins:    0.061147 ms
[2020-07-30 19:06:19,73] [debug]          pruneProjections:    0.220917 ms
[2020-07-30 19:06:19,73] [debug]           rewriteDistinct:    0.062496 ms
[2020-07-30 19:06:19,73] [debug]    createResultSetMapping:    0.465939 ms
[2020-07-30 19:06:19,73] [debug]            hoistClientOps:    0.984489 ms
[2020-07-30 19:06:19,73] [debug]         reorderOperations:    0.095641 ms
[2020-07-30 19:06:19,73] [debug]     mergeToComprehensions:    2.583877 ms
[2020-07-30 19:06:19,73] [debug]            optimizeScalar:    0.091104 ms
[2020-07-30 19:06:19,73] [debug]          removeFieldNames:    0.920874 ms
[2020-07-30 19:06:19,74] [debug]      specializeParameters:    0.154398 ms
[2020-07-30 19:06:19,74] [debug]                   codeGen:    0.810043 ms
[2020-07-30 19:06:19,74] [debug]                     TOTAL:    9.926597 ms
[2020-07-30 19:06:19,74] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:19,74] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:19,74] [debug] Executing prepared update: HikariProxyPreparedStatement@204484474 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@550ee80e[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:19,74] [debug] Executing prepared update: HikariProxyPreparedStatement@204484474 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@550ee80e[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:19,74] [debug] Execution of prepared update took 95µs
[2020-07-30 19:06:19,74] [debug] #10: success 0
[2020-07-30 19:06:19,74] [debug] #11: Commit
[2020-07-30 19:06:19,74] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:19,74] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:19,74] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:19,74] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:19,74] [debug] #3: StartTransaction
[2020-07-30 19:06:19,74] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:19,74] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:19,74] [debug] Executing prepared statement: HikariProxyPreparedStatement@120056149 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@25cb3b7a[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:19,74] [debug] Executing prepared statement: HikariProxyPreparedStatement@120056149 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@25cb3b7a[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:19,74] [debug] /---------------------------\
[2020-07-30 19:06:19,74] [debug] | 1                         |
[2020-07-30 19:06:19,74] [debug] | String                    |
[2020-07-30 19:06:19,74] [debug] |---------------------------|
[2020-07-30 19:06:19,74] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:19,74] [debug] \---------------------------/
[2020-07-30 19:06:19,74] [debug] Execution of prepared statement took 43µs
[2020-07-30 19:06:19,74] [debug] /------------------\
[2020-07-30 19:06:19,74] [debug] | 1                |
[2020-07-30 19:06:19,74] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:19,74] [debug] |------------------|
[2020-07-30 19:06:19,74] [debug] \------------------/
[2020-07-30 19:06:19,74] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:19,74] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:19,75] [debug] Executing prepared statement: HikariProxyPreparedStatement@415752775 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5915ee0b[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:19,75] [debug] Executing prepared statement: HikariProxyPreparedStatement@415752775 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5915ee0b[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:19,75] [debug] /---------------------------\
[2020-07-30 19:06:19,75] [debug] | 1                         |
[2020-07-30 19:06:19,75] [debug] | String                    |
[2020-07-30 19:06:19,75] [debug] |---------------------------|
[2020-07-30 19:06:19,75] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:19,75] [debug] \---------------------------/
[2020-07-30 19:06:19,75] [debug] Execution of prepared statement took 49µs
[2020-07-30 19:06:19,75] [debug] /------------------\
[2020-07-30 19:06:19,75] [debug] | 1                |
[2020-07-30 19:06:19,75] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:19,75] [debug] |------------------|
[2020-07-30 19:06:19,75] [debug] \------------------/
[2020-07-30 19:06:19,75] [debug] #6: success None
[2020-07-30 19:06:19,75] [debug] #7: success 0
[2020-07-30 19:06:19,75] [debug] #8: success (0,0)
[2020-07-30 19:06:19,75] [debug] #9: success (0,0)
[2020-07-30 19:06:19,75] [debug] #10: Commit
[2020-07-30 19:06:19,75] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:19,75] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:19,75] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,75] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:19,75] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,75] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:19,75] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:19,75] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:19,75] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:19,75] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:19,75] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:19,75] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:19,75] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:19,75] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:19,75] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:19,75] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:19,75] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,75] [debug] Flattening projection t8
[2020-07-30 19:06:19,75] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:19,75] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:19,75] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:19,75] [debug] Flattening projection t7
[2020-07-30 19:06:19,75] [debug] Flattening projection t9
[2020-07-30 19:06:19,75] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,75] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:19,75] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:19,75] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:19,75] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:19,75] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:19,75] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:19,75] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:19,75] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:19,75] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[INFO] [07/30/2020 19:06:19.756] [cromwell-system-akka.dispatchers.backend-dispatcher-52] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowExecutionActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1/8b168b0d-854f-4ba0-99b6-35b7259a96fc-BackendJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1/BackgroundConfigAsyncJobExecutionActor] BackgroundConfigAsyncJobExecutionActor [UUID(8b168b0d)bamMergePreprocessing.splitStringToArray:NA:1]: executing: docker run \
--rm -i \
--entrypoint /bin/bash \
-v /home/ubuntu/repos/wgsPipeline/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray:/cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray \
-v /home/ubuntu/data/data_modules:/data_modules \
g3chen/wgspipeline@sha256:3c0c292c460c8db19b9744be1ea81529c4d189e4c4f9ca9a63046edcf792087d /cromwell-executions/bamMergePreprocessing/8b168b0d-854f-4ba0-99b6-35b7259a96fc/call-splitStringToArray/execution/script
[2020-07-30 19:06:19,75] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:19,75] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,75] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,75] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,75] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,75] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:19,75] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:19,75] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:19,76] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:19,76] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:19,76] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:19,76] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:19,76] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:19,76] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:19,76] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:19,76] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:19,76] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:19,76] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:19,76] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:19,76] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:19,76] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:19,76] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:19,76] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:19,76] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:19,76] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:19,76] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:19,76] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:19,76] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:19,76] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:19,76] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:19,76] [debug] Table fields: Map()
[2020-07-30 19:06:19,76] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:19,76] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:19,76] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:19,76] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:19,76] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:19,76] [debug] Replacements are: Map()
[2020-07-30 19:06:19,76] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:19,76] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:19,76] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:19,76] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:19,76] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:19,76] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:19,76] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:19,76] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:19,76] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:19,76] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:19,76] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:19,76] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:19,76] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:19,76] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:19,76] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:19,76] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:19,76] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:19,76] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:19,76] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:19,76] [debug]       assignUniqueSymbols:    0.424855 ms
[2020-07-30 19:06:19,76] [debug]           unrollTailBinds:    0.069952 ms
[2020-07-30 19:06:19,76] [debug]                inferTypes:    0.096169 ms
[2020-07-30 19:06:19,76] [debug]              expandTables:    0.742339 ms
[2020-07-30 19:06:19,76] [debug]           forceOuterBinds:    0.644301 ms
[2020-07-30 19:06:19,77] [debug]         removeMappedTypes:    0.115498 ms
[2020-07-30 19:06:19,77] [debug]                expandSums:    0.044900 ms
[2020-07-30 19:06:19,77] [debug]             expandRecords:    0.462950 ms
[2020-07-30 19:06:19,77] [debug]        flattenProjections:    2.246526 ms
[2020-07-30 19:06:19,77] [debug]              rewriteJoins:    1.330074 ms
[2020-07-30 19:06:19,77] [debug]             verifySymbols:    0.092706 ms
[2020-07-30 19:06:19,77] [debug]             relabelUnions:    0.144971 ms
[2020-07-30 19:06:19,77] [debug]          createAggregates:    2.726868 ms
[2020-07-30 19:06:19,77] [debug]           resolveZipJoins:    0.220279 ms
[2020-07-30 19:06:19,77] [debug]          pruneProjections:    0.263422 ms
[2020-07-30 19:06:19,77] [debug]           rewriteDistinct:    0.097047 ms
[2020-07-30 19:06:19,77] [debug]    createResultSetMapping:    0.467593 ms
[2020-07-30 19:06:19,77] [debug]            hoistClientOps:    0.886313 ms
[2020-07-30 19:06:19,77] [debug]         reorderOperations:    0.074934 ms
[2020-07-30 19:06:19,77] [debug]     mergeToComprehensions:    3.030052 ms
[2020-07-30 19:06:19,77] [debug]            optimizeScalar:    0.072153 ms
[2020-07-30 19:06:19,77] [debug]          removeFieldNames:    0.854813 ms
[2020-07-30 19:06:19,77] [debug]      specializeParameters:    0.177810 ms
[2020-07-30 19:06:19,77] [debug]                   codeGen:    0.982577 ms
[2020-07-30 19:06:19,77] [debug]                     TOTAL:   16.269102 ms
[2020-07-30 19:06:19,77] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:19,77] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:19,77] [debug] Executing prepared statement: HikariProxyPreparedStatement@149437602 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7e7be0d0[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:19,77] [debug] Executing prepared statement: HikariProxyPreparedStatement@149437602 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7e7be0d0[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:19,77] [debug] Execution of prepared statement took 105µs
[2020-07-30 19:06:19,77] [debug] /----\
[2020-07-30 19:06:19,77] [debug] | 1  |
[2020-07-30 19:06:19,77] [debug] | C1 |
[2020-07-30 19:06:19,77] [debug] |----|
[2020-07-30 19:06:19,77] [debug] | 0  |
[2020-07-30 19:06:19,77] [debug] \----/
[2020-07-30 19:06:20,33] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@55ad3d0b
          base: SetTransactionIsolation
[2020-07-30 19:06:20,33] [debug] Preparing statement: select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:20,33] [debug] Executing prepared statement: HikariProxyPreparedStatement@1415531746 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2833b275[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:20,33] [debug] Executing prepared statement: HikariProxyPreparedStatement@1415531746 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2833b275[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:20,33] [debug] /---------------------------\
[2020-07-30 19:06:20,33] [debug] | 1                         |
[2020-07-30 19:06:20,33] [debug] | String                    |
[2020-07-30 19:06:20,33] [debug] |---------------------------|
[2020-07-30 19:06:20,33] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:20,33] [debug] \---------------------------/
[2020-07-30 19:06:20,33] [debug] Execution of prepared statement took 121µs
[2020-07-30 19:06:20,33] [debug] /-----------------\
[2020-07-30 19:06:20,33] [debug] | 1               |
[2020-07-30 19:06:20,33] [debug] | WORKFLOW_STATUS |
[2020-07-30 19:06:20,33] [debug] |-----------------|
[2020-07-30 19:06:20,33] [debug] | Running         |
[2020-07-30 19:06:20,33] [debug] \-----------------/
[2020-07-30 19:06:20,78] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:20,78] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:20,78] [debug] #3: StartTransaction
[2020-07-30 19:06:20,78] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:20,78] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:20,78] [debug] Executing prepared statement: HikariProxyPreparedStatement@575530134 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6e3b0e86[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:20,78] [debug] Executing prepared statement: HikariProxyPreparedStatement@575530134 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6e3b0e86[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:20,78] [debug] /------\
[2020-07-30 19:06:20,78] [debug] | 1    |
[2020-07-30 19:06:20,78] [debug] | Long |
[2020-07-30 19:06:20,78] [debug] |------|
[2020-07-30 19:06:20,78] [debug] | 5000 |
[2020-07-30 19:06:20,78] [debug] \------/
[2020-07-30 19:06:20,78] [debug] Execution of prepared statement took 164µs
[2020-07-30 19:06:20,78] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:20,78] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:20,78] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:20,78] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:20,78] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:20,78] [debug] #5: success Vector()
[2020-07-30 19:06:20,78] [debug] #6: success Vector()
[2020-07-30 19:06:20,78] [debug] #7: success ()
[2020-07-30 19:06:20,78] [debug] #8: success ((),Vector())
[2020-07-30 19:06:20,78] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:20,78] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:20,78] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:20,78] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:20,78] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:20,78] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:20,79] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:20,79] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:20,79] [debug] Expanding tables in result type
[2020-07-30 19:06:20,79] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,79] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,79] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,79] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:20,79] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,79] [debug] Flattening projection t8
[2020-07-30 19:06:20,79] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,79] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:20,79] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:20,79] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:20,79] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:20,79] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:20,79] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,79] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:20,79] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:20,79] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:20,79] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:20,79] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:20,79] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:20,79] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:20,79] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:20,79] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:20,79] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:20,79] [debug] Creating mapping from Long'
[2020-07-30 19:06:20,79] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:20,79] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:20,79] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:20,79] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:20,80] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:20,80] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:20,80] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:20,80] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:20,80] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:20,80] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:20,80] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,80] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:20,80] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:20,80] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:20,80] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,80] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:20,80] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:20,80] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:20,80] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:20,80] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:20,80] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:20,80] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:20,80] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:20,80] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:20,80] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:20,80] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:20,80] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:20,80] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:20,80] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:20,80] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:20,80] [debug]       assignUniqueSymbols:    0.456641 ms
[2020-07-30 19:06:20,80] [debug]           unrollTailBinds:    0.078725 ms
[2020-07-30 19:06:20,80] [debug]                inferTypes:    0.204413 ms
[2020-07-30 19:06:20,81] [debug]              expandTables:    1.259233 ms
[2020-07-30 19:06:20,81] [debug]           forceOuterBinds:    0.391899 ms
[2020-07-30 19:06:20,81] [debug]         removeMappedTypes:    0.320846 ms
[2020-07-30 19:06:20,81] [debug]                expandSums:    0.083400 ms
[2020-07-30 19:06:20,81] [debug]             expandRecords:    0.355282 ms
[2020-07-30 19:06:20,81] [debug]        flattenProjections:    5.501277 ms
[2020-07-30 19:06:20,81] [debug]              rewriteJoins:    0.103526 ms
[2020-07-30 19:06:20,81] [debug]             verifySymbols:    0.107457 ms
[2020-07-30 19:06:20,81] [debug]             relabelUnions:    0.096155 ms
[2020-07-30 19:06:20,81] [debug]          createAggregates:    0.062137 ms
[2020-07-30 19:06:20,81] [debug]           resolveZipJoins:    0.095697 ms
[2020-07-30 19:06:20,81] [debug]          pruneProjections:    0.471676 ms
[2020-07-30 19:06:20,81] [debug]           rewriteDistinct:    0.102847 ms
[2020-07-30 19:06:20,81] [debug]    createResultSetMapping:    0.642955 ms
[2020-07-30 19:06:20,81] [debug]            hoistClientOps:    1.149226 ms
[2020-07-30 19:06:20,81] [debug]         reorderOperations:    0.166591 ms
[2020-07-30 19:06:20,81] [debug]     mergeToComprehensions:    3.299143 ms
[2020-07-30 19:06:20,81] [debug]            optimizeScalar:    0.104047 ms
[2020-07-30 19:06:20,81] [debug]          removeFieldNames:    4.302577 ms
[2020-07-30 19:06:20,81] [debug]      specializeParameters:    0.186904 ms
[2020-07-30 19:06:20,81] [debug]                   codeGen:    1.114459 ms
[2020-07-30 19:06:20,81] [debug]                     TOTAL:   20.657113 ms
[2020-07-30 19:06:20,81] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:20,81] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:20,81] [debug] Executing prepared update: HikariProxyPreparedStatement@2093829802 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4ab42644[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:20,81] [debug] Executing prepared update: HikariProxyPreparedStatement@2093829802 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4ab42644[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:20,81] [debug] Execution of prepared update took 141µs
[2020-07-30 19:06:20,81] [debug] #10: success 0
[2020-07-30 19:06:20,81] [debug] #11: Commit
[2020-07-30 19:06:20,81] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:20,81] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:20,81] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:20,81] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:20,81] [debug] #3: StartTransaction
[2020-07-30 19:06:20,81] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:20,81] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:20,81] [debug] Executing prepared statement: HikariProxyPreparedStatement@1494726106 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6c021235[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:20,81] [debug] Executing prepared statement: HikariProxyPreparedStatement@1494726106 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6c021235[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:20,81] [debug] /---------------------------\
[2020-07-30 19:06:20,81] [debug] | 1                         |
[2020-07-30 19:06:20,81] [debug] | String                    |
[2020-07-30 19:06:20,81] [debug] |---------------------------|
[2020-07-30 19:06:20,81] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:20,81] [debug] \---------------------------/
[2020-07-30 19:06:20,81] [debug] Execution of prepared statement took 61µs
[2020-07-30 19:06:20,81] [debug] /------------------\
[2020-07-30 19:06:20,81] [debug] | 1                |
[2020-07-30 19:06:20,81] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:20,81] [debug] |------------------|
[2020-07-30 19:06:20,81] [debug] \------------------/
[2020-07-30 19:06:20,81] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:20,81] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:20,81] [debug] Executing prepared statement: HikariProxyPreparedStatement@1776756387 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@20ab6a0[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:20,81] [debug] Executing prepared statement: HikariProxyPreparedStatement@1776756387 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@20ab6a0[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:20,81] [debug] /---------------------------\
[2020-07-30 19:06:20,81] [debug] | 1                         |
[2020-07-30 19:06:20,81] [debug] | String                    |
[2020-07-30 19:06:20,81] [debug] |---------------------------|
[2020-07-30 19:06:20,81] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:20,81] [debug] \---------------------------/
[2020-07-30 19:06:20,81] [debug] Execution of prepared statement took 112µs
[2020-07-30 19:06:20,81] [debug] /------------------\
[2020-07-30 19:06:20,81] [debug] | 1                |
[2020-07-30 19:06:20,81] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:20,82] [debug] |------------------|
[2020-07-30 19:06:20,82] [debug] \------------------/
[2020-07-30 19:06:20,82] [debug] #6: success None
[2020-07-30 19:06:20,82] [debug] #7: success 0
[2020-07-30 19:06:20,82] [debug] #8: success (0,0)
[2020-07-30 19:06:20,82] [debug] #9: success (0,0)
[2020-07-30 19:06:20,82] [debug] #10: Commit
[2020-07-30 19:06:20,82] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:20,82] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:20,82] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,82] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:20,82] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,82] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:20,82] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:20,82] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:20,82] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:20,82] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:20,82] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:20,82] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:20,82] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:20,83] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:20,83] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:20,83] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:20,83] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,83] [debug] Flattening projection t8
[2020-07-30 19:06:20,83] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:20,83] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:20,83] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:20,83] [debug] Flattening projection t7
[2020-07-30 19:06:20,83] [debug] Flattening projection t9
[2020-07-30 19:06:20,83] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,83] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:20,83] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:20,83] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:20,83] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:20,83] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:20,83] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:20,83] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:20,83] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:20,83] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:20,83] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:20,83] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,83] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,83] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,83] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,83] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:20,83] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:20,83] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:20,83] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:20,83] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:20,83] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:20,83] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:20,83] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:20,83] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:20,83] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:20,83] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:20,83] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:20,83] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:20,83] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:20,83] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:20,83] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:20,83] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:20,83] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:20,83] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:20,83] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:20,83] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:20,83] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:20,84] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:20,84] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:20,84] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:20,84] [debug] Table fields: Map()
[2020-07-30 19:06:20,84] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:20,84] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:20,84] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:20,84] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:20,84] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:20,84] [debug] Replacements are: Map()
[2020-07-30 19:06:20,84] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:20,84] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:20,84] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:20,84] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:20,84] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:20,84] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:20,84] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:20,84] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:20,84] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:20,84] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:20,84] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:20,84] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:20,84] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:20,84] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:20,84] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:20,84] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:20,84] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:20,84] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:20,84] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:20,84] [debug]       assignUniqueSymbols:    0.398068 ms
[2020-07-30 19:06:20,84] [debug]           unrollTailBinds:    0.100427 ms
[2020-07-30 19:06:20,84] [debug]                inferTypes:    0.110598 ms
[2020-07-30 19:06:20,84] [debug]              expandTables:    0.863023 ms
[2020-07-30 19:06:20,84] [debug]           forceOuterBinds:    2.578322 ms
[2020-07-30 19:06:20,84] [debug]         removeMappedTypes:    0.108154 ms
[2020-07-30 19:06:20,84] [debug]                expandSums:    0.037270 ms
[2020-07-30 19:06:20,84] [debug]             expandRecords:    0.497485 ms
[2020-07-30 19:06:20,84] [debug]        flattenProjections:    2.207402 ms
[2020-07-30 19:06:20,84] [debug]              rewriteJoins:    1.059834 ms
[2020-07-30 19:06:20,84] [debug]             verifySymbols:    0.069685 ms
[2020-07-30 19:06:20,84] [debug]             relabelUnions:    0.060999 ms
[2020-07-30 19:06:20,84] [debug]          createAggregates:    3.280728 ms
[2020-07-30 19:06:20,84] [debug]           resolveZipJoins:    0.068567 ms
[2020-07-30 19:06:20,84] [debug]          pruneProjections:    0.345318 ms
[2020-07-30 19:06:20,84] [debug]           rewriteDistinct:    0.074659 ms
[2020-07-30 19:06:20,84] [debug]    createResultSetMapping:    0.616786 ms
[2020-07-30 19:06:20,84] [debug]            hoistClientOps:    1.470160 ms
[2020-07-30 19:06:20,84] [debug]         reorderOperations:    0.076470 ms
[2020-07-30 19:06:20,84] [debug]     mergeToComprehensions:    2.984761 ms
[2020-07-30 19:06:20,84] [debug]            optimizeScalar:    0.072526 ms
[2020-07-30 19:06:20,84] [debug]          removeFieldNames:    0.954642 ms
[2020-07-30 19:06:20,84] [debug]      specializeParameters:    0.146362 ms
[2020-07-30 19:06:20,84] [debug]                   codeGen:    1.231071 ms
[2020-07-30 19:06:20,84] [debug]                     TOTAL:   19.413317 ms
[2020-07-30 19:06:20,84] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:20,85] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:20,85] [debug] Executing prepared statement: HikariProxyPreparedStatement@881377242 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@48e79f49[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:20,85] [debug] Executing prepared statement: HikariProxyPreparedStatement@881377242 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@48e79f49[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:20,85] [debug] Execution of prepared statement took 143µs
[2020-07-30 19:06:20,85] [debug] /----\
[2020-07-30 19:06:20,85] [debug] | 1  |
[2020-07-30 19:06:20,85] [debug] | C1 |
[2020-07-30 19:06:20,85] [debug] |----|
[2020-07-30 19:06:20,85] [debug] | 0  |
[2020-07-30 19:06:20,85] [debug] \----/
[2020-07-30 19:06:21,84] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:21,84] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:21,84] [debug] #3: StartTransaction
[2020-07-30 19:06:21,84] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:21,84] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:21,84] [debug] Executing prepared statement: HikariProxyPreparedStatement@667681 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5710b157[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:21,84] [debug] Executing prepared statement: HikariProxyPreparedStatement@667681 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5710b157[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:21,84] [debug] /------\
[2020-07-30 19:06:21,84] [debug] | 1    |
[2020-07-30 19:06:21,84] [debug] | Long |
[2020-07-30 19:06:21,84] [debug] |------|
[2020-07-30 19:06:21,84] [debug] | 5000 |
[2020-07-30 19:06:21,84] [debug] \------/
[2020-07-30 19:06:21,84] [debug] Execution of prepared statement took 147µs
[2020-07-30 19:06:21,84] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:21,84] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:21,84] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:21,84] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:21,84] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:21,84] [debug] #5: success Vector()
[2020-07-30 19:06:21,84] [debug] #6: success Vector()
[2020-07-30 19:06:21,84] [debug] #7: success ()
[2020-07-30 19:06:21,84] [debug] #8: success ((),Vector())
[2020-07-30 19:06:21,84] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:21,84] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:21,84] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:21,84] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:21,84] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:21,84] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:21,84] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:21,84] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:21,84] [debug] Expanding tables in result type
[2020-07-30 19:06:21,84] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,85] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,85] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,85] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:21,85] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,85] [debug] Flattening projection t8
[2020-07-30 19:06:21,85] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,85] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:21,85] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:21,85] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:21,85] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:21,85] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:21,85] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,85] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:21,85] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:21,85] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:21,85] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:21,85] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:21,85] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:21,85] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:21,85] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:21,85] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:21,85] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:21,85] [debug] Creating mapping from Long'
[2020-07-30 19:06:21,85] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:21,85] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:21,85] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:21,85] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:21,85] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:21,85] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:21,85] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:21,85] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:21,85] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:21,85] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:21,85] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,85] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:21,85] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:21,85] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:21,85] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,85] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:21,85] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:21,85] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:21,85] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:21,85] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:21,85] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:21,85] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:21,86] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:21,86] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:21,86] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:21,86] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:21,86] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:21,86] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:21,86] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:21,86] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:21,86] [debug]       assignUniqueSymbols:    0.558790 ms
[2020-07-30 19:06:21,86] [debug]           unrollTailBinds:    0.097148 ms
[2020-07-30 19:06:21,86] [debug]                inferTypes:    0.211214 ms
[2020-07-30 19:06:21,86] [debug]              expandTables:    1.768560 ms
[2020-07-30 19:06:21,86] [debug]           forceOuterBinds:    0.551867 ms
[2020-07-30 19:06:21,86] [debug]         removeMappedTypes:    0.451514 ms
[2020-07-30 19:06:21,86] [debug]                expandSums:    0.066279 ms
[2020-07-30 19:06:21,86] [debug]             expandRecords:    0.413448 ms
[2020-07-30 19:06:21,86] [debug]        flattenProjections:    1.413839 ms
[2020-07-30 19:06:21,86] [debug]              rewriteJoins:    0.090221 ms
[2020-07-30 19:06:21,86] [debug]             verifySymbols:    0.099456 ms
[2020-07-30 19:06:21,86] [debug]             relabelUnions:    0.074589 ms
[2020-07-30 19:06:21,86] [debug]          createAggregates:    0.046586 ms
[2020-07-30 19:06:21,86] [debug]           resolveZipJoins:    0.094715 ms
[2020-07-30 19:06:21,86] [debug]          pruneProjections:    0.293197 ms
[2020-07-30 19:06:21,86] [debug]           rewriteDistinct:    0.090498 ms
[2020-07-30 19:06:21,86] [debug]    createResultSetMapping:    0.790880 ms
[2020-07-30 19:06:21,86] [debug]            hoistClientOps:    1.621832 ms
[2020-07-30 19:06:21,86] [debug]         reorderOperations:    0.144738 ms
[2020-07-30 19:06:21,86] [debug]     mergeToComprehensions:    2.707188 ms
[2020-07-30 19:06:21,86] [debug]            optimizeScalar:    0.079889 ms
[2020-07-30 19:06:21,86] [debug]          removeFieldNames:    0.978607 ms
[2020-07-30 19:06:21,86] [debug]      specializeParameters:    0.132125 ms
[2020-07-30 19:06:21,86] [debug]                   codeGen:    0.807378 ms
[2020-07-30 19:06:21,86] [debug]                     TOTAL:   13.584558 ms
[2020-07-30 19:06:21,86] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:21,86] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:21,86] [debug] Executing prepared update: HikariProxyPreparedStatement@1389748582 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5bdf8c7[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:21,86] [debug] Executing prepared update: HikariProxyPreparedStatement@1389748582 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5bdf8c7[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:21,86] [debug] Execution of prepared update took 99µs
[2020-07-30 19:06:21,86] [debug] #10: success 0
[2020-07-30 19:06:21,86] [debug] #11: Commit
[2020-07-30 19:06:21,86] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:21,86] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:21,86] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:21,86] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:21,86] [debug] #3: StartTransaction
[2020-07-30 19:06:21,86] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:21,86] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:21,86] [debug] Executing prepared statement: HikariProxyPreparedStatement@1540710186 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@31c4f215[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:21,86] [debug] Executing prepared statement: HikariProxyPreparedStatement@1540710186 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@31c4f215[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:21,86] [debug] /---------------------------\
[2020-07-30 19:06:21,86] [debug] | 1                         |
[2020-07-30 19:06:21,86] [debug] | String                    |
[2020-07-30 19:06:21,86] [debug] |---------------------------|
[2020-07-30 19:06:21,86] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:21,86] [debug] \---------------------------/
[2020-07-30 19:06:21,86] [debug] Execution of prepared statement took 49µs
[2020-07-30 19:06:21,86] [debug] /------------------\
[2020-07-30 19:06:21,86] [debug] | 1                |
[2020-07-30 19:06:21,86] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:21,86] [debug] |------------------|
[2020-07-30 19:06:21,86] [debug] \------------------/
[2020-07-30 19:06:21,86] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:21,86] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:21,86] [debug] Executing prepared statement: HikariProxyPreparedStatement@463243854 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4954103a[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:21,86] [debug] Executing prepared statement: HikariProxyPreparedStatement@463243854 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4954103a[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:21,86] [debug] /---------------------------\
[2020-07-30 19:06:21,86] [debug] | 1                         |
[2020-07-30 19:06:21,86] [debug] | String                    |
[2020-07-30 19:06:21,86] [debug] |---------------------------|
[2020-07-30 19:06:21,86] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:21,86] [debug] \---------------------------/
[2020-07-30 19:06:21,86] [debug] Execution of prepared statement took 67µs
[2020-07-30 19:06:21,86] [debug] /------------------\
[2020-07-30 19:06:21,86] [debug] | 1                |
[2020-07-30 19:06:21,86] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:21,86] [debug] |------------------|
[2020-07-30 19:06:21,86] [debug] \------------------/
[2020-07-30 19:06:21,86] [debug] #6: success None
[2020-07-30 19:06:21,86] [debug] #7: success 0
[2020-07-30 19:06:21,86] [debug] #8: success (0,0)
[2020-07-30 19:06:21,86] [debug] #9: success (0,0)
[2020-07-30 19:06:21,86] [debug] #10: Commit
[2020-07-30 19:06:21,87] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:21,87] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:21,87] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,87] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:21,87] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,87] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:21,87] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:21,87] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:21,87] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:21,87] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:21,87] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:21,87] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:21,87] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:21,87] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:21,87] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:21,87] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:21,87] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,87] [debug] Flattening projection t8
[2020-07-30 19:06:21,87] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:21,87] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:21,87] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:21,87] [debug] Flattening projection t7
[2020-07-30 19:06:21,87] [debug] Flattening projection t9
[2020-07-30 19:06:21,87] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,87] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:21,87] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:21,87] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:21,87] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:21,87] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:21,87] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:21,87] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:21,87] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:21,87] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:21,87] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:21,87] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,87] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,87] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,87] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,87] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:21,87] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:21,87] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:21,87] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:21,87] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:21,87] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:21,87] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:21,87] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:21,87] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:21,87] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:21,87] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:21,87] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:21,87] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:21,87] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:21,87] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:21,87] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:21,87] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:21,87] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:21,87] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:21,87] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:21,87] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:21,87] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:21,87] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:21,87] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:21,88] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:21,88] [debug] Table fields: Map()
[2020-07-30 19:06:21,88] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:21,88] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:21,88] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:21,88] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:21,88] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:21,88] [debug] Replacements are: Map()
[2020-07-30 19:06:21,88] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:21,88] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:21,88] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:21,88] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:21,88] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:21,88] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:21,88] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:21,88] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:21,88] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:21,88] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:21,88] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:21,88] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:21,88] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:21,88] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:21,88] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:21,88] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:21,88] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:21,88] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:21,88] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:21,88] [debug]       assignUniqueSymbols:    0.290076 ms
[2020-07-30 19:06:21,88] [debug]           unrollTailBinds:    0.044069 ms
[2020-07-30 19:06:21,88] [debug]                inferTypes:    0.076519 ms
[2020-07-30 19:06:21,88] [debug]              expandTables:    0.601304 ms
[2020-07-30 19:06:21,88] [debug]           forceOuterBinds:    0.539893 ms
[2020-07-30 19:06:21,88] [debug]         removeMappedTypes:    0.089244 ms
[2020-07-30 19:06:21,88] [debug]                expandSums:    0.029794 ms
[2020-07-30 19:06:21,88] [debug]             expandRecords:    0.370352 ms
[2020-07-30 19:06:21,88] [debug]        flattenProjections:    1.658674 ms
[2020-07-30 19:06:21,88] [debug]              rewriteJoins:    0.897342 ms
[2020-07-30 19:06:21,88] [debug]             verifySymbols:    0.074025 ms
[2020-07-30 19:06:21,88] [debug]             relabelUnions:    0.052419 ms
[2020-07-30 19:06:21,88] [debug]          createAggregates:    2.338886 ms
[2020-07-30 19:06:21,88] [debug]           resolveZipJoins:    0.058664 ms
[2020-07-30 19:06:21,88] [debug]          pruneProjections:    0.203492 ms
[2020-07-30 19:06:21,88] [debug]           rewriteDistinct:    0.074079 ms
[2020-07-30 19:06:21,88] [debug]    createResultSetMapping:    0.406809 ms
[2020-07-30 19:06:21,88] [debug]            hoistClientOps:    0.947411 ms
[2020-07-30 19:06:21,88] [debug]         reorderOperations:    0.066304 ms
[2020-07-30 19:06:21,88] [debug]     mergeToComprehensions:    5.045591 ms
[2020-07-30 19:06:21,88] [debug]            optimizeScalar:    0.071882 ms
[2020-07-30 19:06:21,88] [debug]          removeFieldNames:    0.852526 ms
[2020-07-30 19:06:21,88] [debug]      specializeParameters:    0.131189 ms
[2020-07-30 19:06:21,88] [debug]                   codeGen:    0.934892 ms
[2020-07-30 19:06:21,88] [debug]                     TOTAL:   15.855436 ms
[2020-07-30 19:06:21,88] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:21,88] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:21,89] [debug] Executing prepared statement: HikariProxyPreparedStatement@1033418920 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@54a4b7c6[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:21,89] [debug] Executing prepared statement: HikariProxyPreparedStatement@1033418920 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@54a4b7c6[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:21,89] [debug] Execution of prepared statement took 140µs
[2020-07-30 19:06:21,89] [debug] /----\
[2020-07-30 19:06:21,89] [debug] | 1  |
[2020-07-30 19:06:21,89] [debug] | C1 |
[2020-07-30 19:06:21,89] [debug] |----|
[2020-07-30 19:06:21,89] [debug] | 0  |
[2020-07-30 19:06:21,89] [debug] \----/
[2020-07-30 19:06:22,23] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@7e899165
          base: SetTransactionIsolation
[2020-07-30 19:06:22,23] [debug] Preparing statement: select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:22,23] [debug] Executing prepared statement: HikariProxyPreparedStatement@182757212 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1c26aa97[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:22,23] [debug] Executing prepared statement: HikariProxyPreparedStatement@182757212 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1c26aa97[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:22,23] [debug] /---------------------------\
[2020-07-30 19:06:22,23] [debug] | 1                         |
[2020-07-30 19:06:22,23] [debug] | String                    |
[2020-07-30 19:06:22,23] [debug] |---------------------------|
[2020-07-30 19:06:22,23] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:22,23] [debug] \---------------------------/
[2020-07-30 19:06:22,23] [debug] Execution of prepared statement took 191µs
[2020-07-30 19:06:22,23] [debug] /-----------------\
[2020-07-30 19:06:22,23] [debug] | 1               |
[2020-07-30 19:06:22,23] [debug] | WORKFLOW_STATUS |
[2020-07-30 19:06:22,23] [debug] |-----------------|
[2020-07-30 19:06:22,23] [debug] | Running         |
[2020-07-30 19:06:22,23] [debug] \-----------------/
[2020-07-30 19:06:22,52] [debug] Source:
| TableExpansion
|   table s2: Table METADATA_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s2.CALL_FQN : Option[String']
|       3: Path s2.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s2.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s2.METADATA_KEY : String'
|       6: Path s2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s2.METADATA_VALUE_TYPE : Option[String']
|       8: Path s2.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply
|         0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,52] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:22,52] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table METADATA_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s3.CALL_FQN : Option[String']
|       3: Path s3.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s3.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s3.METADATA_KEY : String'
|       6: Path s3.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s3.METADATA_VALUE_TYPE : Option[String']
|       8: Path s3.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply
|         0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,52] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:22,52] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: Filter s4
|       from s4: Filter s5
|         from s5: Filter s6
|           from s6: Filter s7
|             from s7: TableExpansion
|               table s8: Table JOB_KEY_VALUE_ENTRY
|               columns: TypeMapping
|                 0: ProductNode
|                   1: Path s8.WORKFLOW_EXECUTION_UUID : String'
|                   2: Path s8.CALL_FULLY_QUALIFIED_NAME : String'
|                   3: Path s8.JOB_INDEX : Int'
|                   4: Path s8.JOB_ATTEMPT : Int'
|                   5: Path s8.STORE_KEY : String'
|                   6: Path s8.STORE_VALUE : String'
|                   7: OptionApply
|                     0: Path s8.JOB_KEY_VALUE_ENTRY_ID : Int'
|             where: Apply Function =
|               0: Path s7.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0
|           where: Apply Function =
|             0: Path s6.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043
|         where: Apply Function =
|           0: Path s5.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5
|       where: Apply Function =
|         0: Path s4.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e
|     where: Apply Function =
|       0: Path s3.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b
|   select: Pure t14
|     value: Path s2.STORE_VALUE : String'

[2020-07-30 19:06:22,52] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:22,52] [debug] After phase assignUniqueSymbols:
| Bind
|   from s15: Filter s16
|     from s16: Filter s17
|       from s17: Filter s18
|         from s18: Filter s19
|           from s19: Filter s20
|             from s20: TableExpansion
|               table s21: Table JOB_KEY_VALUE_ENTRY
|               columns: TypeMapping
|                 0: ProductNode
|                   1: Path s21.WORKFLOW_EXECUTION_UUID : String'
|                   2: Path s21.CALL_FULLY_QUALIFIED_NAME : String'
|                   3: Path s21.JOB_INDEX : Int'
|                   4: Path s21.JOB_ATTEMPT : Int'
|                   5: Path s21.STORE_KEY : String'
|                   6: Path s21.STORE_VALUE : String'
|                   7: OptionApply
|                     0: Path s21.JOB_KEY_VALUE_ENTRY_ID : Int'
|             where: Apply Function =
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0
|           where: Apply Function =
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043
|         where: Apply Function =
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5
|       where: Apply Function =
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e
|     where: Apply Function =
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b
|   select: Pure t23
|     value: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:22,52] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:22,53] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:22,53] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')]
|   from s5: Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FQN, JOB_SCATTER_INDEX, JOB_RETRY_ATTEMPT, METADATA_KEY, METADATA_VALUE, METADATA_VALUE_TYPE, METADATA_TIMESTAMP, METADATA_JOURNAL_ID] : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|     table s6: Table METADATA_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|       1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s6.CALL_FQN : Option[String']
|       3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s6.METADATA_KEY : String'
|       6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s6.METADATA_VALUE_TYPE : Option[String']
|       8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: InsertColumn WORKFLOW_EXECUTION_UUID : String'
|         0: Path s5._1 : String'
|       2: InsertColumn CALL_FQN : Option[String']
|         0: Path s5._2 : Option[String']
|       3: InsertColumn JOB_SCATTER_INDEX : Option[Int']
|         0: Path s5._3 : Option[Int']
|       4: InsertColumn JOB_RETRY_ATTEMPT : Option[Int']
|         0: Path s5._4 : Option[Int']
|       5: InsertColumn METADATA_KEY : String'
|         0: Path s5._5 : String'
|       6: InsertColumn METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         0: Path s5._6 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: InsertColumn METADATA_VALUE_TYPE : Option[String']
|         0: Path s5._7 : Option[String']
|       8: InsertColumn METADATA_TIMESTAMP : java.sql.Timestamp'
|         0: Path s5._8 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: InsertColumn METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,53] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.JOB_KEY_VALUE_ENTRY)
[2020-07-30 19:06:22,53] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FQN, JOB_SCATTER_INDEX, JOB_RETRY_ATTEMPT, METADATA_KEY, METADATA_VALUE, METADATA_VALUE_TYPE, METADATA_TIMESTAMP, METADATA_JOURNAL_ID] : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|   table s6: Table METADATA_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|     1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|     2: Path s6.CALL_FQN : Option[String']
|     3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|     4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|     5: Path s6.METADATA_KEY : String'
|     6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|     7: Path s6.METADATA_VALUE_TYPE : Option[String']
|     8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:22,53] [debug] With correct table types:
| Bind : Vector[t23<String'>]
|   from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             where: Apply Function = : Boolean
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|           where: Apply Function = : Boolean
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|         where: Apply Function = : Boolean
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|       where: Apply Function = : Boolean
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|     where: Apply Function = : Boolean
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'
|   select: Pure t23 : Vector[t23<String'>]
|     value: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:22,53] [debug] Table expansions: @t22 -> (s21,TypeMapping)
[2020-07-30 19:06:22,53] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|     3: OptionResultConverter$mcI$sp idx=3 : Int'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=METADATA_KEY : String'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|     8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=METADATA_TIMESTAMP : java.sql.Timestamp'
|     9: CompoundResultConverter

[2020-07-30 19:06:22,53] [debug] Compiled server-side to:
| CompiledStatement "insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')

[2020-07-30 19:06:22,53] [debug] After phase expandTables:
| Bind : Vector[t23<String'>]
|   from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             where: Apply Function = : Boolean
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|           where: Apply Function = : Boolean
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|         where: Apply Function = : Boolean
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|       where: Apply Function = : Boolean
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|     where: Apply Function = : Boolean
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'
|   select: Pure t23 : Vector[t23<String'>]
|     value: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:22,53] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')]
|   from s5: CompiledStatement "insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|   map: CompiledMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|         3: OptionResultConverter$mcI$sp idx=3 : Int'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=METADATA_KEY : String'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|         8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: CompoundResultConverter

[2020-07-30 19:06:22,53] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:22,53] [debug] After phase forceOuterBinds:
| Bind : Vector[t23<String'>]
|   from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             where: Apply Function = : Boolean
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|           where: Apply Function = : Boolean
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|         where: Apply Function = : Boolean
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|       where: Apply Function = : Boolean
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|     where: Apply Function = : Boolean
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'
|   select: Pure t23 : Vector[t23<String'>]
|     value: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:22,53] [debug]       assignUniqueSymbols:    1.367864 ms
[2020-07-30 19:06:22,53] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:22,53] [debug]                inferTypes:    0.281902 ms
[2020-07-30 19:06:22,53] [debug]            insertCompiler:    2.679435 ms
[2020-07-30 19:06:22,53] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:22,53] [debug]                   codeGen:    2.034479 ms
[2020-07-30 19:06:22,53] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:22,53] [debug] Translated type: String' -> String'
[2020-07-30 19:06:22,53] [debug] Translated type: String' -> String'
[2020-07-30 19:06:22,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:22,53] [debug]                     TOTAL:    6.363680 ms
[2020-07-30 19:06:22,53] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:22,53] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:22,53] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: sequence
          1: MultiInsertAction [insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)]
[2020-07-30 19:06:22,53] [debug] Preparing statement: insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:22,53] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@ae7cd480], [string], [org.hsqldb.types.TimestampData@67627789]]]
[2020-07-30 19:06:22,53] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@ae7cd480], [string], [org.hsqldb.types.TimestampData@67627789]]]
[2020-07-30 19:06:22,53] [debug] /---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:22,53] [debug] | 1                         | 2                         | 3       | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:22,53] [debug] | String                    | String                    | INTEGER | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,53] [debug] |---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:22,53] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionStatus |      | string | 2020-07-30 19:06:17.94... |
[2020-07-30 19:06:22,53] [debug] \---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:22,53] [debug] Translated type: String' -> String'
[2020-07-30 19:06:22,53] [debug] Translated type: String' -> String'
[2020-07-30 19:06:22,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:22,53] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:22,53] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:22,53] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:22,53] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:22,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:22,53] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:22,53] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:22,53] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:22,53] [debug] Translated type: Int' -> Int'
[2020-07-30 19:06:22,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:22,53] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:22,53] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:22,53] [debug] Translated type: String' -> String'
[2020-07-30 19:06:22,53] [debug] Translated type: String' -> String'
[2020-07-30 19:06:22,53] [debug] Translated type: Boolean -> Boolean
[2020-07-30 19:06:22,53] [debug] Translated type: Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>] -> Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
[2020-07-30 19:06:22,53] [debug] Translated type: @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}> -> @t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>
[2020-07-30 19:06:22,53] [debug] Translated type: String' -> String'
[2020-07-30 19:06:22,53] [debug] Translated type: Vector[t23<String'>] -> Vector[t23<String'>]
[2020-07-30 19:06:22,53] [debug] Translated type: Vector[t23<String'>] -> Vector[t23<String'>]
[2020-07-30 19:06:22,53] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:22,53] [debug] After phase expandRecords:
| Bind : Vector[t23<String'>]
|   from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             where: Apply Function = : Boolean
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|           where: Apply Function = : Boolean
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|         where: Apply Function = : Boolean
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|       where: Apply Function = : Boolean
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|     where: Apply Function = : Boolean
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'
|   select: Pure t23 : Vector[t23<String'>]
|     value: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:22,53] [debug] Analyzing s20.WORKFLOW_EXECUTION_UUID with symbols 
| Path s20.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:22,53] [debug] Translated s20.WORKFLOW_EXECUTION_UUID to:
| Path s20.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:22,53] [debug] Analyzing s19.CALL_FULLY_QUALIFIED_NAME with symbols 
| Path s19.CALL_FULLY_QUALIFIED_NAME : String'

[2020-07-30 19:06:22,53] [debug] Translated s19.CALL_FULLY_QUALIFIED_NAME to:
| Path s19.CALL_FULLY_QUALIFIED_NAME

[2020-07-30 19:06:22,53] [debug] Analyzing s18.JOB_INDEX with symbols 
| Path s18.JOB_INDEX : Int'

[2020-07-30 19:06:22,53] [debug] Translated s18.JOB_INDEX to:
| Path s18.JOB_INDEX

[2020-07-30 19:06:22,53] [debug] Analyzing s17.JOB_ATTEMPT with symbols 
| Path s17.JOB_ATTEMPT : Int'

[2020-07-30 19:06:22,53] [debug] Translated s17.JOB_ATTEMPT to:
| Path s17.JOB_ATTEMPT

[2020-07-30 19:06:22,53] [debug] Analyzing s16.STORE_KEY with symbols 
| Path s16.STORE_KEY : String'

[2020-07-30 19:06:22,53] [debug] Translated s16.STORE_KEY to:
| Path s16.STORE_KEY

[2020-07-30 19:06:22,53] [debug] Flattening projection t23
[2020-07-30 19:06:22,53] [debug] Analyzing s15.STORE_VALUE with symbols 
| Path s15.STORE_VALUE : String'

[2020-07-30 19:06:22,53] [debug] Translated s15.STORE_VALUE to:
| Path s15.STORE_VALUE

[2020-07-30 19:06:22,53] [debug] Flattening node at Path 
| Path s15.STORE_VALUE

[2020-07-30 19:06:22,53] [debug] Adding definition: s24 -> Path s15.STORE_VALUE
[2020-07-30 19:06:22,53] [debug] Adding translation for t23: (Map(List() -> s24), UnassignedType)
[2020-07-30 19:06:22,53] [debug] Flattened projection to
| Pure t23
|   value: StructNode
|     s24: Path s15.STORE_VALUE

[2020-07-30 19:06:22,53] [debug] After phase flattenProjections:
| Bind : Vector[t23<{s24: String'}>]
|   from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             where: Apply Function = : Boolean
|               0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|           where: Apply Function = : Boolean
|             0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|         where: Apply Function = : Boolean
|           0: Path s18.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|       where: Apply Function = : Boolean
|         0: Path s17.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|     where: Apply Function = : Boolean
|       0: Path s16.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'
|   select: Pure t23 : Vector[t23<{s24: String'}>]
|     value: StructNode : {s24: String'}
|       s24: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:22,53] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:22,53] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:22,53] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:22,53] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:22,53] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:22,53] [debug] Unreferenced: t23; Field refs: (@t22,STORE_VALUE), (@t22,WORKFLOW_EXECUTION_UUID), (@t22,CALL_FULLY_QUALIFIED_NAME), (@t22,STORE_KEY), (@t22,JOB_ATTEMPT), (@t22,JOB_INDEX)
[2020-07-30 19:06:22,53] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:22,53] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:22,53] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:22,53] [debug] Creating mapping from t23<String'>
[2020-07-30 19:06:22,54] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[String']
|   from s25: Bind : Vector[t23<{s24: String'}>]
|     from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|               from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|               where: Apply Function = : Boolean
|                 0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|                 1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|             where: Apply Function = : Boolean
|               0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|               1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|           where: Apply Function = : Boolean
|             0: Path s18.JOB_INDEX : Int'
|             1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|         where: Apply Function = : Boolean
|           0: Path s17.JOB_ATTEMPT : Int'
|           1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|       where: Apply Function = : Boolean
|         0: Path s16.STORE_KEY : String'
|         1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'
|     select: Pure t23 : Vector[t23<{s24: String'}>]
|       value: StructNode : {s24: String'}
|         s24: Path s15.STORE_VALUE : String'
|   map: Path s25.s24 : String'

[2020-07-30 19:06:22,54] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:22,54] [debug] New defs: Map(0 -> (Path s15.STORE_VALUE,s26))
[2020-07-30 19:06:22,54] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[String']
|   from s25: Bind : Vector[t27<{s26: String'}>]
|     from s15: ...
|     select: Pure t27 : Vector[t27<{s26: String'}>]
|       value: StructNode : {s26: String'}
|         s26: Path s15.STORE_VALUE : String'
|   map: Path s25.s26 : String'

[2020-07-30 19:06:22,54] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[String']
|   from s25: Bind : Vector[t27<{s26: String'}>]
|     from s15: Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|       from s16: Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|         from s17: Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|           from s18: Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|             from s19: Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|               from s20: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|               where: Apply Function = : Boolean
|                 0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|                 1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|             where: Apply Function = : Boolean
|               0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|               1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|           where: Apply Function = : Boolean
|             0: Path s18.JOB_INDEX : Int'
|             1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|         where: Apply Function = : Boolean
|           0: Path s17.JOB_ATTEMPT : Int'
|           1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|       where: Apply Function = : Boolean
|         0: Path s16.STORE_KEY : String'
|         1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'
|     select: Pure t27 : Vector[t27<{s26: String'}>]
|       value: StructNode : {s26: String'}
|         s26: Path s15.STORE_VALUE : String'
|   map: Path s25.s26 : String'

[2020-07-30 19:06:22,54] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:22,54] [debug] Table fields: Map(@t22 -> Vector(WORKFLOW_EXECUTION_UUID, CALL_FULLY_QUALIFIED_NAME, JOB_INDEX, JOB_ATTEMPT, STORE_KEY, STORE_VALUE))
[2020-07-30 19:06:22,54] [debug] Creating source from TableNode:
| Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]

[2020-07-30 19:06:22,54] [debug] Mappings are: ConstArray(((@t22,WORKFLOW_EXECUTION_UUID),List(WORKFLOW_EXECUTION_UUID)), ((@t22,CALL_FULLY_QUALIFIED_NAME),List(CALL_FULLY_QUALIFIED_NAME)), ((@t22,JOB_INDEX),List(JOB_INDEX)), ((@t22,JOB_ATTEMPT),List(JOB_ATTEMPT)), ((@t22,STORE_KEY),List(STORE_KEY)), ((@t22,STORE_VALUE),List(STORE_VALUE)))
[2020-07-30 19:06:22,54] [debug] Building new Comprehension from:
| Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]

[2020-07-30 19:06:22,54] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:22,54] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:effectiveCallCachingMode], [javax.sql.rowset.serial.SerialClob@d7e765e2], [string], [org.hsqldb.types.TimestampData@675e30b1]]]
[2020-07-30 19:06:22,54] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:effectiveCallCachingMode], [javax.sql.rowset.serial.SerialClob@d7e765e2], [string], [org.hsqldb.types.TimestampData@675e30b1]]]
[2020-07-30 19:06:22,54] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,54] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:22,54] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,54] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,54] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:effectiveC... |      | string | 2020-07-30 19:06:17.94... |
[2020-07-30 19:06:22,54] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,54] [debug] Built new Comprehension:
| Comprehension s28, None, None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'

[2020-07-30 19:06:22,54] [debug] Replacements are: Map((@t22,STORE_VALUE) -> s35, (@t22,WORKFLOW_EXECUTION_UUID) -> s30, (@t22,CALL_FULLY_QUALIFIED_NAME) -> s31, (@t22,STORE_KEY) -> s34, (@t22,JOB_ATTEMPT) -> s33, (@t22,JOB_INDEX) -> s32)
[2020-07-30 19:06:22,54] [debug] Merging Filter into Comprehension:
| Filter s20 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   from s20: ...
|   where: Apply Function = : Boolean
|     0: Path s20.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'

[2020-07-30 19:06:22,54] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'
|   where: Apply Function = : Boolean
|     0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|     1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'

[2020-07-30 19:06:22,54] [debug] Merging Filter into Comprehension:
| Filter s19 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   from s19: ...
|   where: Apply Function = : Boolean
|     0: Path s19.CALL_FULLY_QUALIFIED_NAME : String'
|     1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'

[2020-07-30 19:06:22,54] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function = : Boolean
|       0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|     1: Apply Function = : Boolean
|       0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'

[2020-07-30 19:06:22,54] [debug] Merging Filter into Comprehension:
| Filter s18 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   from s18: ...
|   where: Apply Function = : Boolean
|     0: Path s18.JOB_INDEX : Int'
|     1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'

[2020-07-30 19:06:22,54] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function and : Boolean
|       0: Apply Function = : Boolean
|         0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|         1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|       1: Apply Function = : Boolean
|         0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|         1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|     1: Apply Function = : Boolean
|       0: Path s28.JOB_INDEX : Int'
|       1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'

[2020-07-30 19:06:22,54] [debug] Merging Filter into Comprehension:
| Filter s17 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   from s17: ...
|   where: Apply Function = : Boolean
|     0: Path s17.JOB_ATTEMPT : Int'
|     1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'

[2020-07-30 19:06:22,54] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function = : Boolean
|           0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|           1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|         1: Apply Function = : Boolean
|           0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|           1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|       1: Apply Function = : Boolean
|         0: Path s28.JOB_INDEX : Int'
|         1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|     1: Apply Function = : Boolean
|       0: Path s28.JOB_ATTEMPT : Int'
|       1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'

[2020-07-30 19:06:22,54] [debug] Merging Filter into Comprehension:
| Filter s16 : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   from s16: ...
|   where: Apply Function = : Boolean
|     0: Path s16.STORE_KEY : String'
|     1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'

[2020-07-30 19:06:22,55] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:22,55] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:allowResultReuse], [javax.sql.rowset.serial.SerialClob@155fa2e], [boolean], [org.hsqldb.types.TimestampData@675c3079]]]
[2020-07-30 19:06:22,55] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:allowResultReuse], [javax.sql.rowset.serial.SerialClob@155fa2e], [boolean], [org.hsqldb.types.TimestampData@675c3079]]]
[2020-07-30 19:06:22,55] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:22,55] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:22,55] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String  | Timestamp                 |
[2020-07-30 19:06:22,55] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:22,55] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:allowResul... |      | boolean | 2020-07-30 19:06:17.94... |
[2020-07-30 19:06:22,55] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:22,55] [debug] Merged Filter into Comprehension:
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t29 : Vector[t29<{s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}>]
|     value: StructNode : {s30: String', s31: String', s32: Int', s33: Int', s34: String', s35: String'}
|       s30: Path s28.WORKFLOW_EXECUTION_UUID : String'
|       s31: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|       s32: Path s28.JOB_INDEX : Int'
|       s33: Path s28.JOB_ATTEMPT : Int'
|       s34: Path s28.STORE_KEY : String'
|       s35: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|             1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|           1: Apply Function = : Boolean
|             0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|     1: Apply Function = : Boolean
|       0: Path s28.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'

[2020-07-30 19:06:22,55] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t27<{s26: String'}>]
|   from s15: ...
|   select: Pure t27 : Vector[t27<{s26: String'}>]
|     value: StructNode : {s26: String'}
|       s26: Path s15.STORE_VALUE : String'

[2020-07-30 19:06:22,55] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<{s26: String'}>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t27 : Vector[t27<{s26: String'}>]
|     value: StructNode : {s26: String'}
|       s26: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|             1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|           1: Apply Function = : Boolean
|             0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|     1: Apply Function = : Boolean
|       0: Path s28.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'

[2020-07-30 19:06:22,55] [debug] Replacements are: Map((t27,s26) -> s26)
[2020-07-30 19:06:22,55] [debug] Mappings are: ConstArray(((t27,s26),List(s26)))
[2020-07-30 19:06:22,55] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[String']
|   from s25: Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<{s26: String'}>]
|     from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     select: Pure t27 : Vector[t27<{s26: String'}>]
|       value: StructNode : {s26: String'}
|         s26: Path s28.STORE_VALUE : String'
|     where: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|             1: Apply Function = : Boolean
|               0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|               1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|           1: Apply Function = : Boolean
|             0: Path s28.JOB_INDEX : Int'
|             1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_ATTEMPT : Int'
|           1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.STORE_KEY : String'
|         1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'
|   map: Path s25.s26 : String'

[2020-07-30 19:06:22,55] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:22,55] [debug] Required symbols: s26 -> 0
[2020-07-30 19:06:22,55] [debug] Transformed RSM: 
| ResultSetMapping
|   from s25: Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<(String')>]
|     from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     select: Pure t27 : Vector[t27<(String')>]
|       value: ProductNode : (String')
|         1: Path s28.STORE_VALUE : String'
|     where: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|             1: Apply Function = : Boolean
|               0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|               1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|           1: Apply Function = : Boolean
|             0: Path s28.JOB_INDEX : Int'
|             1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_ATTEMPT : Int'
|           1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.STORE_KEY : String'
|         1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'
|   map: Path s25.s26 : String'

[2020-07-30 19:06:22,55] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[String']
|   from s25: Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<(String')>]
|     from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|     select: Pure t27 : Vector[t27<(String')>]
|       value: ProductNode : (String')
|         1: Path s28.STORE_VALUE : String'
|     where: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function and : Boolean
|             0: Apply Function = : Boolean
|               0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|               1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|             1: Apply Function = : Boolean
|               0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|               1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|           1: Apply Function = : Boolean
|             0: Path s28.JOB_INDEX : Int'
|             1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_ATTEMPT : Int'
|           1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.STORE_KEY : String'
|         1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'
|   map: Path s25._1 : String'

[2020-07-30 19:06:22,55] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:22,55] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:22,55] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,55] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [compressedDockerSize], [javax.sql.rowset.serial.SerialClob@5714fbc4], [int], [org.hsqldb.types.TimestampData@5b4c2733]]]
[2020-07-30 19:06:22,55] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [compressedDockerSize], [javax.sql.rowset.serial.SerialClob@5714fbc4], [int], [org.hsqldb.types.TimestampData@5b4c2733]]]
[2020-07-30 19:06:22,55] [debug] /---------------------------+---------------------------+---------+-----+----------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,55] [debug] | 1                         | 2                         | 3       | 4   | 5                    | 6    | 7      | 8                         |
[2020-07-30 19:06:22,55] [debug] | String                    | String                    | INTEGER | Int | String               | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,55] [debug] |---------------------------+---------------------------+---------+-----+----------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,55] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | compressedDockerSize |      | int    | 2020-07-30 19:06:19.07... |
[2020-07-30 19:06:22,55] [debug] \---------------------------+---------------------------+---------+-----+----------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,55] [debug] Compiling server-side and mapping with server-side:
| Comprehension s28, Some(Apply Function and), None, ConstArray(), None, None, None, None, false : Vector[t27<(String')>]
|   from s28: Table JOB_KEY_VALUE_ENTRY : Vector[@t22<{STORE_VALUE: String', JOB_KEY_VALUE_ENTRY_ID: Int', WORKFLOW_EXECUTION_UUID: String', JOB_ATTEMPT: Int', STORE_KEY: String', JOB_INDEX: Int', CALL_FULLY_QUALIFIED_NAME: String'}>]
|   select: Pure t27 : Vector[t27<(String')>]
|     value: ProductNode : (String')
|       1: Path s28.STORE_VALUE : String'
|   where: Apply Function and : Boolean
|     0: Apply Function and : Boolean
|       0: Apply Function and : Boolean
|         0: Apply Function and : Boolean
|           0: Apply Function = : Boolean
|             0: Path s28.WORKFLOW_EXECUTION_UUID : String'
|             1: QueryParameter s9 scala.Function1$$Lambda$311/0x0000000800e66040@3325e7e0 : String'
|           1: Apply Function = : Boolean
|             0: Path s28.CALL_FULLY_QUALIFIED_NAME : String'
|             1: QueryParameter s10 scala.Function1$$Lambda$311/0x0000000800e66040@2e957043 : String'
|         1: Apply Function = : Boolean
|           0: Path s28.JOB_INDEX : Int'
|           1: QueryParameter s11 scala.Function1$$Lambda$311/0x0000000800e66040@1e4cd8e5 : Int'
|       1: Apply Function = : Boolean
|         0: Path s28.JOB_ATTEMPT : Int'
|         1: QueryParameter s12 scala.Function1$$Lambda$311/0x0000000800e66040@6ad5943e : Int'
|     1: Apply Function = : Boolean
|       0: Path s28.STORE_KEY : String'
|       1: QueryParameter s13 scala.Function1$$Lambda$311/0x0000000800e66040@41927f0b : String'

[2020-07-30 19:06:22,56] [debug] Compiled ResultConverter
| SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'

[2020-07-30 19:06:22,56] [debug] Compiled server-side to:
| CompiledStatement "update "JOB_KEY_VALUE_ENTRY" set "STORE_VALUE" = ? where (((("JOB_KEY_VALUE_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("JOB_KEY_VALUE_ENTRY"."CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_INDEX" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_ATTEMPT" = ?)) and ("JOB_KEY_VALUE_ENTRY"."STORE_KEY" = ?)" : Vector[t27<(String')>]

[2020-07-30 19:06:22,56] [debug] After phase codeGen:
| ResultSetMapping : Vector[String']
|   from s25: CompiledStatement "update "JOB_KEY_VALUE_ENTRY" set "STORE_VALUE" = ? where (((("JOB_KEY_VALUE_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("JOB_KEY_VALUE_ENTRY"."CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_INDEX" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_ATTEMPT" = ?)) and ("JOB_KEY_VALUE_ENTRY"."STORE_KEY" = ?)" : Vector[t27<(String')>]
|   map: CompiledMapping : String'
|     converter: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'

[2020-07-30 19:06:22,56] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:22,56] [debug]       assignUniqueSymbols:    0.811799 ms
[2020-07-30 19:06:22,56] [debug]           unrollTailBinds:    0.064274 ms
[2020-07-30 19:06:22,56] [debug]                inferTypes:    0.190167 ms
[2020-07-30 19:06:22,56] [debug]              expandTables:    1.795048 ms
[2020-07-30 19:06:22,56] [debug]           forceOuterBinds:    0.775565 ms
[2020-07-30 19:06:22,56] [debug]         removeMappedTypes:    0.127598 ms
[2020-07-30 19:06:22,56] [debug]                expandSums:    4.016558 ms
[2020-07-30 19:06:22,56] [debug]             expandRecords:    0.669869 ms
[2020-07-30 19:06:22,56] [debug]        flattenProjections:    1.673430 ms
[2020-07-30 19:06:22,56] [debug]              rewriteJoins:    0.064799 ms
[2020-07-30 19:06:22,56] [debug]             verifySymbols:    0.085638 ms
[2020-07-30 19:06:22,56] [debug]             relabelUnions:    0.047999 ms
[2020-07-30 19:06:22,56] [debug]          createAggregates:    0.024572 ms
[2020-07-30 19:06:22,56] [debug]           resolveZipJoins:    0.042780 ms
[2020-07-30 19:06:22,56] [debug]          pruneProjections:    0.249207 ms
[2020-07-30 19:06:22,56] [debug]           rewriteDistinct:    0.036889 ms
[2020-07-30 19:06:22,56] [debug]    createResultSetMapping:    1.071860 ms
[2020-07-30 19:06:22,56] [debug]            hoistClientOps:    1.337091 ms
[2020-07-30 19:06:22,56] [debug]         reorderOperations:    0.065203 ms
[2020-07-30 19:06:22,56] [debug]     mergeToComprehensions:   12.490619 ms
[2020-07-30 19:06:22,56] [debug]            optimizeScalar:    0.080507 ms
[2020-07-30 19:06:22,56] [debug]          removeFieldNames:    2.512061 ms
[2020-07-30 19:06:22,56] [debug]      specializeParameters:    0.136883 ms
[2020-07-30 19:06:22,56] [debug]                   codeGen:    3.287105 ms
[2020-07-30 19:06:22,56] [debug]                     TOTAL:   31.657521 ms
[2020-07-30 19:06:22,56] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:22,56] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:22,56] [debug] #3: StartTransaction
[2020-07-30 19:06:22,56] [debug] #4: update [update "JOB_KEY_VALUE_ENTRY" set "STORE_VALUE" = ? where (((("JOB_KEY_VALUE_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("JOB_KEY_VALUE_ENTRY"."CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_INDEX" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_ATTEMPT" = ?)) and ("JOB_KEY_VALUE_ENTRY"."STORE_KEY" = ?)]
[2020-07-30 19:06:22,56] [debug] Preparing statement: update "JOB_KEY_VALUE_ENTRY" set "STORE_VALUE" = ? where (((("JOB_KEY_VALUE_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("JOB_KEY_VALUE_ENTRY"."CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_INDEX" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_ATTEMPT" = ?)) and ("JOB_KEY_VALUE_ENTRY"."STORE_KEY" = ?)
[2020-07-30 19:06:22,56] [debug] Executing prepared update: HikariProxyPreparedStatement@149791198 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2c4236ac[sql=[update "JOB_KEY_VALUE_ENTRY" set "STORE_VALUE" = ? where (((("JOB_KEY_VALUE_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("JOB_KEY_VALUE_ENTRY"."CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_INDEX" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_ATTEMPT" = ?)) and ("JOB_KEY_VALUE_ENTRY"."STORE_KEY" = ?)], parameters=[[21633], [8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [-1], [1], [sfs_job_id]]]
[2020-07-30 19:06:22,56] [debug] Executing prepared update: HikariProxyPreparedStatement@149791198 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2c4236ac[sql=[update "JOB_KEY_VALUE_ENTRY" set "STORE_VALUE" = ? where (((("JOB_KEY_VALUE_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?) and ("JOB_KEY_VALUE_ENTRY"."CALL_FULLY_QUALIFIED_NAME" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_INDEX" = ?)) and ("JOB_KEY_VALUE_ENTRY"."JOB_ATTEMPT" = ?)) and ("JOB_KEY_VALUE_ENTRY"."STORE_KEY" = ?)], parameters=[[21633], [8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [-1], [1], [sfs_job_id]]]
[2020-07-30 19:06:22,56] [debug] /--------+---------------------------+---------------------------+-----+-----+------------\
[2020-07-30 19:06:22,56] [debug] | 1      | 2                         | 3                         | 4   | 5   | 6          |
[2020-07-30 19:06:22,56] [debug] | String | String                    | String                    | Int | Int | String     |
[2020-07-30 19:06:22,56] [debug] |--------+---------------------------+---------------------------+-----+-----+------------|
[2020-07-30 19:06:22,56] [debug] | 21633  | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | -1  | 1   | sfs_job_id |
[2020-07-30 19:06:22,56] [debug] \--------+---------------------------+---------------------------+-----+-----+------------/
[2020-07-30 19:06:22,56] [debug] Execution of prepared update took 130µs
[2020-07-30 19:06:22,56] [debug] Source:
| TableExpansion
|   table s2: Table JOB_KEY_VALUE_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s2.CALL_FULLY_QUALIFIED_NAME : String'
|       3: Path s2.JOB_INDEX : Int'
|       4: Path s2.JOB_ATTEMPT : Int'
|       5: Path s2.STORE_KEY : String'
|       6: Path s2.STORE_VALUE : String'
|       7: OptionApply
|         0: Path s2.JOB_KEY_VALUE_ENTRY_ID : Int'

[2020-07-30 19:06:22,56] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:22,56] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table JOB_KEY_VALUE_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s3.CALL_FULLY_QUALIFIED_NAME : String'
|       3: Path s3.JOB_INDEX : Int'
|       4: Path s3.JOB_ATTEMPT : Int'
|       5: Path s3.STORE_KEY : String'
|       6: Path s3.STORE_VALUE : String'
|       7: OptionApply
|         0: Path s3.JOB_KEY_VALUE_ENTRY_ID : Int'

[2020-07-30 19:06:22,56] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:22,56] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:22,56] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@4650288b]]]
[2020-07-30 19:06:22,56] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@4650288b]]]
[2020-07-30 19:06:22,56] [debug] /---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:22,56] [debug] | 1                         | 2                         | 3       | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:22,56] [debug] | String                    | String                    | INTEGER | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,56] [debug] |---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:22,56] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionStatus |      | string | 2020-07-30 19:06:19.42698 |
[2020-07-30 19:06:22,56] [debug] \---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:22,56] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', Int', Int', String', String')]
|   from s5: Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FULLY_QUALIFIED_NAME, JOB_INDEX, JOB_ATTEMPT, STORE_KEY, STORE_VALUE, JOB_KEY_VALUE_ENTRY_ID] : (String', String', Int', Int', String', String')
|     table s6: Table JOB_KEY_VALUE_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', Int', Int', String', String')
|       1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s6.CALL_FULLY_QUALIFIED_NAME : String'
|       3: Path s6.JOB_INDEX : Int'
|       4: Path s6.JOB_ATTEMPT : Int'
|       5: Path s6.STORE_KEY : String'
|       6: Path s6.STORE_VALUE : String'
|   map: TypeMapping : Mapped[(String', String', Int', Int', String', String', Option[Int'])]
|     0: ProductNode : (String', String', Int', Int', String', String', Option[Int'])
|       1: InsertColumn WORKFLOW_EXECUTION_UUID : String'
|         0: Path s5._1 : String'
|       2: InsertColumn CALL_FULLY_QUALIFIED_NAME : String'
|         0: Path s5._2 : String'
|       3: InsertColumn JOB_INDEX : Int'
|         0: Path s5._3 : Int'
|       4: InsertColumn JOB_ATTEMPT : Int'
|         0: Path s5._4 : Int'
|       5: InsertColumn STORE_KEY : String'
|         0: Path s5._5 : String'
|       6: InsertColumn STORE_VALUE : String'
|         0: Path s5._6 : String'
|       7: OptionApply : Option[Int']
|         0: InsertColumn JOB_KEY_VALUE_ENTRY_ID : Int'

[2020-07-30 19:06:22,56] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FULLY_QUALIFIED_NAME, JOB_INDEX, JOB_ATTEMPT, STORE_KEY, STORE_VALUE, JOB_KEY_VALUE_ENTRY_ID] : (String', String', Int', Int', String', String')
|   table s6: Table JOB_KEY_VALUE_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', Int', Int', String', String')
|     1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|     2: Path s6.CALL_FULLY_QUALIFIED_NAME : String'
|     3: Path s6.JOB_INDEX : Int'
|     4: Path s6.JOB_ATTEMPT : Int'
|     5: Path s6.STORE_KEY : String'
|     6: Path s6.STORE_VALUE : String'

[2020-07-30 19:06:22,56] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=CALL_FULLY_QUALIFIED_NAME : String'
|     3: BaseResultConverter$mcI$sp idx=3, name=JOB_INDEX : Int'
|     4: BaseResultConverter$mcI$sp idx=4, name=JOB_ATTEMPT : Int'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=STORE_KEY : String'
|     6: SpecializedJdbcResultConverter$$anon$1 idx=6, name=STORE_VALUE : String'
|     7: CompoundResultConverter

[2020-07-30 19:06:22,56] [debug] Compiled server-side to:
| CompiledStatement "insert into "JOB_KEY_VALUE_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","STORE_KEY","STORE_VALUE")  values (?,?,?,?,?,?)" : (String', String', Int', Int', String', String')

[2020-07-30 19:06:22,57] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', String', Int', Int', String', String')]
|   from s5: CompiledStatement "insert into "JOB_KEY_VALUE_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","STORE_KEY","STORE_VALUE")  values (?,?,?,?,?,?)" : (String', String', Int', Int', String', String')
|   map: CompiledMapping : Mapped[(String', String', Int', Int', String', String', Option[Int'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=CALL_FULLY_QUALIFIED_NAME : String'
|         3: BaseResultConverter$mcI$sp idx=3, name=JOB_INDEX : Int'
|         4: BaseResultConverter$mcI$sp idx=4, name=JOB_ATTEMPT : Int'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=STORE_KEY : String'
|         6: SpecializedJdbcResultConverter$$anon$1 idx=6, name=STORE_VALUE : String'
|         7: CompoundResultConverter

[2020-07-30 19:06:22,57] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:22,57] [debug]       assignUniqueSymbols:    0.450830 ms
[2020-07-30 19:06:22,57] [debug]                inferTypes:    0.093352 ms
[2020-07-30 19:06:22,57] [debug]            insertCompiler:    2.487839 ms
[2020-07-30 19:06:22,57] [debug]                   codeGen:    1.971870 ms
[2020-07-30 19:06:22,57] [debug]                     TOTAL:    5.003891 ms
[2020-07-30 19:06:22,57] [debug] #5: SingleInsertAction [insert into "JOB_KEY_VALUE_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","STORE_KEY","STORE_VALUE")  values (?,?,?,?,?,?)]
[2020-07-30 19:06:22,57] [debug] Source:
| Bind
|   from s2: TableExpansion
|     table s3: Table JOB_KEY_VALUE_ENTRY
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s3.CALL_FULLY_QUALIFIED_NAME : String'
|         3: Path s3.JOB_INDEX : Int'
|         4: Path s3.JOB_ATTEMPT : Int'
|         5: Path s3.STORE_KEY : String'
|         6: Path s3.STORE_VALUE : String'
|         7: OptionApply
|           0: Path s3.JOB_KEY_VALUE_ENTRY_ID : Int'
|   select: Pure t4
|     value: Path s2.JOB_KEY_VALUE_ENTRY_ID : Int'

[2020-07-30 19:06:22,57] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:22,57] [debug] After phase assignUniqueSymbols:
| Bind
|   from s5: TableExpansion
|     table s6: Table JOB_KEY_VALUE_ENTRY
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s6.CALL_FULLY_QUALIFIED_NAME : String'
|         3: Path s6.JOB_INDEX : Int'
|         4: Path s6.JOB_ATTEMPT : Int'
|         5: Path s6.STORE_KEY : String'
|         6: Path s6.STORE_VALUE : String'
|         7: OptionApply
|           0: Path s6.JOB_KEY_VALUE_ENTRY_ID : Int'
|   select: Pure t8
|     value: Path s5.JOB_KEY_VALUE_ENTRY_ID : Int'

[2020-07-30 19:06:22,57] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:22,57] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(Int')]
|   from s9: Insert allFields=[JOB_KEY_VALUE_ENTRY_ID] : (Int')
|     table s10: Table JOB_KEY_VALUE_ENTRY : Vector[@t7<UnassignedType>]
|     linear: ProductNode : (Int')
|       1: Path s10.JOB_KEY_VALUE_ENTRY_ID : Int'
|   map: InsertColumn JOB_KEY_VALUE_ENTRY_ID : Int'
|     0: Path s9._1 : Int'

[2020-07-30 19:06:22,57] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[JOB_KEY_VALUE_ENTRY_ID] : (Int')
|   table s10: Table JOB_KEY_VALUE_ENTRY : Vector[@t7<UnassignedType>]
|   linear: ProductNode : (Int')
|     1: Path s10.JOB_KEY_VALUE_ENTRY_ID : Int'

[2020-07-30 19:06:22,57] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=JOB_KEY_VALUE_ENTRY_ID : Int'

[2020-07-30 19:06:22,57] [debug] Compiled server-side to:
| CompiledStatement "insert into "JOB_KEY_VALUE_ENTRY" ("JOB_KEY_VALUE_ENTRY_ID")  values (?)" : (Int')

[2020-07-30 19:06:22,57] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,57] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@46528253]]]
[2020-07-30 19:06:22,57] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:cores], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@46528253]]]
[2020-07-30 19:06:22,57] [debug] After phase codeGen:
| ResultSetMapping : Vector[(Int')]
|   from s9: CompiledStatement "insert into "JOB_KEY_VALUE_ENTRY" ("JOB_KEY_VALUE_ENTRY_ID")  values (?)" : (Int')
|   map: CompiledMapping : Int'
|     converter: BaseResultConverter$mcI$sp idx=1, name=JOB_KEY_VALUE_ENTRY_ID : Int'

[2020-07-30 19:06:22,57] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:22,57] [debug]       assignUniqueSymbols:    0.704273 ms
[2020-07-30 19:06:22,57] [debug] /---------------------------+---------------------------+---------+-----+--------------+------+--------+---------------------------\
[2020-07-30 19:06:22,57] [debug] | 1                         | 2                         | 3       | 4   | 5            | 6    | 7      | 8                         |
[2020-07-30 19:06:22,57] [debug] | String                    | String                    | INTEGER | Int | String       | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,57] [debug] |---------------------------+---------------------------+---------+-----+--------------+------+--------+---------------------------|
[2020-07-30 19:06:22,57] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | inputs:cores |      | int    | 2020-07-30 19:06:19.42... |
[2020-07-30 19:06:22,57] [debug] \---------------------------+---------------------------+---------+-----+--------------+------+--------+---------------------------/
[2020-07-30 19:06:22,57] [debug]                inferTypes:    0.155278 ms
[2020-07-30 19:06:22,57] [debug]            insertCompiler:    0.456110 ms
[2020-07-30 19:06:22,57] [debug]                   codeGen:    0.907774 ms
[2020-07-30 19:06:22,57] [debug]                     TOTAL:    2.223435 ms
[2020-07-30 19:06:22,57] [debug] Preparing insert statement (returning: JOB_KEY_VALUE_ENTRY_ID): insert into "JOB_KEY_VALUE_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","STORE_KEY","STORE_VALUE")  values (?,?,?,?,?,?)
[2020-07-30 19:06:22,57] [debug] Executing prepared update: HikariProxyPreparedStatement@1430741495 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7cb44e91[sql=[insert into "JOB_KEY_VALUE_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","STORE_KEY","STORE_VALUE")  values (?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [-1], [1], [sfs_job_id], [21633]]]
[2020-07-30 19:06:22,57] [debug] Executing prepared update: HikariProxyPreparedStatement@1430741495 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7cb44e91[sql=[insert into "JOB_KEY_VALUE_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","STORE_KEY","STORE_VALUE")  values (?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [-1], [1], [sfs_job_id], [21633]]]
[2020-07-30 19:06:22,57] [debug] /---------------------------+---------------------------+-----+-----+------------+--------\
[2020-07-30 19:06:22,57] [debug] | 1                         | 2                         | 3   | 4   | 5          | 6      |
[2020-07-30 19:06:22,57] [debug] | String                    | String                    | Int | Int | String     | String |
[2020-07-30 19:06:22,57] [debug] |---------------------------+---------------------------+-----+-----+------------+--------|
[2020-07-30 19:06:22,57] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | -1  | 1   | sfs_job_id | 21633  |
[2020-07-30 19:06:22,57] [debug] \---------------------------+---------------------------+-----+-----+------------+--------/
[2020-07-30 19:06:22,57] [debug] Execution of prepared update took 154µs
[2020-07-30 19:06:22,57] [debug] #6: success ()
[2020-07-30 19:06:22,57] [debug] #7: Commit
[2020-07-30 19:06:22,57] [debug] #8: SetTransactionIsolation
[2020-07-30 19:06:22,57] [debug] #9: SynchronousDatabaseAction.Unpin
[INFO] [07/30/2020 19:06:22.579] [cromwell-system-akka.dispatchers.backend-dispatcher-52] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowExecutionActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1/8b168b0d-854f-4ba0-99b6-35b7259a96fc-BackendJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1/BackgroundConfigAsyncJobExecutionActor] BackgroundConfigAsyncJobExecutionActor [UUID(8b168b0d)bamMergePreprocessing.splitStringToArray:NA:1]: job id: 21633
[2020-07-30 19:06:22,58] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:22,58] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:str], [javax.sql.rowset.serial.SerialClob@84c219a5], [string], [org.hsqldb.types.TimestampData@465136c3]]]
[2020-07-30 19:06:22,58] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:str], [javax.sql.rowset.serial.SerialClob@84c219a5], [string], [org.hsqldb.types.TimestampData@465136c3]]]
[2020-07-30 19:06:22,58] [debug] /---------------------------+---------------------------+---------+-----+------------+------+--------+---------------------------\
[2020-07-30 19:06:22,58] [debug] | 1                         | 2                         | 3       | 4   | 5          | 6    | 7      | 8                         |
[2020-07-30 19:06:22,58] [debug] | String                    | String                    | INTEGER | Int | String     | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,58] [debug] |---------------------------+---------------------------+---------+-----+------------+------+--------+---------------------------|
[2020-07-30 19:06:22,58] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | inputs:str |      | string | 2020-07-30 19:06:19.42... |
[2020-07-30 19:06:22,58] [debug] \---------------------------+---------------------------+---------+-----+------------+------+--------+---------------------------/
[INFO] [07/30/2020 19:06:22.584] [cromwell-system-akka.dispatchers.backend-dispatcher-53] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor/WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/WorkflowExecutionActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc/8b168b0d-854f-4ba0-99b6-35b7259a96fc-EngineJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1/8b168b0d-854f-4ba0-99b6-35b7259a96fc-BackendJobExecutionActor-bamMergePreprocessing.splitStringToArray:NA:1/BackgroundConfigAsyncJobExecutionActor] BackgroundConfigAsyncJobExecutionActor [UUID(8b168b0d)bamMergePreprocessing.splitStringToArray:NA:1]: Status change from - to Done
[2020-07-30 19:06:22,58] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,58] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:docker], [javax.sql.rowset.serial.SerialClob@13722914], [string], [org.hsqldb.types.TimestampData@46515603]]]
[2020-07-30 19:06:22,58] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:docker], [javax.sql.rowset.serial.SerialClob@13722914], [string], [org.hsqldb.types.TimestampData@46515603]]]
[2020-07-30 19:06:22,59] [debug] /---------------------------+---------------------------+---------+-----+---------------+------+--------+---------------------------\
[2020-07-30 19:06:22,59] [debug] | 1                         | 2                         | 3       | 4   | 5             | 6    | 7      | 8                         |
[2020-07-30 19:06:22,59] [debug] | String                    | String                    | INTEGER | Int | String        | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,59] [debug] |---------------------------+---------------------------+---------+-----+---------------+------+--------+---------------------------|
[2020-07-30 19:06:22,59] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | inputs:docker |      | string | 2020-07-30 19:06:19.42... |
[2020-07-30 19:06:22,59] [debug] \---------------------------+---------------------------+---------+-----+---------------+------+--------+---------------------------/
[2020-07-30 19:06:22,59] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:22,59] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:recordSeparator], [javax.sql.rowset.serial.SerialClob@18a49], [string], [org.hsqldb.types.TimestampData@46517dab]]]
[2020-07-30 19:06:22,59] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:recordSeparator], [javax.sql.rowset.serial.SerialClob@18a49], [string], [org.hsqldb.types.TimestampData@46517dab]]]
[2020-07-30 19:06:22,59] [debug] /---------------------------+---------------------------+---------+-----+------------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,59] [debug] | 1                         | 2                         | 3       | 4   | 5                      | 6    | 7      | 8                         |
[2020-07-30 19:06:22,59] [debug] | String                    | String                    | INTEGER | Int | String                 | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,59] [debug] |---------------------------+---------------------------+---------+-----+------------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,59] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | inputs:recordSeparator |      | string | 2020-07-30 19:06:19.42... |
[2020-07-30 19:06:22,59] [debug] \---------------------------+---------------------------+---------+-----+------------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,60] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:22,60] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:modules], [javax.sql.rowset.serial.SerialClob@b210c369], [string], [org.hsqldb.types.TimestampData@465164db]]]
[2020-07-30 19:06:22,60] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:modules], [javax.sql.rowset.serial.SerialClob@b210c369], [string], [org.hsqldb.types.TimestampData@465164db]]]
[2020-07-30 19:06:22,60] [debug] /---------------------------+---------------------------+---------+-----+----------------+------+--------+---------------------------\
[2020-07-30 19:06:22,60] [debug] | 1                         | 2                         | 3       | 4   | 5              | 6    | 7      | 8                         |
[2020-07-30 19:06:22,60] [debug] | String                    | String                    | INTEGER | Int | String         | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,60] [debug] |---------------------------+---------------------------+---------+-----+----------------+------+--------+---------------------------|
[2020-07-30 19:06:22,60] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | inputs:modules |      | string | 2020-07-30 19:06:19.42... |
[2020-07-30 19:06:22,60] [debug] \---------------------------+---------------------------+---------+-----+----------------+------+--------+---------------------------/
[2020-07-30 19:06:22,61] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:22,61] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@4651b3c3]]]
[2020-07-30 19:06:22,61] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:timeout], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@4651b3c3]]]
[2020-07-30 19:06:22,61] [debug] /---------------------------+---------------------------+---------+-----+----------------+------+--------+---------------------------\
[2020-07-30 19:06:22,61] [debug] | 1                         | 2                         | 3       | 4   | 5              | 6    | 7      | 8                         |
[2020-07-30 19:06:22,61] [debug] | String                    | String                    | INTEGER | Int | String         | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,61] [debug] |---------------------------+---------------------------+---------+-----+----------------+------+--------+---------------------------|
[2020-07-30 19:06:22,61] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | inputs:timeout |      | int    | 2020-07-30 19:06:19.42... |
[2020-07-30 19:06:22,61] [debug] \---------------------------+---------------------------+---------+-----+----------------+------+--------+---------------------------/
[2020-07-30 19:06:22,62] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:22,62] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:lineSeparator], [javax.sql.rowset.serial.SerialClob@18e0a], [string], [org.hsqldb.types.TimestampData@4651db73]]]
[2020-07-30 19:06:22,62] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:lineSeparator], [javax.sql.rowset.serial.SerialClob@18e0a], [string], [org.hsqldb.types.TimestampData@4651db73]]]
[2020-07-30 19:06:22,62] [debug] /---------------------------+---------------------------+---------+-----+----------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,62] [debug] | 1                         | 2                         | 3       | 4   | 5                    | 6    | 7      | 8                         |
[2020-07-30 19:06:22,62] [debug] | String                    | String                    | INTEGER | Int | String               | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,62] [debug] |---------------------------+---------------------------+---------+-----+----------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,62] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | inputs:lineSeparator |      | string | 2020-07-30 19:06:19.42... |
[2020-07-30 19:06:22,62] [debug] \---------------------------+---------------------------+---------+-----+----------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,63] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,63] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:jobMemory], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@4651c2e3]]]
[2020-07-30 19:06:22,63] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [inputs:jobMemory], [javax.sql.rowset.serial.SerialClob@1a0cf], [int], [org.hsqldb.types.TimestampData@4651c2e3]]]
[2020-07-30 19:06:22,63] [debug] /---------------------------+---------------------------+---------+-----+------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,63] [debug] | 1                         | 2                         | 3       | 4   | 5                | 6    | 7      | 8                         |
[2020-07-30 19:06:22,63] [debug] | String                    | String                    | INTEGER | Int | String           | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,63] [debug] |---------------------------+---------------------------+---------+-----+------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,63] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | inputs:jobMemory |      | int    | 2020-07-30 19:06:19.42... |
[2020-07-30 19:06:22,63] [debug] \---------------------------+---------------------------+---------+-----+------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,63] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:22,63] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[cc0ab3b6-9a6b-4a0b-b293-c103eaad343a], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:allowResultReuse], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@4012d51b]]]
[2020-07-30 19:06:22,63] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[cc0ab3b6-9a6b-4a0b-b293-c103eaad343a], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:allowResultReuse], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@4012d51b]]]
[2020-07-30 19:06:22,63] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:22,63] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:22,63] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String  | Timestamp                 |
[2020-07-30 19:06:22,63] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:22,63] [debug] | cc0ab3b6-9a6b-4a0b-b29... | bamMergePreprocessing.... | NULL    | 1   | callCaching:allowResul... |      | boolean | 2020-07-30 19:06:19.52... |
[2020-07-30 19:06:22,63] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:22,64] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,64] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hit], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@7d26e3c3]]]
[2020-07-30 19:06:22,64] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hit], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@7d26e3c3]]]
[2020-07-30 19:06:22,64] [debug] /---------------------------+---------------------------+---------+-----+-----------------+------+---------+---------------------------\
[2020-07-30 19:06:22,64] [debug] | 1                         | 2                         | 3       | 4   | 5               | 6    | 7       | 8                         |
[2020-07-30 19:06:22,64] [debug] | String                    | String                    | INTEGER | Int | String          | Clob | String  | Timestamp                 |
[2020-07-30 19:06:22,64] [debug] |---------------------------+---------------------------+---------+-----+-----------------+------+---------+---------------------------|
[2020-07-30 19:06:22,64] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hit |      | boolean | 2020-07-30 19:06:19.57... |
[2020-07-30 19:06:22,64] [debug] \---------------------------+---------------------------+---------+-----+-----------------+------+---------+---------------------------/
[2020-07-30 19:06:22,65] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:22,65] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:result], [javax.sql.rowset.serial.SerialClob@32de34ba], [string], [org.hsqldb.types.TimestampData@7d250303]]]
[2020-07-30 19:06:22,65] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:result], [javax.sql.rowset.serial.SerialClob@32de34ba], [string], [org.hsqldb.types.TimestampData@7d250303]]]
[2020-07-30 19:06:22,65] [debug] /---------------------------+---------------------------+---------+-----+--------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,65] [debug] | 1                         | 2                         | 3       | 4   | 5                  | 6    | 7      | 8                         |
[2020-07-30 19:06:22,65] [debug] | String                    | String                    | INTEGER | Int | String             | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,65] [debug] |---------------------------+---------------------------+---------+-----+--------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,65] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:result |      | string | 2020-07-30 19:06:19.57... |
[2020-07-30 19:06:22,65] [debug] \---------------------------+---------------------------+---------+-----+--------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,66] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,66] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:failOnStderr], [javax.sql.rowset.serial.SerialClob@274afe41], [string], [org.hsqldb.types.TimestampData@7c4c3483]]]
[2020-07-30 19:06:22,66] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:failOnStderr], [javax.sql.rowset.serial.SerialClob@274afe41], [string], [org.hsqldb.types.TimestampData@7c4c3483]]]
[2020-07-30 19:06:22,66] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,66] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:22,66] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,66] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,66] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | runtimeAttributes:fail... |      | string | 2020-07-30 19:06:19.59... |
[2020-07-30 19:06:22,66] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,67] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:22,67] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:docker], [javax.sql.rowset.serial.SerialClob@13722914], [string], [org.hsqldb.types.TimestampData@7c4c438b]]]
[2020-07-30 19:06:22,67] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:docker], [javax.sql.rowset.serial.SerialClob@13722914], [string], [org.hsqldb.types.TimestampData@7c4c438b]]]
[2020-07-30 19:06:22,67] [debug] /---------------------------+---------------------------+---------+-----+--------------------------+------+--------+--------------------------\
[2020-07-30 19:06:22,67] [debug] | 1                         | 2                         | 3       | 4   | 5                        | 6    | 7      | 8                        |
[2020-07-30 19:06:22,67] [debug] | String                    | String                    | INTEGER | Int | String                   | Clob | String | Timestamp                |
[2020-07-30 19:06:22,67] [debug] |---------------------------+---------------------------+---------+-----+--------------------------+------+--------+--------------------------|
[2020-07-30 19:06:22,67] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | runtimeAttributes:docker |      | string | 2020-07-30 19:06:19.5945 |
[2020-07-30 19:06:22,67] [debug] \---------------------------+---------------------------+---------+-----+--------------------------+------+--------+--------------------------/
[2020-07-30 19:06:22,68] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:22,68] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [stdout], [javax.sql.rowset.serial.SerialClob@2b750977], [string], [org.hsqldb.types.TimestampData@7c4c9a9b]]]
[2020-07-30 19:06:22,68] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [stdout], [javax.sql.rowset.serial.SerialClob@2b750977], [string], [org.hsqldb.types.TimestampData@7c4c9a9b]]]
[2020-07-30 19:06:22,68] [debug] /---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:22,68] [debug] | 1                         | 2                         | 3       | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:22,68] [debug] | String                    | String                    | INTEGER | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,68] [debug] |---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:22,68] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | stdout |      | string | 2020-07-30 19:06:19.59451 |
[2020-07-30 19:06:22,68] [debug] \---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:22,69] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,69] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:docker_volume], [javax.sql.rowset.serial.SerialClob@bdd16c77], [string], [org.hsqldb.types.TimestampData@7c4c8e13]]]
[2020-07-30 19:06:22,69] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:docker_volume], [javax.sql.rowset.serial.SerialClob@bdd16c77], [string], [org.hsqldb.types.TimestampData@7c4c8e13]]]
[2020-07-30 19:06:22,69] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,69] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:22,69] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,69] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,69] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | runtimeAttributes:dock... |      | string | 2020-07-30 19:06:19.59... |
[2020-07-30 19:06:22,69] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,69] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:22,69] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:maxRetries], [javax.sql.rowset.serial.SerialClob@19d0e], [string], [org.hsqldb.types.TimestampData@7c4c85db]]]
[2020-07-30 19:06:22,69] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:maxRetries], [javax.sql.rowset.serial.SerialClob@19d0e], [string], [org.hsqldb.types.TimestampData@7c4c85db]]]
[2020-07-30 19:06:22,70] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,70] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:22,70] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,70] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,70] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | runtimeAttributes:maxR... |      | string | 2020-07-30 19:06:19.59... |
[2020-07-30 19:06:22,70] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,70] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,70] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [stderr], [javax.sql.rowset.serial.SerialClob@2ae6b9ce], [string], [org.hsqldb.types.TimestampData@7c4ca953]]]
[2020-07-30 19:06:22,70] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [stderr], [javax.sql.rowset.serial.SerialClob@2ae6b9ce], [string], [org.hsqldb.types.TimestampData@7c4ca953]]]
[2020-07-30 19:06:22,70] [debug] /---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:22,70] [debug] | 1                         | 2                         | 3       | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:22,70] [debug] | String                    | String                    | INTEGER | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,70] [debug] |---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:22,70] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | stderr |      | string | 2020-07-30 19:06:19.59... |
[2020-07-30 19:06:22,70] [debug] \---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:22,71] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:22,71] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callRoot], [javax.sql.rowset.serial.SerialClob@928ec6d8], [string], [org.hsqldb.types.TimestampData@7c4cd933]]]
[2020-07-30 19:06:22,71] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callRoot], [javax.sql.rowset.serial.SerialClob@928ec6d8], [string], [org.hsqldb.types.TimestampData@7c4cd933]]]
[2020-07-30 19:06:22,71] [debug] /---------------------------+---------------------------+---------+-----+----------+------+--------+---------------------------\
[2020-07-30 19:06:22,71] [debug] | 1                         | 2                         | 3       | 4   | 5        | 6    | 7      | 8                         |
[2020-07-30 19:06:22,71] [debug] | String                    | String                    | INTEGER | Int | String   | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,71] [debug] |---------------------------+---------------------------+---------+-----+----------+------+--------+---------------------------|
[2020-07-30 19:06:22,71] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callRoot |      | string | 2020-07-30 19:06:19.59... |
[2020-07-30 19:06:22,71] [debug] \---------------------------+---------------------------+---------+-----+----------+------+--------+---------------------------/
[2020-07-30 19:06:22,72] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:22,72] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:continueOnReturnCode], [javax.sql.rowset.serial.SerialClob@19d0e], [string], [org.hsqldb.types.TimestampData@7c4cd4fb]]]
[2020-07-30 19:06:22,72] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:continueOnReturnCode], [javax.sql.rowset.serial.SerialClob@19d0e], [string], [org.hsqldb.types.TimestampData@7c4cd4fb]]]
[2020-07-30 19:06:22,72] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,72] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:22,72] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,72] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,72] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | runtimeAttributes:cont... |      | string | 2020-07-30 19:06:19.59453 |
[2020-07-30 19:06:22,72] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,72] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:22,72] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:modules], [javax.sql.rowset.serial.SerialClob@b210c369], [string], [org.hsqldb.types.TimestampData@7c4cc0a3]]]
[2020-07-30 19:06:22,72] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [runtimeAttributes:modules], [javax.sql.rowset.serial.SerialClob@b210c369], [string], [org.hsqldb.types.TimestampData@7c4cc0a3]]]
[2020-07-30 19:06:22,72] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:22,72] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:22,72] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,73] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:22,73] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | runtimeAttributes:modules |      | string | 2020-07-30 19:06:19.59... |
[2020-07-30 19:06:22,73] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:22,73] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:22,74] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [commandLine], [javax.sql.rowset.serial.SerialClob@8694bfd4], [string], [org.hsqldb.types.TimestampData@7939b9ab]]]
[2020-07-30 19:06:22,74] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [commandLine], [javax.sql.rowset.serial.SerialClob@8694bfd4], [string], [org.hsqldb.types.TimestampData@7939b9ab]]]
[2020-07-30 19:06:22,74] [debug] /---------------------------+---------------------------+---------+-----+-------------+------+--------+---------------------------\
[2020-07-30 19:06:22,74] [debug] | 1                         | 2                         | 3       | 4   | 5           | 6    | 7      | 8                         |
[2020-07-30 19:06:22,74] [debug] | String                    | String                    | INTEGER | Int | String      | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,74] [debug] |---------------------------+---------------------------+---------+-----+-------------+------+--------+---------------------------|
[2020-07-30 19:06:22,74] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | commandLine |      | string | 2020-07-30 19:06:19.63928 |
[2020-07-30 19:06:22,74] [debug] \---------------------------+---------------------------+---------+-----+-------------+------+--------+---------------------------/
[2020-07-30 19:06:22,74] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,74] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [stdout], [javax.sql.rowset.serial.SerialClob@2b750977], [string], [org.hsqldb.types.TimestampData@791290e3]]]
[2020-07-30 19:06:22,74] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [stdout], [javax.sql.rowset.serial.SerialClob@2b750977], [string], [org.hsqldb.types.TimestampData@791290e3]]]
[2020-07-30 19:06:22,74] [debug] /---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:22,74] [debug] | 1                         | 2                         | 3       | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:22,74] [debug] | String                    | String                    | INTEGER | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,74] [debug] |---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:22,74] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | stdout |      | string | 2020-07-30 19:06:19.64... |
[2020-07-30 19:06:22,74] [debug] \---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:22,75] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,75] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [stderr], [javax.sql.rowset.serial.SerialClob@2ae6b9ce], [string], [org.hsqldb.types.TimestampData@7912b7db]]]
[2020-07-30 19:06:22,75] [debug] Executing batch insert: HikariProxyPreparedStatement@960863940 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42a98baf[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [stderr], [javax.sql.rowset.serial.SerialClob@2ae6b9ce], [string], [org.hsqldb.types.TimestampData@7912b7db]]]
[2020-07-30 19:06:22,75] [debug] /---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:22,75] [debug] | 1                         | 2                         | 3       | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:22,75] [debug] | String                    | String                    | INTEGER | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:22,75] [debug] |---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:22,75] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | stderr |      | string | 2020-07-30 19:06:19.64079 |
[2020-07-30 19:06:22,75] [debug] \---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:22,76] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:22,77] [debug] Execution of batch took 13ms
[2020-07-30 19:06:22,90] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:22,90] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:22,90] [debug] #3: StartTransaction
[2020-07-30 19:06:22,90] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:22,90] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:22,90] [debug] Executing prepared statement: HikariProxyPreparedStatement@331769257 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5e891cde[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:22,90] [debug] Executing prepared statement: HikariProxyPreparedStatement@331769257 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5e891cde[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:22,90] [debug] /------\
[2020-07-30 19:06:22,90] [debug] | 1    |
[2020-07-30 19:06:22,90] [debug] | Long |
[2020-07-30 19:06:22,90] [debug] |------|
[2020-07-30 19:06:22,90] [debug] | 5000 |
[2020-07-30 19:06:22,90] [debug] \------/
[2020-07-30 19:06:22,90] [debug] Execution of prepared statement took 205µs
[2020-07-30 19:06:22,90] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:22,90] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:22,90] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:22,90] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:22,90] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:22,90] [debug] #5: success Vector()
[2020-07-30 19:06:22,90] [debug] #6: success Vector()
[2020-07-30 19:06:22,90] [debug] #7: success ()
[2020-07-30 19:06:22,90] [debug] #8: success ((),Vector())
[2020-07-30 19:06:22,90] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:22,90] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:22,90] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:22,90] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:22,90] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:22,91] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:22,91] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:22,91] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:22,91] [debug] Expanding tables in result type
[2020-07-30 19:06:22,91] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,91] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,91] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,91] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:22,91] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,91] [debug] Flattening projection t8
[2020-07-30 19:06:22,91] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,91] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:22,91] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:22,91] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:22,91] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:22,91] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:22,91] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,91] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:22,91] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:22,91] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:22,91] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:22,91] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:22,91] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:22,91] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:22,91] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:22,91] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:22,91] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:22,91] [debug] Creating mapping from Long'
[2020-07-30 19:06:22,91] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:22,91] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:22,91] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:22,91] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:22,91] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:22,91] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:22,91] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:22,91] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:22,91] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:22,91] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:22,91] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,91] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:22,91] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:22,91] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:22,91] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,91] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:22,91] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:22,91] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:22,91] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:22,91] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:22,91] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:22,92] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:22,92] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:22,92] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:22,92] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:22,92] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:22,92] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:22,92] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:22,92] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:22,92] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:22,92] [debug]       assignUniqueSymbols:    0.953887 ms
[2020-07-30 19:06:22,92] [debug]           unrollTailBinds:    0.166841 ms
[2020-07-30 19:06:22,92] [debug]                inferTypes:    0.241638 ms
[2020-07-30 19:06:22,92] [debug]              expandTables:    2.331747 ms
[2020-07-30 19:06:22,92] [debug]           forceOuterBinds:    0.995360 ms
[2020-07-30 19:06:22,92] [debug]         removeMappedTypes:    0.442522 ms
[2020-07-30 19:06:22,92] [debug]                expandSums:    0.038334 ms
[2020-07-30 19:06:22,92] [debug]             expandRecords:    0.281413 ms
[2020-07-30 19:06:22,92] [debug]        flattenProjections:    0.942269 ms
[2020-07-30 19:06:22,92] [debug]              rewriteJoins:    0.063261 ms
[2020-07-30 19:06:22,92] [debug]             verifySymbols:    0.091875 ms
[2020-07-30 19:06:22,92] [debug]             relabelUnions:    0.054651 ms
[2020-07-30 19:06:22,92] [debug]          createAggregates:    0.030261 ms
[2020-07-30 19:06:22,92] [debug]           resolveZipJoins:    0.046815 ms
[2020-07-30 19:06:22,92] [debug]          pruneProjections:    0.194207 ms
[2020-07-30 19:06:22,92] [debug]           rewriteDistinct:    0.050506 ms
[2020-07-30 19:06:22,92] [debug]    createResultSetMapping:    0.481075 ms
[2020-07-30 19:06:22,92] [debug]            hoistClientOps:    1.143377 ms
[2020-07-30 19:06:22,92] [debug]         reorderOperations:    0.082369 ms
[2020-07-30 19:06:22,92] [debug]     mergeToComprehensions:    2.682400 ms
[2020-07-30 19:06:22,92] [debug]            optimizeScalar:    0.078933 ms
[2020-07-30 19:06:22,92] [debug]          removeFieldNames:    1.136746 ms
[2020-07-30 19:06:22,92] [debug]      specializeParameters:    0.141296 ms
[2020-07-30 19:06:22,92] [debug]                   codeGen:    1.005835 ms
[2020-07-30 19:06:22,92] [debug]                     TOTAL:   13.677618 ms
[2020-07-30 19:06:22,92] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:22,92] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:22,92] [debug] Executing prepared update: HikariProxyPreparedStatement@1047640501 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@300bb8e8[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:22,92] [debug] Executing prepared update: HikariProxyPreparedStatement@1047640501 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@300bb8e8[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:22,92] [debug] Execution of prepared update took 115µs
[2020-07-30 19:06:22,92] [debug] #10: success 0
[2020-07-30 19:06:22,92] [debug] #11: Commit
[2020-07-30 19:06:22,92] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:22,92] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:22,92] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:22,92] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:22,92] [debug] #3: StartTransaction
[2020-07-30 19:06:22,92] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:22,92] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:22,92] [debug] Executing prepared statement: HikariProxyPreparedStatement@652446008 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@301a1c09[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:22,92] [debug] Executing prepared statement: HikariProxyPreparedStatement@652446008 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@301a1c09[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:22,92] [debug] /---------------------------\
[2020-07-30 19:06:22,92] [debug] | 1                         |
[2020-07-30 19:06:22,92] [debug] | String                    |
[2020-07-30 19:06:22,92] [debug] |---------------------------|
[2020-07-30 19:06:22,92] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:22,92] [debug] \---------------------------/
[2020-07-30 19:06:22,92] [debug] Execution of prepared statement took 38µs
[2020-07-30 19:06:22,92] [debug] /------------------\
[2020-07-30 19:06:22,92] [debug] | 1                |
[2020-07-30 19:06:22,92] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:22,92] [debug] |------------------|
[2020-07-30 19:06:22,92] [debug] \------------------/
[2020-07-30 19:06:22,92] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:22,92] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:22,92] [debug] Executing prepared statement: HikariProxyPreparedStatement@2118477782 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@13e451ba[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:22,92] [debug] Executing prepared statement: HikariProxyPreparedStatement@2118477782 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@13e451ba[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:22,92] [debug] /---------------------------\
[2020-07-30 19:06:22,92] [debug] | 1                         |
[2020-07-30 19:06:22,92] [debug] | String                    |
[2020-07-30 19:06:22,92] [debug] |---------------------------|
[2020-07-30 19:06:22,92] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:22,92] [debug] \---------------------------/
[2020-07-30 19:06:22,92] [debug] Execution of prepared statement took 44µs
[2020-07-30 19:06:22,92] [debug] /------------------\
[2020-07-30 19:06:22,92] [debug] | 1                |
[2020-07-30 19:06:22,92] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:22,92] [debug] |------------------|
[2020-07-30 19:06:22,92] [debug] \------------------/
[2020-07-30 19:06:22,92] [debug] #6: success None
[2020-07-30 19:06:22,92] [debug] #7: success 0
[2020-07-30 19:06:22,92] [debug] #8: success (0,0)
[2020-07-30 19:06:22,92] [debug] #9: success (0,0)
[2020-07-30 19:06:22,92] [debug] #10: Commit
[2020-07-30 19:06:22,92] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:22,92] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:22,93] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,93] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:22,93] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,93] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:22,93] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:22,93] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:22,93] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:22,93] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:22,93] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:22,93] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:22,93] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:22,93] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:22,93] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:22,93] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:22,93] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,93] [debug] Flattening projection t8
[2020-07-30 19:06:22,93] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:22,93] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:22,93] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:22,93] [debug] Flattening projection t7
[2020-07-30 19:06:22,93] [debug] Flattening projection t9
[2020-07-30 19:06:22,93] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,93] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:22,93] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:22,93] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:22,93] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:22,93] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:22,93] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:22,93] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:22,93] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:22,93] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:22,93] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:22,93] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,93] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,93] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,93] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,93] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:22,93] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:22,93] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:22,93] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:22,93] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:22,93] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:22,93] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:22,93] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:22,93] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:22,93] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:22,93] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:22,93] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:22,93] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:22,93] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:22,93] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:22,93] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:22,93] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:22,93] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:22,93] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:22,93] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:22,93] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:22,93] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:22,93] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:22,93] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:22,93] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:22,93] [debug] Table fields: Map()
[2020-07-30 19:06:22,93] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:22,93] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:22,93] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:22,93] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:22,94] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:22,94] [debug] Replacements are: Map()
[2020-07-30 19:06:22,94] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:22,94] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:22,94] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:22,94] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:22,94] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:22,94] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:22,94] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:22,94] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:22,94] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:22,94] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:22,94] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:22,94] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:22,94] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:22,94] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:22,94] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:22,94] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:22,94] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:22,94] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:22,94] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:22,94] [debug]       assignUniqueSymbols:    0.231896 ms
[2020-07-30 19:06:22,94] [debug]           unrollTailBinds:    0.030093 ms
[2020-07-30 19:06:22,94] [debug]                inferTypes:    0.044795 ms
[2020-07-30 19:06:22,94] [debug]              expandTables:    0.473928 ms
[2020-07-30 19:06:22,94] [debug]           forceOuterBinds:    0.470137 ms
[2020-07-30 19:06:22,94] [debug]         removeMappedTypes:    0.059722 ms
[2020-07-30 19:06:22,94] [debug]                expandSums:    0.017346 ms
[2020-07-30 19:06:22,94] [debug]             expandRecords:    0.307544 ms
[2020-07-30 19:06:22,94] [debug]        flattenProjections:    1.502360 ms
[2020-07-30 19:06:22,94] [debug]              rewriteJoins:    1.229770 ms
[2020-07-30 19:06:22,94] [debug]             verifySymbols:    0.148063 ms
[2020-07-30 19:06:22,94] [debug]             relabelUnions:    0.084134 ms
[2020-07-30 19:06:22,94] [debug]          createAggregates:    2.510301 ms
[2020-07-30 19:06:22,94] [debug]           resolveZipJoins:    0.045016 ms
[2020-07-30 19:06:22,94] [debug]          pruneProjections:    0.145963 ms
[2020-07-30 19:06:22,94] [debug]           rewriteDistinct:    0.030392 ms
[2020-07-30 19:06:22,94] [debug]    createResultSetMapping:    0.287712 ms
[2020-07-30 19:06:22,94] [debug]            hoistClientOps:    0.618727 ms
[2020-07-30 19:06:22,94] [debug]         reorderOperations:    0.046946 ms
[2020-07-30 19:06:22,94] [debug]     mergeToComprehensions:    2.517705 ms
[2020-07-30 19:06:22,94] [debug]            optimizeScalar:    0.099729 ms
[2020-07-30 19:06:22,94] [debug]          removeFieldNames:    0.666156 ms
[2020-07-30 19:06:22,94] [debug]      specializeParameters:    0.109133 ms
[2020-07-30 19:06:22,94] [debug]                   codeGen:    0.780041 ms
[2020-07-30 19:06:22,94] [debug]                     TOTAL:   12.457609 ms
[2020-07-30 19:06:22,94] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:22,94] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:22,94] [debug] Executing prepared statement: HikariProxyPreparedStatement@1783319536 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5b13a8a9[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:22,94] [debug] Executing prepared statement: HikariProxyPreparedStatement@1783319536 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5b13a8a9[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:22,94] [debug] Execution of prepared statement took 76µs
[2020-07-30 19:06:22,94] [debug] /----\
[2020-07-30 19:06:22,94] [debug] | 1  |
[2020-07-30 19:06:22,94] [debug] | C1 |
[2020-07-30 19:06:22,94] [debug] |----|
[2020-07-30 19:06:22,94] [debug] | 0  |
[2020-07-30 19:06:22,94] [debug] \----/
[2020-07-30 19:06:23,95] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:23,95] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:23,95] [debug] #3: StartTransaction
[2020-07-30 19:06:23,95] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:23,95] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:23,95] [debug] Executing prepared statement: HikariProxyPreparedStatement@780654577 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@420d6e8c[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:23,95] [debug] Executing prepared statement: HikariProxyPreparedStatement@780654577 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@420d6e8c[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:23,95] [debug] /------\
[2020-07-30 19:06:23,95] [debug] | 1    |
[2020-07-30 19:06:23,95] [debug] | Long |
[2020-07-30 19:06:23,95] [debug] |------|
[2020-07-30 19:06:23,95] [debug] | 5000 |
[2020-07-30 19:06:23,95] [debug] \------/
[2020-07-30 19:06:23,95] [debug] Execution of prepared statement took 146µs
[2020-07-30 19:06:23,95] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:23,95] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:23,95] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:23,95] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:23,95] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:23,95] [debug] #5: success Vector()
[2020-07-30 19:06:23,95] [debug] #6: success Vector()
[2020-07-30 19:06:23,95] [debug] #7: success ()
[2020-07-30 19:06:23,95] [debug] #8: success ((),Vector())
[2020-07-30 19:06:23,95] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:23,95] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:23,95] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:23,95] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:23,95] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:23,95] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:23,95] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:23,95] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:23,95] [debug] Expanding tables in result type
[2020-07-30 19:06:23,95] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,95] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,96] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,96] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:23,96] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,96] [debug] Flattening projection t8
[2020-07-30 19:06:23,96] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,96] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:23,96] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:23,96] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:23,96] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:23,96] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:23,96] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,96] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:23,96] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:23,96] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:23,96] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:23,96] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:23,96] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:23,96] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:23,96] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:23,96] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:23,96] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:23,96] [debug] Creating mapping from Long'
[2020-07-30 19:06:23,96] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:23,96] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:23,96] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:23,96] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:23,96] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:23,96] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:23,96] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:23,96] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:23,96] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:23,96] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:23,96] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,96] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:23,96] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:23,96] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:23,96] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,96] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:23,96] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:23,96] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:23,96] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:23,96] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:23,96] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:23,96] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:23,96] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:23,96] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:23,96] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:23,96] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:23,96] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:23,96] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:23,96] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:23,96] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:23,96] [debug]       assignUniqueSymbols:    0.470503 ms
[2020-07-30 19:06:23,96] [debug]           unrollTailBinds:    0.053154 ms
[2020-07-30 19:06:23,96] [debug]                inferTypes:    0.114606 ms
[2020-07-30 19:06:23,96] [debug]              expandTables:    1.223828 ms
[2020-07-30 19:06:23,96] [debug]           forceOuterBinds:    0.360155 ms
[2020-07-30 19:06:23,96] [debug]         removeMappedTypes:    0.322078 ms
[2020-07-30 19:06:23,96] [debug]                expandSums:    0.044797 ms
[2020-07-30 19:06:23,96] [debug]             expandRecords:    0.253314 ms
[2020-07-30 19:06:23,96] [debug]        flattenProjections:    0.935708 ms
[2020-07-30 19:06:23,96] [debug]              rewriteJoins:    0.053474 ms
[2020-07-30 19:06:23,96] [debug]             verifySymbols:    0.075825 ms
[2020-07-30 19:06:23,96] [debug]             relabelUnions:    0.038978 ms
[2020-07-30 19:06:23,96] [debug]          createAggregates:    0.023133 ms
[2020-07-30 19:06:23,96] [debug]           resolveZipJoins:    0.036859 ms
[2020-07-30 19:06:23,96] [debug]          pruneProjections:    0.178672 ms
[2020-07-30 19:06:23,96] [debug]           rewriteDistinct:    0.037383 ms
[2020-07-30 19:06:23,96] [debug]    createResultSetMapping:    0.390368 ms
[2020-07-30 19:06:23,96] [debug]            hoistClientOps:    0.916412 ms
[2020-07-30 19:06:23,96] [debug]         reorderOperations:    0.069987 ms
[2020-07-30 19:06:23,96] [debug]     mergeToComprehensions:    2.488592 ms
[2020-07-30 19:06:23,96] [debug]            optimizeScalar:    0.076613 ms
[2020-07-30 19:06:23,96] [debug]          removeFieldNames:    1.012932 ms
[2020-07-30 19:06:23,96] [debug]      specializeParameters:    0.135663 ms
[2020-07-30 19:06:23,96] [debug]                   codeGen:    0.774941 ms
[2020-07-30 19:06:23,96] [debug]                     TOTAL:   10.087975 ms
[2020-07-30 19:06:23,96] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:23,96] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:23,97] [debug] Executing prepared update: HikariProxyPreparedStatement@353140293 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7596ceaa[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:23,97] [debug] Executing prepared update: HikariProxyPreparedStatement@353140293 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7596ceaa[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:23,97] [debug] Execution of prepared update took 155µs
[2020-07-30 19:06:23,97] [debug] #10: success 0
[2020-07-30 19:06:23,97] [debug] #11: Commit
[2020-07-30 19:06:23,97] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:23,97] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:23,97] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:23,97] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:23,97] [debug] #3: StartTransaction
[2020-07-30 19:06:23,97] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:23,97] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:23,97] [debug] Executing prepared statement: HikariProxyPreparedStatement@293510902 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@38aeee61[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:23,97] [debug] Executing prepared statement: HikariProxyPreparedStatement@293510902 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@38aeee61[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:23,97] [debug] /---------------------------\
[2020-07-30 19:06:23,97] [debug] | 1                         |
[2020-07-30 19:06:23,97] [debug] | String                    |
[2020-07-30 19:06:23,97] [debug] |---------------------------|
[2020-07-30 19:06:23,97] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:23,97] [debug] \---------------------------/
[2020-07-30 19:06:23,97] [debug] Execution of prepared statement took 139µs
[2020-07-30 19:06:23,97] [debug] /------------------\
[2020-07-30 19:06:23,97] [debug] | 1                |
[2020-07-30 19:06:23,97] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:23,97] [debug] |------------------|
[2020-07-30 19:06:23,97] [debug] \------------------/
[2020-07-30 19:06:23,97] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:23,97] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:23,97] [debug] Executing prepared statement: HikariProxyPreparedStatement@671830540 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6bab224d[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:23,97] [debug] Executing prepared statement: HikariProxyPreparedStatement@671830540 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6bab224d[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:23,97] [debug] /---------------------------\
[2020-07-30 19:06:23,97] [debug] | 1                         |
[2020-07-30 19:06:23,97] [debug] | String                    |
[2020-07-30 19:06:23,97] [debug] |---------------------------|
[2020-07-30 19:06:23,97] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:23,97] [debug] \---------------------------/
[2020-07-30 19:06:23,97] [debug] Execution of prepared statement took 76µs
[2020-07-30 19:06:23,97] [debug] /------------------\
[2020-07-30 19:06:23,97] [debug] | 1                |
[2020-07-30 19:06:23,97] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:23,97] [debug] |------------------|
[2020-07-30 19:06:23,97] [debug] \------------------/
[2020-07-30 19:06:23,97] [debug] #6: success None
[2020-07-30 19:06:23,97] [debug] #7: success 0
[2020-07-30 19:06:23,97] [debug] #8: success (0,0)
[2020-07-30 19:06:23,97] [debug] #9: success (0,0)
[2020-07-30 19:06:23,97] [debug] #10: Commit
[2020-07-30 19:06:23,97] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:23,97] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:23,98] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,98] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:23,98] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,98] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:23,98] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:23,98] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:23,98] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:23,98] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:23,98] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:23,98] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:23,98] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:23,98] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:23,98] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:23,98] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:23,98] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,98] [debug] Flattening projection t8
[2020-07-30 19:06:23,98] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:23,98] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:23,98] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:23,98] [debug] Flattening projection t7
[2020-07-30 19:06:23,98] [debug] Flattening projection t9
[2020-07-30 19:06:23,98] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,98] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:23,98] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:23,98] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:23,98] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:23,98] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:23,98] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:23,98] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:23,98] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:23,98] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:23,98] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:23,98] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,98] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,98] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,98] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,98] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:23,98] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:23,98] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:23,98] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:23,98] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:23,98] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:23,98] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:23,98] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:23,98] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:23,98] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:23,98] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:23,98] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:23,98] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:23,98] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:23,98] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:23,98] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:23,98] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:23,98] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:23,98] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:23,98] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:23,98] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:23,98] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:23,98] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:23,98] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:23,98] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:23,98] [debug] Table fields: Map()
[2020-07-30 19:06:23,99] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:23,99] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:23,99] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:23,99] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:23,99] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:23,99] [debug] Replacements are: Map()
[2020-07-30 19:06:23,99] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:23,99] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:23,99] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:23,99] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:23,99] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:23,99] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:23,99] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:23,99] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:23,99] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:23,99] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:23,99] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:23,99] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:23,99] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:23,99] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:23,99] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:23,99] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:23,99] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:23,99] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:23,99] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:23,99] [debug]       assignUniqueSymbols:    0.326333 ms
[2020-07-30 19:06:23,99] [debug]           unrollTailBinds:    0.043762 ms
[2020-07-30 19:06:23,99] [debug]                inferTypes:    0.067259 ms
[2020-07-30 19:06:23,99] [debug]              expandTables:    0.609155 ms
[2020-07-30 19:06:23,99] [debug]           forceOuterBinds:    0.486682 ms
[2020-07-30 19:06:23,99] [debug]         removeMappedTypes:    0.097301 ms
[2020-07-30 19:06:23,99] [debug]                expandSums:    0.025823 ms
[2020-07-30 19:06:23,99] [debug]             expandRecords:    0.377497 ms
[2020-07-30 19:06:23,99] [debug]        flattenProjections:    1.621329 ms
[2020-07-30 19:06:23,99] [debug]              rewriteJoins:    1.142684 ms
[2020-07-30 19:06:23,99] [debug]             verifySymbols:    0.075583 ms
[2020-07-30 19:06:23,99] [debug]             relabelUnions:    0.049534 ms
[2020-07-30 19:06:23,99] [debug]          createAggregates:    2.370991 ms
[2020-07-30 19:06:23,99] [debug]           resolveZipJoins:    0.064762 ms
[2020-07-30 19:06:23,99] [debug]          pruneProjections:    0.199339 ms
[2020-07-30 19:06:23,99] [debug]           rewriteDistinct:    0.038509 ms
[2020-07-30 19:06:23,99] [debug]    createResultSetMapping:    0.480644 ms
[2020-07-30 19:06:23,99] [debug]            hoistClientOps:    0.855692 ms
[2020-07-30 19:06:23,99] [debug]         reorderOperations:    0.060114 ms
[2020-07-30 19:06:23,99] [debug]     mergeToComprehensions:    2.209817 ms
[2020-07-30 19:06:23,99] [debug]            optimizeScalar:    0.055888 ms
[2020-07-30 19:06:23,99] [debug]          removeFieldNames:    0.799682 ms
[2020-07-30 19:06:23,99] [debug]      specializeParameters:    0.142486 ms
[2020-07-30 19:06:23,99] [debug]                   codeGen:    0.831583 ms
[2020-07-30 19:06:23,99] [debug]                     TOTAL:   13.032449 ms
[2020-07-30 19:06:23,99] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:23,99] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:23,99] [debug] Executing prepared statement: HikariProxyPreparedStatement@267387468 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@406231c7[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:23,99] [debug] Executing prepared statement: HikariProxyPreparedStatement@267387468 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@406231c7[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:23,99] [debug] Execution of prepared statement took 104µs
[2020-07-30 19:06:23,99] [debug] /----\
[2020-07-30 19:06:23,99] [debug] | 1  |
[2020-07-30 19:06:23,99] [debug] | C1 |
[2020-07-30 19:06:23,99] [debug] |----|
[2020-07-30 19:06:23,99] [debug] | 0  |
[2020-07-30 19:06:23,99] [debug] \----/
[2020-07-30 19:06:24,22] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@29410ba7
          base: SetTransactionIsolation
[2020-07-30 19:06:24,22] [debug] Preparing statement: select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:24,22] [debug] Executing prepared statement: HikariProxyPreparedStatement@656655070 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@15a8236c[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:24,22] [debug] Executing prepared statement: HikariProxyPreparedStatement@656655070 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@15a8236c[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:24,22] [debug] /---------------------------\
[2020-07-30 19:06:24,22] [debug] | 1                         |
[2020-07-30 19:06:24,22] [debug] | String                    |
[2020-07-30 19:06:24,22] [debug] |---------------------------|
[2020-07-30 19:06:24,22] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:24,22] [debug] \---------------------------/
[2020-07-30 19:06:24,22] [debug] Execution of prepared statement took 171µs
[2020-07-30 19:06:24,22] [debug] /-----------------\
[2020-07-30 19:06:24,22] [debug] | 1               |
[2020-07-30 19:06:24,22] [debug] | WORKFLOW_STATUS |
[2020-07-30 19:06:24,22] [debug] |-----------------|
[2020-07-30 19:06:24,22] [debug] | Running         |
[2020-07-30 19:06:24,22] [debug] \-----------------/
[2020-07-30 19:06:24,57] [debug] Source:
| TableExpansion
|   table s2: Table CALL_CACHING_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s2.CALL_FULLY_QUALIFIED_NAME : String'
|       3: Path s2.JOB_INDEX : Int'
|       4: Path s2.JOB_ATTEMPT : Option[Int']
|       5: Path s2.RETURN_CODE : Option[Int']
|       6: Path s2.ALLOW_RESULT_REUSE : Boolean'
|       7: OptionApply
|         0: Path s2.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,57] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:24,57] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table CALL_CACHING_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s3.CALL_FULLY_QUALIFIED_NAME : String'
|       3: Path s3.JOB_INDEX : Int'
|       4: Path s3.JOB_ATTEMPT : Option[Int']
|       5: Path s3.RETURN_CODE : Option[Int']
|       6: Path s3.ALLOW_RESULT_REUSE : Boolean'
|       7: OptionApply
|         0: Path s3.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,57] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:24,57] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', Int', Option[Int'], Option[Int'], Boolean')]
|   from s5: Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FULLY_QUALIFIED_NAME, JOB_INDEX, JOB_ATTEMPT, RETURN_CODE, ALLOW_RESULT_REUSE, CALL_CACHING_ENTRY_ID] : (String', String', Int', Option[Int'], Option[Int'], Boolean')
|     table s6: Table CALL_CACHING_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean')
|       1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s6.CALL_FULLY_QUALIFIED_NAME : String'
|       3: Path s6.JOB_INDEX : Int'
|       4: Path s6.JOB_ATTEMPT : Option[Int']
|       5: Path s6.RETURN_CODE : Option[Int']
|       6: Path s6.ALLOW_RESULT_REUSE : Boolean'
|   map: TypeMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|     0: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])
|       1: InsertColumn WORKFLOW_EXECUTION_UUID : String'
|         0: Path s5._1 : String'
|       2: InsertColumn CALL_FULLY_QUALIFIED_NAME : String'
|         0: Path s5._2 : String'
|       3: InsertColumn JOB_INDEX : Int'
|         0: Path s5._3 : Int'
|       4: InsertColumn JOB_ATTEMPT : Option[Int']
|         0: Path s5._4 : Option[Int']
|       5: InsertColumn RETURN_CODE : Option[Int']
|         0: Path s5._5 : Option[Int']
|       6: InsertColumn ALLOW_RESULT_REUSE : Boolean'
|         0: Path s5._6 : Boolean'
|       7: OptionApply : Option[Int']
|         0: InsertColumn CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,57] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FULLY_QUALIFIED_NAME, JOB_INDEX, JOB_ATTEMPT, RETURN_CODE, ALLOW_RESULT_REUSE, CALL_CACHING_ENTRY_ID] : (String', String', Int', Option[Int'], Option[Int'], Boolean')
|   table s6: Table CALL_CACHING_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', Int', Option[Int'], Option[Int'], Boolean')
|     1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|     2: Path s6.CALL_FULLY_QUALIFIED_NAME : String'
|     3: Path s6.JOB_INDEX : Int'
|     4: Path s6.JOB_ATTEMPT : Option[Int']
|     5: Path s6.RETURN_CODE : Option[Int']
|     6: Path s6.ALLOW_RESULT_REUSE : Boolean'

[2020-07-30 19:06:24,57] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=CALL_FULLY_QUALIFIED_NAME : String'
|     3: BaseResultConverter$mcI$sp idx=3, name=JOB_INDEX : Int'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'
|     5: OptionResultConverter$mcI$sp idx=5 : Int'
|     6: BaseResultConverter$mcZ$sp idx=6, name=ALLOW_RESULT_REUSE : Boolean'
|     7: CompoundResultConverter

[2020-07-30 19:06:24,57] [debug] Compiled server-side to:
| CompiledStatement "insert into "CALL_CACHING_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","RETURN_CODE","ALLOW_RESULT_REUSE")  values (?,?,?,?,?,?)" : (String', String', Int', Option[Int'], Option[Int'], Boolean')

[2020-07-30 19:06:24,57] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', String', Int', Option[Int'], Option[Int'], Boolean')]
|   from s5: CompiledStatement "insert into "CALL_CACHING_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","RETURN_CODE","ALLOW_RESULT_REUSE")  values (?,?,?,?,?,?)" : (String', String', Int', Option[Int'], Option[Int'], Boolean')
|   map: CompiledMapping : Mapped[(String', String', Int', Option[Int'], Option[Int'], Boolean', Option[Int'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=CALL_FULLY_QUALIFIED_NAME : String'
|         3: BaseResultConverter$mcI$sp idx=3, name=JOB_INDEX : Int'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'
|         5: OptionResultConverter$mcI$sp idx=5 : Int'
|         6: BaseResultConverter$mcZ$sp idx=6, name=ALLOW_RESULT_REUSE : Boolean'
|         7: CompoundResultConverter

[2020-07-30 19:06:24,57] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:24,57] [debug]       assignUniqueSymbols:    0.374791 ms
[2020-07-30 19:06:24,57] [debug]                inferTypes:    0.096400 ms
[2020-07-30 19:06:24,57] [debug]            insertCompiler:    0.910560 ms
[2020-07-30 19:06:24,57] [debug]                   codeGen:    1.042371 ms
[2020-07-30 19:06:24,57] [debug]                     TOTAL:    2.424122 ms
[2020-07-30 19:06:24,57] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:24,57] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:24,57] [debug] #3: StartTransaction
[2020-07-30 19:06:24,57] [debug] #4: MultiInsertAction [insert into "CALL_CACHING_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","RETURN_CODE","ALLOW_RESULT_REUSE")  values (?,?,?,?,?,?)]
[2020-07-30 19:06:24,57] [debug] Source:
| Bind
|   from s2: TableExpansion
|     table s3: Table CALL_CACHING_ENTRY
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s3.CALL_FULLY_QUALIFIED_NAME : String'
|         3: Path s3.JOB_INDEX : Int'
|         4: Path s3.JOB_ATTEMPT : Option[Int']
|         5: Path s3.RETURN_CODE : Option[Int']
|         6: Path s3.ALLOW_RESULT_REUSE : Boolean'
|         7: OptionApply
|           0: Path s3.CALL_CACHING_ENTRY_ID : Int'
|   select: Pure t4
|     value: Path s2.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,57] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:24,57] [debug] After phase assignUniqueSymbols:
| Bind
|   from s5: TableExpansion
|     table s6: Table CALL_CACHING_ENTRY
|     columns: TypeMapping
|       0: ProductNode
|         1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|         2: Path s6.CALL_FULLY_QUALIFIED_NAME : String'
|         3: Path s6.JOB_INDEX : Int'
|         4: Path s6.JOB_ATTEMPT : Option[Int']
|         5: Path s6.RETURN_CODE : Option[Int']
|         6: Path s6.ALLOW_RESULT_REUSE : Boolean'
|         7: OptionApply
|           0: Path s6.CALL_CACHING_ENTRY_ID : Int'
|   select: Pure t8
|     value: Path s5.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,57] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:24,57] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(Int')]
|   from s9: Insert allFields=[CALL_CACHING_ENTRY_ID] : (Int')
|     table s10: Table CALL_CACHING_ENTRY : Vector[@t7<UnassignedType>]
|     linear: ProductNode : (Int')
|       1: Path s10.CALL_CACHING_ENTRY_ID : Int'
|   map: InsertColumn CALL_CACHING_ENTRY_ID : Int'
|     0: Path s9._1 : Int'

[2020-07-30 19:06:24,57] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[CALL_CACHING_ENTRY_ID] : (Int')
|   table s10: Table CALL_CACHING_ENTRY : Vector[@t7<UnassignedType>]
|   linear: ProductNode : (Int')
|     1: Path s10.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,57] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,57] [debug] Compiled server-side to:
| CompiledStatement "insert into "CALL_CACHING_ENTRY" ("CALL_CACHING_ENTRY_ID")  values (?)" : (Int')

[2020-07-30 19:06:24,57] [debug] After phase codeGen:
| ResultSetMapping : Vector[(Int')]
|   from s9: CompiledStatement "insert into "CALL_CACHING_ENTRY" ("CALL_CACHING_ENTRY_ID")  values (?)" : (Int')
|   map: CompiledMapping : Int'
|     converter: BaseResultConverter$mcI$sp idx=1, name=CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,57] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:24,57] [debug]       assignUniqueSymbols:    0.450520 ms
[2020-07-30 19:06:24,57] [debug]                inferTypes:    0.101134 ms
[2020-07-30 19:06:24,57] [debug]            insertCompiler:    0.260478 ms
[2020-07-30 19:06:24,57] [debug]                   codeGen:    0.473128 ms
[2020-07-30 19:06:24,57] [debug]                     TOTAL:    1.285260 ms
[2020-07-30 19:06:24,57] [debug] Preparing insert statement (returning: CALL_CACHING_ENTRY_ID): insert into "CALL_CACHING_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","RETURN_CODE","ALLOW_RESULT_REUSE")  values (?,?,?,?,?,?)
[2020-07-30 19:06:24,57] [debug] Executing prepared update: HikariProxyPreparedStatement@1768983752 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6ddd8bd3[sql=[insert into "CALL_CACHING_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","RETURN_CODE","ALLOW_RESULT_REUSE")  values (?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [-1], [1], [0], [true]]]
[2020-07-30 19:06:24,57] [debug] Executing prepared update: HikariProxyPreparedStatement@1768983752 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6ddd8bd3[sql=[insert into "CALL_CACHING_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FULLY_QUALIFIED_NAME","JOB_INDEX","JOB_ATTEMPT","RETURN_CODE","ALLOW_RESULT_REUSE")  values (?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [-1], [1], [0], [true]]]
[2020-07-30 19:06:24,58] [debug] /---------------------------+---------------------------+-----+-----+-----+---------\
[2020-07-30 19:06:24,58] [debug] | 1                         | 2                         | 3   | 4   | 5   | 6       |
[2020-07-30 19:06:24,58] [debug] | String                    | String                    | Int | Int | Int | Boolean |
[2020-07-30 19:06:24,58] [debug] |---------------------------+---------------------------+-----+-----+-----+---------|
[2020-07-30 19:06:24,58] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | -1  | 1   | 0   | true    |
[2020-07-30 19:06:24,58] [debug] \---------------------------+---------------------------+-----+-----+-----+---------/
[2020-07-30 19:06:24,58] [debug] Execution of prepared update took 215µs
[2020-07-30 19:06:24,58] [debug] #5: success (Vector(33),Vector(CallCachingHashEntry(input: Int cores,C4CA4238A0B923820DCC509A6F75849B,Some(33),None), CallCachingHashEntry(input: String modules,8BD4A0089EF8D81CBB2C4EC604ABCCEC,Some(33),None), CallCachingHashEntry(runtime attribute: failOnStderr,68934A3E9455FA72420237EB05902327,Some(33),None), CallCachingHashEntry(backend name,509820290D57F333403F490DDE7316F4,Some(33),None), CallCachingHashEntry(input: String docker,40D098D55F2F477C51A2B1390B902F36,Some(33),None), CallCachingHashEntry(input count,C9F0F895FB98AB9159F51FD0297E236D,Some(33),None), CallCachingHashEntry(runtime attribute: docker_volume,2F17FD7241C5DD399EC36A237C797E92,Some(33),None), CallCachingHashEntry(input: Int jobMemory,C4CA4238A0B923820DCC509A6F75849B,Some(33),None), CallCachingHashEntry(input: Int timeout,C4CA4238A0B923820DCC509A6F75849B,Some(33),None), CallCachingHashEntry(input: String lineSeparator,DE2FCE482459A94C2AF1AB3AC8B4257D,Some(33),None), CallCachingHashEntry(runtime attribute: docker,4C617E74ECCA7B411D4295F10983F79E,Some(33),None), CallCachingHashEntry(runtime attribute: continueOnReturnCode,CFCD208495D565EF66E7DFF9F98764DA,Some(33),None), CallCachingHashEntry(runtime attribute: maxRetries,CFCD208495D565EF66E7DFF9F98764DA,Some(33),None), CallCachingHashEntry(output expression: CompositeType_digest_f394f45b2ae2ba9ff158cf39675914de intervalsList,5CD22E04689AE470C06D72769A1DE392,Some(33),None), CallCachingHashEntry(output count,C4CA4238A0B923820DCC509A6F75849B,Some(33),None), CallCachingHashEntry(command template,252D6947B867472493A1EEFC3D81EC66,Some(33),None), CallCachingHashEntry(input: String recordSeparator,CD8CECBD607D70F3F2A2DB4B591F9E67,Some(33),None), CallCachingHashEntry(runtime attribute: modules,AE6C8559AB372D43805B5CBD26923D7E,Some(33),None), CallCachingHashEntry(input: String str,E5D229F927330F9C23FA080B595F86F3,Some(33),None)))
[2020-07-30 19:06:24,58] [debug] Source:
| TableExpansion
|   table s2: Table CALL_CACHING_HASH_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.HASH_KEY : String'
|       2: Path s2.HASH_VALUE : String'
|       3: OptionApply
|         0: Path s2.CALL_CACHING_ENTRY_ID : Int'
|       4: OptionApply
|         0: Path s2.CALL_CACHING_HASH_ENTRY_ID : Long'

[2020-07-30 19:06:24,58] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:24,58] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table CALL_CACHING_HASH_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.HASH_KEY : String'
|       2: Path s3.HASH_VALUE : String'
|       3: OptionApply
|         0: Path s3.CALL_CACHING_ENTRY_ID : Int'
|       4: OptionApply
|         0: Path s3.CALL_CACHING_HASH_ENTRY_ID : Long'

[2020-07-30 19:06:24,58] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:24,58] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', String', Int')]
|   from s5: Insert allFields=[HASH_KEY, HASH_VALUE, CALL_CACHING_ENTRY_ID, CALL_CACHING_HASH_ENTRY_ID] : (String', String', Int')
|     table s6: Table CALL_CACHING_HASH_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', String', Int')
|       1: Path s6.HASH_KEY : String'
|       2: Path s6.HASH_VALUE : String'
|       3: Path s6.CALL_CACHING_ENTRY_ID : Int'
|   map: TypeMapping : Mapped[(String', String', Option[Int'], Option[Long'])]
|     0: ProductNode : (String', String', Option[Int'], Option[Long'])
|       1: InsertColumn HASH_KEY : String'
|         0: Path s5._1 : String'
|       2: InsertColumn HASH_VALUE : String'
|         0: Path s5._2 : String'
|       3: OptionApply : Option[Int']
|         0: InsertColumn CALL_CACHING_ENTRY_ID : Int'
|           0: Path s5._3 : Int'
|       4: OptionApply : Option[Long']
|         0: InsertColumn CALL_CACHING_HASH_ENTRY_ID : Long'

[2020-07-30 19:06:24,58] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[HASH_KEY, HASH_VALUE, CALL_CACHING_ENTRY_ID, CALL_CACHING_HASH_ENTRY_ID] : (String', String', Int')
|   table s6: Table CALL_CACHING_HASH_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', String', Int')
|     1: Path s6.HASH_KEY : String'
|     2: Path s6.HASH_VALUE : String'
|     3: Path s6.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,58] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=HASH_KEY : String'
|     2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=HASH_VALUE : String'
|     3: OptionResultConverter$mcI$sp idx=3 : Int'
|     4: CompoundResultConverter

[2020-07-30 19:06:24,58] [debug] Compiled server-side to:
| CompiledStatement "insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)" : (String', String', Int')

[2020-07-30 19:06:24,58] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', String', Int')]
|   from s5: CompiledStatement "insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)" : (String', String', Int')
|   map: CompiledMapping : Mapped[(String', String', Option[Int'], Option[Long'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=HASH_KEY : String'
|         2: SpecializedJdbcResultConverter$$anon$1 idx=2, name=HASH_VALUE : String'
|         3: OptionResultConverter$mcI$sp idx=3 : Int'
|         4: CompoundResultConverter

[2020-07-30 19:06:24,58] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:24,58] [debug]       assignUniqueSymbols:    0.471628 ms
[2020-07-30 19:06:24,58] [debug]                inferTypes:    0.101217 ms
[2020-07-30 19:06:24,58] [debug]            insertCompiler:    0.575974 ms
[2020-07-30 19:06:24,58] [debug]                   codeGen:    0.865571 ms
[2020-07-30 19:06:24,58] [debug]                     TOTAL:    2.014390 ms
[2020-07-30 19:06:24,58] [debug] #6: [fused] sequence
      1: MultiInsertAction [insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)]
[2020-07-30 19:06:24,58] [debug] Preparing statement: insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)
[2020-07-30 19:06:24,58] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: Int cores], [C4CA4238A0B923820DCC509A6F75849B], [33]]]
[2020-07-30 19:06:24,58] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: Int cores], [C4CA4238A0B923820DCC509A6F75849B], [33]]]
[2020-07-30 19:06:24,58] [debug] /------------------+---------------------------+-----\
[2020-07-30 19:06:24,58] [debug] | 1                | 2                         | 3   |
[2020-07-30 19:06:24,58] [debug] | String           | String                    | Int |
[2020-07-30 19:06:24,58] [debug] |------------------+---------------------------+-----|
[2020-07-30 19:06:24,58] [debug] | input: Int cores | C4CA4238A0B923820DCC50... | 33  |
[2020-07-30 19:06:24,58] [debug] \------------------+---------------------------+-----/
[2020-07-30 19:06:24,58] [debug] Execution of batch insert took 19µs
[2020-07-30 19:06:24,58] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: String modules], [8BD4A0089EF8D81CBB2C4EC604ABCCEC], [33]]]
[2020-07-30 19:06:24,58] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: String modules], [8BD4A0089EF8D81CBB2C4EC604ABCCEC], [33]]]
[2020-07-30 19:06:24,59] [debug] /-----------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                     | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String                | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |-----------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | input: String modules | 8BD4A0089EF8D81CBB2C4E... | 33  |
[2020-07-30 19:06:24,59] [debug] \-----------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 15µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: failOnStderr], [68934A3E9455FA72420237EB05902327], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: failOnStderr], [68934A3E9455FA72420237EB05902327], [33]]]
[2020-07-30 19:06:24,59] [debug] /---------------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                         | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String                    | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |---------------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | runtime attribute: fai... | 68934A3E9455FA72420237... | 33  |
[2020-07-30 19:06:24,59] [debug] \---------------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 9µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[backend name], [509820290D57F333403F490DDE7316F4], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[backend name], [509820290D57F333403F490DDE7316F4], [33]]]
[2020-07-30 19:06:24,59] [debug] /--------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1            | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String       | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |--------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | backend name | 509820290D57F333403F49... | 33  |
[2020-07-30 19:06:24,59] [debug] \--------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 8µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: String docker], [40D098D55F2F477C51A2B1390B902F36], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: String docker], [40D098D55F2F477C51A2B1390B902F36], [33]]]
[2020-07-30 19:06:24,59] [debug] /----------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                    | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String               | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |----------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | input: String docker | 40D098D55F2F477C51A2B1... | 33  |
[2020-07-30 19:06:24,59] [debug] \----------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 8µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input count], [C9F0F895FB98AB9159F51FD0297E236D], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input count], [C9F0F895FB98AB9159F51FD0297E236D], [33]]]
[2020-07-30 19:06:24,59] [debug] /-------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1           | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String      | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |-------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | input count | C9F0F895FB98AB9159F51F... | 33  |
[2020-07-30 19:06:24,59] [debug] \-------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 9µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: docker_volume], [2F17FD7241C5DD399EC36A237C797E92], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: docker_volume], [2F17FD7241C5DD399EC36A237C797E92], [33]]]
[2020-07-30 19:06:24,59] [debug] /---------------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                         | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String                    | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |---------------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | runtime attribute: doc... | 2F17FD7241C5DD399EC36A... | 33  |
[2020-07-30 19:06:24,59] [debug] \---------------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 9µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: Int jobMemory], [C4CA4238A0B923820DCC509A6F75849B], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: Int jobMemory], [C4CA4238A0B923820DCC509A6F75849B], [33]]]
[2020-07-30 19:06:24,59] [debug] /----------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                    | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String               | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |----------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | input: Int jobMemory | C4CA4238A0B923820DCC50... | 33  |
[2020-07-30 19:06:24,59] [debug] \----------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 8µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: Int timeout], [C4CA4238A0B923820DCC509A6F75849B], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: Int timeout], [C4CA4238A0B923820DCC509A6F75849B], [33]]]
[2020-07-30 19:06:24,59] [debug] /--------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                  | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String             | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |--------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | input: Int timeout | C4CA4238A0B923820DCC50... | 33  |
[2020-07-30 19:06:24,59] [debug] \--------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 9µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: String lineSeparator], [DE2FCE482459A94C2AF1AB3AC8B4257D], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: String lineSeparator], [DE2FCE482459A94C2AF1AB3AC8B4257D], [33]]]
[2020-07-30 19:06:24,59] [debug] /---------------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                         | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String                    | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |---------------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | input: String lineSepa... | DE2FCE482459A94C2AF1AB... | 33  |
[2020-07-30 19:06:24,59] [debug] \---------------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 9µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: docker], [4C617E74ECCA7B411D4295F10983F79E], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: docker], [4C617E74ECCA7B411D4295F10983F79E], [33]]]
[2020-07-30 19:06:24,59] [debug] /---------------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                         | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String                    | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |---------------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | runtime attribute: docker | 4C617E74ECCA7B411D4295... | 33  |
[2020-07-30 19:06:24,59] [debug] \---------------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 9µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: continueOnReturnCode], [CFCD208495D565EF66E7DFF9F98764DA], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: continueOnReturnCode], [CFCD208495D565EF66E7DFF9F98764DA], [33]]]
[2020-07-30 19:06:24,59] [debug] /---------------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                         | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String                    | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |---------------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | runtime attribute: con... | CFCD208495D565EF66E7DF... | 33  |
[2020-07-30 19:06:24,59] [debug] \---------------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 9µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: maxRetries], [CFCD208495D565EF66E7DFF9F98764DA], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: maxRetries], [CFCD208495D565EF66E7DFF9F98764DA], [33]]]
[2020-07-30 19:06:24,59] [debug] /---------------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                         | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String                    | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |---------------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | runtime attribute: max... | CFCD208495D565EF66E7DF... | 33  |
[2020-07-30 19:06:24,59] [debug] \---------------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 10µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[output expression: CompositeType_digest_f394f45b2ae2ba9ff158cf39675914de intervalsList], [5CD22E04689AE470C06D72769A1DE392], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[output expression: CompositeType_digest_f394f45b2ae2ba9ff158cf39675914de intervalsList], [5CD22E04689AE470C06D72769A1DE392], [33]]]
[2020-07-30 19:06:24,59] [debug] /---------------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                         | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String                    | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |---------------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | output expression: Com... | 5CD22E04689AE470C06D72... | 33  |
[2020-07-30 19:06:24,59] [debug] \---------------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 12µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[output count], [C4CA4238A0B923820DCC509A6F75849B], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[output count], [C4CA4238A0B923820DCC509A6F75849B], [33]]]
[2020-07-30 19:06:24,59] [debug] /--------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1            | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String       | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |--------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | output count | C4CA4238A0B923820DCC50... | 33  |
[2020-07-30 19:06:24,59] [debug] \--------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 8µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[command template], [252D6947B867472493A1EEFC3D81EC66], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[command template], [252D6947B867472493A1EEFC3D81EC66], [33]]]
[2020-07-30 19:06:24,59] [debug] /------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String           | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | command template | 252D6947B867472493A1EE... | 33  |
[2020-07-30 19:06:24,59] [debug] \------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 10µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: String recordSeparator], [CD8CECBD607D70F3F2A2DB4B591F9E67], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: String recordSeparator], [CD8CECBD607D70F3F2A2DB4B591F9E67], [33]]]
[2020-07-30 19:06:24,59] [debug] /---------------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                         | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String                    | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |---------------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | input: String recordSe... | CD8CECBD607D70F3F2A2DB... | 33  |
[2020-07-30 19:06:24,59] [debug] \---------------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 9µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: modules], [AE6C8559AB372D43805B5CBD26923D7E], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[runtime attribute: modules], [AE6C8559AB372D43805B5CBD26923D7E], [33]]]
[2020-07-30 19:06:24,59] [debug] /---------------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                         | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String                    | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |---------------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | runtime attribute: mod... | AE6C8559AB372D43805B5C... | 33  |
[2020-07-30 19:06:24,59] [debug] \---------------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 8µs
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: String str], [E5D229F927330F9C23FA080B595F86F3], [33]]]
[2020-07-30 19:06:24,59] [debug] Executing batch insert: HikariProxyPreparedStatement@601257043 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4e969fff[sql=[insert into "CALL_CACHING_HASH_ENTRY" ("HASH_KEY","HASH_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[input: String str], [E5D229F927330F9C23FA080B595F86F3], [33]]]
[2020-07-30 19:06:24,59] [debug] /-------------------+---------------------------+-----\
[2020-07-30 19:06:24,59] [debug] | 1                 | 2                         | 3   |
[2020-07-30 19:06:24,59] [debug] | String            | String                    | Int |
[2020-07-30 19:06:24,59] [debug] |-------------------+---------------------------+-----|
[2020-07-30 19:06:24,59] [debug] | input: String str | E5D229F927330F9C23FA08... | 33  |
[2020-07-30 19:06:24,59] [debug] \-------------------+---------------------------+-----/
[2020-07-30 19:06:24,59] [debug] Execution of batch insert took 29µs
[2020-07-30 19:06:24,59] [debug] Execution of batch took 1ms
[2020-07-30 19:06:24,59] [debug] #7: success (<iterator>,Vector(CallCachingSimpletonEntry(intervalsList:intervalsList[0]:id,Some(javax.sql.rowset.serial.SerialClob@e3c48c44),String,Some(33),None), CallCachingSimpletonEntry(intervalsList:intervalsList[0]:intervalsList[0],Some(javax.sql.rowset.serial.SerialClob@e3c48c44),String,Some(33),None), CallCachingSimpletonEntry(intervalsList:intervalsList[1]:id,Some(javax.sql.rowset.serial.SerialClob@e3c49005),String,Some(33),None), CallCachingSimpletonEntry(intervalsList:intervalsList[1]:intervalsList[0],Some(javax.sql.rowset.serial.SerialClob@e3c49005),String,Some(33),None), CallCachingSimpletonEntry(intervalsList:intervalsList[2]:id,Some(javax.sql.rowset.serial.SerialClob@e3c493c6),String,Some(33),None), CallCachingSimpletonEntry(intervalsList:intervalsList[2]:intervalsList[0],Some(javax.sql.rowset.serial.SerialClob@e3c493c6),String,Some(33),None)))
[2020-07-30 19:06:24,60] [debug] Source:
| TableExpansion
|   table s2: Table CALL_CACHING_SIMPLETON_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.SIMPLETON_KEY : String'
|       2: Path s2.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s2.WDL_TYPE : String'
|       4: OptionApply
|         0: Path s2.CALL_CACHING_ENTRY_ID : Int'
|       5: OptionApply
|         0: Path s2.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'

[2020-07-30 19:06:24,60] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:24,60] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table CALL_CACHING_SIMPLETON_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.SIMPLETON_KEY : String'
|       2: Path s3.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s3.WDL_TYPE : String'
|       4: OptionApply
|         0: Path s3.CALL_CACHING_ENTRY_ID : Int'
|       5: OptionApply
|         0: Path s3.CALL_CACHING_SIMPLETON_ENTRY_ID : Int'

[2020-07-30 19:06:24,60] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:24,60] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int')]
|   from s5: Insert allFields=[SIMPLETON_KEY, SIMPLETON_VALUE, WDL_TYPE, CALL_CACHING_ENTRY_ID, CALL_CACHING_SIMPLETON_ENTRY_ID] : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int')
|     table s6: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int')
|       1: Path s6.SIMPLETON_KEY : String'
|       2: Path s6.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s6.WDL_TYPE : String'
|       4: Path s6.CALL_CACHING_ENTRY_ID : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])
|       1: InsertColumn SIMPLETON_KEY : String'
|         0: Path s5._1 : String'
|       2: InsertColumn SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         0: Path s5._2 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: InsertColumn WDL_TYPE : String'
|         0: Path s5._3 : String'
|       4: OptionApply : Option[Int']
|         0: InsertColumn CALL_CACHING_ENTRY_ID : Int'
|           0: Path s5._4 : Int'
|       5: OptionApply : Option[Int']
|         0: InsertColumn CALL_CACHING_SIMPLETON_ENTRY_ID : Int'

[2020-07-30 19:06:24,60] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[SIMPLETON_KEY, SIMPLETON_VALUE, WDL_TYPE, CALL_CACHING_ENTRY_ID, CALL_CACHING_SIMPLETON_ENTRY_ID] : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int')
|   table s6: Table CALL_CACHING_SIMPLETON_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int')
|     1: Path s6.SIMPLETON_KEY : String'
|     2: Path s6.SIMPLETON_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|     3: Path s6.WDL_TYPE : String'
|     4: Path s6.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,60] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=SIMPLETON_KEY : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|     3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=WDL_TYPE : String'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'
|     5: CompoundResultConverter

[2020-07-30 19:06:24,60] [debug] Compiled server-side to:
| CompiledStatement "insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)" : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int')

[2020-07-30 19:06:24,60] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int')]
|   from s5: CompiledStatement "insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)" : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Int')
|   map: CompiledMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], String', Option[Int'], Option[Int'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=SIMPLETON_KEY : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|         3: SpecializedJdbcResultConverter$$anon$1 idx=3, name=WDL_TYPE : String'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'
|         5: CompoundResultConverter

[2020-07-30 19:06:24,60] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:24,60] [debug]       assignUniqueSymbols:    0.670021 ms
[2020-07-30 19:06:24,60] [debug]                inferTypes:    0.158040 ms
[2020-07-30 19:06:24,60] [debug]            insertCompiler:    1.170181 ms
[2020-07-30 19:06:24,60] [debug]                   codeGen:    1.686730 ms
[2020-07-30 19:06:24,60] [debug]                     TOTAL:    3.684972 ms
[2020-07-30 19:06:24,60] [debug] #8: [fused] sequence
      1: MultiInsertAction [insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)]
[2020-07-30 19:06:24,60] [debug] Preparing statement: insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)
[2020-07-30 19:06:24,60] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[0]:id], [javax.sql.rowset.serial.SerialClob@e3c48c44], [String], [33]]]
[2020-07-30 19:06:24,60] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[0]:id], [javax.sql.rowset.serial.SerialClob@e3c48c44], [String], [33]]]
[2020-07-30 19:06:24,60] [debug] /---------------------------+------+--------+-----\
[2020-07-30 19:06:24,60] [debug] | 1                         | 2    | 3      | 4   |
[2020-07-30 19:06:24,60] [debug] | String                    | Clob | String | Int |
[2020-07-30 19:06:24,60] [debug] |---------------------------+------+--------+-----|
[2020-07-30 19:06:24,60] [debug] | intervalsList:interval... |      | String | 33  |
[2020-07-30 19:06:24,60] [debug] \---------------------------+------+--------+-----/
[2020-07-30 19:06:24,61] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:24,61] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[0]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c48c44], [String], [33]]]
[2020-07-30 19:06:24,61] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[0]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c48c44], [String], [33]]]
[2020-07-30 19:06:24,61] [debug] /---------------------------+------+--------+-----\
[2020-07-30 19:06:24,61] [debug] | 1                         | 2    | 3      | 4   |
[2020-07-30 19:06:24,61] [debug] | String                    | Clob | String | Int |
[2020-07-30 19:06:24,61] [debug] |---------------------------+------+--------+-----|
[2020-07-30 19:06:24,61] [debug] | intervalsList:interval... |      | String | 33  |
[2020-07-30 19:06:24,61] [debug] \---------------------------+------+--------+-----/
[2020-07-30 19:06:24,62] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:24,62] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[1]:id], [javax.sql.rowset.serial.SerialClob@e3c49005], [String], [33]]]
[2020-07-30 19:06:24,62] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[1]:id], [javax.sql.rowset.serial.SerialClob@e3c49005], [String], [33]]]
[2020-07-30 19:06:24,62] [debug] /---------------------------+------+--------+-----\
[2020-07-30 19:06:24,62] [debug] | 1                         | 2    | 3      | 4   |
[2020-07-30 19:06:24,62] [debug] | String                    | Clob | String | Int |
[2020-07-30 19:06:24,62] [debug] |---------------------------+------+--------+-----|
[2020-07-30 19:06:24,62] [debug] | intervalsList:interval... |      | String | 33  |
[2020-07-30 19:06:24,62] [debug] \---------------------------+------+--------+-----/
[2020-07-30 19:06:24,63] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:24,63] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[1]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c49005], [String], [33]]]
[2020-07-30 19:06:24,63] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[1]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c49005], [String], [33]]]
[2020-07-30 19:06:24,63] [debug] /---------------------------+------+--------+-----\
[2020-07-30 19:06:24,63] [debug] | 1                         | 2    | 3      | 4   |
[2020-07-30 19:06:24,63] [debug] | String                    | Clob | String | Int |
[2020-07-30 19:06:24,63] [debug] |---------------------------+------+--------+-----|
[2020-07-30 19:06:24,63] [debug] | intervalsList:interval... |      | String | 33  |
[2020-07-30 19:06:24,63] [debug] \---------------------------+------+--------+-----/
[2020-07-30 19:06:24,64] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:24,64] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[2]:id], [javax.sql.rowset.serial.SerialClob@e3c493c6], [String], [33]]]
[2020-07-30 19:06:24,64] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[2]:id], [javax.sql.rowset.serial.SerialClob@e3c493c6], [String], [33]]]
[2020-07-30 19:06:24,64] [debug] /---------------------------+------+--------+-----\
[2020-07-30 19:06:24,64] [debug] | 1                         | 2    | 3      | 4   |
[2020-07-30 19:06:24,64] [debug] | String                    | Clob | String | Int |
[2020-07-30 19:06:24,64] [debug] |---------------------------+------+--------+-----|
[2020-07-30 19:06:24,64] [debug] | intervalsList:interval... |      | String | 33  |
[2020-07-30 19:06:24,64] [debug] \---------------------------+------+--------+-----/
[2020-07-30 19:06:24,65] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:24,65] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[2]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c493c6], [String], [33]]]
[2020-07-30 19:06:24,65] [debug] Executing batch insert: HikariProxyPreparedStatement@36669446 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4bdb5687[sql=[insert into "CALL_CACHING_SIMPLETON_ENTRY" ("SIMPLETON_KEY","SIMPLETON_VALUE","WDL_TYPE","CALL_CACHING_ENTRY_ID")  values (?,?,?,?)], parameters=[[intervalsList:intervalsList[2]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c493c6], [String], [33]]]
[2020-07-30 19:06:24,65] [debug] /---------------------------+------+--------+-----\
[2020-07-30 19:06:24,65] [debug] | 1                         | 2    | 3      | 4   |
[2020-07-30 19:06:24,65] [debug] | String                    | Clob | String | Int |
[2020-07-30 19:06:24,65] [debug] |---------------------------+------+--------+-----|
[2020-07-30 19:06:24,65] [debug] | intervalsList:interval... |      | String | 33  |
[2020-07-30 19:06:24,65] [debug] \---------------------------+------+--------+-----/
[2020-07-30 19:06:24,65] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:24,65] [debug] Execution of batch took 564µs
[2020-07-30 19:06:24,66] [debug] #9: success (<iterator>,Vector(CallCachingDetritusEntry(stdout,Some(javax.sql.rowset.serial.SerialClob@2b750977),Some(33),None), CallCachingDetritusEntry(returnCode,Some(javax.sql.rowset.serial.SerialClob@6e6209dd),Some(33),None), CallCachingDetritusEntry(callRootPath,Some(javax.sql.rowset.serial.SerialClob@928ec6d8),Some(33),None), CallCachingDetritusEntry(stderr,Some(javax.sql.rowset.serial.SerialClob@2ae6b9ce),Some(33),None), CallCachingDetritusEntry(script,Some(javax.sql.rowset.serial.SerialClob@bfb81ff7),Some(33),None)))
[2020-07-30 19:06:24,66] [debug] Source:
| TableExpansion
|   table s2: Table CALL_CACHING_DETRITUS_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.DETRITUS_KEY : String'
|       2: Path s2.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: OptionApply
|         0: Path s2.CALL_CACHING_ENTRY_ID : Int'
|       4: OptionApply
|         0: Path s2.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:24,66] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:24,66] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table CALL_CACHING_DETRITUS_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.DETRITUS_KEY : String'
|       2: Path s3.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: OptionApply
|         0: Path s3.CALL_CACHING_ENTRY_ID : Int'
|       4: OptionApply
|         0: Path s3.CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:24,66] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:24,66] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int')]
|   from s5: Insert allFields=[DETRITUS_KEY, DETRITUS_VALUE, CALL_CACHING_ENTRY_ID, CALL_CACHING_DETRITUS_ENTRY_ID] : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int')
|     table s6: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int')
|       1: Path s6.DETRITUS_KEY : String'
|       2: Path s6.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: Path s6.CALL_CACHING_ENTRY_ID : Int'
|   map: TypeMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])
|       1: InsertColumn DETRITUS_KEY : String'
|         0: Path s5._1 : String'
|       2: InsertColumn DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         0: Path s5._2 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       3: OptionApply : Option[Int']
|         0: InsertColumn CALL_CACHING_ENTRY_ID : Int'
|           0: Path s5._3 : Int'
|       4: OptionApply : Option[Int']
|         0: InsertColumn CALL_CACHING_DETRITUS_ENTRY_ID : Int'

[2020-07-30 19:06:24,66] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[DETRITUS_KEY, DETRITUS_VALUE, CALL_CACHING_ENTRY_ID, CALL_CACHING_DETRITUS_ENTRY_ID] : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int')
|   table s6: Table CALL_CACHING_DETRITUS_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int')
|     1: Path s6.DETRITUS_KEY : String'
|     2: Path s6.DETRITUS_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|     3: Path s6.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,66] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=DETRITUS_KEY : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|     3: OptionResultConverter$mcI$sp idx=3 : Int'
|     4: CompoundResultConverter

[2020-07-30 19:06:24,66] [debug] Compiled server-side to:
| CompiledStatement "insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)" : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int')

[2020-07-30 19:06:24,66] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int')]
|   from s5: CompiledStatement "insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)" : (String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Int')
|   map: CompiledMapping : Mapped[(String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[Int'], Option[Int'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=DETRITUS_KEY : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|         3: OptionResultConverter$mcI$sp idx=3 : Int'
|         4: CompoundResultConverter

[2020-07-30 19:06:24,66] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:24,66] [debug]       assignUniqueSymbols:    0.636477 ms
[2020-07-30 19:06:24,66] [debug]                inferTypes:    0.186094 ms
[2020-07-30 19:06:24,66] [debug]            insertCompiler:    0.937280 ms
[2020-07-30 19:06:24,66] [debug]                   codeGen:    1.515748 ms
[2020-07-30 19:06:24,66] [debug]                     TOTAL:    3.275599 ms
[2020-07-30 19:06:24,66] [debug] #10: [fused] sequence
      1: MultiInsertAction [insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)]
[2020-07-30 19:06:24,66] [debug] Preparing statement: insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)
[2020-07-30 19:06:24,66] [debug] Executing batch insert: HikariProxyPreparedStatement@326039785 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7dc8767e[sql=[insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[stdout], [javax.sql.rowset.serial.SerialClob@2b750977], [33]]]
[2020-07-30 19:06:24,66] [debug] Executing batch insert: HikariProxyPreparedStatement@326039785 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7dc8767e[sql=[insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[stdout], [javax.sql.rowset.serial.SerialClob@2b750977], [33]]]
[2020-07-30 19:06:24,66] [debug] /--------+------+-----\
[2020-07-30 19:06:24,66] [debug] | 1      | 2    | 3   |
[2020-07-30 19:06:24,66] [debug] | String | Clob | Int |
[2020-07-30 19:06:24,66] [debug] |--------+------+-----|
[2020-07-30 19:06:24,66] [debug] | stdout |      | 33  |
[2020-07-30 19:06:24,66] [debug] \--------+------+-----/
[2020-07-30 19:06:24,67] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:24,67] [debug] Executing batch insert: HikariProxyPreparedStatement@326039785 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7dc8767e[sql=[insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[returnCode], [javax.sql.rowset.serial.SerialClob@6e6209dd], [33]]]
[2020-07-30 19:06:24,67] [debug] Executing batch insert: HikariProxyPreparedStatement@326039785 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7dc8767e[sql=[insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[returnCode], [javax.sql.rowset.serial.SerialClob@6e6209dd], [33]]]
[2020-07-30 19:06:24,67] [debug] /------------+------+-----\
[2020-07-30 19:06:24,67] [debug] | 1          | 2    | 3   |
[2020-07-30 19:06:24,67] [debug] | String     | Clob | Int |
[2020-07-30 19:06:24,67] [debug] |------------+------+-----|
[2020-07-30 19:06:24,67] [debug] | returnCode |      | 33  |
[2020-07-30 19:06:24,67] [debug] \------------+------+-----/
[2020-07-30 19:06:24,68] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:24,68] [debug] Executing batch insert: HikariProxyPreparedStatement@326039785 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7dc8767e[sql=[insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[callRootPath], [javax.sql.rowset.serial.SerialClob@928ec6d8], [33]]]
[2020-07-30 19:06:24,68] [debug] Executing batch insert: HikariProxyPreparedStatement@326039785 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7dc8767e[sql=[insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[callRootPath], [javax.sql.rowset.serial.SerialClob@928ec6d8], [33]]]
[2020-07-30 19:06:24,68] [debug] /--------------+------+-----\
[2020-07-30 19:06:24,68] [debug] | 1            | 2    | 3   |
[2020-07-30 19:06:24,68] [debug] | String       | Clob | Int |
[2020-07-30 19:06:24,68] [debug] |--------------+------+-----|
[2020-07-30 19:06:24,68] [debug] | callRootPath |      | 33  |
[2020-07-30 19:06:24,68] [debug] \--------------+------+-----/
[2020-07-30 19:06:24,69] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:24,69] [debug] Executing batch insert: HikariProxyPreparedStatement@326039785 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7dc8767e[sql=[insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[stderr], [javax.sql.rowset.serial.SerialClob@2ae6b9ce], [33]]]
[2020-07-30 19:06:24,69] [debug] Executing batch insert: HikariProxyPreparedStatement@326039785 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7dc8767e[sql=[insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[stderr], [javax.sql.rowset.serial.SerialClob@2ae6b9ce], [33]]]
[2020-07-30 19:06:24,69] [debug] /--------+------+-----\
[2020-07-30 19:06:24,69] [debug] | 1      | 2    | 3   |
[2020-07-30 19:06:24,69] [debug] | String | Clob | Int |
[2020-07-30 19:06:24,69] [debug] |--------+------+-----|
[2020-07-30 19:06:24,69] [debug] | stderr |      | 33  |
[2020-07-30 19:06:24,69] [debug] \--------+------+-----/
[2020-07-30 19:06:24,69] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:24,69] [debug] Executing batch insert: HikariProxyPreparedStatement@326039785 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7dc8767e[sql=[insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[script], [javax.sql.rowset.serial.SerialClob@bfb81ff7], [33]]]
[2020-07-30 19:06:24,69] [debug] Executing batch insert: HikariProxyPreparedStatement@326039785 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7dc8767e[sql=[insert into "CALL_CACHING_DETRITUS_ENTRY" ("DETRITUS_KEY","DETRITUS_VALUE","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[script], [javax.sql.rowset.serial.SerialClob@bfb81ff7], [33]]]
[2020-07-30 19:06:24,69] [debug] /--------+------+-----\
[2020-07-30 19:06:24,69] [debug] | 1      | 2    | 3   |
[2020-07-30 19:06:24,69] [debug] | String | Clob | Int |
[2020-07-30 19:06:24,69] [debug] |--------+------+-----|
[2020-07-30 19:06:24,69] [debug] | script |      | 33  |
[2020-07-30 19:06:24,69] [debug] \--------+------+-----/
[2020-07-30 19:06:24,70] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:24,70] [debug] Execution of batch took 588µs
[2020-07-30 19:06:24,70] [debug] #11: success (<iterator>,Vector(CallCachingAggregationEntry(65F2F0AC1615D0CCB745BB8773FAB356,None,Some(33),None)))
[2020-07-30 19:06:24,70] [debug] Source:
| TableExpansion
|   table s2: Table CALL_CACHING_AGGREGATION_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.BASE_AGGREGATION : String'
|       2: Path s2.INPUT_FILES_AGGREGATION : Option[String']
|       3: OptionApply
|         0: Path s2.CALL_CACHING_ENTRY_ID : Int'
|       4: OptionApply
|         0: Path s2.CALL_CACHING_AGGREGATION_ENTRY_ID : Int'

[2020-07-30 19:06:24,70] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:24,70] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table CALL_CACHING_AGGREGATION_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.BASE_AGGREGATION : String'
|       2: Path s3.INPUT_FILES_AGGREGATION : Option[String']
|       3: OptionApply
|         0: Path s3.CALL_CACHING_ENTRY_ID : Int'
|       4: OptionApply
|         0: Path s3.CALL_CACHING_AGGREGATION_ENTRY_ID : Int'

[2020-07-30 19:06:24,70] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:24,70] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', Option[String'], Int')]
|   from s5: Insert allFields=[BASE_AGGREGATION, INPUT_FILES_AGGREGATION, CALL_CACHING_ENTRY_ID, CALL_CACHING_AGGREGATION_ENTRY_ID] : (String', Option[String'], Int')
|     table s6: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', Option[String'], Int')
|       1: Path s6.BASE_AGGREGATION : String'
|       2: Path s6.INPUT_FILES_AGGREGATION : Option[String']
|       3: Path s6.CALL_CACHING_ENTRY_ID : Int'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'])
|       1: InsertColumn BASE_AGGREGATION : String'
|         0: Path s5._1 : String'
|       2: InsertColumn INPUT_FILES_AGGREGATION : Option[String']
|         0: Path s5._2 : Option[String']
|       3: OptionApply : Option[Int']
|         0: InsertColumn CALL_CACHING_ENTRY_ID : Int'
|           0: Path s5._3 : Int'
|       4: OptionApply : Option[Int']
|         0: InsertColumn CALL_CACHING_AGGREGATION_ENTRY_ID : Int'

[2020-07-30 19:06:24,71] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[BASE_AGGREGATION, INPUT_FILES_AGGREGATION, CALL_CACHING_ENTRY_ID, CALL_CACHING_AGGREGATION_ENTRY_ID] : (String', Option[String'], Int')
|   table s6: Table CALL_CACHING_AGGREGATION_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', Option[String'], Int')
|     1: Path s6.BASE_AGGREGATION : String'
|     2: Path s6.INPUT_FILES_AGGREGATION : Option[String']
|     3: Path s6.CALL_CACHING_ENTRY_ID : Int'

[2020-07-30 19:06:24,71] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=BASE_AGGREGATION : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|     3: OptionResultConverter$mcI$sp idx=3 : Int'
|     4: CompoundResultConverter

[2020-07-30 19:06:24,71] [debug] Compiled server-side to:
| CompiledStatement "insert into "CALL_CACHING_AGGREGATION_ENTRY" ("BASE_AGGREGATION","INPUT_FILES_AGGREGATION","CALL_CACHING_ENTRY_ID")  values (?,?,?)" : (String', Option[String'], Int')

[2020-07-30 19:06:24,71] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', Option[String'], Int')]
|   from s5: CompiledStatement "insert into "CALL_CACHING_AGGREGATION_ENTRY" ("BASE_AGGREGATION","INPUT_FILES_AGGREGATION","CALL_CACHING_ENTRY_ID")  values (?,?,?)" : (String', Option[String'], Int')
|   map: CompiledMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=BASE_AGGREGATION : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|         3: OptionResultConverter$mcI$sp idx=3 : Int'
|         4: CompoundResultConverter

[2020-07-30 19:06:24,71] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:24,71] [debug]       assignUniqueSymbols:    0.768136 ms
[2020-07-30 19:06:24,71] [debug]                inferTypes:    0.167340 ms
[2020-07-30 19:06:24,71] [debug]            insertCompiler:    0.939340 ms
[2020-07-30 19:06:24,71] [debug]                   codeGen:    1.466263 ms
[2020-07-30 19:06:24,71] [debug]                     TOTAL:    3.341079 ms
[2020-07-30 19:06:24,71] [debug] #12: [fused] sequence
      1: MultiInsertAction [insert into "CALL_CACHING_AGGREGATION_ENTRY" ("BASE_AGGREGATION","INPUT_FILES_AGGREGATION","CALL_CACHING_ENTRY_ID")  values (?,?,?)]
[2020-07-30 19:06:24,71] [debug] Preparing statement: insert into "CALL_CACHING_AGGREGATION_ENTRY" ("BASE_AGGREGATION","INPUT_FILES_AGGREGATION","CALL_CACHING_ENTRY_ID")  values (?,?,?)
[2020-07-30 19:06:24,71] [debug] Executing prepared update: HikariProxyPreparedStatement@1851183842 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@32d1883[sql=[insert into "CALL_CACHING_AGGREGATION_ENTRY" ("BASE_AGGREGATION","INPUT_FILES_AGGREGATION","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[65F2F0AC1615D0CCB745BB8773FAB356], [null], [33]]]
[2020-07-30 19:06:24,71] [debug] Executing prepared update: HikariProxyPreparedStatement@1851183842 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@32d1883[sql=[insert into "CALL_CACHING_AGGREGATION_ENTRY" ("BASE_AGGREGATION","INPUT_FILES_AGGREGATION","CALL_CACHING_ENTRY_ID")  values (?,?,?)], parameters=[[65F2F0AC1615D0CCB745BB8773FAB356], [null], [33]]]
[2020-07-30 19:06:24,71] [debug] /---------------------------+---------+-----\
[2020-07-30 19:06:24,71] [debug] | 1                         | 2       | 3   |
[2020-07-30 19:06:24,71] [debug] | String                    | VARCHAR | Int |
[2020-07-30 19:06:24,71] [debug] |---------------------------+---------+-----|
[2020-07-30 19:06:24,71] [debug] | 65F2F0AC1615D0CCB745BB... | NULL    | 33  |
[2020-07-30 19:06:24,71] [debug] \---------------------------+---------+-----/
[2020-07-30 19:06:24,71] [debug] Execution of prepared update took 141µs
[2020-07-30 19:06:24,71] [debug] #13: success ()
[2020-07-30 19:06:24,71] [debug] #14: Commit
[2020-07-30 19:06:24,71] [debug] #15: SetTransactionIsolation
[2020-07-30 19:06:24,71] [debug] #16: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:25,00] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:25,00] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:25,00] [debug] #3: StartTransaction
[2020-07-30 19:06:25,00] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:25,00] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:25,00] [debug] Executing prepared statement: HikariProxyPreparedStatement@1857765920 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@d47431a[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:25,00] [debug] Executing prepared statement: HikariProxyPreparedStatement@1857765920 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@d47431a[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:25,00] [debug] /------\
[2020-07-30 19:06:25,00] [debug] | 1    |
[2020-07-30 19:06:25,00] [debug] | Long |
[2020-07-30 19:06:25,00] [debug] |------|
[2020-07-30 19:06:25,00] [debug] | 5000 |
[2020-07-30 19:06:25,00] [debug] \------/
[2020-07-30 19:06:25,00] [debug] Execution of prepared statement took 168µs
[2020-07-30 19:06:25,00] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:25,00] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:25,00] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:25,00] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:25,00] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:25,00] [debug] #5: success Vector()
[2020-07-30 19:06:25,00] [debug] #6: success Vector()
[2020-07-30 19:06:25,00] [debug] #7: success ()
[2020-07-30 19:06:25,00] [debug] #8: success ((),Vector())
[2020-07-30 19:06:25,00] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:25,00] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:25,00] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:25,00] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:25,00] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:25,00] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:25,00] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:25,00] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:25,00] [debug] Expanding tables in result type
[2020-07-30 19:06:25,00] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,01] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,01] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,01] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:25,01] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,01] [debug] Flattening projection t8
[2020-07-30 19:06:25,01] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,01] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:25,01] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:25,01] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:25,01] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:25,01] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:25,01] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,01] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:25,01] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:25,01] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:25,01] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:25,01] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:25,01] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:25,01] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:25,01] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:25,01] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:25,01] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:25,01] [debug] Creating mapping from Long'
[2020-07-30 19:06:25,01] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:25,01] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:25,01] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:25,02] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:25,02] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:25,02] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:25,02] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:25,02] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:25,02] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:25,02] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:25,02] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,02] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:25,02] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:25,02] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:25,02] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,02] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:25,02] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:25,02] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:25,02] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:25,02] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:25,02] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:25,02] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:25,02] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:25,03] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:25,03] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:25,03] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:25,03] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:25,03] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:25,03] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:25,03] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:25,03] [debug]       assignUniqueSymbols:    0.524081 ms
[2020-07-30 19:06:25,03] [debug]           unrollTailBinds:    0.139054 ms
[2020-07-30 19:06:25,03] [debug]                inferTypes:    0.165185 ms
[2020-07-30 19:06:25,03] [debug]              expandTables:    1.558629 ms
[2020-07-30 19:06:25,03] [debug]           forceOuterBinds:    0.450090 ms
[2020-07-30 19:06:25,03] [debug]         removeMappedTypes:    0.367715 ms
[2020-07-30 19:06:25,03] [debug]                expandSums:    0.060876 ms
[2020-07-30 19:06:25,03] [debug]             expandRecords:    0.305204 ms
[2020-07-30 19:06:25,03] [debug]        flattenProjections:    0.996165 ms
[2020-07-30 19:06:25,03] [debug]              rewriteJoins:    0.116989 ms
[2020-07-30 19:06:25,03] [debug]             verifySymbols:    0.073283 ms
[2020-07-30 19:06:25,03] [debug]             relabelUnions:    0.056013 ms
[2020-07-30 19:06:25,03] [debug]          createAggregates:    0.040599 ms
[2020-07-30 19:06:25,03] [debug]           resolveZipJoins:    0.061609 ms
[2020-07-30 19:06:25,03] [debug]          pruneProjections:    0.301033 ms
[2020-07-30 19:06:25,03] [debug]           rewriteDistinct:    0.053213 ms
[2020-07-30 19:06:25,03] [debug]    createResultSetMapping:    0.740463 ms
[2020-07-30 19:06:25,03] [debug]            hoistClientOps:   12.324689 ms
[2020-07-30 19:06:25,03] [debug]         reorderOperations:    0.135479 ms
[2020-07-30 19:06:25,03] [debug]     mergeToComprehensions:    2.929247 ms
[2020-07-30 19:06:25,03] [debug]            optimizeScalar:    0.076922 ms
[2020-07-30 19:06:25,03] [debug]          removeFieldNames:    1.069740 ms
[2020-07-30 19:06:25,03] [debug]      specializeParameters:    0.171770 ms
[2020-07-30 19:06:25,03] [debug]                   codeGen:    0.813152 ms
[2020-07-30 19:06:25,03] [debug]                     TOTAL:   23.531200 ms
[2020-07-30 19:06:25,03] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:25,03] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:25,03] [debug] Executing prepared update: HikariProxyPreparedStatement@1083663133 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@14f091ac[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:25,03] [debug] Executing prepared update: HikariProxyPreparedStatement@1083663133 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@14f091ac[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:25,03] [debug] Execution of prepared update took 122µs
[2020-07-30 19:06:25,03] [debug] #10: success 0
[2020-07-30 19:06:25,03] [debug] #11: Commit
[2020-07-30 19:06:25,03] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:25,03] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:25,03] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:25,03] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:25,03] [debug] #3: StartTransaction
[2020-07-30 19:06:25,03] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:25,03] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:25,03] [debug] Executing prepared statement: HikariProxyPreparedStatement@1866632499 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7faf1e9b[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:25,03] [debug] Executing prepared statement: HikariProxyPreparedStatement@1866632499 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7faf1e9b[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:25,03] [debug] /---------------------------\
[2020-07-30 19:06:25,03] [debug] | 1                         |
[2020-07-30 19:06:25,03] [debug] | String                    |
[2020-07-30 19:06:25,03] [debug] |---------------------------|
[2020-07-30 19:06:25,03] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:25,03] [debug] \---------------------------/
[2020-07-30 19:06:25,03] [debug] Execution of prepared statement took 62µs
[2020-07-30 19:06:25,03] [debug] /------------------\
[2020-07-30 19:06:25,03] [debug] | 1                |
[2020-07-30 19:06:25,03] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:25,03] [debug] |------------------|
[2020-07-30 19:06:25,03] [debug] \------------------/
[2020-07-30 19:06:25,03] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:25,03] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:25,03] [debug] Executing prepared statement: HikariProxyPreparedStatement@978422859 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@d395165[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:25,03] [debug] Executing prepared statement: HikariProxyPreparedStatement@978422859 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@d395165[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:25,03] [debug] /---------------------------\
[2020-07-30 19:06:25,03] [debug] | 1                         |
[2020-07-30 19:06:25,03] [debug] | String                    |
[2020-07-30 19:06:25,03] [debug] |---------------------------|
[2020-07-30 19:06:25,03] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:25,03] [debug] \---------------------------/
[2020-07-30 19:06:25,03] [debug] Execution of prepared statement took 50µs
[2020-07-30 19:06:25,03] [debug] /------------------\
[2020-07-30 19:06:25,03] [debug] | 1                |
[2020-07-30 19:06:25,03] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:25,03] [debug] |------------------|
[2020-07-30 19:06:25,03] [debug] \------------------/
[2020-07-30 19:06:25,03] [debug] #6: success None
[2020-07-30 19:06:25,03] [debug] #7: success 0
[2020-07-30 19:06:25,03] [debug] #8: success (0,0)
[2020-07-30 19:06:25,03] [debug] #9: success (0,0)
[2020-07-30 19:06:25,03] [debug] #10: Commit
[2020-07-30 19:06:25,03] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:25,03] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:25,04] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,04] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:25,04] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,04] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:25,04] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:25,04] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:25,04] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:25,04] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:25,04] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:25,04] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:25,04] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:25,04] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:25,04] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:25,04] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:25,04] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,04] [debug] Flattening projection t8
[2020-07-30 19:06:25,04] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:25,04] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:25,04] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:25,04] [debug] Flattening projection t7
[2020-07-30 19:06:25,04] [debug] Flattening projection t9
[2020-07-30 19:06:25,04] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,04] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:25,04] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:25,04] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:25,04] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:25,04] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:25,04] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:25,04] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:25,04] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:25,04] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:25,04] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:25,04] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,04] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,04] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,04] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,04] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:25,04] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:25,04] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:25,04] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:25,04] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:25,04] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:25,04] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:25,04] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:25,04] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:25,04] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:25,04] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:25,04] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:25,04] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:25,04] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:25,04] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:25,04] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:25,04] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:25,04] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:25,04] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:25,04] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:25,04] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:25,04] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:25,04] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:25,04] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:25,04] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:25,05] [debug] Table fields: Map()
[2020-07-30 19:06:25,05] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:25,05] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:25,05] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:25,05] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:25,05] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:25,05] [debug] Replacements are: Map()
[2020-07-30 19:06:25,05] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:25,05] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:25,05] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:25,05] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:25,05] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:25,05] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:25,05] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:25,05] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:25,05] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:25,05] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:25,05] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:25,05] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:25,05] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:25,05] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:25,05] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:25,05] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:25,05] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:25,05] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:25,05] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:25,05] [debug]       assignUniqueSymbols:    0.319462 ms
[2020-07-30 19:06:25,05] [debug]           unrollTailBinds:    0.036602 ms
[2020-07-30 19:06:25,05] [debug]                inferTypes:    0.069572 ms
[2020-07-30 19:06:25,05] [debug]              expandTables:    0.636037 ms
[2020-07-30 19:06:25,05] [debug]           forceOuterBinds:    0.566740 ms
[2020-07-30 19:06:25,05] [debug]         removeMappedTypes:    0.094121 ms
[2020-07-30 19:06:25,05] [debug]                expandSums:    0.023594 ms
[2020-07-30 19:06:25,05] [debug]             expandRecords:    0.374723 ms
[2020-07-30 19:06:25,05] [debug]        flattenProjections:    1.793433 ms
[2020-07-30 19:06:25,05] [debug]              rewriteJoins:    0.869840 ms
[2020-07-30 19:06:25,05] [debug]             verifySymbols:    0.094826 ms
[2020-07-30 19:06:25,05] [debug]             relabelUnions:    0.049470 ms
[2020-07-30 19:06:25,05] [debug]          createAggregates:    2.467350 ms
[2020-07-30 19:06:25,05] [debug]           resolveZipJoins:    0.058937 ms
[2020-07-30 19:06:25,05] [debug]          pruneProjections:    0.296990 ms
[2020-07-30 19:06:25,05] [debug]           rewriteDistinct:    0.037723 ms
[2020-07-30 19:06:25,05] [debug]    createResultSetMapping:    0.446742 ms
[2020-07-30 19:06:25,05] [debug]            hoistClientOps:    0.932807 ms
[2020-07-30 19:06:25,05] [debug]         reorderOperations:    0.070261 ms
[2020-07-30 19:06:25,05] [debug]     mergeToComprehensions:    2.669165 ms
[2020-07-30 19:06:25,05] [debug]            optimizeScalar:    0.084311 ms
[2020-07-30 19:06:25,05] [debug]          removeFieldNames:    1.183479 ms
[2020-07-30 19:06:25,05] [debug]      specializeParameters:    0.150845 ms
[2020-07-30 19:06:25,05] [debug]                   codeGen:    1.041640 ms
[2020-07-30 19:06:25,05] [debug]                     TOTAL:   14.368670 ms
[2020-07-30 19:06:25,05] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:25,05] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:25,05] [debug] Executing prepared statement: HikariProxyPreparedStatement@825529820 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@36e81e5c[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:25,05] [debug] Executing prepared statement: HikariProxyPreparedStatement@825529820 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@36e81e5c[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:25,05] [debug] Execution of prepared statement took 61µs
[2020-07-30 19:06:25,05] [debug] /----\
[2020-07-30 19:06:25,05] [debug] | 1  |
[2020-07-30 19:06:25,05] [debug] | C1 |
[2020-07-30 19:06:25,05] [debug] |----|
[2020-07-30 19:06:25,05] [debug] | 0  |
[2020-07-30 19:06:25,05] [debug] \----/
[2020-07-30 19:06:26,06] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:26,06] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:26,06] [debug] #3: StartTransaction
[2020-07-30 19:06:26,06] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:26,06] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:26,06] [debug] Executing prepared statement: HikariProxyPreparedStatement@168519423 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@66d69f40[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:26,06] [debug] Executing prepared statement: HikariProxyPreparedStatement@168519423 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@66d69f40[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:26,06] [debug] /------\
[2020-07-30 19:06:26,06] [debug] | 1    |
[2020-07-30 19:06:26,06] [debug] | Long |
[2020-07-30 19:06:26,06] [debug] |------|
[2020-07-30 19:06:26,06] [debug] | 5000 |
[2020-07-30 19:06:26,06] [debug] \------/
[2020-07-30 19:06:26,06] [debug] Execution of prepared statement took 211µs
[2020-07-30 19:06:26,06] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:26,06] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:26,06] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:26,06] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:26,06] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:26,06] [debug] #5: success Vector()
[2020-07-30 19:06:26,06] [debug] #6: success Vector()
[2020-07-30 19:06:26,06] [debug] #7: success ()
[2020-07-30 19:06:26,06] [debug] #8: success ((),Vector())
[2020-07-30 19:06:26,06] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:26,06] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:26,06] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:26,06] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:26,06] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:26,06] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:26,07] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:26,07] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:26,07] [debug] Expanding tables in result type
[2020-07-30 19:06:26,07] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,07] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,07] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,07] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:26,07] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,07] [debug] Flattening projection t8
[2020-07-30 19:06:26,07] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,07] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:26,07] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:26,07] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:26,07] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:26,07] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:26,07] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,07] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:26,07] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:26,07] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:26,07] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:26,07] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:26,07] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:26,07] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:26,07] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:26,07] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:26,07] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:26,07] [debug] Creating mapping from Long'
[2020-07-30 19:06:26,07] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:26,07] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:26,07] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:26,07] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:26,07] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:26,07] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:26,07] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:26,07] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:26,07] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:26,07] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:26,07] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,07] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:26,07] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:26,07] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:26,07] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,08] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:26,08] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:26,08] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:26,08] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:26,08] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:26,08] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:26,08] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:26,08] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:26,08] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:26,08] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:26,08] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:26,08] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:26,08] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:26,08] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:26,08] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:26,08] [debug]       assignUniqueSymbols:    0.563616 ms
[2020-07-30 19:06:26,08] [debug]           unrollTailBinds:    0.073898 ms
[2020-07-30 19:06:26,08] [debug]                inferTypes:    0.119556 ms
[2020-07-30 19:06:26,08] [debug]              expandTables:    4.949716 ms
[2020-07-30 19:06:26,08] [debug]           forceOuterBinds:    0.976180 ms
[2020-07-30 19:06:26,08] [debug]         removeMappedTypes:    0.336949 ms
[2020-07-30 19:06:26,08] [debug]                expandSums:    0.044570 ms
[2020-07-30 19:06:26,08] [debug]             expandRecords:    0.373609 ms
[2020-07-30 19:06:26,08] [debug]        flattenProjections:    1.027058 ms
[2020-07-30 19:06:26,08] [debug]              rewriteJoins:    0.093097 ms
[2020-07-30 19:06:26,08] [debug]             verifySymbols:    0.100305 ms
[2020-07-30 19:06:26,08] [debug]             relabelUnions:    0.058876 ms
[2020-07-30 19:06:26,08] [debug]          createAggregates:    0.035238 ms
[2020-07-30 19:06:26,08] [debug]           resolveZipJoins:    0.051769 ms
[2020-07-30 19:06:26,08] [debug]          pruneProjections:    0.272656 ms
[2020-07-30 19:06:26,08] [debug]           rewriteDistinct:    0.055609 ms
[2020-07-30 19:06:26,08] [debug]    createResultSetMapping:    0.563815 ms
[2020-07-30 19:06:26,08] [debug]            hoistClientOps:    1.394020 ms
[2020-07-30 19:06:26,08] [debug]         reorderOperations:    0.096587 ms
[2020-07-30 19:06:26,08] [debug]     mergeToComprehensions:    3.552716 ms
[2020-07-30 19:06:26,08] [debug]            optimizeScalar:    0.080879 ms
[2020-07-30 19:06:26,08] [debug]          removeFieldNames:    0.888637 ms
[2020-07-30 19:06:26,08] [debug]      specializeParameters:    0.114004 ms
[2020-07-30 19:06:26,08] [debug]                   codeGen:    0.691189 ms
[2020-07-30 19:06:26,08] [debug]                     TOTAL:   16.514549 ms
[2020-07-30 19:06:26,08] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:26,08] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:26,08] [debug] Executing prepared update: HikariProxyPreparedStatement@1266338816 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@c8f068d[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:26,08] [debug] Executing prepared update: HikariProxyPreparedStatement@1266338816 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@c8f068d[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:26,08] [debug] Execution of prepared update took 107µs
[2020-07-30 19:06:26,08] [debug] #10: success 0
[2020-07-30 19:06:26,08] [debug] #11: Commit
[2020-07-30 19:06:26,08] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:26,08] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:26,08] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:26,08] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:26,08] [debug] #3: StartTransaction
[2020-07-30 19:06:26,08] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:26,08] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:26,08] [debug] Executing prepared statement: HikariProxyPreparedStatement@854701246 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@608f0b70[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:26,08] [debug] Executing prepared statement: HikariProxyPreparedStatement@854701246 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@608f0b70[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:26,08] [debug] /---------------------------\
[2020-07-30 19:06:26,08] [debug] | 1                         |
[2020-07-30 19:06:26,08] [debug] | String                    |
[2020-07-30 19:06:26,08] [debug] |---------------------------|
[2020-07-30 19:06:26,08] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:26,08] [debug] \---------------------------/
[2020-07-30 19:06:26,08] [debug] Execution of prepared statement took 50µs
[2020-07-30 19:06:26,08] [debug] /------------------\
[2020-07-30 19:06:26,08] [debug] | 1                |
[2020-07-30 19:06:26,08] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:26,08] [debug] |------------------|
[2020-07-30 19:06:26,08] [debug] \------------------/
[2020-07-30 19:06:26,08] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:26,08] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:26,09] [debug] Executing prepared statement: HikariProxyPreparedStatement@2081506991 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@8de9257[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:26,09] [debug] Executing prepared statement: HikariProxyPreparedStatement@2081506991 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@8de9257[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:26,09] [debug] /---------------------------\
[2020-07-30 19:06:26,09] [debug] | 1                         |
[2020-07-30 19:06:26,09] [debug] | String                    |
[2020-07-30 19:06:26,09] [debug] |---------------------------|
[2020-07-30 19:06:26,09] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:26,09] [debug] \---------------------------/
[2020-07-30 19:06:26,09] [debug] Execution of prepared statement took 34µs
[2020-07-30 19:06:26,09] [debug] /------------------\
[2020-07-30 19:06:26,09] [debug] | 1                |
[2020-07-30 19:06:26,09] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:26,09] [debug] |------------------|
[2020-07-30 19:06:26,09] [debug] \------------------/
[2020-07-30 19:06:26,09] [debug] #6: success None
[2020-07-30 19:06:26,09] [debug] #7: success 0
[2020-07-30 19:06:26,09] [debug] #8: success (0,0)
[2020-07-30 19:06:26,09] [debug] #9: success (0,0)
[2020-07-30 19:06:26,09] [debug] #10: Commit
[2020-07-30 19:06:26,09] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:26,09] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:26,09] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,09] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:26,09] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,09] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:26,09] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:26,09] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:26,09] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:26,09] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:26,09] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:26,09] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:26,09] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:26,09] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:26,09] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:26,09] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:26,09] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,09] [debug] Flattening projection t8
[2020-07-30 19:06:26,09] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:26,09] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:26,09] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:26,09] [debug] Flattening projection t7
[2020-07-30 19:06:26,09] [debug] Flattening projection t9
[2020-07-30 19:06:26,09] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,09] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:26,09] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:26,09] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:26,09] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:26,09] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:26,09] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:26,09] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:26,09] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:26,09] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:26,09] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:26,09] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,09] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,09] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,09] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,09] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:26,09] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:26,09] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:26,09] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:26,09] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:26,10] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:26,10] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:26,10] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:26,10] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:26,10] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:26,10] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:26,10] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:26,10] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:26,10] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:26,10] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:26,10] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:26,10] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:26,10] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:26,10] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:26,10] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:26,10] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:26,10] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:26,10] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:26,10] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:26,10] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:26,10] [debug] Table fields: Map()
[2020-07-30 19:06:26,10] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:26,10] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:26,10] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:26,10] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:26,10] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:26,10] [debug] Replacements are: Map()
[2020-07-30 19:06:26,10] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:26,10] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:26,10] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:26,10] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:26,10] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:26,10] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:26,10] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:26,10] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:26,10] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:26,10] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:26,10] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:26,10] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:26,10] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:26,10] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:26,10] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:26,10] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:26,10] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:26,10] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:26,10] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:26,10] [debug]       assignUniqueSymbols:    0.587591 ms
[2020-07-30 19:06:26,10] [debug]           unrollTailBinds:    0.060665 ms
[2020-07-30 19:06:26,10] [debug]                inferTypes:    0.105816 ms
[2020-07-30 19:06:26,10] [debug]              expandTables:    1.189187 ms
[2020-07-30 19:06:26,10] [debug]           forceOuterBinds:    0.799368 ms
[2020-07-30 19:06:26,10] [debug]         removeMappedTypes:    0.168305 ms
[2020-07-30 19:06:26,10] [debug]                expandSums:    0.038833 ms
[2020-07-30 19:06:26,10] [debug]             expandRecords:    0.793832 ms
[2020-07-30 19:06:26,10] [debug]        flattenProjections:    1.829065 ms
[2020-07-30 19:06:26,10] [debug]              rewriteJoins:    0.852362 ms
[2020-07-30 19:06:26,10] [debug]             verifySymbols:    0.051488 ms
[2020-07-30 19:06:26,10] [debug]             relabelUnions:    0.044909 ms
[2020-07-30 19:06:26,10] [debug]          createAggregates:    2.505319 ms
[2020-07-30 19:06:26,10] [debug]           resolveZipJoins:    0.087515 ms
[2020-07-30 19:06:26,10] [debug]          pruneProjections:    0.286623 ms
[2020-07-30 19:06:26,10] [debug]           rewriteDistinct:    0.036402 ms
[2020-07-30 19:06:26,10] [debug]    createResultSetMapping:    0.425300 ms
[2020-07-30 19:06:26,10] [debug]            hoistClientOps:    1.048431 ms
[2020-07-30 19:06:26,10] [debug]         reorderOperations:    0.063004 ms
[2020-07-30 19:06:26,10] [debug]     mergeToComprehensions:    3.133519 ms
[2020-07-30 19:06:26,10] [debug]            optimizeScalar:    0.073519 ms
[2020-07-30 19:06:26,10] [debug]          removeFieldNames:    0.994314 ms
[2020-07-30 19:06:26,10] [debug]      specializeParameters:    0.129774 ms
[2020-07-30 19:06:26,10] [debug]                   codeGen:    0.983640 ms
[2020-07-30 19:06:26,11] [debug]                     TOTAL:   16.288781 ms
[2020-07-30 19:06:26,11] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:26,11] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:26,11] [debug] Executing prepared statement: HikariProxyPreparedStatement@749157702 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@346b7430[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:26,11] [debug] Executing prepared statement: HikariProxyPreparedStatement@749157702 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@346b7430[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:26,11] [debug] Execution of prepared statement took 74µs
[2020-07-30 19:06:26,11] [debug] /----\
[2020-07-30 19:06:26,11] [debug] | 1  |
[2020-07-30 19:06:26,11] [debug] | C1 |
[2020-07-30 19:06:26,11] [debug] |----|
[2020-07-30 19:06:26,11] [debug] | 0  |
[2020-07-30 19:06:26,11] [debug] \----/
[2020-07-30 19:06:27,11] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:27,11] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:27,11] [debug] #3: StartTransaction
[2020-07-30 19:06:27,11] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:27,11] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:27,11] [debug] Executing prepared statement: HikariProxyPreparedStatement@228960746 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3a24d96e[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:27,11] [debug] Executing prepared statement: HikariProxyPreparedStatement@228960746 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3a24d96e[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:27,11] [debug] /------\
[2020-07-30 19:06:27,11] [debug] | 1    |
[2020-07-30 19:06:27,11] [debug] | Long |
[2020-07-30 19:06:27,11] [debug] |------|
[2020-07-30 19:06:27,11] [debug] | 5000 |
[2020-07-30 19:06:27,11] [debug] \------/
[2020-07-30 19:06:27,11] [debug] Execution of prepared statement took 183µs
[2020-07-30 19:06:27,11] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:27,11] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:27,11] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:27,11] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:27,11] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:27,11] [debug] #5: success Vector()
[2020-07-30 19:06:27,11] [debug] #6: success Vector()
[2020-07-30 19:06:27,11] [debug] #7: success ()
[2020-07-30 19:06:27,11] [debug] #8: success ((),Vector())
[2020-07-30 19:06:27,11] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:27,11] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:27,11] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:27,11] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:27,11] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:27,11] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:27,11] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:27,11] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:27,11] [debug] Expanding tables in result type
[2020-07-30 19:06:27,11] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,11] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,11] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,12] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:27,12] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,12] [debug] Flattening projection t8
[2020-07-30 19:06:27,12] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,12] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:27,12] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:27,12] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:27,12] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:27,12] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:27,12] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,12] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:27,12] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:27,12] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:27,12] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:27,12] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:27,12] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:27,12] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:27,12] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:27,12] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:27,12] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:27,12] [debug] Creating mapping from Long'
[2020-07-30 19:06:27,12] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:27,12] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:27,12] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:27,12] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:27,12] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:27,12] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:27,12] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:27,12] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:27,12] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:27,12] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:27,12] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,12] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:27,12] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:27,12] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:27,12] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,12] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:27,12] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:27,12] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:27,12] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:27,12] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:27,12] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:27,12] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:27,12] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:27,12] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:27,12] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:27,12] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:27,12] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:27,12] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:27,12] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:27,12] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:27,12] [debug]       assignUniqueSymbols:    0.403247 ms
[2020-07-30 19:06:27,12] [debug]           unrollTailBinds:    0.050123 ms
[2020-07-30 19:06:27,12] [debug]                inferTypes:    0.160166 ms
[2020-07-30 19:06:27,12] [debug]              expandTables:    1.335018 ms
[2020-07-30 19:06:27,12] [debug]           forceOuterBinds:    0.414092 ms
[2020-07-30 19:06:27,12] [debug]         removeMappedTypes:    0.287224 ms
[2020-07-30 19:06:27,12] [debug]                expandSums:    0.037281 ms
[2020-07-30 19:06:27,12] [debug]             expandRecords:    0.262651 ms
[2020-07-30 19:06:27,12] [debug]        flattenProjections:    0.954639 ms
[2020-07-30 19:06:27,12] [debug]              rewriteJoins:    0.062484 ms
[2020-07-30 19:06:27,12] [debug]             verifySymbols:    0.054600 ms
[2020-07-30 19:06:27,12] [debug]             relabelUnions:    0.053256 ms
[2020-07-30 19:06:27,12] [debug]          createAggregates:    0.027898 ms
[2020-07-30 19:06:27,12] [debug]           resolveZipJoins:    0.045522 ms
[2020-07-30 19:06:27,12] [debug]          pruneProjections:    0.222301 ms
[2020-07-30 19:06:27,12] [debug]           rewriteDistinct:    0.039619 ms
[2020-07-30 19:06:27,13] [debug]    createResultSetMapping:    0.592552 ms
[2020-07-30 19:06:27,13] [debug]            hoistClientOps:    1.036123 ms
[2020-07-30 19:06:27,13] [debug]         reorderOperations:    0.090308 ms
[2020-07-30 19:06:27,13] [debug]     mergeToComprehensions:    2.877494 ms
[2020-07-30 19:06:27,13] [debug]            optimizeScalar:    0.093418 ms
[2020-07-30 19:06:27,13] [debug]          removeFieldNames:    1.128382 ms
[2020-07-30 19:06:27,13] [debug]      specializeParameters:    0.148052 ms
[2020-07-30 19:06:27,13] [debug]                   codeGen:    1.083547 ms
[2020-07-30 19:06:27,13] [debug]                     TOTAL:   11.459997 ms
[2020-07-30 19:06:27,13] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:27,13] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:27,13] [debug] Executing prepared update: HikariProxyPreparedStatement@2146600454 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@10d7bad8[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:27,13] [debug] Executing prepared update: HikariProxyPreparedStatement@2146600454 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@10d7bad8[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:27,13] [debug] Execution of prepared update took 213µs
[2020-07-30 19:06:27,13] [debug] #10: success 0
[2020-07-30 19:06:27,13] [debug] #11: Commit
[2020-07-30 19:06:27,13] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:27,13] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:27,13] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:27,13] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:27,13] [debug] #3: StartTransaction
[2020-07-30 19:06:27,13] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:27,13] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:27,13] [debug] Executing prepared statement: HikariProxyPreparedStatement@2007973284 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6b5c6608[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:27,13] [debug] Executing prepared statement: HikariProxyPreparedStatement@2007973284 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6b5c6608[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:27,13] [debug] /---------------------------\
[2020-07-30 19:06:27,13] [debug] | 1                         |
[2020-07-30 19:06:27,13] [debug] | String                    |
[2020-07-30 19:06:27,13] [debug] |---------------------------|
[2020-07-30 19:06:27,13] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:27,13] [debug] \---------------------------/
[2020-07-30 19:06:27,13] [debug] Execution of prepared statement took 128µs
[2020-07-30 19:06:27,13] [debug] /------------------\
[2020-07-30 19:06:27,13] [debug] | 1                |
[2020-07-30 19:06:27,13] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:27,13] [debug] |------------------|
[2020-07-30 19:06:27,13] [debug] \------------------/
[2020-07-30 19:06:27,13] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:27,13] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:27,13] [debug] Executing prepared statement: HikariProxyPreparedStatement@897145118 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@18d521a6[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:27,13] [debug] Executing prepared statement: HikariProxyPreparedStatement@897145118 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@18d521a6[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:27,13] [debug] /---------------------------\
[2020-07-30 19:06:27,13] [debug] | 1                         |
[2020-07-30 19:06:27,13] [debug] | String                    |
[2020-07-30 19:06:27,13] [debug] |---------------------------|
[2020-07-30 19:06:27,13] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:27,13] [debug] \---------------------------/
[2020-07-30 19:06:27,13] [debug] Execution of prepared statement took 63µs
[2020-07-30 19:06:27,13] [debug] /------------------\
[2020-07-30 19:06:27,13] [debug] | 1                |
[2020-07-30 19:06:27,13] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:27,13] [debug] |------------------|
[2020-07-30 19:06:27,13] [debug] \------------------/
[2020-07-30 19:06:27,13] [debug] #6: success None
[2020-07-30 19:06:27,13] [debug] #7: success 0
[2020-07-30 19:06:27,13] [debug] #8: success (0,0)
[2020-07-30 19:06:27,13] [debug] #9: success (0,0)
[2020-07-30 19:06:27,13] [debug] #10: Commit
[2020-07-30 19:06:27,14] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:27,14] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:27,14] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,14] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:27,14] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,14] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:27,14] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:27,14] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:27,14] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:27,14] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:27,14] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:27,14] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:27,14] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:27,14] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:27,14] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:27,14] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:27,14] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,14] [debug] Flattening projection t8
[2020-07-30 19:06:27,14] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:27,14] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:27,14] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:27,14] [debug] Flattening projection t7
[2020-07-30 19:06:27,14] [debug] Flattening projection t9
[2020-07-30 19:06:27,14] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,14] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:27,14] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:27,14] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:27,14] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:27,14] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:27,14] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:27,14] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:27,14] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:27,14] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:27,14] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:27,14] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,14] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,14] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,14] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,14] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:27,14] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:27,14] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,14] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:27,14] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:27,14] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:27,14] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:27,14] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:27,14] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:27,15] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:27,15] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:27,15] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:27,15] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:27,15] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:27,15] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:27,15] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:27,15] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:27,15] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:27,15] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:27,15] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:27,15] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:27,15] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:27,15] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:27,15] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:27,15] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:27,15] [debug] Table fields: Map()
[2020-07-30 19:06:27,15] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:27,15] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:27,15] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:27,15] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:27,15] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:27,15] [debug] Replacements are: Map()
[2020-07-30 19:06:27,15] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:27,15] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:27,15] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:27,15] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:27,15] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:27,15] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:27,15] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:27,15] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:27,15] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:27,15] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:27,15] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:27,15] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:27,15] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:27,15] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:27,15] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:27,15] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:27,15] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:27,15] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:27,15] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:27,15] [debug]       assignUniqueSymbols:    0.475954 ms
[2020-07-30 19:06:27,15] [debug]           unrollTailBinds:    0.053274 ms
[2020-07-30 19:06:27,15] [debug]                inferTypes:    0.100100 ms
[2020-07-30 19:06:27,15] [debug]              expandTables:    0.900215 ms
[2020-07-30 19:06:27,15] [debug]           forceOuterBinds:    0.709717 ms
[2020-07-30 19:06:27,15] [debug]         removeMappedTypes:    0.115814 ms
[2020-07-30 19:06:27,15] [debug]                expandSums:    0.029942 ms
[2020-07-30 19:06:27,15] [debug]             expandRecords:    0.454238 ms
[2020-07-30 19:06:27,15] [debug]        flattenProjections:    1.957118 ms
[2020-07-30 19:06:27,15] [debug]              rewriteJoins:    0.952710 ms
[2020-07-30 19:06:27,15] [debug]             verifySymbols:    0.063406 ms
[2020-07-30 19:06:27,15] [debug]             relabelUnions:    0.055044 ms
[2020-07-30 19:06:27,15] [debug]          createAggregates:    2.676023 ms
[2020-07-30 19:06:27,15] [debug]           resolveZipJoins:    0.061384 ms
[2020-07-30 19:06:27,15] [debug]          pruneProjections:    0.247962 ms
[2020-07-30 19:06:27,15] [debug]           rewriteDistinct:    0.037994 ms
[2020-07-30 19:06:27,15] [debug]    createResultSetMapping:    0.421021 ms
[2020-07-30 19:06:27,15] [debug]            hoistClientOps:    0.949633 ms
[2020-07-30 19:06:27,16] [debug]         reorderOperations:    0.072403 ms
[2020-07-30 19:06:27,16] [debug]     mergeToComprehensions:    3.237697 ms
[2020-07-30 19:06:27,16] [debug]            optimizeScalar:    0.078170 ms
[2020-07-30 19:06:27,16] [debug]          removeFieldNames:    1.175809 ms
[2020-07-30 19:06:27,16] [debug]      specializeParameters:    0.148290 ms
[2020-07-30 19:06:27,16] [debug]                   codeGen:    1.365666 ms
[2020-07-30 19:06:27,16] [debug]                     TOTAL:   16.339584 ms
[2020-07-30 19:06:27,16] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:27,16] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:27,16] [debug] Executing prepared statement: HikariProxyPreparedStatement@1398952927 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@620b8629[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:27,16] [debug] Executing prepared statement: HikariProxyPreparedStatement@1398952927 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@620b8629[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:27,16] [debug] Execution of prepared statement took 117µs
[2020-07-30 19:06:27,16] [debug] /----\
[2020-07-30 19:06:27,16] [debug] | 1  |
[2020-07-30 19:06:27,16] [debug] | C1 |
[2020-07-30 19:06:27,16] [debug] |----|
[2020-07-30 19:06:27,16] [debug] | 0  |
[2020-07-30 19:06:27,16] [debug] \----/
[2020-07-30 19:06:27,52] [debug] Source:
| TableExpansion
|   table s2: Table METADATA_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s2.CALL_FQN : Option[String']
|       3: Path s2.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s2.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s2.METADATA_KEY : String'
|       6: Path s2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s2.METADATA_VALUE_TYPE : Option[String']
|       8: Path s2.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply
|         0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,52] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:27,52] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table METADATA_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s3.CALL_FQN : Option[String']
|       3: Path s3.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s3.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s3.METADATA_KEY : String'
|       6: Path s3.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s3.METADATA_VALUE_TYPE : Option[String']
|       8: Path s3.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply
|         0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,52] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:27,53] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')]
|   from s5: Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FQN, JOB_SCATTER_INDEX, JOB_RETRY_ATTEMPT, METADATA_KEY, METADATA_VALUE, METADATA_VALUE_TYPE, METADATA_TIMESTAMP, METADATA_JOURNAL_ID] : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|     table s6: Table METADATA_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|       1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s6.CALL_FQN : Option[String']
|       3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s6.METADATA_KEY : String'
|       6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s6.METADATA_VALUE_TYPE : Option[String']
|       8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: InsertColumn WORKFLOW_EXECUTION_UUID : String'
|         0: Path s5._1 : String'
|       2: InsertColumn CALL_FQN : Option[String']
|         0: Path s5._2 : Option[String']
|       3: InsertColumn JOB_SCATTER_INDEX : Option[Int']
|         0: Path s5._3 : Option[Int']
|       4: InsertColumn JOB_RETRY_ATTEMPT : Option[Int']
|         0: Path s5._4 : Option[Int']
|       5: InsertColumn METADATA_KEY : String'
|         0: Path s5._5 : String'
|       6: InsertColumn METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         0: Path s5._6 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: InsertColumn METADATA_VALUE_TYPE : Option[String']
|         0: Path s5._7 : Option[String']
|       8: InsertColumn METADATA_TIMESTAMP : java.sql.Timestamp'
|         0: Path s5._8 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: InsertColumn METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:27,53] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FQN, JOB_SCATTER_INDEX, JOB_RETRY_ATTEMPT, METADATA_KEY, METADATA_VALUE, METADATA_VALUE_TYPE, METADATA_TIMESTAMP, METADATA_JOURNAL_ID] : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|   table s6: Table METADATA_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|     1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|     2: Path s6.CALL_FQN : Option[String']
|     3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|     4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|     5: Path s6.METADATA_KEY : String'
|     6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|     7: Path s6.METADATA_VALUE_TYPE : Option[String']
|     8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:27,53] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|     3: OptionResultConverter$mcI$sp idx=3 : Int'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=METADATA_KEY : String'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|     8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=METADATA_TIMESTAMP : java.sql.Timestamp'
|     9: CompoundResultConverter

[2020-07-30 19:06:27,53] [debug] Compiled server-side to:
| CompiledStatement "insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')

[2020-07-30 19:06:27,53] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')]
|   from s5: CompiledStatement "insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|   map: CompiledMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|         3: OptionResultConverter$mcI$sp idx=3 : Int'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=METADATA_KEY : String'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|         8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: CompoundResultConverter

[2020-07-30 19:06:27,53] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:27,53] [debug]       assignUniqueSymbols:    1.875510 ms
[2020-07-30 19:06:27,53] [debug]                inferTypes:    0.381665 ms
[2020-07-30 19:06:27,53] [debug]            insertCompiler:    5.134291 ms
[2020-07-30 19:06:27,53] [debug]                   codeGen:    4.009497 ms
[2020-07-30 19:06:27,53] [debug]                     TOTAL:   11.400963 ms
[2020-07-30 19:06:27,53] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: sequence
          1: MultiInsertAction [insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)]
[2020-07-30 19:06:27,53] [debug] Preparing statement: insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:27,53] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [jobId], [javax.sql.rowset.serial.SerialClob@13878e95], [string], [org.hsqldb.types.TimestampData@7dae8af6]]]
[2020-07-30 19:06:27,54] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [jobId], [javax.sql.rowset.serial.SerialClob@13878e95], [string], [org.hsqldb.types.TimestampData@7dae8af6]]]
[2020-07-30 19:06:27,54] [debug] /---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:27,54] [debug] | 1                         | 2                         | 3       | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:27,54] [debug] | String                    | String                    | INTEGER | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,54] [debug] |---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:27,54] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | jobId  |      | string | 2020-07-30 19:06:22.57... |
[2020-07-30 19:06:27,54] [debug] \---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:27,54] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:27,54] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [backendStatus], [javax.sql.rowset.serial.SerialClob@af3fe742], [string], [org.hsqldb.types.TimestampData@7df6df16]]]
[2020-07-30 19:06:27,54] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [backendStatus], [javax.sql.rowset.serial.SerialClob@af3fe742], [string], [org.hsqldb.types.TimestampData@7df6df16]]]
[2020-07-30 19:06:27,55] [debug] /---------------------------+---------------------------+---------+-----+---------------+------+--------+---------------------------\
[2020-07-30 19:06:27,55] [debug] | 1                         | 2                         | 3       | 4   | 5             | 6    | 7      | 8                         |
[2020-07-30 19:06:27,55] [debug] | String                    | String                    | INTEGER | Int | String        | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,55] [debug] |---------------------------+---------------------------+---------+-----+---------------+------+--------+---------------------------|
[2020-07-30 19:06:27,55] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | backendStatus |      | string | 2020-07-30 19:06:22.58... |
[2020-07-30 19:06:27,55] [debug] \---------------------------+---------------------------+---------+-----+---------------+------+--------+---------------------------/
[2020-07-30 19:06:27,55] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:27,55] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [dockerImageUsed], [javax.sql.rowset.serial.SerialClob@13722914], [string], [org.hsqldb.types.TimestampData@7a79386e]]]
[2020-07-30 19:06:27,55] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [dockerImageUsed], [javax.sql.rowset.serial.SerialClob@13722914], [string], [org.hsqldb.types.TimestampData@7a79386e]]]
[2020-07-30 19:06:27,55] [debug] /---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:27,55] [debug] | 1                         | 2                         | 3       | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:27,55] [debug] | String                    | String                    | INTEGER | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,55] [debug] |---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:27,55] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | dockerImageUsed |      | string | 2020-07-30 19:06:22.62... |
[2020-07-30 19:06:27,55] [debug] \---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:27,56] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,56] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:output expression:CompositeType_digest_f394f45b2ae2ba9ff158cf39675914de intervalsList], [javax.sql.rowset.serial.SerialClob@58a1b7bc], [string], [org.hsqldb.types.TimestampData@75f2e390]]]
[2020-07-30 19:06:27,56] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:output expression:CompositeType_digest_f394f45b2ae2ba9ff158cf39675914de intervalsList], [javax.sql.rowset.serial.SerialClob@58a1b7bc], [string], [org.hsqldb.types.TimestampData@75f2e390]]]
[2020-07-30 19:06:27,56] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,56] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,56] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,56] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,56] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:out... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,56] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,57] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,57] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:Int jobMemory], [javax.sql.rowset.serial.SerialClob@8fad56fd], [string], [org.hsqldb.types.TimestampData@75f10ec8]]]
[2020-07-30 19:06:27,57] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:Int jobMemory], [javax.sql.rowset.serial.SerialClob@8fad56fd], [string], [org.hsqldb.types.TimestampData@75f10ec8]]]
[2020-07-30 19:06:27,57] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,57] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,57] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,57] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,57] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:inp... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,57] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,58] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,58] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:String recordSeparator], [javax.sql.rowset.serial.SerialClob@162fe7a8], [string], [org.hsqldb.types.TimestampData@75f106f8]]]
[2020-07-30 19:06:27,58] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:String recordSeparator], [javax.sql.rowset.serial.SerialClob@162fe7a8], [string], [org.hsqldb.types.TimestampData@75f106f8]]]
[2020-07-30 19:06:27,58] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,58] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,58] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,58] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,58] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:inp... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,58] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,59] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,59] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:String str], [javax.sql.rowset.serial.SerialClob@32bc5413], [string], [org.hsqldb.types.TimestampData@75f132b0]]]
[2020-07-30 19:06:27,59] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:String str], [javax.sql.rowset.serial.SerialClob@32bc5413], [string], [org.hsqldb.types.TimestampData@75f132b0]]]
[2020-07-30 19:06:27,59] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,59] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,59] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,59] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,59] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:inp... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,59] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,60] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,60] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:String lineSeparator], [javax.sql.rowset.serial.SerialClob@8cef0b68], [string], [org.hsqldb.types.TimestampData@75f12a60]]]
[2020-07-30 19:06:27,60] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:String lineSeparator], [javax.sql.rowset.serial.SerialClob@8cef0b68], [string], [org.hsqldb.types.TimestampData@75f12a60]]]
[2020-07-30 19:06:27,60] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,60] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,60] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,60] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,60] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:inp... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,60] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,64] [debug] Execution of batch insert took 39ms
[2020-07-30 19:06:27,64] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:runtime attribute:continueOnReturnCode], [javax.sql.rowset.serial.SerialClob@42221b7f], [string], [org.hsqldb.types.TimestampData@75f12210]]]
[2020-07-30 19:06:27,64] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:runtime attribute:continueOnReturnCode], [javax.sql.rowset.serial.SerialClob@42221b7f], [string], [org.hsqldb.types.TimestampData@75f12210]]]
[2020-07-30 19:06:27,64] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,64] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,64] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,64] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,64] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:run... |      | string | 2020-07-30 19:06:24.71842 |
[2020-07-30 19:06:27,64] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,67] [debug] Execution of batch insert took 32ms
[2020-07-30 19:06:27,67] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:String docker], [javax.sql.rowset.serial.SerialClob@240fd12e], [string], [org.hsqldb.types.TimestampData@75f125c0]]]
[2020-07-30 19:06:27,67] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:String docker], [javax.sql.rowset.serial.SerialClob@240fd12e], [string], [org.hsqldb.types.TimestampData@75f125c0]]]
[2020-07-30 19:06:27,68] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,68] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,68] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,68] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,68] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:inp... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,68] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,68] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,68] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:Int cores], [javax.sql.rowset.serial.SerialClob@8fad56fd], [string], [org.hsqldb.types.TimestampData@75f15df0]]]
[2020-07-30 19:06:27,68] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:Int cores], [javax.sql.rowset.serial.SerialClob@8fad56fd], [string], [org.hsqldb.types.TimestampData@75f15df0]]]
[2020-07-30 19:06:27,68] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,68] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,69] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,69] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,69] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:inp... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,69] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,69] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,69] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:output count], [javax.sql.rowset.serial.SerialClob@8fad56fd], [string], [org.hsqldb.types.TimestampData@75f14948]]]
[2020-07-30 19:06:27,69] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:output count], [javax.sql.rowset.serial.SerialClob@8fad56fd], [string], [org.hsqldb.types.TimestampData@75f14948]]]
[2020-07-30 19:06:27,69] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,69] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,69] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,69] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,69] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:out... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,69] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,70] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,70] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:String modules], [javax.sql.rowset.serial.SerialClob@1b436f0d], [string], [org.hsqldb.types.TimestampData@75f14178]]]
[2020-07-30 19:06:27,70] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:String modules], [javax.sql.rowset.serial.SerialClob@1b436f0d], [string], [org.hsqldb.types.TimestampData@75f14178]]]
[2020-07-30 19:06:27,70] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,70] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,70] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,70] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,70] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:inp... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,70] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,71] [debug] Execution of batch insert took 10ms
[2020-07-30 19:06:27,71] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input count], [javax.sql.rowset.serial.SerialClob@8d1628ba], [string], [org.hsqldb.types.TimestampData@75f17928]]]
[2020-07-30 19:06:27,71] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input count], [javax.sql.rowset.serial.SerialClob@8d1628ba], [string], [org.hsqldb.types.TimestampData@75f17928]]]
[2020-07-30 19:06:27,72] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,72] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,72] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,72] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,72] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:inp... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,72] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,72] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,72] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:runtime attribute:docker], [javax.sql.rowset.serial.SerialClob@d8788232], [string], [org.hsqldb.types.TimestampData@75f170d8]]]
[2020-07-30 19:06:27,72] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:runtime attribute:docker], [javax.sql.rowset.serial.SerialClob@d8788232], [string], [org.hsqldb.types.TimestampData@75f170d8]]]
[2020-07-30 19:06:27,72] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,73] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,73] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,73] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,73] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:run... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,73] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,73] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,73] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:runtime attribute:failOnStderr], [javax.sql.rowset.serial.SerialClob@319b58ef], [string], [org.hsqldb.types.TimestampData@75f16888]]]
[2020-07-30 19:06:27,73] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:runtime attribute:failOnStderr], [javax.sql.rowset.serial.SerialClob@319b58ef], [string], [org.hsqldb.types.TimestampData@75f16888]]]
[2020-07-30 19:06:27,73] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,73] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,73] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,73] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,73] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:run... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,73] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,74] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,74] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:Int timeout], [javax.sql.rowset.serial.SerialClob@8fad56fd], [string], [org.hsqldb.types.TimestampData@75f160b8]]]
[2020-07-30 19:06:27,74] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:input:Int timeout], [javax.sql.rowset.serial.SerialClob@8fad56fd], [string], [org.hsqldb.types.TimestampData@75f160b8]]]
[2020-07-30 19:06:27,74] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,74] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,74] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,74] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,74] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:inp... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,74] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,75] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:27,75] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:backend name], [javax.sql.rowset.serial.SerialClob@caa16a1a], [string], [org.hsqldb.types.TimestampData@75f19868]]]
[2020-07-30 19:06:27,75] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:backend name], [javax.sql.rowset.serial.SerialClob@caa16a1a], [string], [org.hsqldb.types.TimestampData@75f19868]]]
[2020-07-30 19:06:27,75] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,75] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,75] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,75] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,75] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:bac... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,75] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,76] [debug] Execution of batch insert took 10ms
[2020-07-30 19:06:27,76] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:command template], [javax.sql.rowset.serial.SerialClob@936d6786], [string], [org.hsqldb.types.TimestampData@75f19018]]]
[2020-07-30 19:06:27,76] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [callCaching:hashes:command template], [javax.sql.rowset.serial.SerialClob@936d6786], [string], [org.hsqldb.types.TimestampData@75f19018]]]
[2020-07-30 19:06:27,76] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,76] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,76] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,76] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,76] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | callCaching:hashes:com... |      | string | 2020-07-30 19:06:24.71... |
[2020-07-30 19:06:27,76] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,77] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,77] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [dockerImageUsed], [javax.sql.rowset.serial.SerialClob@13722914], [string], [org.hsqldb.types.TimestampData@75da32d0]]]
[2020-07-30 19:06:27,77] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [dockerImageUsed], [javax.sql.rowset.serial.SerialClob@13722914], [string], [org.hsqldb.types.TimestampData@75da32d0]]]
[2020-07-30 19:06:27,77] [debug] /---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:27,77] [debug] | 1                         | 2                         | 3       | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:27,77] [debug] | String                    | String                    | INTEGER | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,77] [debug] |---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:27,77] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | dockerImageUsed |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,77] [debug] \---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:27,78] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,78] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@af3fe742], [string], [org.hsqldb.types.TimestampData@742d0270]]]
[2020-07-30 19:06:27,78] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@af3fe742], [string], [org.hsqldb.types.TimestampData@742d0270]]]
[2020-07-30 19:06:27,78] [debug] /---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:27,78] [debug] | 1                         | 2                         | 3       | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:27,78] [debug] | String                    | String                    | INTEGER | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,78] [debug] |---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:27,78] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionStatus |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,78] [debug] \---------------------------+---------------------------+---------+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:27,79] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,79] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [end], [javax.sql.rowset.serial.SerialClob@64890fab], [string], [org.hsqldb.types.TimestampData@742c7628]]]
[2020-07-30 19:06:27,79] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [end], [javax.sql.rowset.serial.SerialClob@64890fab], [string], [org.hsqldb.types.TimestampData@742c7628]]]
[2020-07-30 19:06:27,79] [debug] /---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:27,79] [debug] | 1                         | 2                         | 3       | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:27,79] [debug] | String                    | String                    | INTEGER | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,79] [debug] |---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:27,79] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | end    |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,79] [debug] \---------------------------+---------------------------+---------+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:27,80] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,80] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [returnCode], [javax.sql.rowset.serial.SerialClob@19d0e], [int], [org.hsqldb.types.TimestampData@742e8170]]]
[2020-07-30 19:06:27,80] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [returnCode], [javax.sql.rowset.serial.SerialClob@19d0e], [int], [org.hsqldb.types.TimestampData@742e8170]]]
[2020-07-30 19:06:27,80] [debug] /---------------------------+---------------------------+---------+-----+------------+------+--------+---------------------------\
[2020-07-30 19:06:27,80] [debug] | 1                         | 2                         | 3       | 4   | 5          | 6    | 7      | 8                         |
[2020-07-30 19:06:27,80] [debug] | String                    | String                    | INTEGER | Int | String     | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,80] [debug] |---------------------------+---------------------------+---------+-----+------------+------+--------+---------------------------|
[2020-07-30 19:06:27,80] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | returnCode |      | int    | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,80] [debug] \---------------------------+---------------------------+---------+-----+------------+------+--------+---------------------------/
[2020-07-30 19:06:27,81] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,81] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[0]:id], [javax.sql.rowset.serial.SerialClob@e3c48c44], [string], [org.hsqldb.types.TimestampData@743fff60]]]
[2020-07-30 19:06:27,81] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[0]:id], [javax.sql.rowset.serial.SerialClob@e3c48c44], [string], [org.hsqldb.types.TimestampData@743fff60]]]
[2020-07-30 19:06:27,81] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,81] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,81] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,81] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,81] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | outputs:intervalsList:... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,81] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,82] [debug] Execution of batch insert took 11ms
[2020-07-30 19:06:27,82] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[0]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c48c44], [string], [org.hsqldb.types.TimestampData@743e3190]]]
[2020-07-30 19:06:27,82] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[0]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c48c44], [string], [org.hsqldb.types.TimestampData@743e3190]]]
[2020-07-30 19:06:27,82] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,82] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,82] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,82] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,82] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | outputs:intervalsList:... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,82] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,83] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,83] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[1]:id], [javax.sql.rowset.serial.SerialClob@e3c49005], [string], [org.hsqldb.types.TimestampData@743e4880]]]
[2020-07-30 19:06:27,83] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[1]:id], [javax.sql.rowset.serial.SerialClob@e3c49005], [string], [org.hsqldb.types.TimestampData@743e4880]]]
[2020-07-30 19:06:27,83] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,83] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,83] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,83] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,83] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | outputs:intervalsList:... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,83] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,84] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,84] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[1]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c49005], [string], [org.hsqldb.types.TimestampData@743e6fe8]]]
[2020-07-30 19:06:27,84] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[1]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c49005], [string], [org.hsqldb.types.TimestampData@743e6fe8]]]
[2020-07-30 19:06:27,84] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,84] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,84] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,84] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,84] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | outputs:intervalsList:... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,84] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,85] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,85] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[2]:id], [javax.sql.rowset.serial.SerialClob@e3c493c6], [string], [org.hsqldb.types.TimestampData@743e8f28]]]
[2020-07-30 19:06:27,85] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[2]:id], [javax.sql.rowset.serial.SerialClob@e3c493c6], [string], [org.hsqldb.types.TimestampData@743e8f28]]]
[2020-07-30 19:06:27,85] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,85] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,85] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,85] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,85] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | outputs:intervalsList:... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,85] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,86] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,86] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[2]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c493c6], [string], [org.hsqldb.types.TimestampData@743eae68]]]
[2020-07-30 19:06:27,86] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [outputs:intervalsList:intervalsList[2]:intervalsList[0]], [javax.sql.rowset.serial.SerialClob@e3c493c6], [string], [org.hsqldb.types.TimestampData@743eae68]]]
[2020-07-30 19:06:27,86] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,86] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,86] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,86] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,86] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | outputs:intervalsList:... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,86] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,87] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:27,87] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[652196368]:description], [javax.sql.rowset.serial.SerialClob@b1108615], [string], [org.hsqldb.types.TimestampData@74161330]]]
[2020-07-30 19:06:27,87] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[652196368]:description], [javax.sql.rowset.serial.SerialClob@b1108615], [string], [org.hsqldb.types.TimestampData@74161330]]]
[2020-07-30 19:06:27,87] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,87] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,87] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,87] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,87] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[652196... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,87] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,88] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,88] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[652196368]:startTime], [javax.sql.rowset.serial.SerialClob@13e2290], [string], [org.hsqldb.types.TimestampData@7416ca08]]]
[2020-07-30 19:06:27,88] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[652196368]:startTime], [javax.sql.rowset.serial.SerialClob@13e2290], [string], [org.hsqldb.types.TimestampData@7416ca08]]]
[2020-07-30 19:06:27,88] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,88] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,88] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,88] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,88] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[652196... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,88] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,89] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,89] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[652196368]:endTime], [javax.sql.rowset.serial.SerialClob@14e0b8d], [string], [org.hsqldb.types.TimestampData@74150468]]]
[2020-07-30 19:06:27,89] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[652196368]:endTime], [javax.sql.rowset.serial.SerialClob@14e0b8d], [string], [org.hsqldb.types.TimestampData@74150468]]]
[2020-07-30 19:06:27,89] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,89] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,89] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,89] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,89] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[652196... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,89] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,92] [debug] Execution of batch insert took 29ms
[2020-07-30 19:06:27,92] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1534449778]:description], [javax.sql.rowset.serial.SerialClob@91cd0ad4], [string], [org.hsqldb.types.TimestampData@741ed528]]]
[2020-07-30 19:06:27,92] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1534449778]:description], [javax.sql.rowset.serial.SerialClob@91cd0ad4], [string], [org.hsqldb.types.TimestampData@741ed528]]]
[2020-07-30 19:06:27,92] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,92] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,92] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,92] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,92] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[153444... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,92] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,93] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,93] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1534449778]:startTime], [javax.sql.rowset.serial.SerialClob@14e0b8d], [string], [org.hsqldb.types.TimestampData@741d7d40]]]
[2020-07-30 19:06:27,93] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1534449778]:startTime], [javax.sql.rowset.serial.SerialClob@14e0b8d], [string], [org.hsqldb.types.TimestampData@741d7d40]]]
[2020-07-30 19:06:27,93] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,93] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,93] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,93] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,93] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[153444... |      | string | 2020-07-30 19:06:24.72551 |
[2020-07-30 19:06:27,93] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,94] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,94] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1534449778]:endTime], [javax.sql.rowset.serial.SerialClob@b6ef045], [string], [org.hsqldb.types.TimestampData@741db838]]]
[2020-07-30 19:06:27,94] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1534449778]:endTime], [javax.sql.rowset.serial.SerialClob@b6ef045], [string], [org.hsqldb.types.TimestampData@741db838]]]
[2020-07-30 19:06:27,94] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,94] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,94] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,94] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,94] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[153444... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,94] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,95] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:27,95] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[23541088]:description], [javax.sql.rowset.serial.SerialClob@7d8bcf8c], [string], [org.hsqldb.types.TimestampData@741ca500]]]
[2020-07-30 19:06:27,95] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[23541088]:description], [javax.sql.rowset.serial.SerialClob@7d8bcf8c], [string], [org.hsqldb.types.TimestampData@741ca500]]]
[2020-07-30 19:06:27,95] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,95] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,95] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,95] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,95] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[235410... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,95] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,95] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:27,95] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[23541088]:startTime], [javax.sql.rowset.serial.SerialClob@b6ef045], [string], [org.hsqldb.types.TimestampData@74631358]]]
[2020-07-30 19:06:27,95] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[23541088]:startTime], [javax.sql.rowset.serial.SerialClob@b6ef045], [string], [org.hsqldb.types.TimestampData@74631358]]]
[2020-07-30 19:06:27,95] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,95] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,95] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,95] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,95] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[235410... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,95] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,96] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,96] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[23541088]:endTime], [javax.sql.rowset.serial.SerialClob@b7c1f08], [string], [org.hsqldb.types.TimestampData@74632600]]]
[2020-07-30 19:06:27,96] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[23541088]:endTime], [javax.sql.rowset.serial.SerialClob@b7c1f08], [string], [org.hsqldb.types.TimestampData@74632600]]]
[2020-07-30 19:06:27,96] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,96] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,96] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,96] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,96] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[235410... |      | string | 2020-07-30 19:06:24.72563 |
[2020-07-30 19:06:27,96] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,97] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:27,97] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[618172263]:description], [javax.sql.rowset.serial.SerialClob@f3483b19], [string], [org.hsqldb.types.TimestampData@74622c00]]]
[2020-07-30 19:06:27,97] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[618172263]:description], [javax.sql.rowset.serial.SerialClob@f3483b19], [string], [org.hsqldb.types.TimestampData@74622c00]]]
[2020-07-30 19:06:27,97] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,97] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,97] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,97] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,97] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[618172... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,97] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:27,98] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:27,98] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[618172263]:startTime], [javax.sql.rowset.serial.SerialClob@b7c1f08], [string], [org.hsqldb.types.TimestampData@7462c840]]]
[2020-07-30 19:06:27,98] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[618172263]:startTime], [javax.sql.rowset.serial.SerialClob@b7c1f08], [string], [org.hsqldb.types.TimestampData@7462c840]]]
[2020-07-30 19:06:27,98] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:27,98] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:27,98] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:27,98] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:27,98] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[618172... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:27,98] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,00] [debug] Execution of batch insert took 12ms
[2020-07-30 19:06:28,00] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[618172263]:endTime], [javax.sql.rowset.serial.SerialClob@cd8be228], [string], [org.hsqldb.types.TimestampData@74610ac0]]]
[2020-07-30 19:06:28,00] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[618172263]:endTime], [javax.sql.rowset.serial.SerialClob@cd8be228], [string], [org.hsqldb.types.TimestampData@74610ac0]]]
[2020-07-30 19:06:28,00] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,00] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,00] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,00] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,00] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[618172... |      | string | 2020-07-30 19:06:24.72575 |
[2020-07-30 19:06:28,00] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,00] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,00] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[39334677]:description], [javax.sql.rowset.serial.SerialClob@6c357c68], [string], [org.hsqldb.types.TimestampData@74603850]]]
[2020-07-30 19:06:28,00] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[39334677]:description], [javax.sql.rowset.serial.SerialClob@6c357c68], [string], [org.hsqldb.types.TimestampData@74603850]]]
[2020-07-30 19:06:28,00] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,00] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,00] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,00] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,00] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[393346... |      | string | 2020-07-30 19:06:24.72582 |
[2020-07-30 19:06:28,00] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,01] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,01] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[39334677]:startTime], [javax.sql.rowset.serial.SerialClob@cd8be228], [string], [org.hsqldb.types.TimestampData@746076a8]]]
[2020-07-30 19:06:28,01] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[39334677]:startTime], [javax.sql.rowset.serial.SerialClob@cd8be228], [string], [org.hsqldb.types.TimestampData@746076a8]]]
[2020-07-30 19:06:28,01] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,01] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,01] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,01] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,01] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[393346... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:28,01] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,02] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,02] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[39334677]:endTime], [javax.sql.rowset.serial.SerialClob@d486d0ed], [string], [org.hsqldb.types.TimestampData@7460a8d8]]]
[2020-07-30 19:06:28,02] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[39334677]:endTime], [javax.sql.rowset.serial.SerialClob@d486d0ed], [string], [org.hsqldb.types.TimestampData@7460a8d8]]]
[2020-07-30 19:06:28,02] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,02] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,02] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,02] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,02] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[393346... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:28,02] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,03] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,03] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1619735083]:description], [javax.sql.rowset.serial.SerialClob@29392a3e], [string], [org.hsqldb.types.TimestampData@7467ca20]]]
[2020-07-30 19:06:28,03] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1619735083]:description], [javax.sql.rowset.serial.SerialClob@29392a3e], [string], [org.hsqldb.types.TimestampData@7467ca20]]]
[2020-07-30 19:06:28,03] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,03] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,03] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,03] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,03] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[161973... |      | string | 2020-07-30 19:06:24.72593 |
[2020-07-30 19:06:28,03] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,04] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,04] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1619735083]:startTime], [javax.sql.rowset.serial.SerialClob@d486d0ed], [string], [org.hsqldb.types.TimestampData@74663828]]]
[2020-07-30 19:06:28,04] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1619735083]:startTime], [javax.sql.rowset.serial.SerialClob@d486d0ed], [string], [org.hsqldb.types.TimestampData@74663828]]]
[2020-07-30 19:06:28,04] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,04] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,04] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,04] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,04] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[161973... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:28,04] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,05] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:28,05] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1619735083]:endTime], [javax.sql.rowset.serial.SerialClob@93150be7], [string], [org.hsqldb.types.TimestampData@746642f8]]]
[2020-07-30 19:06:28,05] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1619735083]:endTime], [javax.sql.rowset.serial.SerialClob@93150be7], [string], [org.hsqldb.types.TimestampData@746642f8]]]
[2020-07-30 19:06:28,05] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,05] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,05] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,05] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,05] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[161973... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:28,05] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,06] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,06] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1859784135]:description], [javax.sql.rowset.serial.SerialClob@86c97c5c], [string], [org.hsqldb.types.TimestampData@746548f8]]]
[2020-07-30 19:06:28,06] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1859784135]:description], [javax.sql.rowset.serial.SerialClob@86c97c5c], [string], [org.hsqldb.types.TimestampData@746548f8]]]
[2020-07-30 19:06:28,06] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,06] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,06] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,06] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,06] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[185978... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:28,06] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,07] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:28,07] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1859784135]:startTime], [javax.sql.rowset.serial.SerialClob@93150be7], [string], [org.hsqldb.types.TimestampData@74658328]]]
[2020-07-30 19:06:28,07] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1859784135]:startTime], [javax.sql.rowset.serial.SerialClob@93150be7], [string], [org.hsqldb.types.TimestampData@74658328]]]
[2020-07-30 19:06:28,07] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,07] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,07] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,07] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,07] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[185978... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:28,07] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,08] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,08] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1859784135]:endTime], [javax.sql.rowset.serial.SerialClob@64889b4c], [string], [org.hsqldb.types.TimestampData@7465d1d0]]]
[2020-07-30 19:06:28,08] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1859784135]:endTime], [javax.sql.rowset.serial.SerialClob@64889b4c], [string], [org.hsqldb.types.TimestampData@7465d1d0]]]
[2020-07-30 19:06:28,08] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,08] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,08] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,08] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,08] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[185978... |      | string | 2020-07-30 19:06:24.72606 |
[2020-07-30 19:06:28,08] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,09] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,09] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1553096678]:description], [javax.sql.rowset.serial.SerialClob@8622da4a], [string], [org.hsqldb.types.TimestampData@7464a018]]]
[2020-07-30 19:06:28,09] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1553096678]:description], [javax.sql.rowset.serial.SerialClob@8622da4a], [string], [org.hsqldb.types.TimestampData@7464a018]]]
[2020-07-30 19:06:28,09] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,09] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,09] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,09] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,09] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[155309... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:28,09] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,09] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,09] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1553096678]:startTime], [javax.sql.rowset.serial.SerialClob@64889b4c], [string], [org.hsqldb.types.TimestampData@746b1a48]]]
[2020-07-30 19:06:28,09] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1553096678]:startTime], [javax.sql.rowset.serial.SerialClob@64889b4c], [string], [org.hsqldb.types.TimestampData@746b1a48]]]
[2020-07-30 19:06:28,09] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,09] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,09] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,09] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,09] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[155309... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:28,09] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,10] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,10] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1553096678]:endTime], [javax.sql.rowset.serial.SerialClob@6489f869], [string], [org.hsqldb.types.TimestampData@746b2970]]]
[2020-07-30 19:06:28,10] [debug] Executing batch insert: HikariProxyPreparedStatement@2087614827 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@57e53042[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing.splitStringToArray], [null], [1], [executionEvents[1553096678]:endTime], [javax.sql.rowset.serial.SerialClob@6489f869], [string], [org.hsqldb.types.TimestampData@746b2970]]]
[2020-07-30 19:06:28,10] [debug] /---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:28,10] [debug] | 1                         | 2                         | 3       | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:28,10] [debug] | String                    | String                    | INTEGER | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:28,10] [debug] |---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:28,10] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing.... | NULL    | 1   | executionEvents[155309... |      | string | 2020-07-30 19:06:24.72... |
[2020-07-30 19:06:28,10] [debug] \---------------------------+---------------------------+---------+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:28,11] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:28,13] [debug] Execution of batch took 15ms
[2020-07-30 19:06:28,16] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:28,16] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:28,16] [debug] #3: StartTransaction
[2020-07-30 19:06:28,16] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:28,16] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:28,16] [debug] Executing prepared statement: HikariProxyPreparedStatement@1787192988 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42281f1d[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:28,16] [debug] Executing prepared statement: HikariProxyPreparedStatement@1787192988 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@42281f1d[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:28,16] [debug] /------\
[2020-07-30 19:06:28,16] [debug] | 1    |
[2020-07-30 19:06:28,16] [debug] | Long |
[2020-07-30 19:06:28,16] [debug] |------|
[2020-07-30 19:06:28,16] [debug] | 5000 |
[2020-07-30 19:06:28,16] [debug] \------/
[2020-07-30 19:06:28,16] [debug] Execution of prepared statement took 106µs
[2020-07-30 19:06:28,16] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:28,16] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:28,16] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:28,16] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:28,16] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:28,16] [debug] #5: success Vector()
[2020-07-30 19:06:28,16] [debug] #6: success Vector()
[2020-07-30 19:06:28,16] [debug] #7: success ()
[2020-07-30 19:06:28,16] [debug] #8: success ((),Vector())
[2020-07-30 19:06:28,16] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:28,16] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:28,16] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:28,16] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:28,16] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:28,16] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:28,16] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:28,16] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:28,16] [debug] Expanding tables in result type
[2020-07-30 19:06:28,16] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,16] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,16] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,16] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:28,16] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,16] [debug] Flattening projection t8
[2020-07-30 19:06:28,16] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,16] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:28,17] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:28,17] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:28,17] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:28,17] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:28,17] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,17] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:28,17] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:28,17] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:28,17] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:28,17] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:28,17] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:28,17] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:28,17] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:28,17] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:28,17] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:28,17] [debug] Creating mapping from Long'
[2020-07-30 19:06:28,17] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:28,17] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:28,17] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:28,17] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:28,17] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:28,17] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:28,17] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:28,17] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:28,17] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:28,17] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:28,17] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,17] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:28,17] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:28,17] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:28,17] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,17] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:28,17] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:28,17] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:28,17] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:28,17] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:28,17] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:28,17] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:28,17] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:28,17] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:28,17] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:28,17] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:28,17] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:28,17] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:28,17] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:28,17] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:28,17] [debug]       assignUniqueSymbols:    0.527163 ms
[2020-07-30 19:06:28,17] [debug]           unrollTailBinds:    0.058505 ms
[2020-07-30 19:06:28,17] [debug]                inferTypes:    0.117244 ms
[2020-07-30 19:06:28,17] [debug]              expandTables:    1.399497 ms
[2020-07-30 19:06:28,17] [debug]           forceOuterBinds:    0.535183 ms
[2020-07-30 19:06:28,17] [debug]         removeMappedTypes:    0.391676 ms
[2020-07-30 19:06:28,17] [debug]                expandSums:    0.043403 ms
[2020-07-30 19:06:28,17] [debug]             expandRecords:    0.361809 ms
[2020-07-30 19:06:28,17] [debug]        flattenProjections:    1.215963 ms
[2020-07-30 19:06:28,17] [debug]              rewriteJoins:    0.068349 ms
[2020-07-30 19:06:28,17] [debug]             verifySymbols:    0.065854 ms
[2020-07-30 19:06:28,17] [debug]             relabelUnions:    0.097521 ms
[2020-07-30 19:06:28,17] [debug]          createAggregates:    0.037047 ms
[2020-07-30 19:06:28,17] [debug]           resolveZipJoins:    0.057136 ms
[2020-07-30 19:06:28,17] [debug]          pruneProjections:    0.235743 ms
[2020-07-30 19:06:28,17] [debug]           rewriteDistinct:    0.056639 ms
[2020-07-30 19:06:28,17] [debug]    createResultSetMapping:    0.681140 ms
[2020-07-30 19:06:28,17] [debug]            hoistClientOps:    1.106758 ms
[2020-07-30 19:06:28,17] [debug]         reorderOperations:    0.075615 ms
[2020-07-30 19:06:28,17] [debug]     mergeToComprehensions:    2.471001 ms
[2020-07-30 19:06:28,17] [debug]            optimizeScalar:    0.079404 ms
[2020-07-30 19:06:28,17] [debug]          removeFieldNames:    1.034955 ms
[2020-07-30 19:06:28,17] [debug]      specializeParameters:    0.120079 ms
[2020-07-30 19:06:28,17] [debug]                   codeGen:    0.997227 ms
[2020-07-30 19:06:28,17] [debug]                     TOTAL:   11.834911 ms
[2020-07-30 19:06:28,17] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:28,17] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:28,18] [debug] Executing prepared update: HikariProxyPreparedStatement@1135870507 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@41e63dfd[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:28,18] [debug] Executing prepared update: HikariProxyPreparedStatement@1135870507 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@41e63dfd[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:28,18] [debug] Execution of prepared update took 215µs
[2020-07-30 19:06:28,18] [debug] #10: success 0
[2020-07-30 19:06:28,18] [debug] #11: Commit
[2020-07-30 19:06:28,18] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:28,18] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:28,18] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:28,18] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:28,18] [debug] #3: StartTransaction
[2020-07-30 19:06:28,18] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:28,18] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:28,18] [debug] Executing prepared statement: HikariProxyPreparedStatement@974273763 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4aebe996[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:28,18] [debug] Executing prepared statement: HikariProxyPreparedStatement@974273763 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4aebe996[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:28,18] [debug] /---------------------------\
[2020-07-30 19:06:28,18] [debug] | 1                         |
[2020-07-30 19:06:28,18] [debug] | String                    |
[2020-07-30 19:06:28,18] [debug] |---------------------------|
[2020-07-30 19:06:28,18] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:28,18] [debug] \---------------------------/
[2020-07-30 19:06:28,18] [debug] Execution of prepared statement took 88µs
[2020-07-30 19:06:28,18] [debug] /------------------\
[2020-07-30 19:06:28,18] [debug] | 1                |
[2020-07-30 19:06:28,18] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:28,18] [debug] |------------------|
[2020-07-30 19:06:28,18] [debug] \------------------/
[2020-07-30 19:06:28,18] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:28,18] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:28,18] [debug] Executing prepared statement: HikariProxyPreparedStatement@799579447 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3a1a74bb[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:28,18] [debug] Executing prepared statement: HikariProxyPreparedStatement@799579447 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3a1a74bb[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:28,18] [debug] /---------------------------\
[2020-07-30 19:06:28,18] [debug] | 1                         |
[2020-07-30 19:06:28,18] [debug] | String                    |
[2020-07-30 19:06:28,18] [debug] |---------------------------|
[2020-07-30 19:06:28,18] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:28,18] [debug] \---------------------------/
[2020-07-30 19:06:28,18] [debug] Execution of prepared statement took 90µs
[2020-07-30 19:06:28,18] [debug] /------------------\
[2020-07-30 19:06:28,18] [debug] | 1                |
[2020-07-30 19:06:28,18] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:28,18] [debug] |------------------|
[2020-07-30 19:06:28,18] [debug] \------------------/
[2020-07-30 19:06:28,18] [debug] #6: success None
[2020-07-30 19:06:28,18] [debug] #7: success 0
[2020-07-30 19:06:28,19] [debug] #8: success (0,0)
[2020-07-30 19:06:28,19] [debug] #9: success (0,0)
[2020-07-30 19:06:28,19] [debug] #10: Commit
[2020-07-30 19:06:28,19] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:28,19] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:28,19] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,19] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:28,19] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,19] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:28,19] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:28,19] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:28,19] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:28,19] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:28,19] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:28,19] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:28,19] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:28,19] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:28,19] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:28,19] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:28,19] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,19] [debug] Flattening projection t8
[2020-07-30 19:06:28,19] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:28,19] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:28,19] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:28,19] [debug] Flattening projection t7
[2020-07-30 19:06:28,19] [debug] Flattening projection t9
[2020-07-30 19:06:28,19] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,19] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:28,19] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:28,19] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:28,19] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:28,19] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:28,19] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:28,19] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:28,19] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:28,19] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:28,19] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:28,19] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,19] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,19] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,19] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,19] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:28,19] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:28,19] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:28,19] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:28,19] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:28,19] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:28,20] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:28,20] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:28,20] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:28,20] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:28,20] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:28,20] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:28,20] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:28,20] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:28,20] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:28,20] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:28,20] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:28,20] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:28,20] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:28,20] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:28,20] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:28,20] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:28,20] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:28,20] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:28,20] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:28,20] [debug] Table fields: Map()
[2020-07-30 19:06:28,20] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:28,20] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:28,20] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:28,20] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:28,20] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:28,20] [debug] Replacements are: Map()
[2020-07-30 19:06:28,20] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:28,20] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:28,20] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:28,20] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:28,20] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:28,20] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:28,20] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:28,20] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:28,20] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:28,20] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:28,20] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:28,20] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:28,20] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:28,20] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:28,20] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:28,20] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:28,20] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:28,20] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:28,20] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:28,20] [debug]       assignUniqueSymbols:    0.325416 ms
[2020-07-30 19:06:28,20] [debug]           unrollTailBinds:    0.039931 ms
[2020-07-30 19:06:28,20] [debug]                inferTypes:    0.066079 ms
[2020-07-30 19:06:28,20] [debug]              expandTables:    0.635134 ms
[2020-07-30 19:06:28,20] [debug]           forceOuterBinds:    0.528313 ms
[2020-07-30 19:06:28,20] [debug]         removeMappedTypes:    0.084934 ms
[2020-07-30 19:06:28,20] [debug]                expandSums:    0.025490 ms
[2020-07-30 19:06:28,20] [debug]             expandRecords:    0.413108 ms
[2020-07-30 19:06:28,20] [debug]        flattenProjections:    1.880959 ms
[2020-07-30 19:06:28,20] [debug]              rewriteJoins:    1.186017 ms
[2020-07-30 19:06:28,20] [debug]             verifySymbols:    0.053301 ms
[2020-07-30 19:06:28,20] [debug]             relabelUnions:    0.046684 ms
[2020-07-30 19:06:28,20] [debug]          createAggregates:    2.691729 ms
[2020-07-30 19:06:28,21] [debug]           resolveZipJoins:    0.054558 ms
[2020-07-30 19:06:28,21] [debug]          pruneProjections:    0.202036 ms
[2020-07-30 19:06:28,21] [debug]           rewriteDistinct:    0.041119 ms
[2020-07-30 19:06:28,21] [debug]    createResultSetMapping:    0.464220 ms
[2020-07-30 19:06:28,21] [debug]            hoistClientOps:    0.988402 ms
[2020-07-30 19:06:28,21] [debug]         reorderOperations:    0.061701 ms
[2020-07-30 19:06:28,21] [debug]     mergeToComprehensions:    2.981323 ms
[2020-07-30 19:06:28,21] [debug]            optimizeScalar:    0.064954 ms
[2020-07-30 19:06:28,21] [debug]          removeFieldNames:    1.117304 ms
[2020-07-30 19:06:28,21] [debug]      specializeParameters:    0.129919 ms
[2020-07-30 19:06:28,21] [debug]                   codeGen:    1.641779 ms
[2020-07-30 19:06:28,21] [debug]                     TOTAL:   15.724410 ms
[2020-07-30 19:06:28,21] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:28,21] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:28,21] [debug] Executing prepared statement: HikariProxyPreparedStatement@313389943 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7b7bef0f[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:28,21] [debug] Executing prepared statement: HikariProxyPreparedStatement@313389943 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7b7bef0f[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:28,21] [debug] Execution of prepared statement took 88µs
[2020-07-30 19:06:28,21] [debug] /----\
[2020-07-30 19:06:28,21] [debug] | 1  |
[2020-07-30 19:06:28,21] [debug] | C1 |
[2020-07-30 19:06:28,21] [debug] |----|
[2020-07-30 19:06:28,21] [debug] | 0  |
[2020-07-30 19:06:28,21] [debug] \----/
[2020-07-30 19:06:28,75] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@48f8be27
          base: SetTransactionIsolation
[2020-07-30 19:06:28,75] [debug] Preparing statement: select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:28,75] [debug] Executing prepared statement: HikariProxyPreparedStatement@81733066 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7ac66df0[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:28,75] [debug] Executing prepared statement: HikariProxyPreparedStatement@81733066 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7ac66df0[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:28,75] [debug] /---------------------------\
[2020-07-30 19:06:28,75] [debug] | 1                         |
[2020-07-30 19:06:28,75] [debug] | String                    |
[2020-07-30 19:06:28,75] [debug] |---------------------------|
[2020-07-30 19:06:28,75] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:28,75] [debug] \---------------------------/
[2020-07-30 19:06:28,75] [debug] Execution of prepared statement took 118µs
[2020-07-30 19:06:28,75] [debug] /-----------------\
[2020-07-30 19:06:28,75] [debug] | 1               |
[2020-07-30 19:06:28,75] [debug] | WORKFLOW_STATUS |
[2020-07-30 19:06:28,75] [debug] |-----------------|
[2020-07-30 19:06:28,75] [debug] | Running         |
[2020-07-30 19:06:28,75] [debug] \-----------------/
[2020-07-30 19:06:29,21] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:29,21] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:29,21] [debug] #3: StartTransaction
[2020-07-30 19:06:29,21] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:29,21] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:29,21] [debug] Executing prepared statement: HikariProxyPreparedStatement@1712970461 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@530801bd[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:29,21] [debug] Executing prepared statement: HikariProxyPreparedStatement@1712970461 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@530801bd[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:29,21] [debug] /------\
[2020-07-30 19:06:29,21] [debug] | 1    |
[2020-07-30 19:06:29,21] [debug] | Long |
[2020-07-30 19:06:29,21] [debug] |------|
[2020-07-30 19:06:29,21] [debug] | 5000 |
[2020-07-30 19:06:29,21] [debug] \------/
[2020-07-30 19:06:29,21] [debug] Execution of prepared statement took 114µs
[2020-07-30 19:06:29,21] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:29,21] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:29,21] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:29,21] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:29,21] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:29,21] [debug] #5: success Vector()
[2020-07-30 19:06:29,21] [debug] #6: success Vector()
[2020-07-30 19:06:29,21] [debug] #7: success ()
[2020-07-30 19:06:29,21] [debug] #8: success ((),Vector())
[2020-07-30 19:06:29,21] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:29,21] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:29,21] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:29,21] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:29,21] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:29,21] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:29,21] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:29,21] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:29,21] [debug] Expanding tables in result type
[2020-07-30 19:06:29,21] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,22] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,22] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,22] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:29,22] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,22] [debug] Flattening projection t8
[2020-07-30 19:06:29,22] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,22] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:29,22] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:29,22] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:29,22] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:29,22] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:29,22] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,22] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:29,22] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:29,22] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:29,22] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:29,22] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:29,22] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:29,22] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:29,22] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:29,22] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:29,22] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:29,22] [debug] Creating mapping from Long'
[2020-07-30 19:06:29,22] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:29,22] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:29,22] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:29,22] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:29,22] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:29,22] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:29,22] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:29,22] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:29,22] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:29,22] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:29,22] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,22] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:29,22] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:29,22] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:29,22] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,22] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:29,22] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:29,22] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:29,22] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:29,22] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:29,22] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:29,22] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:29,22] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:29,22] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:29,22] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:29,22] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:29,22] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:29,22] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:29,22] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:29,22] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:29,22] [debug]       assignUniqueSymbols:    0.542010 ms
[2020-07-30 19:06:29,22] [debug]           unrollTailBinds:    0.063529 ms
[2020-07-30 19:06:29,22] [debug]                inferTypes:    0.123822 ms
[2020-07-30 19:06:29,22] [debug]              expandTables:    1.636297 ms
[2020-07-30 19:06:29,22] [debug]           forceOuterBinds:    0.611588 ms
[2020-07-30 19:06:29,22] [debug]         removeMappedTypes:    0.490696 ms
[2020-07-30 19:06:29,22] [debug]                expandSums:    0.049463 ms
[2020-07-30 19:06:29,22] [debug]             expandRecords:    0.332455 ms
[2020-07-30 19:06:29,22] [debug]        flattenProjections:    0.759251 ms
[2020-07-30 19:06:29,22] [debug]              rewriteJoins:    0.048902 ms
[2020-07-30 19:06:29,22] [debug]             verifySymbols:    0.042740 ms
[2020-07-30 19:06:29,22] [debug]             relabelUnions:    0.047249 ms
[2020-07-30 19:06:29,22] [debug]          createAggregates:    0.023737 ms
[2020-07-30 19:06:29,22] [debug]           resolveZipJoins:    0.041260 ms
[2020-07-30 19:06:29,22] [debug]          pruneProjections:    0.191541 ms
[2020-07-30 19:06:29,22] [debug]           rewriteDistinct:    0.046662 ms
[2020-07-30 19:06:29,22] [debug]    createResultSetMapping:    0.478910 ms
[2020-07-30 19:06:29,22] [debug]            hoistClientOps:    1.032245 ms
[2020-07-30 19:06:29,22] [debug]         reorderOperations:    0.094054 ms
[2020-07-30 19:06:29,22] [debug]     mergeToComprehensions:    2.521636 ms
[2020-07-30 19:06:29,22] [debug]            optimizeScalar:    0.071411 ms
[2020-07-30 19:06:29,22] [debug]          removeFieldNames:    1.085000 ms
[2020-07-30 19:06:29,22] [debug]      specializeParameters:    0.117028 ms
[2020-07-30 19:06:29,22] [debug]                   codeGen:    0.955927 ms
[2020-07-30 19:06:29,23] [debug]                     TOTAL:   11.407413 ms
[2020-07-30 19:06:29,23] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:29,23] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:29,23] [debug] Executing prepared update: HikariProxyPreparedStatement@1742532891 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2e3cb0c1[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:29,23] [debug] Executing prepared update: HikariProxyPreparedStatement@1742532891 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2e3cb0c1[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:29,23] [debug] Execution of prepared update took 148µs
[2020-07-30 19:06:29,23] [debug] #10: success 0
[2020-07-30 19:06:29,23] [debug] #11: Commit
[2020-07-30 19:06:29,23] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:29,23] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:29,23] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:29,23] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:29,23] [debug] #3: StartTransaction
[2020-07-30 19:06:29,23] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:29,23] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:29,23] [debug] Executing prepared statement: HikariProxyPreparedStatement@2004548511 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3c0bee67[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:29,23] [debug] Executing prepared statement: HikariProxyPreparedStatement@2004548511 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3c0bee67[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:29,23] [debug] /---------------------------\
[2020-07-30 19:06:29,23] [debug] | 1                         |
[2020-07-30 19:06:29,23] [debug] | String                    |
[2020-07-30 19:06:29,23] [debug] |---------------------------|
[2020-07-30 19:06:29,23] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:29,23] [debug] \---------------------------/
[2020-07-30 19:06:29,23] [debug] Execution of prepared statement took 64µs
[2020-07-30 19:06:29,23] [debug] /------------------\
[2020-07-30 19:06:29,23] [debug] | 1                |
[2020-07-30 19:06:29,23] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:29,23] [debug] |------------------|
[2020-07-30 19:06:29,23] [debug] \------------------/
[2020-07-30 19:06:29,23] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:29,23] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:29,23] [debug] Executing prepared statement: HikariProxyPreparedStatement@1398819550 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@40f6ae94[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:29,23] [debug] Executing prepared statement: HikariProxyPreparedStatement@1398819550 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@40f6ae94[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:29,23] [debug] /---------------------------\
[2020-07-30 19:06:29,23] [debug] | 1                         |
[2020-07-30 19:06:29,23] [debug] | String                    |
[2020-07-30 19:06:29,23] [debug] |---------------------------|
[2020-07-30 19:06:29,23] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:29,23] [debug] \---------------------------/
[2020-07-30 19:06:29,23] [debug] Execution of prepared statement took 35µs
[2020-07-30 19:06:29,23] [debug] /------------------\
[2020-07-30 19:06:29,23] [debug] | 1                |
[2020-07-30 19:06:29,23] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:29,23] [debug] |------------------|
[2020-07-30 19:06:29,23] [debug] \------------------/
[2020-07-30 19:06:29,23] [debug] #6: success None
[2020-07-30 19:06:29,23] [debug] #7: success 0
[2020-07-30 19:06:29,23] [debug] #8: success (0,0)
[2020-07-30 19:06:29,23] [debug] #9: success (0,0)
[2020-07-30 19:06:29,23] [debug] #10: Commit
[2020-07-30 19:06:29,23] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:29,23] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:29,23] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,23] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:29,23] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,23] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:29,24] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:29,24] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:29,24] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:29,24] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:29,24] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:29,24] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:29,24] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:29,24] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:29,24] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:29,24] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:29,24] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,24] [debug] Flattening projection t8
[2020-07-30 19:06:29,24] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:29,24] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:29,24] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:29,24] [debug] Flattening projection t7
[2020-07-30 19:06:29,24] [debug] Flattening projection t9
[2020-07-30 19:06:29,24] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,24] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:29,24] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:29,24] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:29,24] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:29,24] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:29,24] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:29,24] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:29,24] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:29,24] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:29,24] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:29,24] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,24] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,24] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,24] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,24] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:29,24] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:29,24] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:29,24] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:29,24] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:29,24] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:29,25] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:29,25] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:29,25] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:29,25] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:29,25] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:29,25] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:29,25] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:29,25] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:29,25] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:29,25] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:29,25] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:29,25] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:29,25] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:29,25] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:29,25] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:29,25] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:29,25] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:29,25] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:29,25] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:29,25] [debug] Table fields: Map()
[2020-07-30 19:06:29,25] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:29,25] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:29,25] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:29,25] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:29,25] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:29,25] [debug] Replacements are: Map()
[2020-07-30 19:06:29,25] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:29,25] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:29,25] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:29,25] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:29,25] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:29,25] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:29,25] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:29,25] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:29,25] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:29,25] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:29,25] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:29,25] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:29,25] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:29,25] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:29,25] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:29,25] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:29,25] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:29,25] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:29,25] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:29,25] [debug]       assignUniqueSymbols:    0.674801 ms
[2020-07-30 19:06:29,26] [debug]           unrollTailBinds:    0.064499 ms
[2020-07-30 19:06:29,26] [debug]                inferTypes:    0.136805 ms
[2020-07-30 19:06:29,26] [debug]              expandTables:    1.031832 ms
[2020-07-30 19:06:29,26] [debug]           forceOuterBinds:    0.903147 ms
[2020-07-30 19:06:29,26] [debug]         removeMappedTypes:    0.123194 ms
[2020-07-30 19:06:29,26] [debug]                expandSums:    0.038160 ms
[2020-07-30 19:06:29,26] [debug]             expandRecords:    0.723027 ms
[2020-07-30 19:06:29,26] [debug]        flattenProjections:    3.105872 ms
[2020-07-30 19:06:29,26] [debug]              rewriteJoins:    1.887953 ms
[2020-07-30 19:06:29,26] [debug]             verifySymbols:    0.075636 ms
[2020-07-30 19:06:29,26] [debug]             relabelUnions:    0.073526 ms
[2020-07-30 19:06:29,26] [debug]          createAggregates:    4.916140 ms
[2020-07-30 19:06:29,26] [debug]           resolveZipJoins:    0.083009 ms
[2020-07-30 19:06:29,26] [debug]          pruneProjections:    0.185219 ms
[2020-07-30 19:06:29,26] [debug]           rewriteDistinct:    0.038391 ms
[2020-07-30 19:06:29,26] [debug]    createResultSetMapping:    0.471209 ms
[2020-07-30 19:06:29,26] [debug]            hoistClientOps:    0.918773 ms
[2020-07-30 19:06:29,26] [debug]         reorderOperations:    0.062065 ms
[2020-07-30 19:06:29,26] [debug]     mergeToComprehensions:    2.728089 ms
[2020-07-30 19:06:29,26] [debug]            optimizeScalar:    0.067854 ms
[2020-07-30 19:06:29,26] [debug]          removeFieldNames:    0.922009 ms
[2020-07-30 19:06:29,26] [debug]      specializeParameters:    0.118365 ms
[2020-07-30 19:06:29,26] [debug]                   codeGen:    1.109787 ms
[2020-07-30 19:06:29,26] [debug]                     TOTAL:   20.459362 ms
[2020-07-30 19:06:29,26] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:29,26] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:29,26] [debug] Executing prepared statement: HikariProxyPreparedStatement@221691405 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6ead0d69[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:29,26] [debug] Executing prepared statement: HikariProxyPreparedStatement@221691405 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6ead0d69[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:29,26] [debug] Execution of prepared statement took 88µs
[2020-07-30 19:06:29,26] [debug] /----\
[2020-07-30 19:06:29,26] [debug] | 1  |
[2020-07-30 19:06:29,26] [debug] | C1 |
[2020-07-30 19:06:29,26] [debug] |----|
[2020-07-30 19:06:29,26] [debug] | 0  |
[2020-07-30 19:06:29,26] [debug] \----/
[INFO] [07/30/2020 19:06:29.635] [cromwell-system-akka.dispatchers.engine-dispatcher-31] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor] WorkflowManagerActor Workflow 8b168b0d-854f-4ba0-99b6-35b7259a96fc failed (during ExecutingWorkflowState): cromwell.engine.workflow.lifecycle.execution.job.preparation.SubWorkflowPreparationActor$$anonfun$receive$1$$anon$1: Failed to evaluate inputs for sub workflow:
Failed to evaluate input 'preprocessBam_markDuplicatesAdditionalParams' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_markDuplicatesAdditionalParams
Failed to evaluate input 'preprocessBam_splitNCigarReadsAdditionalParams' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_splitNCigarReadsAdditionalParams
Failed to evaluate input 'preprocessBam_minMapQuality' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_minMapQuality
Failed to evaluate input 'preprocessBam_filterAdditionalParams' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_filterAdditionalParams
	at cromwell.engine.workflow.lifecycle.execution.job.preparation.SubWorkflowPreparationActor$$anonfun$receive$1.applyOrElse(SubWorkflowPreparationActor.scala:74)
	at akka.actor.Actor.aroundReceive(Actor.scala:539)
	at akka.actor.Actor.aroundReceive$(Actor.scala:537)
	at cromwell.engine.workflow.lifecycle.execution.job.preparation.SubWorkflowPreparationActor.aroundReceive(SubWorkflowPreparationActor.scala:20)
	at akka.actor.ActorCell.receiveMessage(ActorCell.scala:612)
	at akka.actor.ActorCell.invoke(ActorCell.scala:581)
	at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:268)
	at akka.dispatch.Mailbox.run(Mailbox.scala:229)
	at akka.dispatch.Mailbox.exec(Mailbox.scala:241)
	at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
	at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
	at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
	at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)

cromwell.engine.workflow.lifecycle.execution.job.preparation.SubWorkflowPreparationActor$$anonfun$receive$1$$anon$1: Failed to evaluate inputs for sub workflow:
Failed to evaluate input 'preprocessBam_markDuplicatesAdditionalParams' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_markDuplicatesAdditionalParams
Failed to evaluate input 'preprocessBam_splitNCigarReadsAdditionalParams' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_splitNCigarReadsAdditionalParams
Failed to evaluate input 'preprocessBam_minMapQuality' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_minMapQuality
Failed to evaluate input 'preprocessBam_filterAdditionalParams' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_filterAdditionalParams
	at cromwell.engine.workflow.lifecycle.execution.job.preparation.SubWorkflowPreparationActor$$anonfun$receive$1.applyOrElse(SubWorkflowPreparationActor.scala:74)
	at akka.actor.Actor.aroundReceive(Actor.scala:539)
	at akka.actor.Actor.aroundReceive$(Actor.scala:537)
	at cromwell.engine.workflow.lifecycle.execution.job.preparation.SubWorkflowPreparationActor.aroundReceive(SubWorkflowPreparationActor.scala:20)
	at akka.actor.ActorCell.receiveMessage(ActorCell.scala:612)
	at akka.actor.ActorCell.invoke(ActorCell.scala:581)
	at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:268)
	at akka.dispatch.Mailbox.run(Mailbox.scala:229)
	at akka.dispatch.Mailbox.exec(Mailbox.scala:241)
	at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
	at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
	at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
	at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)

cromwell.engine.workflow.lifecycle.execution.job.preparation.SubWorkflowPreparationActor$$anonfun$receive$1$$anon$1: Failed to evaluate inputs for sub workflow:
Failed to evaluate input 'preprocessBam_markDuplicatesAdditionalParams' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_markDuplicatesAdditionalParams
Failed to evaluate input 'preprocessBam_splitNCigarReadsAdditionalParams' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_splitNCigarReadsAdditionalParams
Failed to evaluate input 'preprocessBam_minMapQuality' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_minMapQuality
Failed to evaluate input 'preprocessBam_filterAdditionalParams' (reason 1 of 1): Failed to lookup input value for required input preprocessBam_filterAdditionalParams
	at cromwell.engine.workflow.lifecycle.execution.job.preparation.SubWorkflowPreparationActor$$anonfun$receive$1.applyOrElse(SubWorkflowPreparationActor.scala:74)
	at akka.actor.Actor.aroundReceive(Actor.scala:539)
	at akka.actor.Actor.aroundReceive$(Actor.scala:537)
	at cromwell.engine.workflow.lifecycle.execution.job.preparation.SubWorkflowPreparationActor.aroundReceive(SubWorkflowPreparationActor.scala:20)
	at akka.actor.ActorCell.receiveMessage(ActorCell.scala:612)
	at akka.actor.ActorCell.invoke(ActorCell.scala:581)
	at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:268)
	at akka.dispatch.Mailbox.run(Mailbox.scala:229)
	at akka.dispatch.Mailbox.exec(Mailbox.scala:241)
	at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
	at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
	at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
	at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)

[INFO] [07/30/2020 19:06:29.637] [cromwell-system-akka.dispatchers.engine-dispatcher-31] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowManagerActor] WorkflowManagerActor WorkflowActor-8b168b0d-854f-4ba0-99b6-35b7259a96fc is in a terminal state: WorkflowFailedState
[2020-07-30 19:06:30,25] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:30,25] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:30,25] [debug] #3: StartTransaction
[2020-07-30 19:06:30,25] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:30,25] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:30,25] [debug] Executing prepared statement: HikariProxyPreparedStatement@1311707968 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@32bea5d2[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:30,25] [debug] Executing prepared statement: HikariProxyPreparedStatement@1311707968 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@32bea5d2[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:30,25] [debug] /------\
[2020-07-30 19:06:30,25] [debug] | 1    |
[2020-07-30 19:06:30,25] [debug] | Long |
[2020-07-30 19:06:30,25] [debug] |------|
[2020-07-30 19:06:30,25] [debug] | 5000 |
[2020-07-30 19:06:30,25] [debug] \------/
[2020-07-30 19:06:30,25] [debug] Execution of prepared statement took 114µs
[2020-07-30 19:06:30,25] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:30,25] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:30,25] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:30,25] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:30,25] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:30,25] [debug] #5: success Vector()
[2020-07-30 19:06:30,25] [debug] #6: success Vector()
[2020-07-30 19:06:30,25] [debug] #7: success ()
[2020-07-30 19:06:30,25] [debug] #8: success ((),Vector())
[2020-07-30 19:06:30,25] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:30,25] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:30,25] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:30,25] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:30,25] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:30,25] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:30,25] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:30,25] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:30,25] [debug] Expanding tables in result type
[2020-07-30 19:06:30,25] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,25] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,25] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,26] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:30,26] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,26] [debug] Flattening projection t8
[2020-07-30 19:06:30,26] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,26] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:30,26] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:30,26] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:30,26] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:30,26] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:30,26] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,26] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:30,26] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:30,26] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:30,26] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:30,26] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:30,26] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:30,26] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:30,26] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:30,26] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:30,26] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:30,26] [debug] Creating mapping from Long'
[2020-07-30 19:06:30,26] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:30,26] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:30,26] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:30,26] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:30,26] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:30,26] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:30,26] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:30,26] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:30,26] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:30,26] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:30,26] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,26] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:30,26] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:30,26] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:30,26] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,26] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:30,26] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:30,26] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:30,26] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:30,26] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:30,26] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:30,26] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:30,26] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:30,26] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:30,26] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:30,26] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:30,26] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:30,26] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:30,26] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:30,26] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:30,26] [debug]       assignUniqueSymbols:    0.628848 ms
[2020-07-30 19:06:30,26] [debug]           unrollTailBinds:    0.064002 ms
[2020-07-30 19:06:30,26] [debug]                inferTypes:    0.120481 ms
[2020-07-30 19:06:30,26] [debug]              expandTables:    1.643217 ms
[2020-07-30 19:06:30,26] [debug]           forceOuterBinds:    0.538359 ms
[2020-07-30 19:06:30,26] [debug]         removeMappedTypes:    0.474695 ms
[2020-07-30 19:06:30,27] [debug]                expandSums:    0.042872 ms
[2020-07-30 19:06:30,27] [debug]             expandRecords:    0.307859 ms
[2020-07-30 19:06:30,27] [debug]        flattenProjections:    1.117004 ms
[2020-07-30 19:06:30,27] [debug]              rewriteJoins:    0.066236 ms
[2020-07-30 19:06:30,27] [debug]             verifySymbols:    0.054151 ms
[2020-07-30 19:06:30,27] [debug]             relabelUnions:    0.048017 ms
[2020-07-30 19:06:30,27] [debug]          createAggregates:    0.035465 ms
[2020-07-30 19:06:30,27] [debug]           resolveZipJoins:    0.047709 ms
[2020-07-30 19:06:30,27] [debug]          pruneProjections:    0.199149 ms
[2020-07-30 19:06:30,27] [debug]           rewriteDistinct:    0.053269 ms
[2020-07-30 19:06:30,27] [debug]    createResultSetMapping:    0.654678 ms
[2020-07-30 19:06:30,27] [debug]            hoistClientOps:    1.203468 ms
[2020-07-30 19:06:30,27] [debug]         reorderOperations:    0.088456 ms
[2020-07-30 19:06:30,27] [debug]     mergeToComprehensions:    3.322771 ms
[2020-07-30 19:06:30,27] [debug]            optimizeScalar:    0.096272 ms
[2020-07-30 19:06:30,27] [debug]          removeFieldNames:    1.306596 ms
[2020-07-30 19:06:30,27] [debug]      specializeParameters:    0.122145 ms
[2020-07-30 19:06:30,27] [debug]                   codeGen:    0.799822 ms
[2020-07-30 19:06:30,27] [debug]                     TOTAL:   13.035541 ms
[2020-07-30 19:06:30,27] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:30,27] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:30,27] [debug] Executing prepared update: HikariProxyPreparedStatement@673185196 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2e5f7b4b[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:30,27] [debug] Executing prepared update: HikariProxyPreparedStatement@673185196 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2e5f7b4b[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:30,27] [debug] Execution of prepared update took 100µs
[2020-07-30 19:06:30,27] [debug] #10: success 0
[2020-07-30 19:06:30,27] [debug] #11: Commit
[2020-07-30 19:06:30,27] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:30,27] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:30,27] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:30,27] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:30,27] [debug] #3: StartTransaction
[2020-07-30 19:06:30,27] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:30,27] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:30,27] [debug] Executing prepared statement: HikariProxyPreparedStatement@1761417264 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3dadb9ed[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:30,27] [debug] Executing prepared statement: HikariProxyPreparedStatement@1761417264 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3dadb9ed[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:30,27] [debug] /---------------------------\
[2020-07-30 19:06:30,27] [debug] | 1                         |
[2020-07-30 19:06:30,27] [debug] | String                    |
[2020-07-30 19:06:30,27] [debug] |---------------------------|
[2020-07-30 19:06:30,27] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:30,27] [debug] \---------------------------/
[2020-07-30 19:06:30,27] [debug] Execution of prepared statement took 48µs
[2020-07-30 19:06:30,27] [debug] /------------------\
[2020-07-30 19:06:30,27] [debug] | 1                |
[2020-07-30 19:06:30,27] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:30,27] [debug] |------------------|
[2020-07-30 19:06:30,27] [debug] \------------------/
[2020-07-30 19:06:30,27] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:30,27] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:30,27] [debug] Executing prepared statement: HikariProxyPreparedStatement@1689570682 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@23637cf1[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:30,27] [debug] Executing prepared statement: HikariProxyPreparedStatement@1689570682 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@23637cf1[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:30,27] [debug] /---------------------------\
[2020-07-30 19:06:30,27] [debug] | 1                         |
[2020-07-30 19:06:30,27] [debug] | String                    |
[2020-07-30 19:06:30,27] [debug] |---------------------------|
[2020-07-30 19:06:30,27] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:30,27] [debug] \---------------------------/
[2020-07-30 19:06:30,27] [debug] Execution of prepared statement took 31µs
[2020-07-30 19:06:30,27] [debug] /------------------\
[2020-07-30 19:06:30,27] [debug] | 1                |
[2020-07-30 19:06:30,27] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:30,27] [debug] |------------------|
[2020-07-30 19:06:30,27] [debug] \------------------/
[2020-07-30 19:06:30,27] [debug] #6: success None
[2020-07-30 19:06:30,27] [debug] #7: success 0
[2020-07-30 19:06:30,27] [debug] #8: success (0,0)
[2020-07-30 19:06:30,27] [debug] #9: success (0,0)
[2020-07-30 19:06:30,27] [debug] #10: Commit
[2020-07-30 19:06:30,27] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:30,27] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:30,27] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,27] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:30,27] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,27] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:30,27] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:30,27] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:30,27] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:30,27] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:30,27] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:30,27] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:30,27] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:30,28] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:30,28] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:30,28] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:30,28] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,28] [debug] Flattening projection t8
[2020-07-30 19:06:30,28] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:30,28] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:30,28] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:30,28] [debug] Flattening projection t7
[2020-07-30 19:06:30,28] [debug] Flattening projection t9
[2020-07-30 19:06:30,28] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,28] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:30,28] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:30,28] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:30,28] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:30,28] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:30,28] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:30,28] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:30,28] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:30,28] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:30,28] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:30,28] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,28] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,28] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,28] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,28] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:30,28] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:30,28] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:30,28] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:30,28] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:30,28] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:30,28] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:30,28] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:30,28] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:30,28] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:30,28] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:30,28] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:30,28] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:30,28] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:30,28] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:30,28] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:30,28] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:30,28] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:30,28] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:30,28] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:30,28] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:30,28] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:30,29] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:30,29] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:30,29] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:30,29] [debug] Table fields: Map()
[2020-07-30 19:06:30,29] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:30,29] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:30,29] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:30,29] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:30,29] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:30,29] [debug] Replacements are: Map()
[2020-07-30 19:06:30,29] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:30,29] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:30,29] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:30,29] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:30,29] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:30,29] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:30,29] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:30,29] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:30,29] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:30,29] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:30,29] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:30,29] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:30,29] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:30,29] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:30,29] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:30,29] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:30,29] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:30,29] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:30,29] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:30,29] [debug]       assignUniqueSymbols:    0.555878 ms
[2020-07-30 19:06:30,29] [debug]           unrollTailBinds:    0.080925 ms
[2020-07-30 19:06:30,29] [debug]                inferTypes:    0.099186 ms
[2020-07-30 19:06:30,29] [debug]              expandTables:    1.039288 ms
[2020-07-30 19:06:30,29] [debug]           forceOuterBinds:    0.975490 ms
[2020-07-30 19:06:30,29] [debug]         removeMappedTypes:    0.133585 ms
[2020-07-30 19:06:30,29] [debug]                expandSums:    0.038542 ms
[2020-07-30 19:06:30,29] [debug]             expandRecords:    0.756423 ms
[2020-07-30 19:06:30,29] [debug]        flattenProjections:    3.478594 ms
[2020-07-30 19:06:30,29] [debug]              rewriteJoins:    1.138642 ms
[2020-07-30 19:06:30,29] [debug]             verifySymbols:    0.048585 ms
[2020-07-30 19:06:30,29] [debug]             relabelUnions:    0.040716 ms
[2020-07-30 19:06:30,29] [debug]          createAggregates:    2.530619 ms
[2020-07-30 19:06:30,29] [debug]           resolveZipJoins:    0.052347 ms
[2020-07-30 19:06:30,29] [debug]          pruneProjections:    0.170496 ms
[2020-07-30 19:06:30,29] [debug]           rewriteDistinct:    0.038076 ms
[2020-07-30 19:06:30,29] [debug]    createResultSetMapping:    0.496429 ms
[2020-07-30 19:06:30,29] [debug]            hoistClientOps:    0.884139 ms
[2020-07-30 19:06:30,29] [debug]         reorderOperations:    0.083137 ms
[2020-07-30 19:06:30,29] [debug]     mergeToComprehensions:    2.583748 ms
[2020-07-30 19:06:30,29] [debug]            optimizeScalar:    0.058409 ms
[2020-07-30 19:06:30,29] [debug]          removeFieldNames:    0.847842 ms
[2020-07-30 19:06:30,29] [debug]      specializeParameters:    0.107940 ms
[2020-07-30 19:06:30,29] [debug]                   codeGen:    0.969819 ms
[2020-07-30 19:06:30,29] [debug]                     TOTAL:   17.208855 ms
[2020-07-30 19:06:30,29] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:30,29] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:30,29] [debug] Executing prepared statement: HikariProxyPreparedStatement@1893146873 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@20e587d9[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:30,29] [debug] Executing prepared statement: HikariProxyPreparedStatement@1893146873 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@20e587d9[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:30,29] [debug] Execution of prepared statement took 67µs
[2020-07-30 19:06:30,29] [debug] /----\
[2020-07-30 19:06:30,29] [debug] | 1  |
[2020-07-30 19:06:30,29] [debug] | C1 |
[2020-07-30 19:06:30,29] [debug] |----|
[2020-07-30 19:06:30,29] [debug] | 0  |
[2020-07-30 19:06:30,29] [debug] \----/
[2020-07-30 19:06:31,29] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:31,29] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:31,29] [debug] #3: StartTransaction
[2020-07-30 19:06:31,29] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:31,29] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:31,29] [debug] Executing prepared statement: HikariProxyPreparedStatement@295299728 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@65c4597c[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:31,29] [debug] Executing prepared statement: HikariProxyPreparedStatement@295299728 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@65c4597c[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:31,29] [debug] /------\
[2020-07-30 19:06:31,29] [debug] | 1    |
[2020-07-30 19:06:31,29] [debug] | Long |
[2020-07-30 19:06:31,29] [debug] |------|
[2020-07-30 19:06:31,29] [debug] | 5000 |
[2020-07-30 19:06:31,29] [debug] \------/
[2020-07-30 19:06:31,29] [debug] Execution of prepared statement took 117µs
[2020-07-30 19:06:31,29] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:31,29] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:31,29] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:31,29] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:31,29] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:31,29] [debug] #5: success Vector()
[2020-07-30 19:06:31,29] [debug] #6: success Vector()
[2020-07-30 19:06:31,29] [debug] #7: success ()
[2020-07-30 19:06:31,29] [debug] #8: success ((),Vector())
[2020-07-30 19:06:31,29] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:31,29] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:31,29] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:31,29] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:31,29] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:31,29] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:31,29] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:31,29] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:31,29] [debug] Expanding tables in result type
[2020-07-30 19:06:31,29] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,30] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,30] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,30] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:31,30] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,30] [debug] Flattening projection t8
[2020-07-30 19:06:31,30] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,30] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:31,30] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:31,30] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:31,30] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:31,30] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:31,30] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,30] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:31,30] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:31,30] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:31,30] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:31,30] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:31,30] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:31,30] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:31,30] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:31,30] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:31,30] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:31,30] [debug] Creating mapping from Long'
[2020-07-30 19:06:31,30] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:31,30] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:31,30] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:31,30] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:31,30] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:31,30] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:31,30] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:31,30] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:31,30] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:31,30] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:31,30] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,30] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:31,30] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:31,30] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:31,30] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,30] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:31,30] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:31,30] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:31,30] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:31,30] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:31,30] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:31,30] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:31,30] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:31,30] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:31,30] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:31,31] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:31,31] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:31,31] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:31,31] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:31,31] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:31,31] [debug]       assignUniqueSymbols:    0.721433 ms
[2020-07-30 19:06:31,31] [debug]           unrollTailBinds:    0.120169 ms
[2020-07-30 19:06:31,31] [debug]                inferTypes:    0.138491 ms
[2020-07-30 19:06:31,31] [debug]              expandTables:    1.530618 ms
[2020-07-30 19:06:31,31] [debug]           forceOuterBinds:    0.543209 ms
[2020-07-30 19:06:31,31] [debug]         removeMappedTypes:    0.549550 ms
[2020-07-30 19:06:31,31] [debug]                expandSums:    0.058102 ms
[2020-07-30 19:06:31,31] [debug]             expandRecords:    0.413544 ms
[2020-07-30 19:06:31,31] [debug]        flattenProjections:    1.302829 ms
[2020-07-30 19:06:31,31] [debug]              rewriteJoins:    0.089762 ms
[2020-07-30 19:06:31,31] [debug]             verifySymbols:    0.079073 ms
[2020-07-30 19:06:31,31] [debug]             relabelUnions:    0.071126 ms
[2020-07-30 19:06:31,31] [debug]          createAggregates:    0.047879 ms
[2020-07-30 19:06:31,31] [debug]           resolveZipJoins:    0.076532 ms
[2020-07-30 19:06:31,31] [debug]          pruneProjections:    0.279143 ms
[2020-07-30 19:06:31,31] [debug]           rewriteDistinct:    0.091705 ms
[2020-07-30 19:06:31,31] [debug]    createResultSetMapping:    0.860321 ms
[2020-07-30 19:06:31,31] [debug]            hoistClientOps:    1.433944 ms
[2020-07-30 19:06:31,31] [debug]         reorderOperations:    0.089125 ms
[2020-07-30 19:06:31,31] [debug]     mergeToComprehensions:    2.671656 ms
[2020-07-30 19:06:31,31] [debug]            optimizeScalar:    0.100360 ms
[2020-07-30 19:06:31,31] [debug]          removeFieldNames:    1.002298 ms
[2020-07-30 19:06:31,31] [debug]      specializeParameters:    0.124960 ms
[2020-07-30 19:06:31,31] [debug]                   codeGen:    0.869449 ms
[2020-07-30 19:06:31,31] [debug]                     TOTAL:   13.265278 ms
[2020-07-30 19:06:31,31] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:31,31] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:31,31] [debug] Executing prepared update: HikariProxyPreparedStatement@815340459 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@8a57aba[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:31,31] [debug] Executing prepared update: HikariProxyPreparedStatement@815340459 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@8a57aba[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:31,31] [debug] Execution of prepared update took 141µs
[2020-07-30 19:06:31,31] [debug] #10: success 0
[2020-07-30 19:06:31,31] [debug] #11: Commit
[2020-07-30 19:06:31,31] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:31,31] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:31,31] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:31,31] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:31,31] [debug] #3: StartTransaction
[2020-07-30 19:06:31,31] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:31,31] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:31,31] [debug] Executing prepared statement: HikariProxyPreparedStatement@1451784079 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1140c362[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:31,31] [debug] Executing prepared statement: HikariProxyPreparedStatement@1451784079 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1140c362[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:31,31] [debug] /---------------------------\
[2020-07-30 19:06:31,31] [debug] | 1                         |
[2020-07-30 19:06:31,31] [debug] | String                    |
[2020-07-30 19:06:31,31] [debug] |---------------------------|
[2020-07-30 19:06:31,31] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:31,31] [debug] \---------------------------/
[2020-07-30 19:06:31,31] [debug] Execution of prepared statement took 46µs
[2020-07-30 19:06:31,31] [debug] /------------------\
[2020-07-30 19:06:31,31] [debug] | 1                |
[2020-07-30 19:06:31,31] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:31,31] [debug] |------------------|
[2020-07-30 19:06:31,31] [debug] \------------------/
[2020-07-30 19:06:31,31] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:31,31] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:31,31] [debug] Executing prepared statement: HikariProxyPreparedStatement@942935491 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1be7d4af[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:31,31] [debug] Executing prepared statement: HikariProxyPreparedStatement@942935491 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1be7d4af[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:31,31] [debug] /---------------------------\
[2020-07-30 19:06:31,31] [debug] | 1                         |
[2020-07-30 19:06:31,31] [debug] | String                    |
[2020-07-30 19:06:31,31] [debug] |---------------------------|
[2020-07-30 19:06:31,31] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:31,31] [debug] \---------------------------/
[2020-07-30 19:06:31,31] [debug] Execution of prepared statement took 56µs
[2020-07-30 19:06:31,31] [debug] /------------------\
[2020-07-30 19:06:31,31] [debug] | 1                |
[2020-07-30 19:06:31,31] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:31,31] [debug] |------------------|
[2020-07-30 19:06:31,31] [debug] \------------------/
[2020-07-30 19:06:31,31] [debug] #6: success None
[2020-07-30 19:06:31,31] [debug] #7: success 0
[2020-07-30 19:06:31,31] [debug] #8: success (0,0)
[2020-07-30 19:06:31,32] [debug] #9: success (0,0)
[2020-07-30 19:06:31,32] [debug] #10: Commit
[2020-07-30 19:06:31,32] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:31,32] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:31,32] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,32] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:31,32] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,32] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:31,32] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:31,32] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:31,32] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:31,32] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:31,32] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:31,32] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:31,32] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:31,32] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:31,32] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:31,32] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:31,32] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,32] [debug] Flattening projection t8
[2020-07-30 19:06:31,32] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:31,32] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:31,32] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:31,32] [debug] Flattening projection t7
[2020-07-30 19:06:31,32] [debug] Flattening projection t9
[2020-07-30 19:06:31,32] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,32] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:31,32] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:31,32] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:31,32] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:31,32] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:31,32] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:31,32] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:31,32] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:31,32] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:31,32] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:31,32] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,32] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,32] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,32] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,32] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:31,32] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:31,32] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:31,32] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:31,32] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:31,33] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:31,33] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:31,33] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:31,33] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:31,33] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:31,33] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:31,33] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:31,33] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:31,33] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:31,33] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:31,33] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:31,33] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:31,33] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:31,33] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:31,33] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:31,33] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:31,33] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:31,33] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:31,33] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:31,33] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:31,33] [debug] Table fields: Map()
[2020-07-30 19:06:31,33] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:31,33] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:31,33] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:31,33] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:31,33] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:31,33] [debug] Replacements are: Map()
[2020-07-30 19:06:31,33] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:31,33] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:31,33] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:31,33] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:31,33] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:31,33] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:31,33] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:31,33] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:31,33] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:31,33] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:31,33] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:31,33] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:31,33] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:31,33] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:31,33] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:31,33] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:31,33] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:31,33] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:31,33] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:31,33] [debug]       assignUniqueSymbols:    0.506239 ms
[2020-07-30 19:06:31,33] [debug]           unrollTailBinds:    0.055966 ms
[2020-07-30 19:06:31,33] [debug]                inferTypes:    0.100866 ms
[2020-07-30 19:06:31,33] [debug]              expandTables:    0.980922 ms
[2020-07-30 19:06:31,33] [debug]           forceOuterBinds:    0.823428 ms
[2020-07-30 19:06:31,33] [debug]         removeMappedTypes:    0.116012 ms
[2020-07-30 19:06:31,33] [debug]                expandSums:    0.036810 ms
[2020-07-30 19:06:31,33] [debug]             expandRecords:    0.823394 ms
[2020-07-30 19:06:31,33] [debug]        flattenProjections:    2.232937 ms
[2020-07-30 19:06:31,34] [debug]              rewriteJoins:    1.486649 ms
[2020-07-30 19:06:31,34] [debug]             verifySymbols:    0.062144 ms
[2020-07-30 19:06:31,34] [debug]             relabelUnions:    0.054137 ms
[2020-07-30 19:06:31,34] [debug]          createAggregates:    3.303655 ms
[2020-07-30 19:06:31,34] [debug]           resolveZipJoins:    0.068746 ms
[2020-07-30 19:06:31,34] [debug]          pruneProjections:    0.288476 ms
[2020-07-30 19:06:31,34] [debug]           rewriteDistinct:    0.048362 ms
[2020-07-30 19:06:31,34] [debug]    createResultSetMapping:    0.631589 ms
[2020-07-30 19:06:31,34] [debug]            hoistClientOps:    1.186340 ms
[2020-07-30 19:06:31,34] [debug]         reorderOperations:    0.075666 ms
[2020-07-30 19:06:31,34] [debug]     mergeToComprehensions:    3.059503 ms
[2020-07-30 19:06:31,34] [debug]            optimizeScalar:    0.059820 ms
[2020-07-30 19:06:31,34] [debug]          removeFieldNames:    0.825946 ms
[2020-07-30 19:06:31,34] [debug]      specializeParameters:    0.122882 ms
[2020-07-30 19:06:31,34] [debug]                   codeGen:    0.910349 ms
[2020-07-30 19:06:31,34] [debug]                     TOTAL:   17.860838 ms
[2020-07-30 19:06:31,34] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:31,34] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:31,34] [debug] Executing prepared statement: HikariProxyPreparedStatement@826352707 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1426c8c4[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:31,34] [debug] Executing prepared statement: HikariProxyPreparedStatement@826352707 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1426c8c4[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:31,34] [debug] Execution of prepared statement took 82µs
[2020-07-30 19:06:31,34] [debug] /----\
[2020-07-30 19:06:31,34] [debug] | 1  |
[2020-07-30 19:06:31,34] [debug] | C1 |
[2020-07-30 19:06:31,34] [debug] |----|
[2020-07-30 19:06:31,34] [debug] | 0  |
[2020-07-30 19:06:31,34] [debug] \----/
[2020-07-30 19:06:32,34] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:32,34] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:32,34] [debug] #3: StartTransaction
[2020-07-30 19:06:32,34] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:32,34] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:32,34] [debug] Executing prepared statement: HikariProxyPreparedStatement@999920188 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1274289[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:32,34] [debug] Executing prepared statement: HikariProxyPreparedStatement@999920188 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1274289[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:32,34] [debug] /------\
[2020-07-30 19:06:32,34] [debug] | 1    |
[2020-07-30 19:06:32,34] [debug] | Long |
[2020-07-30 19:06:32,34] [debug] |------|
[2020-07-30 19:06:32,34] [debug] | 5000 |
[2020-07-30 19:06:32,34] [debug] \------/
[2020-07-30 19:06:32,34] [debug] Execution of prepared statement took 179µs
[2020-07-30 19:06:32,34] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:32,34] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:32,34] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:32,34] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:32,34] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:32,34] [debug] #5: success Vector()
[2020-07-30 19:06:32,34] [debug] #6: success Vector()
[2020-07-30 19:06:32,34] [debug] #7: success ()
[2020-07-30 19:06:32,34] [debug] #8: success ((),Vector())
[2020-07-30 19:06:32,34] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:32,34] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:32,34] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:32,34] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:32,34] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:32,34] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:32,34] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:32,34] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:32,34] [debug] Expanding tables in result type
[2020-07-30 19:06:32,35] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,35] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,35] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,35] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:32,35] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,35] [debug] Flattening projection t8
[2020-07-30 19:06:32,35] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,35] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:32,35] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:32,35] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:32,35] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:32,35] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:32,35] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,35] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:32,35] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:32,35] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:32,35] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:32,35] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:32,35] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:32,35] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:32,35] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:32,35] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:32,35] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:32,35] [debug] Creating mapping from Long'
[2020-07-30 19:06:32,35] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:32,35] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:32,35] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:32,35] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:32,36] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:32,36] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:32,36] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:32,36] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:32,36] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:32,36] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:32,36] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,36] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:32,36] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:32,36] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:32,36] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,36] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:32,36] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:32,36] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:32,36] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:32,36] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:32,36] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:32,36] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:32,36] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:32,36] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:32,36] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:32,36] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:32,36] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:32,36] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:32,36] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:32,36] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:32,36] [debug]       assignUniqueSymbols:    0.552779 ms
[2020-07-30 19:06:32,36] [debug]           unrollTailBinds:    0.094662 ms
[2020-07-30 19:06:32,36] [debug]                inferTypes:    0.147352 ms
[2020-07-30 19:06:32,36] [debug]              expandTables:    8.567856 ms
[2020-07-30 19:06:32,36] [debug]           forceOuterBinds:    0.306413 ms
[2020-07-30 19:06:32,36] [debug]         removeMappedTypes:    0.293744 ms
[2020-07-30 19:06:32,36] [debug]                expandSums:    0.054411 ms
[2020-07-30 19:06:32,36] [debug]             expandRecords:    0.230667 ms
[2020-07-30 19:06:32,36] [debug]        flattenProjections:    0.728623 ms
[2020-07-30 19:06:32,36] [debug]              rewriteJoins:    0.045251 ms
[2020-07-30 19:06:32,36] [debug]             verifySymbols:    0.042994 ms
[2020-07-30 19:06:32,36] [debug]             relabelUnions:    0.033978 ms
[2020-07-30 19:06:32,36] [debug]          createAggregates:    0.021926 ms
[2020-07-30 19:06:32,36] [debug]           resolveZipJoins:    0.039181 ms
[2020-07-30 19:06:32,36] [debug]          pruneProjections:    0.145061 ms
[2020-07-30 19:06:32,36] [debug]           rewriteDistinct:    0.040542 ms
[2020-07-30 19:06:32,36] [debug]    createResultSetMapping:    0.444262 ms
[2020-07-30 19:06:32,36] [debug]            hoistClientOps:    0.994743 ms
[2020-07-30 19:06:32,36] [debug]         reorderOperations:    0.090096 ms
[2020-07-30 19:06:32,36] [debug]     mergeToComprehensions:    2.345978 ms
[2020-07-30 19:06:32,36] [debug]            optimizeScalar:    0.069246 ms
[2020-07-30 19:06:32,36] [debug]          removeFieldNames:    0.907470 ms
[2020-07-30 19:06:32,36] [debug]      specializeParameters:    0.127575 ms
[2020-07-30 19:06:32,36] [debug]                   codeGen:    0.918120 ms
[2020-07-30 19:06:32,36] [debug]                     TOTAL:   17.242930 ms
[2020-07-30 19:06:32,36] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:32,36] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:32,36] [debug] Executing prepared update: HikariProxyPreparedStatement@377458450 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1330785[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:32,36] [debug] Executing prepared update: HikariProxyPreparedStatement@377458450 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1330785[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:32,36] [debug] Execution of prepared update took 117µs
[2020-07-30 19:06:32,36] [debug] #10: success 0
[2020-07-30 19:06:32,36] [debug] #11: Commit
[2020-07-30 19:06:32,36] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:32,36] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:32,36] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:32,36] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:32,36] [debug] #3: StartTransaction
[2020-07-30 19:06:32,36] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:32,36] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:32,36] [debug] Executing prepared statement: HikariProxyPreparedStatement@1280325754 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@55c60268[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:32,36] [debug] Executing prepared statement: HikariProxyPreparedStatement@1280325754 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@55c60268[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:32,36] [debug] /---------------------------\
[2020-07-30 19:06:32,36] [debug] | 1                         |
[2020-07-30 19:06:32,36] [debug] | String                    |
[2020-07-30 19:06:32,36] [debug] |---------------------------|
[2020-07-30 19:06:32,36] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:32,36] [debug] \---------------------------/
[2020-07-30 19:06:32,36] [debug] Execution of prepared statement took 65µs
[2020-07-30 19:06:32,36] [debug] /------------------\
[2020-07-30 19:06:32,36] [debug] | 1                |
[2020-07-30 19:06:32,36] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:32,36] [debug] |------------------|
[2020-07-30 19:06:32,36] [debug] \------------------/
[2020-07-30 19:06:32,36] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:32,37] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:32,37] [debug] Executing prepared statement: HikariProxyPreparedStatement@1658363020 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@59d0be35[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:32,37] [debug] Executing prepared statement: HikariProxyPreparedStatement@1658363020 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@59d0be35[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:32,37] [debug] /---------------------------\
[2020-07-30 19:06:32,37] [debug] | 1                         |
[2020-07-30 19:06:32,37] [debug] | String                    |
[2020-07-30 19:06:32,37] [debug] |---------------------------|
[2020-07-30 19:06:32,37] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:32,37] [debug] \---------------------------/
[2020-07-30 19:06:32,37] [debug] Execution of prepared statement took 34µs
[2020-07-30 19:06:32,37] [debug] /------------------\
[2020-07-30 19:06:32,37] [debug] | 1                |
[2020-07-30 19:06:32,37] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:32,37] [debug] |------------------|
[2020-07-30 19:06:32,37] [debug] \------------------/
[2020-07-30 19:06:32,37] [debug] #6: success None
[2020-07-30 19:06:32,37] [debug] #7: success 0
[2020-07-30 19:06:32,37] [debug] #8: success (0,0)
[2020-07-30 19:06:32,37] [debug] #9: success (0,0)
[2020-07-30 19:06:32,37] [debug] #10: Commit
[2020-07-30 19:06:32,37] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:32,37] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:32,37] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,37] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:32,37] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,37] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:32,37] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:32,37] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:32,37] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:32,37] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:32,37] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:32,37] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:32,37] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:32,37] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:32,37] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:32,37] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:32,37] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,37] [debug] Flattening projection t8
[2020-07-30 19:06:32,37] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:32,37] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:32,37] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:32,37] [debug] Flattening projection t7
[2020-07-30 19:06:32,37] [debug] Flattening projection t9
[2020-07-30 19:06:32,37] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,37] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:32,37] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:32,37] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:32,37] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:32,37] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:32,37] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:32,37] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:32,37] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:32,37] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:32,37] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:32,37] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,37] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,37] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,37] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,37] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:32,37] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:32,37] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,37] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:32,37] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:32,37] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:32,37] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:32,37] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:32,37] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:32,37] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:32,37] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:32,37] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:32,38] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:32,38] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:32,38] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:32,38] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:32,38] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:32,38] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:32,38] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:32,38] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:32,38] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:32,38] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:32,38] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:32,38] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:32,38] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:32,38] [debug] Table fields: Map()
[2020-07-30 19:06:32,38] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:32,38] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:32,38] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:32,38] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:32,38] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:32,38] [debug] Replacements are: Map()
[2020-07-30 19:06:32,38] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:32,38] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:32,38] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:32,38] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:32,38] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:32,38] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:32,38] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:32,38] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:32,38] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:32,38] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:32,38] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:32,38] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:32,38] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:32,38] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:32,38] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:32,38] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:32,38] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:32,38] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:32,38] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:32,38] [debug]       assignUniqueSymbols:    0.298175 ms
[2020-07-30 19:06:32,38] [debug]           unrollTailBinds:    0.055266 ms
[2020-07-30 19:06:32,38] [debug]                inferTypes:    0.061841 ms
[2020-07-30 19:06:32,38] [debug]              expandTables:    0.560460 ms
[2020-07-30 19:06:32,38] [debug]           forceOuterBinds:    0.497495 ms
[2020-07-30 19:06:32,38] [debug]         removeMappedTypes:    0.076026 ms
[2020-07-30 19:06:32,38] [debug]                expandSums:    0.022274 ms
[2020-07-30 19:06:32,38] [debug]             expandRecords:    0.383144 ms
[2020-07-30 19:06:32,38] [debug]        flattenProjections:    1.624706 ms
[2020-07-30 19:06:32,38] [debug]              rewriteJoins:    1.066430 ms
[2020-07-30 19:06:32,38] [debug]             verifySymbols:    0.053834 ms
[2020-07-30 19:06:32,38] [debug]             relabelUnions:    0.042992 ms
[2020-07-30 19:06:32,38] [debug]          createAggregates:    2.595890 ms
[2020-07-30 19:06:32,38] [debug]           resolveZipJoins:    0.056018 ms
[2020-07-30 19:06:32,38] [debug]          pruneProjections:    0.204094 ms
[2020-07-30 19:06:32,38] [debug]           rewriteDistinct:    0.064516 ms
[2020-07-30 19:06:32,38] [debug]    createResultSetMapping:    0.559866 ms
[2020-07-30 19:06:32,38] [debug]            hoistClientOps:    0.845404 ms
[2020-07-30 19:06:32,38] [debug]         reorderOperations:    0.059375 ms
[2020-07-30 19:06:32,38] [debug]     mergeToComprehensions:    2.350271 ms
[2020-07-30 19:06:32,38] [debug]            optimizeScalar:    0.054332 ms
[2020-07-30 19:06:32,38] [debug]          removeFieldNames:    0.876617 ms
[2020-07-30 19:06:32,38] [debug]      specializeParameters:    0.106029 ms
[2020-07-30 19:06:32,38] [debug]                   codeGen:    0.912038 ms
[2020-07-30 19:06:32,38] [debug]                     TOTAL:   13.427093 ms
[2020-07-30 19:06:32,38] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:32,38] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:32,38] [debug] Executing prepared statement: HikariProxyPreparedStatement@899121687 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@50a70f29[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:32,38] [debug] Executing prepared statement: HikariProxyPreparedStatement@899121687 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@50a70f29[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:32,38] [debug] Execution of prepared statement took 134µs
[2020-07-30 19:06:32,38] [debug] /----\
[2020-07-30 19:06:32,38] [debug] | 1  |
[2020-07-30 19:06:32,38] [debug] | C1 |
[2020-07-30 19:06:32,38] [debug] |----|
[2020-07-30 19:06:32,38] [debug] | 0  |
[2020-07-30 19:06:32,38] [debug] \----/
[2020-07-30 19:06:32,52] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:32,52] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:32,52] [debug] #3: StartTransaction
[2020-07-30 19:06:32,52] [debug] #4: MultiInsertAction [insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)]
[2020-07-30 19:06:32,52] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,52] [debug] Executing prepared update: HikariProxyPreparedStatement@2112269076 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1527fa99[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c76c84c]]]
[2020-07-30 19:06:32,52] [debug] Executing prepared update: HikariProxyPreparedStatement@2112269076 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1527fa99[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c76c84c]]]
[2020-07-30 19:06:32,52] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,52] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,52] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,52] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,52] [debug] | c0bf4f0d-06fe-4de2-bc4... | NULL    | NULL    | NULL    | status |      | string | 2020-07-30 19:06:28.59... |
[2020-07-30 19:06:32,52] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,53] [debug] Execution of prepared update took 8ms
[2020-07-30 19:06:32,53] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,53] [debug] Executing prepared update: HikariProxyPreparedStatement@125917128 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@219b838b[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c76c84c]]]
[2020-07-30 19:06:32,53] [debug] Executing prepared update: HikariProxyPreparedStatement@125917128 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@219b838b[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c76c84c]]]
[2020-07-30 19:06:32,53] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,53] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,53] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,53] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,53] [debug] | 4112ebff-e447-43a8-802... | NULL    | NULL    | NULL    | status |      | string | 2020-07-30 19:06:28.59... |
[2020-07-30 19:06:32,53] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,54] [debug] Execution of prepared update took 6ms
[2020-07-30 19:06:32,54] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,54] [debug] Executing prepared update: HikariProxyPreparedStatement@1697523239 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2d588693[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536], [null], [null], [null], [start], [javax.sql.rowset.serial.SerialClob@106b670], [string], [org.hsqldb.types.TimestampData@7c749dcc]]]
[2020-07-30 19:06:32,54] [debug] Executing prepared update: HikariProxyPreparedStatement@1697523239 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2d588693[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536], [null], [null], [null], [start], [javax.sql.rowset.serial.SerialClob@106b670], [string], [org.hsqldb.types.TimestampData@7c749dcc]]]
[2020-07-30 19:06:32,54] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,54] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,54] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,54] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,54] [debug] | 4112ebff-e447-43a8-802... | NULL    | NULL    | NULL    | start  |      | string | 2020-07-30 19:06:28.59... |
[2020-07-30 19:06:32,54] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,55] [debug] Execution of prepared update took 6ms
[2020-07-30 19:06:32,55] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,55] [debug] Executing prepared update: HikariProxyPreparedStatement@359030039 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@18d476d2[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c7a33c4]]]
[2020-07-30 19:06:32,55] [debug] Executing prepared update: HikariProxyPreparedStatement@359030039 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@18d476d2[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c7a33c4]]]
[2020-07-30 19:06:32,55] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,55] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,55] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,55] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,55] [debug] | 4112ebff-e447-43a8-802... | NULL    | NULL    | NULL    | status |      | string | 2020-07-30 19:06:28.59... |
[2020-07-30 19:06:32,55] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,55] [debug] Execution of prepared update took 6ms
[2020-07-30 19:06:32,55] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,55] [debug] Executing prepared update: HikariProxyPreparedStatement@1751655299 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7c633d36[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5], [null], [null], [null], [start], [javax.sql.rowset.serial.SerialClob@1072acf], [string], [org.hsqldb.types.TimestampData@7c4249fc]]]
[2020-07-30 19:06:32,55] [debug] Executing prepared update: HikariProxyPreparedStatement@1751655299 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7c633d36[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5], [null], [null], [null], [start], [javax.sql.rowset.serial.SerialClob@1072acf], [string], [org.hsqldb.types.TimestampData@7c4249fc]]]
[2020-07-30 19:06:32,55] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,55] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,55] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,55] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,55] [debug] | c0bf4f0d-06fe-4de2-bc4... | NULL    | NULL    | NULL    | start  |      | string | 2020-07-30 19:06:28.59... |
[2020-07-30 19:06:32,55] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,56] [debug] Execution of prepared update took 7ms
[2020-07-30 19:06:32,56] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,56] [debug] Executing prepared update: HikariProxyPreparedStatement@1956174654 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@53b1baba[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c417b64]]]
[2020-07-30 19:06:32,56] [debug] Executing prepared update: HikariProxyPreparedStatement@1956174654 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@53b1baba[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c417b64]]]
[2020-07-30 19:06:32,56] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,56] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,56] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,56] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,56] [debug] | c0bf4f0d-06fe-4de2-bc4... | NULL    | NULL    | NULL    | status |      | string | 2020-07-30 19:06:28.59365 |
[2020-07-30 19:06:32,56] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,57] [debug] Execution of prepared update took 6ms
[2020-07-30 19:06:32,57] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,57] [debug] Executing prepared update: HikariProxyPreparedStatement@942313360 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@11f7c216[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c51e164]]]
[2020-07-30 19:06:32,57] [debug] Executing prepared update: HikariProxyPreparedStatement@942313360 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@11f7c216[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c51e164]]]
[2020-07-30 19:06:32,57] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,57] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,57] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,57] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,57] [debug] | f0a69e19-38c5-4084-ae3... | NULL    | NULL    | NULL    | status |      | string | 2020-07-30 19:06:28.59... |
[2020-07-30 19:06:32,57] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,58] [debug] Execution of prepared update took 7ms
[2020-07-30 19:06:32,58] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,58] [debug] Executing prepared update: HikariProxyPreparedStatement@1424224386 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@66909645[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886], [null], [null], [null], [start], [javax.sql.rowset.serial.SerialClob@1079f2e], [string], [org.hsqldb.types.TimestampData@7c573634]]]
[2020-07-30 19:06:32,58] [debug] Executing prepared update: HikariProxyPreparedStatement@1424224386 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@66909645[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886], [null], [null], [null], [start], [javax.sql.rowset.serial.SerialClob@1079f2e], [string], [org.hsqldb.types.TimestampData@7c573634]]]
[2020-07-30 19:06:32,58] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,58] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,58] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,58] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,58] [debug] | f0a69e19-38c5-4084-ae3... | NULL    | NULL    | NULL    | start  |      | string | 2020-07-30 19:06:28.59... |
[2020-07-30 19:06:32,58] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,59] [debug] Execution of prepared update took 7ms
[2020-07-30 19:06:32,59] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,59] [debug] Executing prepared update: HikariProxyPreparedStatement@387000720 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7bab6f7a[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c59098c]]]
[2020-07-30 19:06:32,59] [debug] Executing prepared update: HikariProxyPreparedStatement@387000720 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7bab6f7a[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@68bca83d], [string], [org.hsqldb.types.TimestampData@7c59098c]]]
[2020-07-30 19:06:32,59] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,59] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,59] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,59] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,59] [debug] | f0a69e19-38c5-4084-ae3... | NULL    | NULL    | NULL    | status |      | string | 2020-07-30 19:06:28.59... |
[2020-07-30 19:06:32,59] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,59] [debug] Execution of prepared update took 6ms
[2020-07-30 19:06:32,59] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,60] [debug] Executing prepared update: HikariProxyPreparedStatement@1056779857 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@75d1b789[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [end], [javax.sql.rowset.serial.SerialClob@6a3be8e3], [string], [org.hsqldb.types.TimestampData@7a77bddd]]]
[2020-07-30 19:06:32,60] [debug] Executing prepared update: HikariProxyPreparedStatement@1056779857 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@75d1b789[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [end], [javax.sql.rowset.serial.SerialClob@6a3be8e3], [string], [org.hsqldb.types.TimestampData@7a77bddd]]]
[2020-07-30 19:06:32,60] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,60] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,60] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,60] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,60] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | end    |      | string | 2020-07-30 19:06:29.62... |
[2020-07-30 19:06:32,60] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,60] [debug] Execution of prepared update took 7ms
[2020-07-30 19:06:32,60] [debug] Preparing insert statement (returning: METADATA_JOURNAL_ID): insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,60] [debug] Executing prepared update: HikariProxyPreparedStatement@5153187 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1e8d564b[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@c061c13d], [string], [org.hsqldb.types.TimestampData@7ad860c5]]]
[2020-07-30 19:06:32,60] [debug] Executing prepared update: HikariProxyPreparedStatement@5153187 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@1e8d564b[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [status], [javax.sql.rowset.serial.SerialClob@c061c13d], [string], [org.hsqldb.types.TimestampData@7ad860c5]]]
[2020-07-30 19:06:32,60] [debug] /---------------------------+---------+---------+---------+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,60] [debug] | 1                         | 2       | 3       | 4       | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,60] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,60] [debug] |---------------------------+---------+---------+---------+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,60] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | status |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:32,60] [debug] \---------------------------+---------+---------+---------+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,62] [debug] Execution of prepared update took 11ms
[2020-07-30 19:06:32,62] [debug] Source:
| TableExpansion
|   table s2: Table SUMMARY_QUEUE_ENTRY
|   columns: TypeMapping
|     0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,62] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:32,62] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table SUMMARY_QUEUE_ENTRY
|   columns: TypeMapping
|     0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,62] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:32,62] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(Long')]
|   from s5: Insert allFields=[METADATA_JOURNAL_ID] : (Long')
|     table s6: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (Long')
|       1: Path s6.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: InsertColumn METADATA_JOURNAL_ID : Long'
|       0: Path s5._1 : Long'

[2020-07-30 19:06:32,62] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[METADATA_JOURNAL_ID] : (Long')
|   table s6: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (Long')
|     1: Path s6.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,62] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,62] [debug] Compiled server-side to:
| CompiledStatement "insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)" : (Long')

[2020-07-30 19:06:32,62] [debug] After phase codeGen:
| ResultSetMapping : Vector[(Long')]
|   from s5: CompiledStatement "insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)" : (Long')
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,62] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:32,62] [debug]       assignUniqueSymbols:    0.247646 ms
[2020-07-30 19:06:32,62] [debug]                inferTypes:    0.060122 ms
[2020-07-30 19:06:32,62] [debug]            insertCompiler:    0.384609 ms
[2020-07-30 19:06:32,62] [debug]                   codeGen:    0.597991 ms
[2020-07-30 19:06:32,62] [debug]                     TOTAL:    1.290368 ms
[2020-07-30 19:06:32,62] [debug] #5: MultiInsertAction [insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)]
[2020-07-30 19:06:32,62] [debug] Preparing statement: insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9266]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9266]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9266 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 30µs
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9267]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9267]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9267 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 14µs
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9268]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9268]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9268 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 13µs
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9269]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9269]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9269 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 13µs
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9270]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9270]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9270 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 13µs
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9271]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9271]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9271 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 14µs
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9272]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9272]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9272 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 12µs
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9273]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9273]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9273 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 12µs
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9274]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9274]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9274 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 16µs
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9275]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9275]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9275 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 11µs
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9276]]]
[2020-07-30 19:06:32,62] [debug] Executing batch insert: HikariProxyPreparedStatement@930403090 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@78c9ff37[sql=[insert into "SUMMARY_QUEUE_ENTRY" ("METADATA_JOURNAL_ID")  values (?)], parameters=[[9276]]]
[2020-07-30 19:06:32,62] [debug] /------\
[2020-07-30 19:06:32,62] [debug] | 1    |
[2020-07-30 19:06:32,62] [debug] | Long |
[2020-07-30 19:06:32,62] [debug] |------|
[2020-07-30 19:06:32,62] [debug] | 9276 |
[2020-07-30 19:06:32,62] [debug] \------/
[2020-07-30 19:06:32,62] [debug] Execution of batch insert took 10µs
[2020-07-30 19:06:32,62] [debug] Execution of batch took 301µs
[2020-07-30 19:06:32,62] [debug] #6: Commit
[2020-07-30 19:06:32,63] [debug] #7: SetTransactionIsolation
[2020-07-30 19:06:32,63] [debug] #8: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:32,63] [debug] Source:
| TableExpansion
|   table s2: Table METADATA_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s2.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s2.CALL_FQN : Option[String']
|       3: Path s2.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s2.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s2.METADATA_KEY : String'
|       6: Path s2.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s2.METADATA_VALUE_TYPE : Option[String']
|       8: Path s2.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply
|         0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,63] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:32,63] [debug] After phase assignUniqueSymbols:
| TableExpansion
|   table s3: Table METADATA_ENTRY
|   columns: TypeMapping
|     0: ProductNode
|       1: Path s3.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s3.CALL_FQN : Option[String']
|       3: Path s3.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s3.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s3.METADATA_KEY : String'
|       6: Path s3.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s3.METADATA_VALUE_TYPE : Option[String']
|       8: Path s3.METADATA_TIMESTAMP : java.sql.Timestamp'
|       9: OptionApply
|         0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,63] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:32,63] [debug] After phase insertCompiler:
| ResultSetMapping : Vector[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')]
|   from s5: Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FQN, JOB_SCATTER_INDEX, JOB_RETRY_ATTEMPT, METADATA_KEY, METADATA_VALUE, METADATA_VALUE_TYPE, METADATA_TIMESTAMP, METADATA_JOURNAL_ID] : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|     table s6: Table METADATA_ENTRY : Vector[@t4<UnassignedType>]
|     linear: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|       1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|       2: Path s6.CALL_FQN : Option[String']
|       3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|       4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|       5: Path s6.METADATA_KEY : String'
|       6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: Path s6.METADATA_VALUE_TYPE : Option[String']
|       8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'
|   map: TypeMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     0: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])
|       1: InsertColumn WORKFLOW_EXECUTION_UUID : String'
|         0: Path s5._1 : String'
|       2: InsertColumn CALL_FQN : Option[String']
|         0: Path s5._2 : Option[String']
|       3: InsertColumn JOB_SCATTER_INDEX : Option[Int']
|         0: Path s5._3 : Option[Int']
|       4: InsertColumn JOB_RETRY_ATTEMPT : Option[Int']
|         0: Path s5._4 : Option[Int']
|       5: InsertColumn METADATA_KEY : String'
|         0: Path s5._5 : String'
|       6: InsertColumn METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|         0: Path s5._6 : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|       7: InsertColumn METADATA_VALUE_TYPE : Option[String']
|         0: Path s5._7 : Option[String']
|       8: InsertColumn METADATA_TIMESTAMP : java.sql.Timestamp'
|         0: Path s5._8 : java.sql.Timestamp'
|       9: OptionApply : Option[Long']
|         0: InsertColumn METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:32,63] [debug] Compiling server-side and mapping with server-side:
| Insert allFields=[WORKFLOW_EXECUTION_UUID, CALL_FQN, JOB_SCATTER_INDEX, JOB_RETRY_ATTEMPT, METADATA_KEY, METADATA_VALUE, METADATA_VALUE_TYPE, METADATA_TIMESTAMP, METADATA_JOURNAL_ID] : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|   table s6: Table METADATA_ENTRY : Vector[@t4<UnassignedType>]
|   linear: ProductNode : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|     1: Path s6.WORKFLOW_EXECUTION_UUID : String'
|     2: Path s6.CALL_FQN : Option[String']
|     3: Path s6.JOB_SCATTER_INDEX : Option[Int']
|     4: Path s6.JOB_RETRY_ATTEMPT : Option[Int']
|     5: Path s6.METADATA_KEY : String'
|     6: Path s6.METADATA_VALUE : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|     7: Path s6.METADATA_VALUE_TYPE : Option[String']
|     8: Path s6.METADATA_TIMESTAMP : java.sql.Timestamp'

[2020-07-30 19:06:32,63] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: ProductResultConverter
|     1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|     2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|     3: OptionResultConverter$mcI$sp idx=3 : Int'
|     4: OptionResultConverter$mcI$sp idx=4 : Int'
|     5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=METADATA_KEY : String'
|     6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|     7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|     8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=METADATA_TIMESTAMP : java.sql.Timestamp'
|     9: CompoundResultConverter

[2020-07-30 19:06:32,63] [debug] Compiled server-side to:
| CompiledStatement "insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')

[2020-07-30 19:06:32,63] [debug] After phase codeGen:
| ResultSetMapping : Vector[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')]
|   from s5: CompiledStatement "insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)" : (String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp')
|   map: CompiledMapping : Mapped[(String', Option[String'], Option[Int'], Option[Int'], String', Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], Option[String'], java.sql.Timestamp', Option[Long'])]
|     converter: TypeMappingResultConverter
|       child: ProductResultConverter
|         1: SpecializedJdbcResultConverter$$anon$1 idx=1, name=WORKFLOW_EXECUTION_UUID : String'
|         2: SpecializedJdbcResultConverter$$anon$2 idx=2 : String'
|         3: OptionResultConverter$mcI$sp idx=3 : Int'
|         4: OptionResultConverter$mcI$sp idx=4 : Int'
|         5: SpecializedJdbcResultConverter$$anon$1 idx=5, name=METADATA_KEY : String'
|         6: SpecializedJdbcResultConverter$$anon$2 idx=6 : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|         7: SpecializedJdbcResultConverter$$anon$2 idx=7 : String'
|         8: SpecializedJdbcResultConverter$$anon$1 idx=8, name=METADATA_TIMESTAMP : java.sql.Timestamp'
|         9: CompoundResultConverter

[2020-07-30 19:06:32,63] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:32,63] [debug]       assignUniqueSymbols:    0.871228 ms
[2020-07-30 19:06:32,63] [debug]                inferTypes:    0.153220 ms
[2020-07-30 19:06:32,63] [debug]            insertCompiler:    1.331203 ms
[2020-07-30 19:06:32,63] [debug]                   codeGen:    1.986246 ms
[2020-07-30 19:06:32,63] [debug]                     TOTAL:    4.341897 ms
[2020-07-30 19:06:32,63] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: sequence
          1: MultiInsertAction [insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)]
[2020-07-30 19:06:32,63] [debug] Preparing statement: insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)
[2020-07-30 19:06:32,63] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [start], [javax.sql.rowset.serial.SerialClob@ea876e], [string], [org.hsqldb.types.TimestampData@7d07879c]]]
[2020-07-30 19:06:32,63] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [start], [javax.sql.rowset.serial.SerialClob@ea876e], [string], [org.hsqldb.types.TimestampData@7d07879c]]]
[2020-07-30 19:06:32,63] [debug] /---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,63] [debug] | 1                         | 2               | 3   | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,63] [debug] | String                    | String          | Int | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,63] [debug] |---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,63] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | start  |      | string | 2020-07-30 19:06:28.57... |
[2020-07-30 19:06:32,63] [debug] \---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,64] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:32,64] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@b8145e73], [string], [org.hsqldb.types.TimestampData@7d0653bc]]]
[2020-07-30 19:06:32,64] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@b8145e73], [string], [org.hsqldb.types.TimestampData@7d0653bc]]]
[2020-07-30 19:06:32,64] [debug] /---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:32,64] [debug] | 1                         | 2               | 3   | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:32,64] [debug] | String                    | String          | Int | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,64] [debug] |---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:32,64] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | executionStatus |      | string | 2020-07-30 19:06:28.57... |
[2020-07-30 19:06:32,64] [debug] \---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:32,65] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,65] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [start], [javax.sql.rowset.serial.SerialClob@eb702c], [string], [org.hsqldb.types.TimestampData@7d14c56c]]]
[2020-07-30 19:06:32,65] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [start], [javax.sql.rowset.serial.SerialClob@eb702c], [string], [org.hsqldb.types.TimestampData@7d14c56c]]]
[2020-07-30 19:06:32,65] [debug] /---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,65] [debug] | 1                         | 2               | 3   | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,65] [debug] | String                    | String          | Int | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,65] [debug] |---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,65] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | start  |      | string | 2020-07-30 19:06:28.57... |
[2020-07-30 19:06:32,65] [debug] \---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,66] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,66] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@b8145e73], [string], [org.hsqldb.types.TimestampData@7d1b03c4]]]
[2020-07-30 19:06:32,66] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@b8145e73], [string], [org.hsqldb.types.TimestampData@7d1b03c4]]]
[2020-07-30 19:06:32,66] [debug] /---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:32,66] [debug] | 1                         | 2               | 3   | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:32,66] [debug] | String                    | String          | Int | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,66] [debug] |---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:32,66] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | executionStatus |      | string | 2020-07-30 19:06:28.57... |
[2020-07-30 19:06:32,66] [debug] \---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:32,66] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,66] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [start], [javax.sql.rowset.serial.SerialClob@eb702c], [string], [org.hsqldb.types.TimestampData@7d1d947c]]]
[2020-07-30 19:06:32,66] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [start], [javax.sql.rowset.serial.SerialClob@eb702c], [string], [org.hsqldb.types.TimestampData@7d1d947c]]]
[2020-07-30 19:06:32,67] [debug] /---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,67] [debug] | 1                         | 2               | 3   | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,67] [debug] | String                    | String          | Int | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,67] [debug] |---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,67] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | start  |      | string | 2020-07-30 19:06:28.57... |
[2020-07-30 19:06:32,67] [debug] \---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,67] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,67] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@b8145e73], [string], [org.hsqldb.types.TimestampData@7d1c117c]]]
[2020-07-30 19:06:32,67] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@b8145e73], [string], [org.hsqldb.types.TimestampData@7d1c117c]]]
[2020-07-30 19:06:32,67] [debug] /---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:32,67] [debug] | 1                         | 2               | 3   | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:32,67] [debug] | String                    | String          | Int | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,67] [debug] |---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:32,67] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | executionStatus |      | string | 2020-07-30 19:06:28.57... |
[2020-07-30 19:06:32,67] [debug] \---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:32,68] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,68] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@ae7cd480], [string], [org.hsqldb.types.TimestampData@7c4a210c]]]
[2020-07-30 19:06:32,68] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@ae7cd480], [string], [org.hsqldb.types.TimestampData@7c4a210c]]]
[2020-07-30 19:06:32,68] [debug] /---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:32,68] [debug] | 1                         | 2               | 3   | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:32,68] [debug] | String                    | String          | Int | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,68] [debug] |---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:32,68] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | executionStatus |      | string | 2020-07-30 19:06:28.59... |
[2020-07-30 19:06:32,68] [debug] \---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:32,69] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,69] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@ae7cd480], [string], [org.hsqldb.types.TimestampData@7c4f5ea4]]]
[2020-07-30 19:06:32,69] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@ae7cd480], [string], [org.hsqldb.types.TimestampData@7c4f5ea4]]]
[2020-07-30 19:06:32,69] [debug] /---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:32,69] [debug] | 1                         | 2               | 3   | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:32,69] [debug] | String                    | String          | Int | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,69] [debug] |---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:32,69] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | executionStatus |      | string | 2020-07-30 19:06:28.59... |
[2020-07-30 19:06:32,69] [debug] \---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:32,69] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,69] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@ae7cd480], [string], [org.hsqldb.types.TimestampData@7cf5d434]]]
[2020-07-30 19:06:32,69] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@ae7cd480], [string], [org.hsqldb.types.TimestampData@7cf5d434]]]
[2020-07-30 19:06:32,69] [debug] /---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:32,70] [debug] | 1                         | 2               | 3   | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:32,70] [debug] | String                    | String          | Int | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,70] [debug] |---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:32,70] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | executionStatus |      | string | 2020-07-30 19:06:28.60128 |
[2020-07-30 19:06:32,70] [debug] \---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:32,70] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,70] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@c061c13d], [string], [org.hsqldb.types.TimestampData@7b667464]]]
[2020-07-30 19:06:32,70] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@c061c13d], [string], [org.hsqldb.types.TimestampData@7b667464]]]
[2020-07-30 19:06:32,70] [debug] /---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:32,70] [debug] | 1                         | 2               | 3   | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:32,70] [debug] | String                    | String          | Int | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,70] [debug] |---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:32,70] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | executionStatus |      | string | 2020-07-30 19:06:28.60853 |
[2020-07-30 19:06:32,70] [debug] \---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:32,71] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,71] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [end], [javax.sql.rowset.serial.SerialClob@23f75c0], [string], [org.hsqldb.types.TimestampData@7b653fdc]]]
[2020-07-30 19:06:32,71] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [end], [javax.sql.rowset.serial.SerialClob@23f75c0], [string], [org.hsqldb.types.TimestampData@7b653fdc]]]
[2020-07-30 19:06:32,71] [debug] /---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,71] [debug] | 1                         | 2               | 3   | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,71] [debug] | String                    | String          | Int | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,71] [debug] |---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,71] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | end    |      | string | 2020-07-30 19:06:28.60... |
[2020-07-30 19:06:32,71] [debug] \---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,72] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,72] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [retryableFailure], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@7b65d7d4]]]
[2020-07-30 19:06:32,72] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [retryableFailure], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@7b65d7d4]]]
[2020-07-30 19:06:32,72] [debug] /---------------------------+-----------------+-----+-----+------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,72] [debug] | 1                         | 2               | 3   | 4   | 5                | 6    | 7       | 8                         |
[2020-07-30 19:06:32,72] [debug] | String                    | String          | Int | Int | String           | Clob | String  | Timestamp                 |
[2020-07-30 19:06:32,72] [debug] |---------------------------+-----------------+-----+-----+------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,72] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | retryableFailure |      | boolean | 2020-07-30 19:06:28.60862 |
[2020-07-30 19:06:32,72] [debug] \---------------------------+-----------------+-----+-----+------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,72] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7b731b6c]]]
[2020-07-30 19:06:32,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7b731b6c]]]
[2020-07-30 19:06:32,73] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,73] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,73] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,73] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,73] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | failures[202455101]:me... |      | string | 2020-07-30 19:06:28.60... |
[2020-07-30 19:06:32,73] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,73] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:32,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7b79b1e4]]]
[2020-07-30 19:06:32,73] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7b79b1e4]]]
[2020-07-30 19:06:32,73] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,73] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,73] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,73] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,73] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | failures[202455101]:ca... |      | string | 2020-07-30 19:06:28.60... |
[2020-07-30 19:06:32,73] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,74] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,74] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7b79a144]]]
[2020-07-30 19:06:32,74] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7b79a144]]]
[2020-07-30 19:06:32,74] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,74] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,74] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,74] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,74] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | failures[202455101]:ca... | NULL | NULL    | 2020-07-30 19:06:28.60... |
[2020-07-30 19:06:32,74] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,74] [debug] Execution of batch insert took 17µs
[2020-07-30 19:06:32,74] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7b78072c]]]
[2020-07-30 19:06:32,74] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7b78072c]]]
[2020-07-30 19:06:32,74] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,74] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,74] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,74] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,74] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | failures[202455101]:ca... |      | string | 2020-07-30 19:06:28.60... |
[2020-07-30 19:06:32,74] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,75] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,75] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7b783edc]]]
[2020-07-30 19:06:32,75] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7b783edc]]]
[2020-07-30 19:06:32,75] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,75] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,75] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,75] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,75] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | failures[202455101]:ca... | NULL | NULL    | 2020-07-30 19:06:28.60... |
[2020-07-30 19:06:32,75] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,75] [debug] Execution of batch insert took 19µs
[2020-07-30 19:06:32,75] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7b785a74]]]
[2020-07-30 19:06:32,75] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7b785a74]]]
[2020-07-30 19:06:32,75] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,75] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,75] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,75] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,75] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | failures[202455101]:ca... |      | string | 2020-07-30 19:06:28.60996 |
[2020-07-30 19:06:32,75] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,76] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,76] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7b785224]]]
[2020-07-30 19:06:32,76] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7b785224]]]
[2020-07-30 19:06:32,76] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,76] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,76] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,76] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,76] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | failures[202455101]:ca... | NULL | NULL    | 2020-07-30 19:06:28.60... |
[2020-07-30 19:06:32,76] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,76] [debug] Execution of batch insert took 20µs
[2020-07-30 19:06:32,76] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7b7845b4]]]
[2020-07-30 19:06:32,76] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7b7845b4]]]
[2020-07-30 19:06:32,76] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,76] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,76] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,76] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,76] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | failures[202455101]:ca... |      | string | 2020-07-30 19:06:28.60... |
[2020-07-30 19:06:32,76] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,77] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,77] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7b787d64]]]
[2020-07-30 19:06:32,77] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [1], [1], [failures[202455101]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7b787d64]]]
[2020-07-30 19:06:32,77] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,77] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,77] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,77] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,77] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 1   | 1   | failures[202455101]:ca... | NULL | NULL    | 2020-07-30 19:06:28.60997 |
[2020-07-30 19:06:32,77] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,77] [debug] Execution of batch insert took 19µs
[2020-07-30 19:06:32,77] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@c061c13d], [string], [org.hsqldb.types.TimestampData@7b5c7874]]]
[2020-07-30 19:06:32,77] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@c061c13d], [string], [org.hsqldb.types.TimestampData@7b5c7874]]]
[2020-07-30 19:06:32,77] [debug] /---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:32,77] [debug] | 1                         | 2               | 3   | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:32,77] [debug] | String                    | String          | Int | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,77] [debug] |---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:32,77] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | executionStatus |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,77] [debug] \---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:32,78] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,78] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [end], [javax.sql.rowset.serial.SerialClob@24ad307], [string], [org.hsqldb.types.TimestampData@7ba35adc]]]
[2020-07-30 19:06:32,78] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [end], [javax.sql.rowset.serial.SerialClob@24ad307], [string], [org.hsqldb.types.TimestampData@7ba35adc]]]
[2020-07-30 19:06:32,78] [debug] /---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,78] [debug] | 1                         | 2               | 3   | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,78] [debug] | String                    | String          | Int | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,78] [debug] |---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,78] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | end    |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,78] [debug] \---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,78] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,78] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [retryableFailure], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@7ba3849c]]]
[2020-07-30 19:06:32,78] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [retryableFailure], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@7ba3849c]]]
[2020-07-30 19:06:32,78] [debug] /---------------------------+-----------------+-----+-----+------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,78] [debug] | 1                         | 2               | 3   | 4   | 5                | 6    | 7       | 8                         |
[2020-07-30 19:06:32,78] [debug] | String                    | String          | Int | Int | String           | Clob | String  | Timestamp                 |
[2020-07-30 19:06:32,78] [debug] |---------------------------+-----------------+-----+-----+------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,78] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | retryableFailure |      | boolean | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,78] [debug] \---------------------------+-----------------+-----+-----+------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,79] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,79] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7ba2b27c]]]
[2020-07-30 19:06:32,79] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7ba2b27c]]]
[2020-07-30 19:06:32,79] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,79] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,79] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,79] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,79] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | failures[1676709593]:m... |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,79] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,80] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:32,80] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7ba10bf4]]]
[2020-07-30 19:06:32,80] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7ba10bf4]]]
[2020-07-30 19:06:32,80] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,80] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,80] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,80] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,80] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | failures[1676709593]:c... |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,80] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,81] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,81] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ba103a4]]]
[2020-07-30 19:06:32,81] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ba103a4]]]
[2020-07-30 19:06:32,81] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,81] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,81] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,81] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,81] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | failures[1676709593]:c... | NULL | NULL    | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,81] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,81] [debug] Execution of batch insert took 21µs
[2020-07-30 19:06:32,81] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7ba122e4]]]
[2020-07-30 19:06:32,81] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7ba122e4]]]
[2020-07-30 19:06:32,81] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,81] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,81] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,81] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,81] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | failures[1676709593]:c... |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,81] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,82] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,82] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ba1268c]]]
[2020-07-30 19:06:32,82] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ba1268c]]]
[2020-07-30 19:06:32,82] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,82] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,82] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,82] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,82] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | failures[1676709593]:c... | NULL | NULL    | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,82] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,82] [debug] Execution of batch insert took 18µs
[2020-07-30 19:06:32,82] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7ba14224]]]
[2020-07-30 19:06:32,82] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7ba14224]]]
[2020-07-30 19:06:32,82] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,82] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,82] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,82] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,82] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | failures[1676709593]:c... |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,82] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,83] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ba1695c]]]
[2020-07-30 19:06:32,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ba1695c]]]
[2020-07-30 19:06:32,83] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,83] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,83] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,83] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,83] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | failures[1676709593]:c... | NULL | NULL    | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,83] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,83] [debug] Execution of batch insert took 13µs
[2020-07-30 19:06:32,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7ba1889c]]]
[2020-07-30 19:06:32,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7ba1889c]]]
[2020-07-30 19:06:32,83] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,83] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,83] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,83] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,83] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | failures[1676709593]:c... |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,83] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,83] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ba18ca4]]]
[2020-07-30 19:06:32,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [2], [1], [failures[1676709593]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ba18ca4]]]
[2020-07-30 19:06:32,83] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,83] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,83] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,83] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,83] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 2   | 1   | failures[1676709593]:c... | NULL | NULL    | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,83] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,83] [debug] Execution of batch insert took 19µs
[2020-07-30 19:06:32,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@c061c13d], [string], [org.hsqldb.types.TimestampData@7bb5a934]]]
[2020-07-30 19:06:32,83] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [executionStatus], [javax.sql.rowset.serial.SerialClob@c061c13d], [string], [org.hsqldb.types.TimestampData@7bb5a934]]]
[2020-07-30 19:06:32,84] [debug] /---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------\
[2020-07-30 19:06:32,84] [debug] | 1                         | 2               | 3   | 4   | 5               | 6    | 7      | 8                         |
[2020-07-30 19:06:32,84] [debug] | String                    | String          | Int | Int | String          | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,84] [debug] |---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------|
[2020-07-30 19:06:32,84] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | executionStatus |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,84] [debug] \---------------------------+-----------------+-----+-----+-----------------+------+--------+---------------------------/
[2020-07-30 19:06:32,84] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,84] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [end], [javax.sql.rowset.serial.SerialClob@24b4766], [string], [org.hsqldb.types.TimestampData@7bb497f4]]]
[2020-07-30 19:06:32,84] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [end], [javax.sql.rowset.serial.SerialClob@24b4766], [string], [org.hsqldb.types.TimestampData@7bb497f4]]]
[2020-07-30 19:06:32,84] [debug] /---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------\
[2020-07-30 19:06:32,84] [debug] | 1                         | 2               | 3   | 4   | 5      | 6    | 7      | 8                         |
[2020-07-30 19:06:32,84] [debug] | String                    | String          | Int | Int | String | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,84] [debug] |---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------|
[2020-07-30 19:06:32,84] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | end    |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,84] [debug] \---------------------------+-----------------+-----+-----+--------+------+--------+---------------------------/
[2020-07-30 19:06:32,85] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,85] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [retryableFailure], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@7bb4c5fc]]]
[2020-07-30 19:06:32,85] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [retryableFailure], [javax.sql.rowset.serial.SerialClob@274afe41], [boolean], [org.hsqldb.types.TimestampData@7bb4c5fc]]]
[2020-07-30 19:06:32,85] [debug] /---------------------------+-----------------+-----+-----+------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,85] [debug] | 1                         | 2               | 3   | 4   | 5                | 6    | 7       | 8                         |
[2020-07-30 19:06:32,85] [debug] | String                    | String          | Int | Int | String           | Clob | String  | Timestamp                 |
[2020-07-30 19:06:32,85] [debug] |---------------------------+-----------------+-----+-----+------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,85] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | retryableFailure |      | boolean | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,85] [debug] \---------------------------+-----------------+-----+-----+------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,86] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,86] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7bbb5374]]]
[2020-07-30 19:06:32,86] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7bbb5374]]]
[2020-07-30 19:06:32,86] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,86] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,86] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,86] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,86] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | failures[1861051375]:m... |      | string | 2020-07-30 19:06:28.61396 |
[2020-07-30 19:06:32,86] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,87] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:32,87] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7bbb9df4]]]
[2020-07-30 19:06:32,87] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7bbb9df4]]]
[2020-07-30 19:06:32,87] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,87] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,87] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,87] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,87] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | failures[1861051375]:c... |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,87] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,88] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7bbbbd34]]]
[2020-07-30 19:06:32,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7bbbbd34]]]
[2020-07-30 19:06:32,88] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,88] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,88] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,88] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,88] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | failures[1861051375]:c... | NULL | NULL    | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,88] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,88] [debug] Execution of batch insert took 17µs
[2020-07-30 19:06:32,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7bbbd424]]]
[2020-07-30 19:06:32,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7bbbd424]]]
[2020-07-30 19:06:32,88] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,88] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,88] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,88] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,88] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | failures[1861051375]:c... |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,88] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,88] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7bbbcbcc]]]
[2020-07-30 19:06:32,88] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7bbbcbcc]]]
[2020-07-30 19:06:32,89] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,89] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,89] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,89] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,89] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | failures[1861051375]:c... | NULL | NULL    | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,89] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,89] [debug] Execution of batch insert took 19µs
[2020-07-30 19:06:32,89] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7bbbf35c]]]
[2020-07-30 19:06:32,89] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7bbbf35c]]]
[2020-07-30 19:06:32,89] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,89] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,89] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,89] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,89] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | failures[1861051375]:c... |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,89] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,89] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,89] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7bbbf764]]]
[2020-07-30 19:06:32,89] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7bbbf764]]]
[2020-07-30 19:06:32,89] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,89] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,89] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,89] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,89] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | failures[1861051375]:c... | NULL | NULL    | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,89] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,89] [debug] Execution of batch insert took 20µs
[2020-07-30 19:06:32,89] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7bba129c]]]
[2020-07-30 19:06:32,89] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7bba129c]]]
[2020-07-30 19:06:32,89] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,89] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,89] [debug] | String                    | String          | Int | Int | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,89] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,89] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | failures[1861051375]:c... |      | string | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,89] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,90] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:32,90] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7bba3a2c]]]
[2020-07-30 19:06:32,90] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [ScatterAt233_14], [0], [1], [failures[1861051375]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7bba3a2c]]]
[2020-07-30 19:06:32,90] [debug] /---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,90] [debug] | 1                         | 2               | 3   | 4   | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,90] [debug] | String                    | String          | Int | Int | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,90] [debug] |---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,90] [debug] | 8b168b0d-854f-4ba0-99b... | ScatterAt233_14 | 0   | 1   | failures[1861051375]:c... | NULL | NULL    | 2020-07-30 19:06:28.61... |
[2020-07-30 19:06:32,90] [debug] \---------------------------+-----------------+-----+-----+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,90] [debug] Execution of batch insert took 19µs
[2020-07-30 19:06:32,90] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[1189386375]:description], [javax.sql.rowset.serial.SerialClob@50617032], [string], [org.hsqldb.types.TimestampData@7a429ed5]]]
[2020-07-30 19:06:32,90] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[1189386375]:description], [javax.sql.rowset.serial.SerialClob@50617032], [string], [org.hsqldb.types.TimestampData@7a429ed5]]]
[2020-07-30 19:06:32,90] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,90] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,90] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,90] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,90] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | workflowProcessingEven... |      | string | 2020-07-30 19:06:29.62... |
[2020-07-30 19:06:32,90] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,92] [debug] Execution of batch insert took 10ms
[2020-07-30 19:06:32,92] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[1189386375]:cromwellId], [javax.sql.rowset.serial.SerialClob@b4eb6678], [string], [org.hsqldb.types.TimestampData@7a42be15]]]
[2020-07-30 19:06:32,92] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[1189386375]:cromwellId], [javax.sql.rowset.serial.SerialClob@b4eb6678], [string], [org.hsqldb.types.TimestampData@7a42be15]]]
[2020-07-30 19:06:32,92] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,92] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,92] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,92] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,92] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | workflowProcessingEven... |      | string | 2020-07-30 19:06:29.62... |
[2020-07-30 19:06:32,92] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,92] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:32,92] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[1189386375]:timestamp], [javax.sql.rowset.serial.SerialClob@6a3c5d42], [string], [org.hsqldb.types.TimestampData@7a53d4c5]]]
[2020-07-30 19:06:32,92] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[1189386375]:timestamp], [javax.sql.rowset.serial.SerialClob@6a3c5d42], [string], [org.hsqldb.types.TimestampData@7a53d4c5]]]
[2020-07-30 19:06:32,92] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,92] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,92] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,92] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,92] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | workflowProcessingEven... |      | string | 2020-07-30 19:06:29.62815 |
[2020-07-30 19:06:32,92] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,93] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:32,93] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[1189386375]:cromwellVersion], [javax.sql.rowset.serial.SerialClob@275f7d], [string], [org.hsqldb.types.TimestampData@7a522665]]]
[2020-07-30 19:06:32,93] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [workflowProcessingEvents[1189386375]:cromwellVersion], [javax.sql.rowset.serial.SerialClob@275f7d], [string], [org.hsqldb.types.TimestampData@7a522665]]]
[2020-07-30 19:06:32,93] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,93] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,93] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,93] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,93] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | workflowProcessingEven... |      | string | 2020-07-30 19:06:29.62... |
[2020-07-30 19:06:32,93] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,94] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,94] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:message], [javax.sql.rowset.serial.SerialClob@7d38607c], [string], [org.hsqldb.types.TimestampData@7ab1047d]]]
[2020-07-30 19:06:32,94] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:message], [javax.sql.rowset.serial.SerialClob@7d38607c], [string], [org.hsqldb.types.TimestampData@7ab1047d]]]
[2020-07-30 19:06:32,94] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,94] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,94] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,94] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,94] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:m... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:32,94] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,95] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:32,95] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7abae7dd]]]
[2020-07-30 19:06:32,95] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7abae7dd]]]
[2020-07-30 19:06:32,95] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,95] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,95] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,95] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,95] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:32,95] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,96] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,96] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7ab95215]]]
[2020-07-30 19:06:32,96] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7ab95215]]]
[2020-07-30 19:06:32,96] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,96] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,96] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,96] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,96] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:32,96] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,97] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,97] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab955c5]]]
[2020-07-30 19:06:32,97] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab955c5]]]
[2020-07-30 19:06:32,97] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,97] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,97] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,97] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,97] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63087 |
[2020-07-30 19:06:32,97] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,97] [debug] Execution of batch insert took 22µs
[2020-07-30 19:06:32,97] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7ab990bd]]]
[2020-07-30 19:06:32,97] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7ab990bd]]]
[2020-07-30 19:06:32,97] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,97] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,97] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,97] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,97] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:32,97] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,98] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:32,98] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab99445]]]
[2020-07-30 19:06:32,98] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab99445]]]
[2020-07-30 19:06:32,98] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,98] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,98] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,98] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,98] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:32,98] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,98] [debug] Execution of batch insert took 17µs
[2020-07-30 19:06:32,98] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7ab9b3fd]]]
[2020-07-30 19:06:32,98] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7ab9b3fd]]]
[2020-07-30 19:06:32,98] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:32,98] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:32,98] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:32,98] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:32,98] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:32,98] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:32,99] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:32,99] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab9b785]]]
[2020-07-30 19:06:32,99] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab9b785]]]
[2020-07-30 19:06:32,99] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:32,99] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:32,99] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:32,99] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:32,99] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:32,99] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:32,99] [debug] Execution of batch insert took 19µs
[2020-07-30 19:06:32,99] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7ab9df15]]]
[2020-07-30 19:06:32,99] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7ab9df15]]]
[2020-07-30 19:06:32,99] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+--------------------------\
[2020-07-30 19:06:32,99] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                        |
[2020-07-30 19:06:32,99] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                |
[2020-07-30 19:06:32,99] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+--------------------------|
[2020-07-30 19:06:32,99] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.6309 |
[2020-07-30 19:06:32,99] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+--------------------------/
[2020-07-30 19:06:33,00] [debug] Execution of batch insert took 9ms
[2020-07-30 19:06:33,00] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab9d33d]]]
[2020-07-30 19:06:33,00] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[0]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab9d33d]]]
[2020-07-30 19:06:33,00] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:33,00] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:33,00] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:33,00] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:33,00] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,00] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:33,00] [debug] Execution of batch insert took 18µs
[2020-07-30 19:06:33,00] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7ab838d5]]]
[2020-07-30 19:06:33,00] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7ab838d5]]]
[2020-07-30 19:06:33,00] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:33,00] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:33,00] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:33,00] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:33,00] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,00] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:33,01] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:33,01] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7ab85c3d]]]
[2020-07-30 19:06:33,01] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7ab85c3d]]]
[2020-07-30 19:06:33,01] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:33,01] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:33,01] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:33,01] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:33,01] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,01] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:33,01] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:33,01] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab853c5]]]
[2020-07-30 19:06:33,01] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab853c5]]]
[2020-07-30 19:06:33,01] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:33,01] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:33,01] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:33,01] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:33,01] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,02] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:33,02] [debug] Execution of batch insert took 18µs
[2020-07-30 19:06:33,02] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7ab86b35]]]
[2020-07-30 19:06:33,02] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7ab86b35]]]
[2020-07-30 19:06:33,02] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:33,02] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:33,02] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:33,02] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:33,02] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,02] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:33,02] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:33,02] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab862e5]]]
[2020-07-30 19:06:33,02] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab862e5]]]
[2020-07-30 19:06:33,02] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:33,02] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:33,02] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:33,02] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:33,02] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,02] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:33,02] [debug] Execution of batch insert took 17µs
[2020-07-30 19:06:33,02] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7ab88a75]]]
[2020-07-30 19:06:33,02] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7ab88a75]]]
[2020-07-30 19:06:33,02] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:33,02] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:33,02] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:33,02] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:33,02] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,02] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:33,03] [debug] Execution of batch insert took 6ms
[2020-07-30 19:06:33,03] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab88e1d]]]
[2020-07-30 19:06:33,03] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab88e1d]]]
[2020-07-30 19:06:33,03] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:33,03] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:33,03] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:33,03] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:33,03] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,03] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:33,03] [debug] Execution of batch insert took 19µs
[2020-07-30 19:06:33,03] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7ab8ad65]]]
[2020-07-30 19:06:33,03] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7ab8ad65]]]
[2020-07-30 19:06:33,03] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:33,03] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:33,03] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:33,03] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:33,03] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,03] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:33,04] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:33,04] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab8a10d]]]
[2020-07-30 19:06:33,04] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[1]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7ab8a10d]]]
[2020-07-30 19:06:33,04] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:33,04] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:33,04] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:33,04] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:33,04] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,04] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:33,04] [debug] Execution of batch insert took 22µs
[2020-07-30 19:06:33,04] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7ab8f435]]]
[2020-07-30 19:06:33,04] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@a71f0f48], [string], [org.hsqldb.types.TimestampData@7ab8f435]]]
[2020-07-30 19:06:33,04] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:33,04] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:33,04] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:33,04] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:33,04] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,04] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:33,05] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:33,05] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7abf3afd]]]
[2020-07-30 19:06:33,05] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[0]:message], [javax.sql.rowset.serial.SerialClob@75cdaf74], [string], [org.hsqldb.types.TimestampData@7abf3afd]]]
[2020-07-30 19:06:33,05] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:33,05] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:33,05] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:33,05] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:33,05] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,05] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:33,06] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:33,06] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7abf32ad]]]
[2020-07-30 19:06:33,06] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[0]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7abf32ad]]]
[2020-07-30 19:06:33,06] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:33,06] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:33,06] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:33,06] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:33,06] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,06] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:33,06] [debug] Execution of batch insert took 19µs
[2020-07-30 19:06:33,06] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7abf5a3d]]]
[2020-07-30 19:06:33,06] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[1]:message], [javax.sql.rowset.serial.SerialClob@94151af4], [string], [org.hsqldb.types.TimestampData@7abf5a3d]]]
[2020-07-30 19:06:33,06] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:33,06] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:33,06] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:33,06] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:33,06] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,06] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:33,06] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:33,06] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7abf59c5]]]
[2020-07-30 19:06:33,06] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[1]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7abf59c5]]]
[2020-07-30 19:06:33,07] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:33,07] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:33,07] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:33,07] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:33,07] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,07] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:33,07] [debug] Execution of batch insert took 21µs
[2020-07-30 19:06:33,07] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7abf4155]]]
[2020-07-30 19:06:33,07] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[2]:message], [javax.sql.rowset.serial.SerialClob@1701e980], [string], [org.hsqldb.types.TimestampData@7abf4155]]]
[2020-07-30 19:06:33,07] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:33,07] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:33,07] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:33,07] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:33,07] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,07] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:33,07] [debug] Execution of batch insert took 7ms
[2020-07-30 19:06:33,07] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7abf457d]]]
[2020-07-30 19:06:33,07] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[2]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7abf457d]]]
[2020-07-30 19:06:33,07] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:33,07] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:33,07] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:33,07] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:33,07] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,07] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:33,07] [debug] Execution of batch insert took 26µs
[2020-07-30 19:06:33,07] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7abf9845]]]
[2020-07-30 19:06:33,07] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[3]:message], [javax.sql.rowset.serial.SerialClob@e86f2914], [string], [org.hsqldb.types.TimestampData@7abf9845]]]
[2020-07-30 19:06:33,07] [debug] /---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------\
[2020-07-30 19:06:33,08] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7      | 8                         |
[2020-07-30 19:06:33,08] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | Clob | String | Timestamp                 |
[2020-07-30 19:06:33,08] [debug] |---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------|
[2020-07-30 19:06:33,08] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... |      | string | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,08] [debug] \---------------------------+---------+---------+---------+---------------------------+------+--------+---------------------------/
[2020-07-30 19:06:33,08] [debug] Execution of batch insert took 8ms
[2020-07-30 19:06:33,08] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7abf9c6d]]]
[2020-07-30 19:06:33,08] [debug] Executing batch insert: HikariProxyPreparedStatement@1447881303 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5f425c92[sql=[insert into "METADATA_ENTRY" ("WORKFLOW_EXECUTION_UUID","CALL_FQN","JOB_SCATTER_INDEX","JOB_RETRY_ATTEMPT","METADATA_KEY","METADATA_VALUE","METADATA_VALUE_TYPE","METADATA_TIMESTAMP")  values (?,?,?,?,?,?,?,?)], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [null], [null], [null], [failures[1609096545]:causedBy[2]:causedBy[3]:causedBy[]], [null], [null], [org.hsqldb.types.TimestampData@7abf9c6d]]]
[2020-07-30 19:06:33,08] [debug] /---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------\
[2020-07-30 19:06:33,08] [debug] | 1                         | 2       | 3       | 4       | 5                         | 6    | 7       | 8                         |
[2020-07-30 19:06:33,08] [debug] | String                    | VARCHAR | INTEGER | INTEGER | String                    | CLOB | VARCHAR | Timestamp                 |
[2020-07-30 19:06:33,08] [debug] |---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------|
[2020-07-30 19:06:33,08] [debug] | 8b168b0d-854f-4ba0-99b... | NULL    | NULL    | NULL    | failures[1609096545]:c... | NULL | NULL    | 2020-07-30 19:06:29.63... |
[2020-07-30 19:06:33,08] [debug] \---------------------------+---------+---------+---------+---------------------------+------+---------+---------------------------/
[2020-07-30 19:06:33,08] [debug] Execution of batch insert took 23µs
[2020-07-30 19:06:33,10] [debug] Execution of batch took 14ms
[2020-07-30 19:06:33,39] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:33,39] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:33,39] [debug] #3: StartTransaction
[2020-07-30 19:06:33,39] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:33,39] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:33,39] [debug] Executing prepared statement: HikariProxyPreparedStatement@948399600 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@f1a5326[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:33,39] [debug] Executing prepared statement: HikariProxyPreparedStatement@948399600 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@f1a5326[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:33,39] [debug] /------\
[2020-07-30 19:06:33,39] [debug] | 1    |
[2020-07-30 19:06:33,39] [debug] | Long |
[2020-07-30 19:06:33,39] [debug] |------|
[2020-07-30 19:06:33,39] [debug] | 5000 |
[2020-07-30 19:06:33,39] [debug] \------/
[2020-07-30 19:06:33,39] [debug] Execution of prepared statement took 632µs
[2020-07-30 19:06:33,40] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------------+---------------------+----------------------+---------------------\
[2020-07-30 19:06:33,40] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6                    | 7                   | 8                    | 9                   |
[2020-07-30 19:06:33,40] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE       | METADATA_VALUE_TYPE | METADATA_TIMESTAMP   | METADATA_JOURNAL_ID |
[2020-07-30 19:06:33,40] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------------+---------------------+----------------------+---------------------|
[2020-07-30 19:06:33,40] [debug] | c0bf4f0d-06fe-4de... | NULL     | NULL              | NULL              | status       | org.hsqldb.jdbc.J... | string              | 2020-07-30 19:06:... | 9266                |
[2020-07-30 19:06:33,40] [debug] | 4112ebff-e447-43a... | NULL     | NULL              | NULL              | status       | org.hsqldb.jdbc.J... | string              | 2020-07-30 19:06:... | 9267                |
[2020-07-30 19:06:33,40] [debug] | 4112ebff-e447-43a... | NULL     | NULL              | NULL              | start        | org.hsqldb.jdbc.J... | string              | 2020-07-30 19:06:... | 9268                |
[2020-07-30 19:06:33,40] [debug] | 4112ebff-e447-43a... | NULL     | NULL              | NULL              | status       | org.hsqldb.jdbc.J... | string              | 2020-07-30 19:06:... | 9269                |
[2020-07-30 19:06:33,40] [debug] | c0bf4f0d-06fe-4de... | NULL     | NULL              | NULL              | start        | org.hsqldb.jdbc.J... | string              | 2020-07-30 19:06:... | 9270                |
[2020-07-30 19:06:33,40] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------------+---------------------+----------------------+---------------------/
[2020-07-30 19:06:33,40] [debug] 6 more rows read (11 total)
[2020-07-30 19:06:33,40] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?]
[2020-07-30 19:06:33,40] [debug] Preparing statement: select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:33,40] [debug] Executing prepared statement: HikariProxyPreparedStatement@1037910238 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@70362486[sql=[select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:33,40] [debug] Executing prepared statement: HikariProxyPreparedStatement@1037910238 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@70362486[sql=[select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:33,40] [debug] /---------------------------\
[2020-07-30 19:06:33,40] [debug] | 1                         |
[2020-07-30 19:06:33,40] [debug] | String                    |
[2020-07-30 19:06:33,40] [debug] |---------------------------|
[2020-07-30 19:06:33,40] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:33,40] [debug] \---------------------------/
[2020-07-30 19:06:33,40] [debug] Execution of prepared statement took 199µs
[2020-07-30 19:06:33,41] [debug] /----------------------+----------------------+-----------------+----------------------+---------------+----------------------+----------------------+----------------------+----------------------\
[2020-07-30 19:06:33,41] [debug] | 1                    | 2                    | 3               | 4                    | 5             | 6                    | 7                    | 8                    | 9                    |
[2020-07-30 19:06:33,41] [debug] | WORKFLOW_EXECUTIO... | WORKFLOW_NAME        | WORKFLOW_STATUS | START_TIMESTAMP      | END_TIMESTAMP | SUBMISSION_TIMESTAMP | PARENT_WORKFLOW_E... | ROOT_WORKFLOW_EXE... | METADATA_ARCHIVE_... |
[2020-07-30 19:06:33,41] [debug] |----------------------+----------------------+-----------------+----------------------+---------------+----------------------+----------------------+----------------------+----------------------|
[2020-07-30 19:06:33,41] [debug] | 8b168b0d-854f-4ba... | bamMergePreproces... | Running         | 2020-07-30 19:06:... | NULL          | 2020-07-30 19:06:... | NULL                 | NULL                 | NULL                 |
[2020-07-30 19:06:33,41] [debug] \----------------------+----------------------+-----------------+----------------------+---------------+----------------------+----------------------+----------------------+----------------------/
[2020-07-30 19:06:33,41] [debug] #6: success (Some(WorkflowMetadataSummaryEntry(8b168b0d-854f-4ba0-99b6-35b7259a96fc,Some(bamMergePreprocessing),Some(Running),Some(2020-07-30 19:06:13.152),None,Some(2020-07-30 19:06:13.041),None,None,None,None)),WorkflowMetadataSummaryEntry(8b168b0d-854f-4ba0-99b6-35b7259a96fc,Some(bamMergePreprocessing),Some(Failed),Some(2020-07-30 19:06:13.152),Some(2020-07-30 19:06:29.626),Some(2020-07-30 19:06:13.041),None,None,None,None))
[2020-07-30 19:06:33,41] [debug] #7: update [update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?]
[2020-07-30 19:06:33,41] [debug] Preparing statement: update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:33,41] [debug] Executing prepared update: HikariProxyPreparedStatement@736742536 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@61487fb7[sql=[update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing], [Failed], [org.hsqldb.types.TimestampData@562c4c25], [org.hsqldb.types.TimestampData@7a731ab5], [org.hsqldb.types.TimestampData@5d528665], [null], [null], [null], [8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:33,41] [debug] Executing prepared update: HikariProxyPreparedStatement@736742536 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@61487fb7[sql=[update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc], [bamMergePreprocessing], [Failed], [org.hsqldb.types.TimestampData@562c4c25], [org.hsqldb.types.TimestampData@7a731ab5], [org.hsqldb.types.TimestampData@5d528665], [null], [null], [null], [8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:33,41] [debug] /---------------------------+-----------------------+--------+-------------------------+-------------------------+-------------------------+---------+---------+---------+---------------------------\
[2020-07-30 19:06:33,41] [debug] | 1                         | 2                     | 3      | 4                       | 5                       | 6                       | 7       | 8       | 9       | 10                        |
[2020-07-30 19:06:33,41] [debug] | String                    | String                | String | Timestamp               | Timestamp               | Timestamp               | VARCHAR | VARCHAR | VARCHAR | String                    |
[2020-07-30 19:06:33,41] [debug] |---------------------------+-----------------------+--------+-------------------------+-------------------------+-------------------------+---------+---------+---------+---------------------------|
[2020-07-30 19:06:33,41] [debug] | 8b168b0d-854f-4ba0-99b... | bamMergePreprocessing | Failed | 2020-07-30 19:06:13.152 | 2020-07-30 19:06:29.626 | 2020-07-30 19:06:13.041 | NULL    | NULL    | NULL    | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:33,41] [debug] \---------------------------+-----------------------+--------+-------------------------+-------------------------+-------------------------+---------+---------+---------+---------------------------/
[2020-07-30 19:06:33,41] [debug] Execution of prepared update took 519µs
[2020-07-30 19:06:33,41] [debug] #8: success ()
[2020-07-30 19:06:33,41] [debug] #9: success ()
[2020-07-30 19:06:33,41] [debug] #10: success ()
[2020-07-30 19:06:33,41] [debug] #11: StreamingInvokerAction$HeadOptionAction [select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?]
[2020-07-30 19:06:33,41] [debug] Preparing statement: select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:33,41] [debug] Executing prepared statement: HikariProxyPreparedStatement@930973102 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7af314d4[sql=[select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886]]]
[2020-07-30 19:06:33,41] [debug] Executing prepared statement: HikariProxyPreparedStatement@930973102 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7af314d4[sql=[select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886]]]
[2020-07-30 19:06:33,42] [debug] /---------------------------\
[2020-07-30 19:06:33,42] [debug] | 1                         |
[2020-07-30 19:06:33,42] [debug] | String                    |
[2020-07-30 19:06:33,42] [debug] |---------------------------|
[2020-07-30 19:06:33,42] [debug] | f0a69e19-38c5-4084-ae3... |
[2020-07-30 19:06:33,42] [debug] \---------------------------/
[2020-07-30 19:06:33,42] [debug] Execution of prepared statement took 154µs
[2020-07-30 19:06:33,42] [debug] /----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------\
[2020-07-30 19:06:33,42] [debug] | 1                    | 2             | 3               | 4               | 5             | 6                    | 7                    | 8                    | 9                    |
[2020-07-30 19:06:33,42] [debug] | WORKFLOW_EXECUTIO... | WORKFLOW_NAME | WORKFLOW_STATUS | START_TIMESTAMP | END_TIMESTAMP | SUBMISSION_TIMESTAMP | PARENT_WORKFLOW_E... | ROOT_WORKFLOW_EXE... | METADATA_ARCHIVE_... |
[2020-07-30 19:06:33,42] [debug] |----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------|
[2020-07-30 19:06:33,42] [debug] \----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------/
[2020-07-30 19:06:33,42] [debug] #12: success (None,WorkflowMetadataSummaryEntry(f0a69e19-38c5-4084-ae3f-c9a675ab6886,None,Some(Running),Some(2020-07-30 19:06:28.594),None,None,None,None,None,None))
[2020-07-30 19:06:33,42] [debug] #13: update [update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?]
[2020-07-30 19:06:33,42] [debug] Preparing statement: update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:33,42] [debug] Executing prepared update: HikariProxyPreparedStatement@584088773 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@470ebd[sql=[update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886], [null], [Running], [org.hsqldb.types.TimestampData@7c44a2b4], [null], [null], [null], [null], [null], [f0a69e19-38c5-4084-ae3f-c9a675ab6886]]]
[2020-07-30 19:06:33,42] [debug] Executing prepared update: HikariProxyPreparedStatement@584088773 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@470ebd[sql=[update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886], [null], [Running], [org.hsqldb.types.TimestampData@7c44a2b4], [null], [null], [null], [null], [null], [f0a69e19-38c5-4084-ae3f-c9a675ab6886]]]
[2020-07-30 19:06:33,42] [debug] /---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------+---------------------------\
[2020-07-30 19:06:33,42] [debug] | 1                         | 2       | 3       | 4                       | 5         | 6         | 7       | 8       | 9       | 10                        |
[2020-07-30 19:06:33,42] [debug] | String                    | VARCHAR | String  | Timestamp               | TIMESTAMP | TIMESTAMP | VARCHAR | VARCHAR | VARCHAR | String                    |
[2020-07-30 19:06:33,42] [debug] |---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------+---------------------------|
[2020-07-30 19:06:33,42] [debug] | f0a69e19-38c5-4084-ae3... | NULL    | Running | 2020-07-30 19:06:28.594 | NULL      | NULL      | NULL    | NULL    | NULL    | f0a69e19-38c5-4084-ae3... |
[2020-07-30 19:06:33,42] [debug] \---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------+---------------------------/
[2020-07-30 19:06:33,42] [debug] Execution of prepared update took 190µs
[2020-07-30 19:06:33,42] [debug] #14: SingleInsertAction [insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)]
[2020-07-30 19:06:33,42] [debug] Preparing insert statement (returning: WORKFLOW_METADATA_SUMMARY_ENTRY_ID): insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)
[2020-07-30 19:06:33,42] [debug] Executing prepared update: HikariProxyPreparedStatement@1003200836 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3835e2f4[sql=[insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886], [null], [Running], [org.hsqldb.types.TimestampData@7c44a2b4], [null], [null], [null], [null], [null]]]
[2020-07-30 19:06:33,42] [debug] Executing prepared update: HikariProxyPreparedStatement@1003200836 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@3835e2f4[sql=[insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)], parameters=[[f0a69e19-38c5-4084-ae3f-c9a675ab6886], [null], [Running], [org.hsqldb.types.TimestampData@7c44a2b4], [null], [null], [null], [null], [null]]]
[2020-07-30 19:06:33,42] [debug] /---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------\
[2020-07-30 19:06:33,42] [debug] | 1                         | 2       | 3       | 4                       | 5         | 6         | 7       | 8       | 9       |
[2020-07-30 19:06:33,42] [debug] | String                    | VARCHAR | String  | Timestamp               | TIMESTAMP | TIMESTAMP | VARCHAR | VARCHAR | VARCHAR |
[2020-07-30 19:06:33,42] [debug] |---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------|
[2020-07-30 19:06:33,42] [debug] | f0a69e19-38c5-4084-ae3... | NULL    | Running | 2020-07-30 19:06:28.594 | NULL      | NULL      | NULL    | NULL    | NULL    |
[2020-07-30 19:06:33,42] [debug] \---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------/
[2020-07-30 19:06:33,42] [debug] Execution of prepared update took 275µs
[2020-07-30 19:06:33,42] [debug] #15: success ()
[2020-07-30 19:06:33,42] [debug] #16: success ()
[2020-07-30 19:06:33,42] [debug] #17: StreamingInvokerAction$HeadOptionAction [select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?]
[2020-07-30 19:06:33,42] [debug] Preparing statement: select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:33,42] [debug] Executing prepared statement: HikariProxyPreparedStatement@1274514795 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@73fd574f[sql=[select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536]]]
[2020-07-30 19:06:33,42] [debug] Executing prepared statement: HikariProxyPreparedStatement@1274514795 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@73fd574f[sql=[select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536]]]
[2020-07-30 19:06:33,42] [debug] /---------------------------\
[2020-07-30 19:06:33,42] [debug] | 1                         |
[2020-07-30 19:06:33,42] [debug] | String                    |
[2020-07-30 19:06:33,42] [debug] |---------------------------|
[2020-07-30 19:06:33,42] [debug] | 4112ebff-e447-43a8-802... |
[2020-07-30 19:06:33,42] [debug] \---------------------------/
[2020-07-30 19:06:33,42] [debug] Execution of prepared statement took 134µs
[2020-07-30 19:06:33,42] [debug] /----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------\
[2020-07-30 19:06:33,42] [debug] | 1                    | 2             | 3               | 4               | 5             | 6                    | 7                    | 8                    | 9                    |
[2020-07-30 19:06:33,42] [debug] | WORKFLOW_EXECUTIO... | WORKFLOW_NAME | WORKFLOW_STATUS | START_TIMESTAMP | END_TIMESTAMP | SUBMISSION_TIMESTAMP | PARENT_WORKFLOW_E... | ROOT_WORKFLOW_EXE... | METADATA_ARCHIVE_... |
[2020-07-30 19:06:33,42] [debug] |----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------|
[2020-07-30 19:06:33,42] [debug] \----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------/
[2020-07-30 19:06:33,42] [debug] #18: success (None,WorkflowMetadataSummaryEntry(4112ebff-e447-43a8-8024-de88f9c8a536,None,Some(Running),Some(2020-07-30 19:06:28.592),None,None,None,None,None,None))
[2020-07-30 19:06:33,42] [debug] #19: update [update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?]
[2020-07-30 19:06:33,42] [debug] Preparing statement: update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:33,42] [debug] Executing prepared update: HikariProxyPreparedStatement@356682193 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2f7e939[sql=[update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536], [null], [Running], [org.hsqldb.types.TimestampData@7c6a2e34], [null], [null], [null], [null], [null], [4112ebff-e447-43a8-8024-de88f9c8a536]]]
[2020-07-30 19:06:33,42] [debug] Executing prepared update: HikariProxyPreparedStatement@356682193 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2f7e939[sql=[update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536], [null], [Running], [org.hsqldb.types.TimestampData@7c6a2e34], [null], [null], [null], [null], [null], [4112ebff-e447-43a8-8024-de88f9c8a536]]]
[2020-07-30 19:06:33,42] [debug] /---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------+---------------------------\
[2020-07-30 19:06:33,42] [debug] | 1                         | 2       | 3       | 4                       | 5         | 6         | 7       | 8       | 9       | 10                        |
[2020-07-30 19:06:33,42] [debug] | String                    | VARCHAR | String  | Timestamp               | TIMESTAMP | TIMESTAMP | VARCHAR | VARCHAR | VARCHAR | String                    |
[2020-07-30 19:06:33,42] [debug] |---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------+---------------------------|
[2020-07-30 19:06:33,42] [debug] | 4112ebff-e447-43a8-802... | NULL    | Running | 2020-07-30 19:06:28.592 | NULL      | NULL      | NULL    | NULL    | NULL    | 4112ebff-e447-43a8-802... |
[2020-07-30 19:06:33,42] [debug] \---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------+---------------------------/
[2020-07-30 19:06:33,43] [debug] Execution of prepared update took 196µs
[2020-07-30 19:06:33,43] [debug] #20: SingleInsertAction [insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)]
[2020-07-30 19:06:33,43] [debug] Preparing insert statement (returning: WORKFLOW_METADATA_SUMMARY_ENTRY_ID): insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)
[2020-07-30 19:06:33,43] [debug] Executing prepared update: HikariProxyPreparedStatement@1846554354 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6a60e684[sql=[insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536], [null], [Running], [org.hsqldb.types.TimestampData@7c6a2e34], [null], [null], [null], [null], [null]]]
[2020-07-30 19:06:33,43] [debug] Executing prepared update: HikariProxyPreparedStatement@1846554354 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6a60e684[sql=[insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)], parameters=[[4112ebff-e447-43a8-8024-de88f9c8a536], [null], [Running], [org.hsqldb.types.TimestampData@7c6a2e34], [null], [null], [null], [null], [null]]]
[2020-07-30 19:06:33,43] [debug] /---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------\
[2020-07-30 19:06:33,43] [debug] | 1                         | 2       | 3       | 4                       | 5         | 6         | 7       | 8       | 9       |
[2020-07-30 19:06:33,43] [debug] | String                    | VARCHAR | String  | Timestamp               | TIMESTAMP | TIMESTAMP | VARCHAR | VARCHAR | VARCHAR |
[2020-07-30 19:06:33,43] [debug] |---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------|
[2020-07-30 19:06:33,43] [debug] | 4112ebff-e447-43a8-802... | NULL    | Running | 2020-07-30 19:06:28.592 | NULL      | NULL      | NULL    | NULL    | NULL    |
[2020-07-30 19:06:33,43] [debug] \---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------/
[2020-07-30 19:06:33,43] [debug] Execution of prepared update took 152µs
[2020-07-30 19:06:33,43] [debug] #21: success ()
[2020-07-30 19:06:33,43] [debug] #22: success ()
[2020-07-30 19:06:33,43] [debug] #23: StreamingInvokerAction$HeadOptionAction [select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?]
[2020-07-30 19:06:33,43] [debug] Preparing statement: select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:33,43] [debug] Executing prepared statement: HikariProxyPreparedStatement@1973107257 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4898ac32[sql=[select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5]]]
[2020-07-30 19:06:33,43] [debug] Executing prepared statement: HikariProxyPreparedStatement@1973107257 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@4898ac32[sql=[select "WORKFLOW_EXECUTION_UUID", "WORKFLOW_NAME", "WORKFLOW_STATUS", "START_TIMESTAMP", "END_TIMESTAMP", "SUBMISSION_TIMESTAMP", "PARENT_WORKFLOW_EXECUTION_UUID", "ROOT_WORKFLOW_EXECUTION_UUID", "METADATA_ARCHIVE_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5]]]
[2020-07-30 19:06:33,43] [debug] /---------------------------\
[2020-07-30 19:06:33,43] [debug] | 1                         |
[2020-07-30 19:06:33,43] [debug] | String                    |
[2020-07-30 19:06:33,43] [debug] |---------------------------|
[2020-07-30 19:06:33,43] [debug] | c0bf4f0d-06fe-4de2-bc4... |
[2020-07-30 19:06:33,43] [debug] \---------------------------/
[2020-07-30 19:06:33,43] [debug] Execution of prepared statement took 170µs
[2020-07-30 19:06:33,43] [debug] /----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------\
[2020-07-30 19:06:33,43] [debug] | 1                    | 2             | 3               | 4               | 5             | 6                    | 7                    | 8                    | 9                    |
[2020-07-30 19:06:33,43] [debug] | WORKFLOW_EXECUTIO... | WORKFLOW_NAME | WORKFLOW_STATUS | START_TIMESTAMP | END_TIMESTAMP | SUBMISSION_TIMESTAMP | PARENT_WORKFLOW_E... | ROOT_WORKFLOW_EXE... | METADATA_ARCHIVE_... |
[2020-07-30 19:06:33,43] [debug] |----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------|
[2020-07-30 19:06:33,43] [debug] \----------------------+---------------+-----------------+-----------------+---------------+----------------------+----------------------+----------------------+----------------------/
[2020-07-30 19:06:33,43] [debug] #24: success (None,WorkflowMetadataSummaryEntry(c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5,None,Some(Running),Some(2020-07-30 19:06:28.593),None,None,None,None,None,None))
[2020-07-30 19:06:33,43] [debug] #25: update [update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?]
[2020-07-30 19:06:33,43] [debug] Preparing statement: update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:33,43] [debug] Executing prepared update: HikariProxyPreparedStatement@1830592065 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@a51c17[sql=[update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5], [null], [Running], [org.hsqldb.types.TimestampData@7c7b6c74], [null], [null], [null], [null], [null], [c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5]]]
[2020-07-30 19:06:33,43] [debug] Executing prepared update: HikariProxyPreparedStatement@1830592065 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@a51c17[sql=[update "WORKFLOW_METADATA_SUMMARY_ENTRY" set "WORKFLOW_EXECUTION_UUID" = ?, "WORKFLOW_NAME" = ?, "WORKFLOW_STATUS" = ?, "START_TIMESTAMP" = ?, "END_TIMESTAMP" = ?, "SUBMISSION_TIMESTAMP" = ?, "PARENT_WORKFLOW_EXECUTION_UUID" = ?, "ROOT_WORKFLOW_EXECUTION_UUID" = ?, "METADATA_ARCHIVE_STATUS" = ? where "WORKFLOW_METADATA_SUMMARY_ENTRY"."WORKFLOW_EXECUTION_UUID" = ?], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5], [null], [Running], [org.hsqldb.types.TimestampData@7c7b6c74], [null], [null], [null], [null], [null], [c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5]]]
[2020-07-30 19:06:33,43] [debug] /---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------+---------------------------\
[2020-07-30 19:06:33,43] [debug] | 1                         | 2       | 3       | 4                       | 5         | 6         | 7       | 8       | 9       | 10                        |
[2020-07-30 19:06:33,43] [debug] | String                    | VARCHAR | String  | Timestamp               | TIMESTAMP | TIMESTAMP | VARCHAR | VARCHAR | VARCHAR | String                    |
[2020-07-30 19:06:33,43] [debug] |---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------+---------------------------|
[2020-07-30 19:06:33,43] [debug] | c0bf4f0d-06fe-4de2-bc4... | NULL    | Running | 2020-07-30 19:06:28.593 | NULL      | NULL      | NULL    | NULL    | NULL    | c0bf4f0d-06fe-4de2-bc4... |
[2020-07-30 19:06:33,43] [debug] \---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------+---------------------------/
[2020-07-30 19:06:33,43] [debug] Execution of prepared update took 113µs
[2020-07-30 19:06:33,43] [debug] #26: SingleInsertAction [insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)]
[2020-07-30 19:06:33,43] [debug] Preparing insert statement (returning: WORKFLOW_METADATA_SUMMARY_ENTRY_ID): insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)
[2020-07-30 19:06:33,43] [debug] Executing prepared update: HikariProxyPreparedStatement@703800415 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7416295a[sql=[insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5], [null], [Running], [org.hsqldb.types.TimestampData@7c7b6c74], [null], [null], [null], [null], [null]]]
[2020-07-30 19:06:33,43] [debug] Executing prepared update: HikariProxyPreparedStatement@703800415 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7416295a[sql=[insert into "WORKFLOW_METADATA_SUMMARY_ENTRY" ("WORKFLOW_EXECUTION_UUID","WORKFLOW_NAME","WORKFLOW_STATUS","START_TIMESTAMP","END_TIMESTAMP","SUBMISSION_TIMESTAMP","PARENT_WORKFLOW_EXECUTION_UUID","ROOT_WORKFLOW_EXECUTION_UUID","METADATA_ARCHIVE_STATUS")  values (?,?,?,?,?,?,?,?,?)], parameters=[[c0bf4f0d-06fe-4de2-bc4a-e744cfb5a1b5], [null], [Running], [org.hsqldb.types.TimestampData@7c7b6c74], [null], [null], [null], [null], [null]]]
[2020-07-30 19:06:33,43] [debug] /---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------\
[2020-07-30 19:06:33,43] [debug] | 1                         | 2       | 3       | 4                       | 5         | 6         | 7       | 8       | 9       |
[2020-07-30 19:06:33,43] [debug] | String                    | VARCHAR | String  | Timestamp               | TIMESTAMP | TIMESTAMP | VARCHAR | VARCHAR | VARCHAR |
[2020-07-30 19:06:33,43] [debug] |---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------|
[2020-07-30 19:06:33,43] [debug] | c0bf4f0d-06fe-4de2-bc4... | NULL    | Running | 2020-07-30 19:06:28.593 | NULL      | NULL      | NULL    | NULL    | NULL    |
[2020-07-30 19:06:33,43] [debug] \---------------------------+---------+---------+-------------------------+-----------+-----------+---------+---------+---------/
[2020-07-30 19:06:33,43] [debug] Execution of prepared update took 158µs
[2020-07-30 19:06:33,43] [debug] #27: success ()
[2020-07-30 19:06:33,43] [debug] #28: success ()
[2020-07-30 19:06:33,43] [debug] #29: success Vector()
[2020-07-30 19:06:33,43] [debug] #30: success ()
[2020-07-30 19:06:33,43] [debug] #31: success ((),Vector(9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9275, 9276))
[2020-07-30 19:06:33,43] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: Apply Function in
|     0: Path s2.METADATA_JOURNAL_ID : Long'
|     1: ProductNode
|       1: LiteralNode 9266 (volatileHint=false)
|       2: LiteralNode 9267 (volatileHint=false)
|       3: LiteralNode 9268 (volatileHint=false)
|       4: LiteralNode 9269 (volatileHint=false)
|       5: LiteralNode 9270 (volatileHint=false)
|       6: LiteralNode 9271 (volatileHint=false)
|       7: LiteralNode 9272 (volatileHint=false)
|       8: LiteralNode 9273 (volatileHint=false)
|       9: LiteralNode 9274 (volatileHint=false)
|       10: LiteralNode 9275 (volatileHint=false)
|       11: LiteralNode 9276 (volatileHint=false)

[2020-07-30 19:06:33,44] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:33,44] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: Apply Function in
|     0: Path s4.METADATA_JOURNAL_ID : Long'
|     1: ProductNode
|       1: LiteralNode 9266 (volatileHint=false)
|       2: LiteralNode 9267 (volatileHint=false)
|       3: LiteralNode 9268 (volatileHint=false)
|       4: LiteralNode 9269 (volatileHint=false)
|       5: LiteralNode 9270 (volatileHint=false)
|       6: LiteralNode 9271 (volatileHint=false)
|       7: LiteralNode 9272 (volatileHint=false)
|       8: LiteralNode 9273 (volatileHint=false)
|       9: LiteralNode 9274 (volatileHint=false)
|       10: LiteralNode 9275 (volatileHint=false)
|       11: LiteralNode 9276 (volatileHint=false)

[2020-07-30 19:06:33,44] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:33,44] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:33,44] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:33,44] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: Apply Function in : Boolean
|     0: Path s4.METADATA_JOURNAL_ID : Long'
|     1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|       1: LiteralNode 9266 (volatileHint=false) : Long'
|       2: LiteralNode 9267 (volatileHint=false) : Long'
|       3: LiteralNode 9268 (volatileHint=false) : Long'
|       4: LiteralNode 9269 (volatileHint=false) : Long'
|       5: LiteralNode 9270 (volatileHint=false) : Long'
|       6: LiteralNode 9271 (volatileHint=false) : Long'
|       7: LiteralNode 9272 (volatileHint=false) : Long'
|       8: LiteralNode 9273 (volatileHint=false) : Long'
|       9: LiteralNode 9274 (volatileHint=false) : Long'
|       10: LiteralNode 9275 (volatileHint=false) : Long'
|       11: LiteralNode 9276 (volatileHint=false) : Long'

[2020-07-30 19:06:33,44] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:33,44] [debug] Expanding tables in result type
[2020-07-30 19:06:33,44] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: Apply Function in : Boolean
|       0: Path s4.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9266 (volatileHint=false) : Long'
|         2: LiteralNode 9267 (volatileHint=false) : Long'
|         3: LiteralNode 9268 (volatileHint=false) : Long'
|         4: LiteralNode 9269 (volatileHint=false) : Long'
|         5: LiteralNode 9270 (volatileHint=false) : Long'
|         6: LiteralNode 9271 (volatileHint=false) : Long'
|         7: LiteralNode 9272 (volatileHint=false) : Long'
|         8: LiteralNode 9273 (volatileHint=false) : Long'
|         9: LiteralNode 9274 (volatileHint=false) : Long'
|         10: LiteralNode 9275 (volatileHint=false) : Long'
|         11: LiteralNode 9276 (volatileHint=false) : Long'
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,44] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: Apply Function in : Boolean
|       0: Path s4.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9266 (volatileHint=false) : Long'
|         2: LiteralNode 9267 (volatileHint=false) : Long'
|         3: LiteralNode 9268 (volatileHint=false) : Long'
|         4: LiteralNode 9269 (volatileHint=false) : Long'
|         5: LiteralNode 9270 (volatileHint=false) : Long'
|         6: LiteralNode 9271 (volatileHint=false) : Long'
|         7: LiteralNode 9272 (volatileHint=false) : Long'
|         8: LiteralNode 9273 (volatileHint=false) : Long'
|         9: LiteralNode 9274 (volatileHint=false) : Long'
|         10: LiteralNode 9275 (volatileHint=false) : Long'
|         11: LiteralNode 9276 (volatileHint=false) : Long'
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,44] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: Apply Function in : Boolean
|       0: Path s4.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9266 (volatileHint=false) : Long'
|         2: LiteralNode 9267 (volatileHint=false) : Long'
|         3: LiteralNode 9268 (volatileHint=false) : Long'
|         4: LiteralNode 9269 (volatileHint=false) : Long'
|         5: LiteralNode 9270 (volatileHint=false) : Long'
|         6: LiteralNode 9271 (volatileHint=false) : Long'
|         7: LiteralNode 9272 (volatileHint=false) : Long'
|         8: LiteralNode 9273 (volatileHint=false) : Long'
|         9: LiteralNode 9274 (volatileHint=false) : Long'
|         10: LiteralNode 9275 (volatileHint=false) : Long'
|         11: LiteralNode 9276 (volatileHint=false) : Long'
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,44] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:33,44] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: Apply Function in : Boolean
|       0: Path s4.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9266 (volatileHint=false) : Long'
|         2: LiteralNode 9267 (volatileHint=false) : Long'
|         3: LiteralNode 9268 (volatileHint=false) : Long'
|         4: LiteralNode 9269 (volatileHint=false) : Long'
|         5: LiteralNode 9270 (volatileHint=false) : Long'
|         6: LiteralNode 9271 (volatileHint=false) : Long'
|         7: LiteralNode 9272 (volatileHint=false) : Long'
|         8: LiteralNode 9273 (volatileHint=false) : Long'
|         9: LiteralNode 9274 (volatileHint=false) : Long'
|         10: LiteralNode 9275 (volatileHint=false) : Long'
|         11: LiteralNode 9276 (volatileHint=false) : Long'
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,44] [debug] Analyzing s4.METADATA_JOURNAL_ID with symbols 
| Path s4.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,44] [debug] Translated s4.METADATA_JOURNAL_ID to:
| Path s4.METADATA_JOURNAL_ID

[2020-07-30 19:06:33,44] [debug] Flattening projection t8
[2020-07-30 19:06:33,44] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,44] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:33,44] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:33,44] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:33,44] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:33,44] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:33,44] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: Apply Function in : Boolean
|       0: Path s4.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9266 (volatileHint=false) : Long'
|         2: LiteralNode 9267 (volatileHint=false) : Long'
|         3: LiteralNode 9268 (volatileHint=false) : Long'
|         4: LiteralNode 9269 (volatileHint=false) : Long'
|         5: LiteralNode 9270 (volatileHint=false) : Long'
|         6: LiteralNode 9271 (volatileHint=false) : Long'
|         7: LiteralNode 9272 (volatileHint=false) : Long'
|         8: LiteralNode 9273 (volatileHint=false) : Long'
|         9: LiteralNode 9274 (volatileHint=false) : Long'
|         10: LiteralNode 9275 (volatileHint=false) : Long'
|         11: LiteralNode 9276 (volatileHint=false) : Long'
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,44] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:33,44] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:33,44] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:33,44] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:33,44] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:33,44] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:33,44] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:33,44] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:33,44] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:33,44] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:33,44] [debug] Creating mapping from Long'
[2020-07-30 19:06:33,44] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: Apply Function in : Boolean
|         0: Path s4.METADATA_JOURNAL_ID : Long'
|         1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|           1: LiteralNode 9266 (volatileHint=false) : Long'
|           2: LiteralNode 9267 (volatileHint=false) : Long'
|           3: LiteralNode 9268 (volatileHint=false) : Long'
|           4: LiteralNode 9269 (volatileHint=false) : Long'
|           5: LiteralNode 9270 (volatileHint=false) : Long'
|           6: LiteralNode 9271 (volatileHint=false) : Long'
|           7: LiteralNode 9272 (volatileHint=false) : Long'
|           8: LiteralNode 9273 (volatileHint=false) : Long'
|           9: LiteralNode 9274 (volatileHint=false) : Long'
|           10: LiteralNode 9275 (volatileHint=false) : Long'
|           11: LiteralNode 9276 (volatileHint=false) : Long'
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:33,45] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:33,45] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:33,45] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:33,45] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: Apply Function in : Boolean
|         0: Path s4.METADATA_JOURNAL_ID : Long'
|         1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|           1: LiteralNode 9266 (volatileHint=false) : Long'
|           2: LiteralNode 9267 (volatileHint=false) : Long'
|           3: LiteralNode 9268 (volatileHint=false) : Long'
|           4: LiteralNode 9269 (volatileHint=false) : Long'
|           5: LiteralNode 9270 (volatileHint=false) : Long'
|           6: LiteralNode 9271 (volatileHint=false) : Long'
|           7: LiteralNode 9272 (volatileHint=false) : Long'
|           8: LiteralNode 9273 (volatileHint=false) : Long'
|           9: LiteralNode 9274 (volatileHint=false) : Long'
|           10: LiteralNode 9275 (volatileHint=false) : Long'
|           11: LiteralNode 9276 (volatileHint=false) : Long'
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:33,45] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:33,45] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:33,45] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:33,45] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:33,45] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:33,45] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,45] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:33,45] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: Apply Function in : Boolean
|     0: Path s4.METADATA_JOURNAL_ID : Long'
|     1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|       1: LiteralNode 9266 (volatileHint=false) : Long'
|       2: LiteralNode 9267 (volatileHint=false) : Long'
|       3: LiteralNode 9268 (volatileHint=false) : Long'
|       4: LiteralNode 9269 (volatileHint=false) : Long'
|       5: LiteralNode 9270 (volatileHint=false) : Long'
|       6: LiteralNode 9271 (volatileHint=false) : Long'
|       7: LiteralNode 9272 (volatileHint=false) : Long'
|       8: LiteralNode 9273 (volatileHint=false) : Long'
|       9: LiteralNode 9274 (volatileHint=false) : Long'
|       10: LiteralNode 9275 (volatileHint=false) : Long'
|       11: LiteralNode 9276 (volatileHint=false) : Long'

[2020-07-30 19:06:33,45] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: Apply Function in : Boolean
|     0: Path s13.METADATA_JOURNAL_ID : Long'
|     1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|       1: LiteralNode 9266 (volatileHint=false) : Long'
|       2: LiteralNode 9267 (volatileHint=false) : Long'
|       3: LiteralNode 9268 (volatileHint=false) : Long'
|       4: LiteralNode 9269 (volatileHint=false) : Long'
|       5: LiteralNode 9270 (volatileHint=false) : Long'
|       6: LiteralNode 9271 (volatileHint=false) : Long'
|       7: LiteralNode 9272 (volatileHint=false) : Long'
|       8: LiteralNode 9273 (volatileHint=false) : Long'
|       9: LiteralNode 9274 (volatileHint=false) : Long'
|       10: LiteralNode 9275 (volatileHint=false) : Long'
|       11: LiteralNode 9276 (volatileHint=false) : Long'

[2020-07-30 19:06:33,45] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,45] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: Apply Function in : Boolean
|     0: Path s13.METADATA_JOURNAL_ID : Long'
|     1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|       1: LiteralNode 9266 (volatileHint=false) : Long'
|       2: LiteralNode 9267 (volatileHint=false) : Long'
|       3: LiteralNode 9268 (volatileHint=false) : Long'
|       4: LiteralNode 9269 (volatileHint=false) : Long'
|       5: LiteralNode 9270 (volatileHint=false) : Long'
|       6: LiteralNode 9271 (volatileHint=false) : Long'
|       7: LiteralNode 9272 (volatileHint=false) : Long'
|       8: LiteralNode 9273 (volatileHint=false) : Long'
|       9: LiteralNode 9274 (volatileHint=false) : Long'
|       10: LiteralNode 9275 (volatileHint=false) : Long'
|       11: LiteralNode 9276 (volatileHint=false) : Long'

[2020-07-30 19:06:33,45] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:33,45] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:33,45] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: Apply Function in : Boolean
|       0: Path s13.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9266 (volatileHint=false) : Long'
|         2: LiteralNode 9267 (volatileHint=false) : Long'
|         3: LiteralNode 9268 (volatileHint=false) : Long'
|         4: LiteralNode 9269 (volatileHint=false) : Long'
|         5: LiteralNode 9270 (volatileHint=false) : Long'
|         6: LiteralNode 9271 (volatileHint=false) : Long'
|         7: LiteralNode 9272 (volatileHint=false) : Long'
|         8: LiteralNode 9273 (volatileHint=false) : Long'
|         9: LiteralNode 9274 (volatileHint=false) : Long'
|         10: LiteralNode 9275 (volatileHint=false) : Long'
|         11: LiteralNode 9276 (volatileHint=false) : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:33,45] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:33,45] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:33,45] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: Apply Function in : Boolean
|       0: Path s13.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9266 (volatileHint=false) : Long'
|         2: LiteralNode 9267 (volatileHint=false) : Long'
|         3: LiteralNode 9268 (volatileHint=false) : Long'
|         4: LiteralNode 9269 (volatileHint=false) : Long'
|         5: LiteralNode 9270 (volatileHint=false) : Long'
|         6: LiteralNode 9271 (volatileHint=false) : Long'
|         7: LiteralNode 9272 (volatileHint=false) : Long'
|         8: LiteralNode 9273 (volatileHint=false) : Long'
|         9: LiteralNode 9274 (volatileHint=false) : Long'
|         10: LiteralNode 9275 (volatileHint=false) : Long'
|         11: LiteralNode 9276 (volatileHint=false) : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:33,46] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: Apply Function in : Boolean
|       0: Path s13.METADATA_JOURNAL_ID : Long'
|       1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|         1: LiteralNode 9266 (volatileHint=false) : Long'
|         2: LiteralNode 9267 (volatileHint=false) : Long'
|         3: LiteralNode 9268 (volatileHint=false) : Long'
|         4: LiteralNode 9269 (volatileHint=false) : Long'
|         5: LiteralNode 9270 (volatileHint=false) : Long'
|         6: LiteralNode 9271 (volatileHint=false) : Long'
|         7: LiteralNode 9272 (volatileHint=false) : Long'
|         8: LiteralNode 9273 (volatileHint=false) : Long'
|         9: LiteralNode 9274 (volatileHint=false) : Long'
|         10: LiteralNode 9275 (volatileHint=false) : Long'
|         11: LiteralNode 9276 (volatileHint=false) : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:33,46] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:33,46] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:33,46] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(Apply Function in), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: Apply Function in : Boolean
|     0: Path s13.METADATA_JOURNAL_ID : Long'
|     1: ProductNode : (Long', Long', Long', Long', Long', Long', Long', Long', Long', Long', Long')
|       1: LiteralNode 9266 (volatileHint=false) : Long'
|       2: LiteralNode 9267 (volatileHint=false) : Long'
|       3: LiteralNode 9268 (volatileHint=false) : Long'
|       4: LiteralNode 9269 (volatileHint=false) : Long'
|       5: LiteralNode 9270 (volatileHint=false) : Long'
|       6: LiteralNode 9271 (volatileHint=false) : Long'
|       7: LiteralNode 9272 (volatileHint=false) : Long'
|       8: LiteralNode 9273 (volatileHint=false) : Long'
|       9: LiteralNode 9274 (volatileHint=false) : Long'
|       10: LiteralNode 9275 (volatileHint=false) : Long'
|       11: LiteralNode 9276 (volatileHint=false) : Long'

[2020-07-30 19:06:33,46] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:33,46] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9275, 9276)" : Vector[t12<(Long')>]

[2020-07-30 19:06:33,46] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9275, 9276)" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:33,46] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:33,46] [debug]       assignUniqueSymbols:    0.884191 ms
[2020-07-30 19:06:33,46] [debug]           unrollTailBinds:    0.082885 ms
[2020-07-30 19:06:33,46] [debug]                inferTypes:    0.211524 ms
[2020-07-30 19:06:33,46] [debug]              expandTables:    2.069519 ms
[2020-07-30 19:06:33,46] [debug]           forceOuterBinds:    0.828928 ms
[2020-07-30 19:06:33,46] [debug]         removeMappedTypes:    0.806991 ms
[2020-07-30 19:06:33,46] [debug]                expandSums:    0.054369 ms
[2020-07-30 19:06:33,46] [debug]             expandRecords:    0.678261 ms
[2020-07-30 19:06:33,46] [debug]        flattenProjections:    1.562166 ms
[2020-07-30 19:06:33,46] [debug]              rewriteJoins:    0.086384 ms
[2020-07-30 19:06:33,46] [debug]             verifySymbols:    0.076482 ms
[2020-07-30 19:06:33,46] [debug]             relabelUnions:    0.069587 ms
[2020-07-30 19:06:33,46] [debug]          createAggregates:    0.061296 ms
[2020-07-30 19:06:33,46] [debug]           resolveZipJoins:    0.067899 ms
[2020-07-30 19:06:33,46] [debug]          pruneProjections:    0.286058 ms
[2020-07-30 19:06:33,46] [debug]           rewriteDistinct:    0.060208 ms
[2020-07-30 19:06:33,46] [debug]    createResultSetMapping:    2.015377 ms
[2020-07-30 19:06:33,46] [debug]            hoistClientOps:    1.631360 ms
[2020-07-30 19:06:33,46] [debug]         reorderOperations:    0.124328 ms
[2020-07-30 19:06:33,46] [debug]     mergeToComprehensions:    6.182317 ms
[2020-07-30 19:06:33,46] [debug]            optimizeScalar:    0.113949 ms
[2020-07-30 19:06:33,46] [debug]          removeFieldNames:    2.344189 ms
[2020-07-30 19:06:33,46] [debug]      specializeParameters:    0.257031 ms
[2020-07-30 19:06:33,46] [debug]                   codeGen:    4.539429 ms
[2020-07-30 19:06:33,46] [debug]                     TOTAL:   25.094728 ms
[2020-07-30 19:06:33,46] [debug] #32: delete [delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9275, 9276)]
[2020-07-30 19:06:33,46] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9275, 9276)
[2020-07-30 19:06:33,46] [debug] Executing prepared update: HikariProxyPreparedStatement@646908190 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2fe86434[sql=[delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9275, 9276)]]
[2020-07-30 19:06:33,46] [debug] Executing prepared update: HikariProxyPreparedStatement@646908190 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2fe86434[sql=[delete from "SUMMARY_QUEUE_ENTRY" where "SUMMARY_QUEUE_ENTRY"."METADATA_JOURNAL_ID" in (9266, 9267, 9268, 9269, 9270, 9271, 9272, 9273, 9274, 9275, 9276)]]
[2020-07-30 19:06:33,46] [debug] Execution of prepared update took 538µs
[2020-07-30 19:06:33,46] [debug] #33: success 11
[2020-07-30 19:06:33,46] [debug] #34: Commit
[2020-07-30 19:06:33,47] [debug] #35: SetTransactionIsolation
[2020-07-30 19:06:33,47] [debug] #36: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:33,47] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:33,47] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:33,47] [debug] #3: StartTransaction
[2020-07-30 19:06:33,47] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:33,47] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:33,47] [debug] Executing prepared statement: HikariProxyPreparedStatement@1095691537 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2d6bf54c[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:33,47] [debug] Executing prepared statement: HikariProxyPreparedStatement@1095691537 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2d6bf54c[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:33,47] [debug] /---------------------------\
[2020-07-30 19:06:33,47] [debug] | 1                         |
[2020-07-30 19:06:33,47] [debug] | String                    |
[2020-07-30 19:06:33,47] [debug] |---------------------------|
[2020-07-30 19:06:33,47] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:33,47] [debug] \---------------------------/
[2020-07-30 19:06:33,47] [debug] Execution of prepared statement took 66µs
[2020-07-30 19:06:33,47] [debug] /------------------\
[2020-07-30 19:06:33,47] [debug] | 1                |
[2020-07-30 19:06:33,47] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:33,47] [debug] |------------------|
[2020-07-30 19:06:33,47] [debug] \------------------/
[2020-07-30 19:06:33,47] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:33,47] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:33,47] [debug] Executing prepared statement: HikariProxyPreparedStatement@1299770507 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@8e14834[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:33,47] [debug] Executing prepared statement: HikariProxyPreparedStatement@1299770507 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@8e14834[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:33,47] [debug] /---------------------------\
[2020-07-30 19:06:33,47] [debug] | 1                         |
[2020-07-30 19:06:33,47] [debug] | String                    |
[2020-07-30 19:06:33,47] [debug] |---------------------------|
[2020-07-30 19:06:33,47] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:33,47] [debug] \---------------------------/
[2020-07-30 19:06:33,47] [debug] Execution of prepared statement took 62µs
[2020-07-30 19:06:33,47] [debug] /------------------\
[2020-07-30 19:06:33,47] [debug] | 1                |
[2020-07-30 19:06:33,47] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:33,47] [debug] |------------------|
[2020-07-30 19:06:33,47] [debug] \------------------/
[2020-07-30 19:06:33,47] [debug] #6: success None
[2020-07-30 19:06:33,47] [debug] #7: success 0
[2020-07-30 19:06:33,47] [debug] #8: success (0,0)
[2020-07-30 19:06:33,47] [debug] #9: success (0,0)
[2020-07-30 19:06:33,47] [debug] #10: Commit
[2020-07-30 19:06:33,47] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:33,47] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:33,48] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,48] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:33,48] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,48] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:33,48] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:33,48] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:33,48] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:33,48] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:33,48] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:33,48] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:33,48] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:33,48] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:33,48] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:33,48] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:33,48] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,48] [debug] Flattening projection t8
[2020-07-30 19:06:33,48] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:33,48] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:33,48] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:33,48] [debug] Flattening projection t7
[2020-07-30 19:06:33,48] [debug] Flattening projection t9
[2020-07-30 19:06:33,48] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,48] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:33,48] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:33,48] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:33,48] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:33,48] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:33,48] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:33,48] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:33,48] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:33,48] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:33,48] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:33,48] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,48] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,48] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,48] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,48] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:33,48] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:33,48] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:33,48] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:33,48] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:33,48] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:33,48] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:33,48] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:33,48] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:33,48] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:33,48] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:33,48] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:33,48] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:33,48] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:33,48] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:33,48] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:33,48] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:33,48] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:33,48] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:33,48] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:33,48] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:33,48] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:33,48] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:33,48] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:33,48] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:33,48] [debug] Table fields: Map()
[2020-07-30 19:06:33,48] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:33,49] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:33,49] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:33,49] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:33,49] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:33,49] [debug] Replacements are: Map()
[2020-07-30 19:06:33,49] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:33,49] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:33,49] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:33,49] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:33,49] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:33,49] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:33,49] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:33,49] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:33,49] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:33,49] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:33,49] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:33,49] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:33,49] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:33,49] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:33,49] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:33,49] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:33,49] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:33,49] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:33,49] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:33,49] [debug]       assignUniqueSymbols:    0.340036 ms
[2020-07-30 19:06:33,49] [debug]           unrollTailBinds:    0.044685 ms
[2020-07-30 19:06:33,49] [debug]                inferTypes:    0.071033 ms
[2020-07-30 19:06:33,49] [debug]              expandTables:    0.697443 ms
[2020-07-30 19:06:33,49] [debug]           forceOuterBinds:    0.479446 ms
[2020-07-30 19:06:33,49] [debug]         removeMappedTypes:    0.118904 ms
[2020-07-30 19:06:33,49] [debug]                expandSums:    0.024270 ms
[2020-07-30 19:06:33,49] [debug]             expandRecords:    0.350967 ms
[2020-07-30 19:06:33,49] [debug]        flattenProjections:    1.455348 ms
[2020-07-30 19:06:33,49] [debug]              rewriteJoins:    0.872634 ms
[2020-07-30 19:06:33,49] [debug]             verifySymbols:    0.048309 ms
[2020-07-30 19:06:33,49] [debug]             relabelUnions:    0.051489 ms
[2020-07-30 19:06:33,49] [debug]          createAggregates:    2.187156 ms
[2020-07-30 19:06:33,49] [debug]           resolveZipJoins:    0.052782 ms
[2020-07-30 19:06:33,49] [debug]          pruneProjections:    0.233271 ms
[2020-07-30 19:06:33,49] [debug]           rewriteDistinct:    0.034609 ms
[2020-07-30 19:06:33,49] [debug]    createResultSetMapping:    0.377813 ms
[2020-07-30 19:06:33,49] [debug]            hoistClientOps:    1.146317 ms
[2020-07-30 19:06:33,49] [debug]         reorderOperations:    0.068379 ms
[2020-07-30 19:06:33,49] [debug]     mergeToComprehensions:    2.349474 ms
[2020-07-30 19:06:33,49] [debug]            optimizeScalar:    0.056886 ms
[2020-07-30 19:06:33,49] [debug]          removeFieldNames:    0.903077 ms
[2020-07-30 19:06:33,49] [debug]      specializeParameters:    0.116938 ms
[2020-07-30 19:06:33,49] [debug]                   codeGen:    0.999793 ms
[2020-07-30 19:06:33,49] [debug]                     TOTAL:   13.081059 ms
[2020-07-30 19:06:33,49] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:33,49] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:33,49] [debug] Executing prepared statement: HikariProxyPreparedStatement@416146262 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6afeaad0[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:33,49] [debug] Executing prepared statement: HikariProxyPreparedStatement@416146262 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6afeaad0[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:33,49] [debug] Execution of prepared statement took 85µs
[2020-07-30 19:06:33,49] [debug] /----\
[2020-07-30 19:06:33,49] [debug] | 1  |
[2020-07-30 19:06:33,49] [debug] | C1 |
[2020-07-30 19:06:33,49] [debug] |----|
[2020-07-30 19:06:33,49] [debug] | 0  |
[2020-07-30 19:06:33,49] [debug] \----/
[2020-07-30 19:06:34,50] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:34,50] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:34,50] [debug] #3: StartTransaction
[2020-07-30 19:06:34,50] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:34,50] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:34,50] [debug] Executing prepared statement: HikariProxyPreparedStatement@141630314 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5c7c2ee5[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:34,50] [debug] Executing prepared statement: HikariProxyPreparedStatement@141630314 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@5c7c2ee5[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:34,50] [debug] /------\
[2020-07-30 19:06:34,50] [debug] | 1    |
[2020-07-30 19:06:34,50] [debug] | Long |
[2020-07-30 19:06:34,50] [debug] |------|
[2020-07-30 19:06:34,50] [debug] | 5000 |
[2020-07-30 19:06:34,50] [debug] \------/
[2020-07-30 19:06:34,50] [debug] Execution of prepared statement took 173µs
[2020-07-30 19:06:34,50] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:34,50] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:34,50] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:34,50] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:34,50] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:34,50] [debug] #5: success Vector()
[2020-07-30 19:06:34,50] [debug] #6: success Vector()
[2020-07-30 19:06:34,50] [debug] #7: success ()
[2020-07-30 19:06:34,50] [debug] #8: success ((),Vector())
[2020-07-30 19:06:34,50] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:34,50] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:34,50] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:34,50] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:34,50] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:34,50] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:34,50] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:34,50] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:34,50] [debug] Expanding tables in result type
[2020-07-30 19:06:34,51] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,51] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,51] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,51] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:34,51] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,51] [debug] Flattening projection t8
[2020-07-30 19:06:34,51] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,51] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:34,51] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:34,51] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:34,51] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:34,51] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:34,51] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,51] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:34,51] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:34,51] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:34,51] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:34,51] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:34,51] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:34,51] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:34,51] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:34,51] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:34,51] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:34,51] [debug] Creating mapping from Long'
[2020-07-30 19:06:34,51] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:34,51] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:34,51] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:34,51] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:34,51] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:34,51] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:34,51] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:34,51] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:34,51] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:34,51] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:34,51] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,51] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:34,51] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:34,51] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:34,51] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,51] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:34,51] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:34,51] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:34,51] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:34,51] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:34,51] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:34,51] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:34,51] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:34,51] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:34,51] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:34,51] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:34,51] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:34,51] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:34,51] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:34,51] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:34,51] [debug]       assignUniqueSymbols:    0.601601 ms
[2020-07-30 19:06:34,51] [debug]           unrollTailBinds:    0.065562 ms
[2020-07-30 19:06:34,51] [debug]                inferTypes:    0.180384 ms
[2020-07-30 19:06:34,51] [debug]              expandTables:    1.323638 ms
[2020-07-30 19:06:34,51] [debug]           forceOuterBinds:    0.508730 ms
[2020-07-30 19:06:34,51] [debug]         removeMappedTypes:    0.403635 ms
[2020-07-30 19:06:34,51] [debug]                expandSums:    0.049300 ms
[2020-07-30 19:06:34,51] [debug]             expandRecords:    0.348165 ms
[2020-07-30 19:06:34,51] [debug]        flattenProjections:    1.077462 ms
[2020-07-30 19:06:34,51] [debug]              rewriteJoins:    0.090966 ms
[2020-07-30 19:06:34,51] [debug]             verifySymbols:    0.110659 ms
[2020-07-30 19:06:34,52] [debug]             relabelUnions:    0.063456 ms
[2020-07-30 19:06:34,52] [debug]          createAggregates:    0.034689 ms
[2020-07-30 19:06:34,52] [debug]           resolveZipJoins:    0.060659 ms
[2020-07-30 19:06:34,52] [debug]          pruneProjections:    0.260893 ms
[2020-07-30 19:06:34,52] [debug]           rewriteDistinct:    0.054442 ms
[2020-07-30 19:06:34,52] [debug]    createResultSetMapping:    0.418479 ms
[2020-07-30 19:06:34,52] [debug]            hoistClientOps:    0.915687 ms
[2020-07-30 19:06:34,52] [debug]         reorderOperations:    0.091348 ms
[2020-07-30 19:06:34,52] [debug]     mergeToComprehensions:    2.525269 ms
[2020-07-30 19:06:34,52] [debug]            optimizeScalar:    0.117956 ms
[2020-07-30 19:06:34,52] [debug]          removeFieldNames:    0.954347 ms
[2020-07-30 19:06:34,52] [debug]      specializeParameters:    0.130250 ms
[2020-07-30 19:06:34,52] [debug]                   codeGen:    0.926654 ms
[2020-07-30 19:06:34,52] [debug]                     TOTAL:   11.314231 ms
[2020-07-30 19:06:34,52] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:34,52] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:34,52] [debug] Executing prepared update: HikariProxyPreparedStatement@281157384 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@f758c1c[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:34,52] [debug] Executing prepared update: HikariProxyPreparedStatement@281157384 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@f758c1c[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:34,52] [debug] Execution of prepared update took 181µs
[2020-07-30 19:06:34,52] [debug] #10: success 0
[2020-07-30 19:06:34,52] [debug] #11: Commit
[2020-07-30 19:06:34,52] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:34,52] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:34,52] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:34,52] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:34,52] [debug] #3: StartTransaction
[2020-07-30 19:06:34,52] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:34,52] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:34,52] [debug] Executing prepared statement: HikariProxyPreparedStatement@172746518 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@377dfc1a[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:34,52] [debug] Executing prepared statement: HikariProxyPreparedStatement@172746518 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@377dfc1a[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:34,52] [debug] /---------------------------\
[2020-07-30 19:06:34,52] [debug] | 1                         |
[2020-07-30 19:06:34,52] [debug] | String                    |
[2020-07-30 19:06:34,52] [debug] |---------------------------|
[2020-07-30 19:06:34,52] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:34,52] [debug] \---------------------------/
[2020-07-30 19:06:34,52] [debug] Execution of prepared statement took 112µs
[2020-07-30 19:06:34,52] [debug] /------------------\
[2020-07-30 19:06:34,52] [debug] | 1                |
[2020-07-30 19:06:34,52] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:34,52] [debug] |------------------|
[2020-07-30 19:06:34,52] [debug] \------------------/
[2020-07-30 19:06:34,52] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:34,52] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:34,52] [debug] Executing prepared statement: HikariProxyPreparedStatement@122902341 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@24652ab9[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:34,52] [debug] Executing prepared statement: HikariProxyPreparedStatement@122902341 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@24652ab9[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:34,52] [debug] /---------------------------\
[2020-07-30 19:06:34,52] [debug] | 1                         |
[2020-07-30 19:06:34,52] [debug] | String                    |
[2020-07-30 19:06:34,52] [debug] |---------------------------|
[2020-07-30 19:06:34,52] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:34,52] [debug] \---------------------------/
[2020-07-30 19:06:34,52] [debug] Execution of prepared statement took 57µs
[2020-07-30 19:06:34,52] [debug] /------------------\
[2020-07-30 19:06:34,52] [debug] | 1                |
[2020-07-30 19:06:34,52] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:34,52] [debug] |------------------|
[2020-07-30 19:06:34,52] [debug] \------------------/
[2020-07-30 19:06:34,52] [debug] #6: success None
[2020-07-30 19:06:34,52] [debug] #7: success 0
[2020-07-30 19:06:34,52] [debug] #8: success (0,0)
[2020-07-30 19:06:34,52] [debug] #9: success (0,0)
[2020-07-30 19:06:34,52] [debug] #10: Commit
[2020-07-30 19:06:34,52] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:34,52] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:34,52] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,52] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:34,52] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,52] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:34,52] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:34,52] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:34,52] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:34,52] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:34,52] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:34,52] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:34,52] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:34,52] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:34,52] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:34,52] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:34,52] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,52] [debug] Flattening projection t8
[2020-07-30 19:06:34,52] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:34,52] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:34,52] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:34,52] [debug] Flattening projection t7
[2020-07-30 19:06:34,52] [debug] Flattening projection t9
[2020-07-30 19:06:34,53] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,53] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:34,53] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:34,53] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:34,53] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:34,53] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:34,53] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:34,53] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:34,53] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:34,53] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:34,53] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:34,53] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,53] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,53] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,53] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,53] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:34,53] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:34,53] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:34,53] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:34,53] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:34,53] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:34,53] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:34,53] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:34,53] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:34,53] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:34,53] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:34,53] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:34,53] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:34,53] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:34,53] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:34,53] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:34,53] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:34,53] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:34,53] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:34,53] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:34,53] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:34,53] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:34,53] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:34,53] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:34,53] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:34,53] [debug] Table fields: Map()
[2020-07-30 19:06:34,53] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:34,53] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:34,53] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:34,53] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:34,53] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:34,53] [debug] Replacements are: Map()
[2020-07-30 19:06:34,53] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:34,53] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:34,53] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:34,53] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:34,53] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:34,53] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:34,53] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:34,53] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:34,53] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:34,53] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:34,53] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:34,54] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:34,54] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:34,54] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:34,54] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:34,54] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:34,54] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:34,54] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:34,54] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:34,54] [debug]       assignUniqueSymbols:    0.294282 ms
[2020-07-30 19:06:34,54] [debug]           unrollTailBinds:    0.040080 ms
[2020-07-30 19:06:34,54] [debug]                inferTypes:    0.061389 ms
[2020-07-30 19:06:34,54] [debug]              expandTables:    0.713786 ms
[2020-07-30 19:06:34,54] [debug]           forceOuterBinds:    0.483325 ms
[2020-07-30 19:06:34,54] [debug]         removeMappedTypes:    0.085606 ms
[2020-07-30 19:06:34,54] [debug]                expandSums:    0.028272 ms
[2020-07-30 19:06:34,54] [debug]             expandRecords:    0.349713 ms
[2020-07-30 19:06:34,54] [debug]        flattenProjections:    1.628488 ms
[2020-07-30 19:06:34,54] [debug]              rewriteJoins:    0.965550 ms
[2020-07-30 19:06:34,54] [debug]             verifySymbols:    0.056477 ms
[2020-07-30 19:06:34,54] [debug]             relabelUnions:    0.047697 ms
[2020-07-30 19:06:34,54] [debug]          createAggregates:    2.520387 ms
[2020-07-30 19:06:34,54] [debug]           resolveZipJoins:    0.084329 ms
[2020-07-30 19:06:34,54] [debug]          pruneProjections:    0.201929 ms
[2020-07-30 19:06:34,54] [debug]           rewriteDistinct:    0.037646 ms
[2020-07-30 19:06:34,54] [debug]    createResultSetMapping:    0.420154 ms
[2020-07-30 19:06:34,54] [debug]            hoistClientOps:    0.903430 ms
[2020-07-30 19:06:34,54] [debug]         reorderOperations:    0.100370 ms
[2020-07-30 19:06:34,54] [debug]     mergeToComprehensions:    2.533962 ms
[2020-07-30 19:06:34,54] [debug]            optimizeScalar:    0.064637 ms
[2020-07-30 19:06:34,54] [debug]          removeFieldNames:    0.884781 ms
[2020-07-30 19:06:34,54] [debug]      specializeParameters:    0.138223 ms
[2020-07-30 19:06:34,54] [debug]                   codeGen:    1.058201 ms
[2020-07-30 19:06:34,54] [debug]                     TOTAL:   13.702714 ms
[2020-07-30 19:06:34,54] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:34,54] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:34,54] [debug] Executing prepared statement: HikariProxyPreparedStatement@2030958060 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@74302931[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:34,54] [debug] Executing prepared statement: HikariProxyPreparedStatement@2030958060 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@74302931[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:34,54] [debug] Execution of prepared statement took 92µs
[2020-07-30 19:06:34,54] [debug] /----\
[2020-07-30 19:06:34,54] [debug] | 1  |
[2020-07-30 19:06:34,54] [debug] | C1 |
[2020-07-30 19:06:34,54] [debug] |----|
[2020-07-30 19:06:34,54] [debug] | 0  |
[2020-07-30 19:06:34,54] [debug] \----/
[2020-07-30 19:06:34,97] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@3647c8c8
          base: SetTransactionIsolation
[2020-07-30 19:06:34,97] [debug] Preparing statement: select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?
[2020-07-30 19:06:34,97] [debug] Executing prepared statement: HikariProxyPreparedStatement@1868836458 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@37a189a8[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:34,97] [debug] Executing prepared statement: HikariProxyPreparedStatement@1868836458 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@37a189a8[sql=[select "WORKFLOW_STATUS" from "WORKFLOW_METADATA_SUMMARY_ENTRY" where "WORKFLOW_EXECUTION_UUID" = ?], parameters=[[8b168b0d-854f-4ba0-99b6-35b7259a96fc]]]
[2020-07-30 19:06:34,97] [debug] /---------------------------\
[2020-07-30 19:06:34,97] [debug] | 1                         |
[2020-07-30 19:06:34,97] [debug] | String                    |
[2020-07-30 19:06:34,97] [debug] |---------------------------|
[2020-07-30 19:06:34,97] [debug] | 8b168b0d-854f-4ba0-99b... |
[2020-07-30 19:06:34,97] [debug] \---------------------------/
[2020-07-30 19:06:34,97] [debug] Execution of prepared statement took 307µs
[2020-07-30 19:06:34,97] [debug] /-----------------\
[2020-07-30 19:06:34,97] [debug] | 1               |
[2020-07-30 19:06:34,97] [debug] | WORKFLOW_STATUS |
[2020-07-30 19:06:34,97] [debug] |-----------------|
[2020-07-30 19:06:34,97] [debug] | Failed          |
[2020-07-30 19:06:34,97] [debug] \-----------------/
[INFO] [07/30/2020 19:06:34.979] [cromwell-system-akka.dispatchers.engine-dispatcher-37] [akka://cromwell-system/user/SingleWorkflowRunnerActor] SingleWorkflowRunnerActor workflow finished with status 'Failed'.
[2020-07-30 19:06:35,55] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:35,55] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:35,55] [debug] #3: StartTransaction
[2020-07-30 19:06:35,55] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:35,55] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:35,55] [debug] Executing prepared statement: HikariProxyPreparedStatement@240734112 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@67c22c43[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:35,55] [debug] Executing prepared statement: HikariProxyPreparedStatement@240734112 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@67c22c43[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:35,55] [debug] /------\
[2020-07-30 19:06:35,55] [debug] | 1    |
[2020-07-30 19:06:35,55] [debug] | Long |
[2020-07-30 19:06:35,55] [debug] |------|
[2020-07-30 19:06:35,55] [debug] | 5000 |
[2020-07-30 19:06:35,55] [debug] \------/
[2020-07-30 19:06:35,55] [debug] Execution of prepared statement took 128µs
[2020-07-30 19:06:35,55] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:35,55] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:35,55] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:35,55] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:35,55] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:35,55] [debug] #5: success Vector()
[2020-07-30 19:06:35,55] [debug] #6: success Vector()
[2020-07-30 19:06:35,55] [debug] #7: success ()
[2020-07-30 19:06:35,55] [debug] #8: success ((),Vector())
[2020-07-30 19:06:35,55] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:35,55] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:35,55] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:35,55] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:35,55] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:35,55] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:35,55] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:35,55] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:35,55] [debug] Expanding tables in result type
[2020-07-30 19:06:35,55] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,56] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,56] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,56] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:35,56] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,56] [debug] Flattening projection t8
[2020-07-30 19:06:35,56] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,56] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:35,56] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:35,56] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:35,56] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:35,56] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:35,56] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,56] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:35,56] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:35,56] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:35,56] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:35,56] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:35,56] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:35,56] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:35,56] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:35,56] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:35,56] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:35,56] [debug] Creating mapping from Long'
[2020-07-30 19:06:35,56] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:35,56] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:35,56] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:35,56] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:35,56] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:35,56] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:35,56] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:35,56] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:35,56] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:35,56] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:35,56] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,56] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:35,56] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:35,56] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:35,56] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,56] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:35,56] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:35,56] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:35,56] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:35,56] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:35,56] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:35,56] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:35,56] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:35,56] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:35,56] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:35,56] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:35,56] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:35,56] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:35,56] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:35,56] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:35,56] [debug]       assignUniqueSymbols:    0.537723 ms
[2020-07-30 19:06:35,57] [debug]           unrollTailBinds:    0.065976 ms
[2020-07-30 19:06:35,57] [debug]                inferTypes:    0.180514 ms
[2020-07-30 19:06:35,57] [debug]              expandTables:    1.493790 ms
[2020-07-30 19:06:35,57] [debug]           forceOuterBinds:    0.588135 ms
[2020-07-30 19:06:35,57] [debug]         removeMappedTypes:    0.422868 ms
[2020-07-30 19:06:35,57] [debug]                expandSums:    0.048836 ms
[2020-07-30 19:06:35,57] [debug]             expandRecords:    0.324578 ms
[2020-07-30 19:06:35,57] [debug]        flattenProjections:    1.031056 ms
[2020-07-30 19:06:35,57] [debug]              rewriteJoins:    0.080675 ms
[2020-07-30 19:06:35,57] [debug]             verifySymbols:    0.078386 ms
[2020-07-30 19:06:35,57] [debug]             relabelUnions:    0.062972 ms
[2020-07-30 19:06:35,57] [debug]          createAggregates:    0.036793 ms
[2020-07-30 19:06:35,57] [debug]           resolveZipJoins:    0.059343 ms
[2020-07-30 19:06:35,57] [debug]          pruneProjections:    0.246783 ms
[2020-07-30 19:06:35,57] [debug]           rewriteDistinct:    0.057512 ms
[2020-07-30 19:06:35,57] [debug]    createResultSetMapping:    0.619348 ms
[2020-07-30 19:06:35,57] [debug]            hoistClientOps:    1.355998 ms
[2020-07-30 19:06:35,57] [debug]         reorderOperations:    0.073382 ms
[2020-07-30 19:06:35,57] [debug]     mergeToComprehensions:    2.366595 ms
[2020-07-30 19:06:35,57] [debug]            optimizeScalar:    0.078370 ms
[2020-07-30 19:06:35,57] [debug]          removeFieldNames:    1.069787 ms
[2020-07-30 19:06:35,57] [debug]      specializeParameters:    0.170346 ms
[2020-07-30 19:06:35,57] [debug]                   codeGen:    0.892946 ms
[2020-07-30 19:06:35,57] [debug]                     TOTAL:   11.942712 ms
[2020-07-30 19:06:35,57] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:35,57] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:35,57] [debug] Executing prepared update: HikariProxyPreparedStatement@1598366139 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2ac9fc72[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:35,57] [debug] Executing prepared update: HikariProxyPreparedStatement@1598366139 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@2ac9fc72[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:35,57] [debug] Execution of prepared update took 177µs
[2020-07-30 19:06:35,57] [debug] #10: success 0
[2020-07-30 19:06:35,57] [debug] #11: Commit
[2020-07-30 19:06:35,57] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:35,57] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:35,57] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:35,57] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:35,57] [debug] #3: StartTransaction
[2020-07-30 19:06:35,57] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:35,57] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:35,57] [debug] Executing prepared statement: HikariProxyPreparedStatement@2107135017 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@b4ed137[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:35,57] [debug] Executing prepared statement: HikariProxyPreparedStatement@2107135017 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@b4ed137[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:35,57] [debug] /---------------------------\
[2020-07-30 19:06:35,57] [debug] | 1                         |
[2020-07-30 19:06:35,57] [debug] | String                    |
[2020-07-30 19:06:35,57] [debug] |---------------------------|
[2020-07-30 19:06:35,57] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:35,57] [debug] \---------------------------/
[2020-07-30 19:06:35,57] [debug] Execution of prepared statement took 170µs
[2020-07-30 19:06:35,57] [debug] /------------------\
[2020-07-30 19:06:35,57] [debug] | 1                |
[2020-07-30 19:06:35,57] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:35,57] [debug] |------------------|
[2020-07-30 19:06:35,57] [debug] \------------------/
[2020-07-30 19:06:35,57] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:35,57] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:35,57] [debug] Executing prepared statement: HikariProxyPreparedStatement@59737329 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@66c0de37[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:35,57] [debug] Executing prepared statement: HikariProxyPreparedStatement@59737329 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@66c0de37[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:35,57] [debug] /---------------------------\
[2020-07-30 19:06:35,57] [debug] | 1                         |
[2020-07-30 19:06:35,57] [debug] | String                    |
[2020-07-30 19:06:35,57] [debug] |---------------------------|
[2020-07-30 19:06:35,57] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:35,57] [debug] \---------------------------/
[2020-07-30 19:06:35,57] [debug] Execution of prepared statement took 60µs
[2020-07-30 19:06:35,57] [debug] /------------------\
[2020-07-30 19:06:35,57] [debug] | 1                |
[2020-07-30 19:06:35,57] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:35,57] [debug] |------------------|
[2020-07-30 19:06:35,57] [debug] \------------------/
[2020-07-30 19:06:35,57] [debug] #6: success None
[2020-07-30 19:06:35,57] [debug] #7: success 0
[2020-07-30 19:06:35,57] [debug] #8: success (0,0)
[2020-07-30 19:06:35,57] [debug] #9: success (0,0)
[2020-07-30 19:06:35,57] [debug] #10: Commit
[2020-07-30 19:06:35,57] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:35,58] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:35,58] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,58] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:35,58] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,58] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:35,58] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:35,58] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:35,58] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:35,58] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:35,58] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:35,58] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:35,58] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:35,58] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:35,58] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:35,58] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:35,58] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,58] [debug] Flattening projection t8
[2020-07-30 19:06:35,58] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:35,58] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:35,58] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:35,58] [debug] Flattening projection t7
[2020-07-30 19:06:35,58] [debug] Flattening projection t9
[2020-07-30 19:06:35,58] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,58] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:35,58] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:35,58] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:35,58] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:35,58] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:35,58] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:35,58] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:35,58] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:35,58] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:35,58] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:35,58] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,58] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,58] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,58] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,58] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:35,58] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:35,58] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:35,58] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:35,58] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:35,58] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:35,58] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:35,58] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:35,58] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:35,58] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:35,58] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:35,58] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:35,58] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:35,58] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:35,58] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:35,59] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:35,59] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:35,59] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:35,59] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:35,59] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:35,59] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:35,59] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:35,59] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:35,59] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:35,59] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:35,59] [debug] Table fields: Map()
[2020-07-30 19:06:35,59] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:35,59] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:35,59] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:35,59] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:35,59] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:35,59] [debug] Replacements are: Map()
[2020-07-30 19:06:35,59] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:35,59] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:35,59] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:35,59] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:35,59] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:35,59] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:35,59] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:35,59] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:35,59] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:35,59] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:35,59] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:35,59] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:35,59] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:35,59] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:35,59] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:35,59] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:35,59] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:35,59] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:35,59] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:35,59] [debug]       assignUniqueSymbols:    0.471263 ms
[2020-07-30 19:06:35,59] [debug]           unrollTailBinds:    0.063239 ms
[2020-07-30 19:06:35,59] [debug]                inferTypes:    0.099723 ms
[2020-07-30 19:06:35,59] [debug]              expandTables:    0.971823 ms
[2020-07-30 19:06:35,59] [debug]           forceOuterBinds:    0.714487 ms
[2020-07-30 19:06:35,59] [debug]         removeMappedTypes:    0.132645 ms
[2020-07-30 19:06:35,59] [debug]                expandSums:    0.037749 ms
[2020-07-30 19:06:35,59] [debug]             expandRecords:    0.564863 ms
[2020-07-30 19:06:35,59] [debug]        flattenProjections:    1.956302 ms
[2020-07-30 19:06:35,59] [debug]              rewriteJoins:    0.843323 ms
[2020-07-30 19:06:35,59] [debug]             verifySymbols:    0.056637 ms
[2020-07-30 19:06:35,59] [debug]             relabelUnions:    0.060082 ms
[2020-07-30 19:06:35,59] [debug]          createAggregates:    2.474707 ms
[2020-07-30 19:06:35,59] [debug]           resolveZipJoins:    0.063427 ms
[2020-07-30 19:06:35,59] [debug]          pruneProjections:    0.205307 ms
[2020-07-30 19:06:35,59] [debug]           rewriteDistinct:    0.053154 ms
[2020-07-30 19:06:35,59] [debug]    createResultSetMapping:    0.424838 ms
[2020-07-30 19:06:35,59] [debug]            hoistClientOps:    0.867791 ms
[2020-07-30 19:06:35,59] [debug]         reorderOperations:    0.072636 ms
[2020-07-30 19:06:35,59] [debug]     mergeToComprehensions:    2.589010 ms
[2020-07-30 19:06:35,59] [debug]            optimizeScalar:    0.069724 ms
[2020-07-30 19:06:35,59] [debug]          removeFieldNames:    0.930184 ms
[2020-07-30 19:06:35,59] [debug]      specializeParameters:    0.143551 ms
[2020-07-30 19:06:35,59] [debug]                   codeGen:    0.976991 ms
[2020-07-30 19:06:35,59] [debug]                     TOTAL:   14.843456 ms
[2020-07-30 19:06:35,59] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:35,59] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:35,59] [debug] Executing prepared statement: HikariProxyPreparedStatement@54033587 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7e02cd2d[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:35,59] [debug] Executing prepared statement: HikariProxyPreparedStatement@54033587 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7e02cd2d[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:35,59] [debug] Execution of prepared statement took 87µs
[2020-07-30 19:06:35,59] [debug] /----\
[2020-07-30 19:06:35,59] [debug] | 1  |
[2020-07-30 19:06:35,59] [debug] | C1 |
[2020-07-30 19:06:35,59] [debug] |----|
[2020-07-30 19:06:35,59] [debug] | 0  |
[2020-07-30 19:06:35,59] [debug] \----/
[2020-07-30 19:06:36,60] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:36,60] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:36,60] [debug] #3: StartTransaction
[2020-07-30 19:06:36,60] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:36,60] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:36,60] [debug] Executing prepared statement: HikariProxyPreparedStatement@257972813 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@221c6a60[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:36,60] [debug] Executing prepared statement: HikariProxyPreparedStatement@257972813 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@221c6a60[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:36,60] [debug] /------\
[2020-07-30 19:06:36,60] [debug] | 1    |
[2020-07-30 19:06:36,60] [debug] | Long |
[2020-07-30 19:06:36,60] [debug] |------|
[2020-07-30 19:06:36,60] [debug] | 5000 |
[2020-07-30 19:06:36,60] [debug] \------/
[2020-07-30 19:06:36,60] [debug] Execution of prepared statement took 129µs
[2020-07-30 19:06:36,60] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:36,60] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:36,60] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:36,60] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:36,60] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:36,60] [debug] #5: success Vector()
[2020-07-30 19:06:36,60] [debug] #6: success Vector()
[2020-07-30 19:06:36,60] [debug] #7: success ()
[2020-07-30 19:06:36,60] [debug] #8: success ((),Vector())
[2020-07-30 19:06:36,60] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:36,60] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:36,60] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:36,60] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:36,60] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:36,60] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:36,60] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:36,60] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:36,60] [debug] Expanding tables in result type
[2020-07-30 19:06:36,60] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,61] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,61] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,61] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:36,61] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,61] [debug] Flattening projection t8
[2020-07-30 19:06:36,61] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,61] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:36,61] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:36,61] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:36,61] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:36,61] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:36,61] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,61] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:36,61] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:36,61] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:36,61] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:36,61] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:36,61] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:36,61] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:36,61] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:36,61] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:36,61] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:36,61] [debug] Creating mapping from Long'
[2020-07-30 19:06:36,61] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:36,61] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:36,61] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:36,61] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:36,61] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:36,61] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:36,61] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:36,61] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:36,61] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:36,61] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:36,61] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,61] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:36,61] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:36,61] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:36,61] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,61] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:36,61] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:36,61] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:36,61] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:36,61] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:36,61] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:36,61] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:36,62] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:36,62] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:36,62] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:36,62] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:36,62] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:36,62] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:36,62] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:36,62] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:36,62] [debug]       assignUniqueSymbols:    0.500213 ms
[2020-07-30 19:06:36,62] [debug]           unrollTailBinds:    0.063769 ms
[2020-07-30 19:06:36,62] [debug]                inferTypes:    0.143698 ms
[2020-07-30 19:06:36,62] [debug]              expandTables:    1.604230 ms
[2020-07-30 19:06:36,62] [debug]           forceOuterBinds:    0.449294 ms
[2020-07-30 19:06:36,62] [debug]         removeMappedTypes:    0.382137 ms
[2020-07-30 19:06:36,62] [debug]                expandSums:    0.047750 ms
[2020-07-30 19:06:36,62] [debug]             expandRecords:    0.316096 ms
[2020-07-30 19:06:36,62] [debug]        flattenProjections:    1.045601 ms
[2020-07-30 19:06:36,62] [debug]              rewriteJoins:    0.107205 ms
[2020-07-30 19:06:36,62] [debug]             verifySymbols:    0.085372 ms
[2020-07-30 19:06:36,62] [debug]             relabelUnions:    0.063029 ms
[2020-07-30 19:06:36,62] [debug]          createAggregates:    0.037745 ms
[2020-07-30 19:06:36,62] [debug]           resolveZipJoins:    0.061549 ms
[2020-07-30 19:06:36,62] [debug]          pruneProjections:    0.311006 ms
[2020-07-30 19:06:36,62] [debug]           rewriteDistinct:    0.093739 ms
[2020-07-30 19:06:36,62] [debug]    createResultSetMapping:    0.904100 ms
[2020-07-30 19:06:36,62] [debug]            hoistClientOps:    1.345998 ms
[2020-07-30 19:06:36,62] [debug]         reorderOperations:    0.109311 ms
[2020-07-30 19:06:36,62] [debug]     mergeToComprehensions:    3.592563 ms
[2020-07-30 19:06:36,62] [debug]            optimizeScalar:    0.109345 ms
[2020-07-30 19:06:36,62] [debug]          removeFieldNames:    1.408997 ms
[2020-07-30 19:06:36,62] [debug]      specializeParameters:    0.182993 ms
[2020-07-30 19:06:36,62] [debug]                   codeGen:    1.049587 ms
[2020-07-30 19:06:36,62] [debug]                     TOTAL:   14.015327 ms
[2020-07-30 19:06:36,62] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:36,62] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:36,62] [debug] Executing prepared update: HikariProxyPreparedStatement@1413070815 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@34e8ee13[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:36,62] [debug] Executing prepared update: HikariProxyPreparedStatement@1413070815 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@34e8ee13[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:36,62] [debug] Execution of prepared update took 185µs
[2020-07-30 19:06:36,62] [debug] #10: success 0
[2020-07-30 19:06:36,62] [debug] #11: Commit
[2020-07-30 19:06:36,62] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:36,62] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:36,62] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:36,62] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:36,62] [debug] #3: StartTransaction
[2020-07-30 19:06:36,62] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:36,62] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:36,62] [debug] Executing prepared statement: HikariProxyPreparedStatement@1732028314 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@26328656[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:36,62] [debug] Executing prepared statement: HikariProxyPreparedStatement@1732028314 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@26328656[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:36,62] [debug] /---------------------------\
[2020-07-30 19:06:36,62] [debug] | 1                         |
[2020-07-30 19:06:36,62] [debug] | String                    |
[2020-07-30 19:06:36,62] [debug] |---------------------------|
[2020-07-30 19:06:36,62] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:36,62] [debug] \---------------------------/
[2020-07-30 19:06:36,62] [debug] Execution of prepared statement took 77µs
[2020-07-30 19:06:36,62] [debug] /------------------\
[2020-07-30 19:06:36,62] [debug] | 1                |
[2020-07-30 19:06:36,62] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:36,62] [debug] |------------------|
[2020-07-30 19:06:36,62] [debug] \------------------/
[2020-07-30 19:06:36,62] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:36,62] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:36,62] [debug] Executing prepared statement: HikariProxyPreparedStatement@610720427 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@578d2e3f[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:36,62] [debug] Executing prepared statement: HikariProxyPreparedStatement@610720427 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@578d2e3f[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:36,62] [debug] /---------------------------\
[2020-07-30 19:06:36,63] [debug] | 1                         |
[2020-07-30 19:06:36,63] [debug] | String                    |
[2020-07-30 19:06:36,63] [debug] |---------------------------|
[2020-07-30 19:06:36,63] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:36,63] [debug] \---------------------------/
[2020-07-30 19:06:36,63] [debug] Execution of prepared statement took 63µs
[2020-07-30 19:06:36,63] [debug] /------------------\
[2020-07-30 19:06:36,63] [debug] | 1                |
[2020-07-30 19:06:36,63] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:36,63] [debug] |------------------|
[2020-07-30 19:06:36,63] [debug] \------------------/
[2020-07-30 19:06:36,63] [debug] #6: success None
[2020-07-30 19:06:36,63] [debug] #7: success 0
[2020-07-30 19:06:36,63] [debug] #8: success (0,0)
[2020-07-30 19:06:36,63] [debug] #9: success (0,0)
[2020-07-30 19:06:36,63] [debug] #10: Commit
[2020-07-30 19:06:36,63] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:36,63] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:36,63] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,63] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:36,63] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,63] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:36,63] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:36,63] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:36,63] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:36,63] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:36,63] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:36,63] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:36,63] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:36,63] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:36,63] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:36,63] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:36,63] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,63] [debug] Flattening projection t8
[2020-07-30 19:06:36,63] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:36,63] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:36,63] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:36,63] [debug] Flattening projection t7
[2020-07-30 19:06:36,63] [debug] Flattening projection t9
[2020-07-30 19:06:36,63] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,63] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:36,63] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:36,63] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:36,63] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:36,63] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:36,63] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:36,63] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:36,63] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:36,63] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:36,63] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:36,63] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,63] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,63] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,63] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,63] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:36,63] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:36,63] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:36,63] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:36,63] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:36,63] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:36,63] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:36,64] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:36,64] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:36,64] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:36,64] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:36,64] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:36,64] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:36,64] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:36,64] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:36,64] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:36,64] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:36,64] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:36,64] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:36,64] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:36,64] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:36,64] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:36,64] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:36,64] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:36,64] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:36,64] [debug] Table fields: Map()
[2020-07-30 19:06:36,64] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:36,64] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:36,64] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:36,64] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:36,64] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:36,64] [debug] Replacements are: Map()
[2020-07-30 19:06:36,64] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:36,64] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:36,64] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:36,64] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:36,64] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:36,64] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:36,64] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:36,64] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:36,64] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:36,64] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:36,64] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:36,64] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:36,64] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:36,64] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:36,64] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:36,64] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:36,64] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:36,64] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:36,64] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:36,64] [debug]       assignUniqueSymbols:    0.419158 ms
[2020-07-30 19:06:36,64] [debug]           unrollTailBinds:    0.046682 ms
[2020-07-30 19:06:36,64] [debug]                inferTypes:    0.072254 ms
[2020-07-30 19:06:36,64] [debug]              expandTables:    0.675289 ms
[2020-07-30 19:06:36,64] [debug]           forceOuterBinds:    0.580806 ms
[2020-07-30 19:06:36,64] [debug]         removeMappedTypes:    0.100558 ms
[2020-07-30 19:06:36,64] [debug]                expandSums:    0.027659 ms
[2020-07-30 19:06:36,64] [debug]             expandRecords:    0.405669 ms
[2020-07-30 19:06:36,64] [debug]        flattenProjections:    1.901265 ms
[2020-07-30 19:06:36,64] [debug]              rewriteJoins:    0.989098 ms
[2020-07-30 19:06:36,64] [debug]             verifySymbols:    0.061886 ms
[2020-07-30 19:06:36,64] [debug]             relabelUnions:    0.054092 ms
[2020-07-30 19:06:36,64] [debug]          createAggregates:    3.060963 ms
[2020-07-30 19:06:36,64] [debug]           resolveZipJoins:    0.071844 ms
[2020-07-30 19:06:36,64] [debug]          pruneProjections:    0.219090 ms
[2020-07-30 19:06:36,64] [debug]           rewriteDistinct:    0.045601 ms
[2020-07-30 19:06:36,64] [debug]    createResultSetMapping:    0.529279 ms
[2020-07-30 19:06:36,64] [debug]            hoistClientOps:    1.010243 ms
[2020-07-30 19:06:36,64] [debug]         reorderOperations:    0.082959 ms
[2020-07-30 19:06:36,64] [debug]     mergeToComprehensions:    2.864075 ms
[2020-07-30 19:06:36,64] [debug]            optimizeScalar:    0.103523 ms
[2020-07-30 19:06:36,64] [debug]          removeFieldNames:    0.850771 ms
[2020-07-30 19:06:36,64] [debug]      specializeParameters:    0.124933 ms
[2020-07-30 19:06:36,64] [debug]                   codeGen:    0.953020 ms
[2020-07-30 19:06:36,64] [debug]                     TOTAL:   15.250717 ms
[2020-07-30 19:06:36,64] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:36,65] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:36,65] [debug] Executing prepared statement: HikariProxyPreparedStatement@1489118653 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@66801384[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:36,65] [debug] Executing prepared statement: HikariProxyPreparedStatement@1489118653 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@66801384[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:36,65] [debug] Execution of prepared statement took 72µs
[2020-07-30 19:06:36,65] [debug] /----\
[2020-07-30 19:06:36,65] [debug] | 1  |
[2020-07-30 19:06:36,65] [debug] | C1 |
[2020-07-30 19:06:36,65] [debug] |----|
[2020-07-30 19:06:36,65] [debug] | 0  |
[2020-07-30 19:06:36,65] [debug] \----/
[2020-07-30 19:06:37,53] [info] Workflow polling stopped
[2020-07-30 19:06:37,53] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table WORKFLOW_STORE_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s4.WORKFLOW_DEFINITION : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           3: Path s4.WORKFLOW_URL : Option[String']
|           4: Path s4.WORKFLOW_ROOT : Option[String']
|           5: Path s4.WORKFLOW_TYPE : Option[String']
|           6: Path s4.WORKFLOW_TYPE_VERSION : Option[String']
|           7: Path s4.WORKFLOW_INPUTS : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           8: Path s4.WORKFLOW_OPTIONS : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           9: Path s4.WORKFLOW_STATE : String'
|           10: Path s4.SUBMISSION_TIME : java.sql.Timestamp'
|           11: Path s4.IMPORTS_ZIP : Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']]
|           12: Path s4.CUSTOM_LABELS : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|           13: Path s4.CROMWELL_ID : Option[String']
|           14: Path s4.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|           15: Path s4.HOG_GROUP : Option[String']
|           16: OptionApply
|             0: Path s4.WORKFLOW_STORE_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s3.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t6
|     value: ProductNode
|       1: Path s2.CROMWELL_ID : Option[String']
|       2: Path s2.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,53] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:37,53] [debug] After phase assignUniqueSymbols:
| Bind
|   from s7: Filter s8
|     from s8: TableExpansion
|       table s9: Table WORKFLOW_STORE_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s9.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s9.WORKFLOW_DEFINITION : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           3: Path s9.WORKFLOW_URL : Option[String']
|           4: Path s9.WORKFLOW_ROOT : Option[String']
|           5: Path s9.WORKFLOW_TYPE : Option[String']
|           6: Path s9.WORKFLOW_TYPE_VERSION : Option[String']
|           7: Path s9.WORKFLOW_INPUTS : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           8: Path s9.WORKFLOW_OPTIONS : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           9: Path s9.WORKFLOW_STATE : String'
|           10: Path s9.SUBMISSION_TIME : java.sql.Timestamp'
|           11: Path s9.IMPORTS_ZIP : Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']]
|           12: Path s9.CUSTOM_LABELS : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|           13: Path s9.CROMWELL_ID : Option[String']
|           14: Path s9.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|           15: Path s9.HOG_GROUP : Option[String']
|           16: OptionApply
|             0: Path s9.WORKFLOW_STORE_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t11
|     value: ProductNode
|       1: Path s7.CROMWELL_ID : Option[String']
|       2: Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,53] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:37,53] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:37,53] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.WORKFLOW_STORE_ENTRY)
[2020-07-30 19:06:37,53] [debug] With correct table types:
| Bind : Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     where: Apply Function = : SOption[Boolean]
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|       1: Path s7.CROMWELL_ID : Option[String']
|       2: Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,53] [debug] Table expansions: @t10 -> (s9,TypeMapping)
[2020-07-30 19:06:37,53] [debug] After phase expandTables:
| Bind : Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     where: Apply Function = : SOption[Boolean]
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|       1: Path s7.CROMWELL_ID : Option[String']
|       2: Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,53] [debug] After phase forceOuterBinds:
| Bind : Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     where: Apply Function = : SOption[Boolean]
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|       1: Path s7.CROMWELL_ID : Option[String']
|       2: Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,53] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:37,54] [debug] Translated type: Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>] -> Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
[2020-07-30 19:06:37,54] [debug] Translated type: @t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}> -> @t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>
[2020-07-30 19:06:37,54] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:37,54] [debug] Translated type: String' -> String'
[2020-07-30 19:06:37,54] [debug] Translated type: SOption[Boolean] -> SOption[Boolean]
[2020-07-30 19:06:37,54] [debug] Translated type: Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>] -> Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
[2020-07-30 19:06:37,54] [debug] Translated type: @t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}> -> @t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>
[2020-07-30 19:06:37,54] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:37,54] [debug] Translated type: @t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}> -> @t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>
[2020-07-30 19:06:37,54] [debug] Translated type: Option[java.sql.Timestamp'] -> Option[java.sql.Timestamp']
[2020-07-30 19:06:37,54] [debug] Translated type: (Option[String'], Option[java.sql.Timestamp']) -> (Option[String'], Option[java.sql.Timestamp'])
[2020-07-30 19:06:37,54] [debug] Translated type: Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>] -> Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>]
[2020-07-30 19:06:37,54] [debug] Translated type: Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>] -> Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>]
[2020-07-30 19:06:37,54] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:37,54] [debug] After phase expandRecords:
| Bind : Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     where: Apply Function = : SOption[Boolean]
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<(Option[String'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|       1: Path s7.CROMWELL_ID : Option[String']
|       2: Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,54] [debug] Analyzing s8.CROMWELL_ID with symbols 
| Path s8.CROMWELL_ID : Option[String']

[2020-07-30 19:06:37,54] [debug] Translated s8.CROMWELL_ID to:
| Path s8.CROMWELL_ID

[2020-07-30 19:06:37,54] [debug] Flattening projection t11
[2020-07-30 19:06:37,54] [debug] Analyzing s7.CROMWELL_ID with symbols 
| Path s7.CROMWELL_ID : Option[String']

[2020-07-30 19:06:37,54] [debug] Translated s7.CROMWELL_ID to:
| Path s7.CROMWELL_ID

[2020-07-30 19:06:37,54] [debug] Analyzing s7.HEARTBEAT_TIMESTAMP with symbols 
| Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,54] [debug] Translated s7.HEARTBEAT_TIMESTAMP to:
| Path s7.HEARTBEAT_TIMESTAMP

[2020-07-30 19:06:37,54] [debug] Flattening node at Path 
| ProductNode
|   1: Path s7.CROMWELL_ID
|   2: Path s7.HEARTBEAT_TIMESTAMP

[2020-07-30 19:06:37,54] [debug] Flattening node at Path _1
| Path s7.CROMWELL_ID

[2020-07-30 19:06:37,54] [debug] Adding definition: s12 -> Path s7.CROMWELL_ID
[2020-07-30 19:06:37,54] [debug] Flattening node at Path _2
| Path s7.HEARTBEAT_TIMESTAMP

[2020-07-30 19:06:37,54] [debug] Adding definition: s13 -> Path s7.HEARTBEAT_TIMESTAMP
[2020-07-30 19:06:37,54] [debug] Adding translation for t11: (Map(List(_2) -> s13, List(_1) -> s12), UnassignedType)
[2020-07-30 19:06:37,54] [debug] Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.CROMWELL_ID
|     s13: Path s7.HEARTBEAT_TIMESTAMP

[2020-07-30 19:06:37,54] [debug] After phase flattenProjections:
| Bind : Vector[t11<{s12: Option[String'], s13: Option[java.sql.Timestamp']}>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     where: Apply Function = : SOption[Boolean]
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<{s12: Option[String'], s13: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s12: Option[String'], s13: Option[java.sql.Timestamp']}
|       s12: Path s7.CROMWELL_ID : Option[String']
|       s13: Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,54] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:37,54] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:37,54] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:37,54] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:37,54] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:37,54] [debug] Unreferenced: t11; Field refs: (@t10,CROMWELL_ID), (@t10,HEARTBEAT_TIMESTAMP)
[2020-07-30 19:06:37,54] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:37,54] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:37,54] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:37,54] [debug] Creating mapping from t11<(Option[String'], Option[java.sql.Timestamp'])>
[2020-07-30 19:06:37,54] [debug] Creating mapping from Option[String']
[2020-07-30 19:06:37,54] [debug] Creating mapping from Option[java.sql.Timestamp']
[2020-07-30 19:06:37,54] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[(Option[String'], Option[java.sql.Timestamp'])]
|   from s14: Bind : Vector[t11<{s12: Option[String'], s13: Option[java.sql.Timestamp']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|       from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|       where: Apply Function = : SOption[Boolean]
|         0: Path s8.CROMWELL_ID : Option[String']
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t11 : Vector[t11<{s12: Option[String'], s13: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s12: Option[String'], s13: Option[java.sql.Timestamp']}
|         s12: Path s7.CROMWELL_ID : Option[String']
|         s13: Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|   map: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|     1: Path s14.s12 : Option[String']
|     2: Path s14.s13 : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,54] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:37,54] [debug] New defs: Map(0 -> (Path s7.CROMWELL_ID,s15), 1 -> (Path s7.HEARTBEAT_TIMESTAMP,s16))
[2020-07-30 19:06:37,54] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[(Option[String'], Option[java.sql.Timestamp'])]
|   from s14: Bind : Vector[t17<{s15: Option[String'], s16: Option[java.sql.Timestamp']}>]
|     from s7: ...
|     select: Pure t17 : Vector[t17<{s15: Option[String'], s16: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s15: Option[String'], s16: Option[java.sql.Timestamp']}
|         s15: Path s7.CROMWELL_ID : Option[String']
|         s16: Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|   map: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|     1: Path s14.s15 : Option[String']
|     2: Path s14.s16 : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,54] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[(Option[String'], Option[java.sql.Timestamp'])]
|   from s14: Bind : Vector[t17<{s15: Option[String'], s16: Option[java.sql.Timestamp']}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|       from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|       where: Apply Function = : SOption[Boolean]
|         0: Path s8.CROMWELL_ID : Option[String']
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t17 : Vector[t17<{s15: Option[String'], s16: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s15: Option[String'], s16: Option[java.sql.Timestamp']}
|         s15: Path s7.CROMWELL_ID : Option[String']
|         s16: Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|   map: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|     1: Path s14.s15 : Option[String']
|     2: Path s14.s16 : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,54] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:37,54] [debug] Table fields: Map(@t10 -> Vector(CROMWELL_ID, HEARTBEAT_TIMESTAMP))
[2020-07-30 19:06:37,54] [debug] Creating source from TableNode:
| Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]

[2020-07-30 19:06:37,54] [debug] Mappings are: ConstArray(((@t10,CROMWELL_ID),List(CROMWELL_ID)), ((@t10,HEARTBEAT_TIMESTAMP),List(HEARTBEAT_TIMESTAMP)))
[2020-07-30 19:06:37,54] [debug] Building new Comprehension from:
| Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]

[2020-07-30 19:06:37,54] [debug] Built new Comprehension:
| Comprehension s18, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s20: Option[String'], s21: Option[java.sql.Timestamp']}>]
|   from s18: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|   select: Pure t19 : Vector[t19<{s20: Option[String'], s21: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s20: Option[String'], s21: Option[java.sql.Timestamp']}
|       s20: Path s18.CROMWELL_ID : Option[String']
|       s21: Path s18.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,54] [debug] Replacements are: Map((@t10,CROMWELL_ID) -> s20, (@t10,HEARTBEAT_TIMESTAMP) -> s21)
[2020-07-30 19:06:37,54] [debug] Merging Filter into Comprehension:
| Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|   from s8: ...
|   where: Apply Function = : SOption[Boolean]
|     0: Path s8.CROMWELL_ID : Option[String']
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:37,54] [debug] Merged Filter into Comprehension:
| Comprehension s18, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t19<{s20: Option[String'], s21: Option[java.sql.Timestamp']}>]
|   from s18: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|   select: Pure t19 : Vector[t19<{s20: Option[String'], s21: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s20: Option[String'], s21: Option[java.sql.Timestamp']}
|       s20: Path s18.CROMWELL_ID : Option[String']
|       s21: Path s18.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|   where: Apply Function = : SOption[Boolean]
|     0: Path s18.CROMWELL_ID : Option[String']
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:37,54] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t17<{s15: Option[String'], s16: Option[java.sql.Timestamp']}>]
|   from s7: ...
|   select: Pure t17 : Vector[t17<{s15: Option[String'], s16: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s15: Option[String'], s16: Option[java.sql.Timestamp']}
|       s15: Path s7.CROMWELL_ID : Option[String']
|       s16: Path s7.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,55] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s18, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t17<{s15: Option[String'], s16: Option[java.sql.Timestamp']}>]
|   from s18: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|   select: Pure t17 : Vector[t17<{s15: Option[String'], s16: Option[java.sql.Timestamp']}>]
|     value: StructNode : {s15: Option[String'], s16: Option[java.sql.Timestamp']}
|       s15: Path s18.CROMWELL_ID : Option[String']
|       s16: Path s18.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|   where: Apply Function = : SOption[Boolean]
|     0: Path s18.CROMWELL_ID : Option[String']
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:37,55] [debug] Replacements are: Map((t17,s15) -> s15, (t17,s16) -> s16)
[2020-07-30 19:06:37,55] [debug] Mappings are: ConstArray(((t17,s15),List(s15)), ((t17,s16),List(s16)))
[2020-07-30 19:06:37,55] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[(Option[String'], Option[java.sql.Timestamp'])]
|   from s14: Comprehension s18, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t17<{s15: Option[String'], s16: Option[java.sql.Timestamp']}>]
|     from s18: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     select: Pure t17 : Vector[t17<{s15: Option[String'], s16: Option[java.sql.Timestamp']}>]
|       value: StructNode : {s15: Option[String'], s16: Option[java.sql.Timestamp']}
|         s15: Path s18.CROMWELL_ID : Option[String']
|         s16: Path s18.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|     where: Apply Function = : SOption[Boolean]
|       0: Path s18.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|     1: Path s14.s15 : Option[String']
|     2: Path s14.s16 : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,55] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:37,55] [debug] Required symbols: s15 -> 0, s16 -> 1
[2020-07-30 19:06:37,55] [debug] Transformed RSM: 
| ResultSetMapping
|   from s14: Comprehension s18, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t17<(Option[String'], Option[java.sql.Timestamp'])>]
|     from s18: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     select: Pure t17 : Vector[t17<(Option[String'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|         1: Path s18.CROMWELL_ID : Option[String']
|         2: Path s18.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|     where: Apply Function = : SOption[Boolean]
|       0: Path s18.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|     1: Path s14.s15 : Option[String']
|     2: Path s14.s16 : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,55] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[(Option[String'], Option[java.sql.Timestamp'])]
|   from s14: Comprehension s18, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t17<(Option[String'], Option[java.sql.Timestamp'])>]
|     from s18: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     select: Pure t17 : Vector[t17<(Option[String'], Option[java.sql.Timestamp'])>]
|       value: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|         1: Path s18.CROMWELL_ID : Option[String']
|         2: Path s18.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|     where: Apply Function = : SOption[Boolean]
|       0: Path s18.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|     1: Path s14._1 : Option[String']
|     2: Path s14._2 : Option[java.sql.Timestamp']

[2020-07-30 19:06:37,55] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:37,55] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:37,55] [debug] Compiling server-side and mapping with server-side:
| Comprehension s18, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t17<(Option[String'], Option[java.sql.Timestamp'])>]
|   from s18: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|   select: Pure t17 : Vector[t17<(Option[String'], Option[java.sql.Timestamp'])>]
|     value: ProductNode : (Option[String'], Option[java.sql.Timestamp'])
|       1: Path s18.CROMWELL_ID : Option[String']
|       2: Path s18.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|   where: Apply Function = : SOption[Boolean]
|     0: Path s18.CROMWELL_ID : Option[String']
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:37,55] [debug] Compiled ResultConverter
| ProductResultConverter
|   1: SpecializedJdbcResultConverter$$anon$2 idx=1 : String'
|   2: SpecializedJdbcResultConverter$$anon$2 idx=2 : java.sql.Timestamp'

[2020-07-30 19:06:37,55] [debug] Compiled server-side to:
| CompiledStatement "update "WORKFLOW_STORE_ENTRY" set "CROMWELL_ID" = ?, "HEARTBEAT_TIMESTAMP" = ? where "WORKFLOW_STORE_ENTRY"."CROMWELL_ID" = ?" : Vector[t17<(Option[String'], Option[java.sql.Timestamp'])>]

[2020-07-30 19:06:37,55] [debug] After phase codeGen:
| ResultSetMapping : Vector[(Option[String'], Option[java.sql.Timestamp'])]
|   from s14: CompiledStatement "update "WORKFLOW_STORE_ENTRY" set "CROMWELL_ID" = ?, "HEARTBEAT_TIMESTAMP" = ? where "WORKFLOW_STORE_ENTRY"."CROMWELL_ID" = ?" : Vector[t17<(Option[String'], Option[java.sql.Timestamp'])>]
|   map: CompiledMapping : (Option[String'], Option[java.sql.Timestamp'])
|     converter: ProductResultConverter
|       1: SpecializedJdbcResultConverter$$anon$2 idx=1 : String'
|       2: SpecializedJdbcResultConverter$$anon$2 idx=2 : java.sql.Timestamp'

[2020-07-30 19:06:37,55] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:37,55] [debug]       assignUniqueSymbols:    1.316218 ms
[2020-07-30 19:06:37,55] [debug]           unrollTailBinds:    0.132031 ms
[2020-07-30 19:06:37,55] [debug]                inferTypes:    0.285568 ms
[2020-07-30 19:06:37,55] [debug]              expandTables:    2.405403 ms
[2020-07-30 19:06:37,55] [debug]           forceOuterBinds:    0.812949 ms
[2020-07-30 19:06:37,55] [debug]         removeMappedTypes:    0.225079 ms
[2020-07-30 19:06:37,55] [debug]                expandSums:    2.545697 ms
[2020-07-30 19:06:37,55] [debug]             expandRecords:    0.786382 ms
[2020-07-30 19:06:37,55] [debug]        flattenProjections:    2.149637 ms
[2020-07-30 19:06:37,55] [debug]              rewriteJoins:    0.067195 ms
[2020-07-30 19:06:37,55] [debug]             verifySymbols:    0.056012 ms
[2020-07-30 19:06:37,55] [debug]             relabelUnions:    0.046461 ms
[2020-07-30 19:06:37,55] [debug]          createAggregates:    0.028101 ms
[2020-07-30 19:06:37,55] [debug]           resolveZipJoins:    0.041605 ms
[2020-07-30 19:06:37,55] [debug]          pruneProjections:    0.196942 ms
[2020-07-30 19:06:37,55] [debug]           rewriteDistinct:    0.038663 ms
[2020-07-30 19:06:37,55] [debug]    createResultSetMapping:    0.702034 ms
[2020-07-30 19:06:37,55] [debug]            hoistClientOps:    1.191305 ms
[2020-07-30 19:06:37,55] [debug]         reorderOperations:    0.078339 ms
[2020-07-30 19:06:37,55] [debug]     mergeToComprehensions:    3.703763 ms
[2020-07-30 19:06:37,55] [debug]            optimizeScalar:    0.088178 ms
[2020-07-30 19:06:37,55] [debug]          removeFieldNames:    1.385142 ms
[2020-07-30 19:06:37,55] [debug]      specializeParameters:    0.136590 ms
[2020-07-30 19:06:37,55] [debug]                   codeGen:    1.899857 ms
[2020-07-30 19:06:37,55] [debug]                     TOTAL:   20.319151 ms
[2020-07-30 19:06:37,55] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@6131f58c
          base: SetTransactionIsolation
[2020-07-30 19:06:37,55] [debug] Preparing statement: update "WORKFLOW_STORE_ENTRY" set "CROMWELL_ID" = ?, "HEARTBEAT_TIMESTAMP" = ? where "WORKFLOW_STORE_ENTRY"."CROMWELL_ID" = ?
[2020-07-30 19:06:37,55] [debug] Executing prepared update: HikariProxyPreparedStatement@1782316862 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@139069a[sql=[update "WORKFLOW_STORE_ENTRY" set "CROMWELL_ID" = ?, "HEARTBEAT_TIMESTAMP" = ? where "WORKFLOW_STORE_ENTRY"."CROMWELL_ID" = ?], parameters=[[null], [null], [cromid-c858775]]]
[2020-07-30 19:06:37,55] [debug] Executing prepared update: HikariProxyPreparedStatement@1782316862 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@139069a[sql=[update "WORKFLOW_STORE_ENTRY" set "CROMWELL_ID" = ?, "HEARTBEAT_TIMESTAMP" = ? where "WORKFLOW_STORE_ENTRY"."CROMWELL_ID" = ?], parameters=[[null], [null], [cromid-c858775]]]
[2020-07-30 19:06:37,55] [debug] /---------+-----------+----------------\
[2020-07-30 19:06:37,55] [debug] | 1       | 2         | 3              |
[2020-07-30 19:06:37,55] [debug] | VARCHAR | TIMESTAMP | String         |
[2020-07-30 19:06:37,55] [debug] |---------+-----------+----------------|
[2020-07-30 19:06:37,55] [debug] | NULL    | NULL      | cromid-c858775 |
[2020-07-30 19:06:37,55] [debug] \---------+-----------+----------------/
[2020-07-30 19:06:37,55] [debug] Execution of prepared update took 173µs
[2020-07-30 19:06:37,55] [info] 0 workflows released by cromid-c858775
[2020-07-30 19:06:37,56] [debug] Source:
| Bind
|   from s2: Filter s3
|     from s3: TableExpansion
|       table s4: Table WORKFLOW_STORE_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s4.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s4.WORKFLOW_DEFINITION : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           3: Path s4.WORKFLOW_URL : Option[String']
|           4: Path s4.WORKFLOW_ROOT : Option[String']
|           5: Path s4.WORKFLOW_TYPE : Option[String']
|           6: Path s4.WORKFLOW_TYPE_VERSION : Option[String']
|           7: Path s4.WORKFLOW_INPUTS : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           8: Path s4.WORKFLOW_OPTIONS : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           9: Path s4.WORKFLOW_STATE : String'
|           10: Path s4.SUBMISSION_TIME : java.sql.Timestamp'
|           11: Path s4.IMPORTS_ZIP : Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']]
|           12: Path s4.CUSTOM_LABELS : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|           13: Path s4.CROMWELL_ID : Option[String']
|           14: Path s4.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|           15: Path s4.HOG_GROUP : Option[String']
|           16: OptionApply
|             0: Path s4.WORKFLOW_STORE_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s3.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t6
|     value: Path s2.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:37,56] [debug] Detected features: UsedFeatures(false,true,false,true)
[2020-07-30 19:06:37,56] [debug] After phase assignUniqueSymbols:
| Bind
|   from s7: Filter s8
|     from s8: TableExpansion
|       table s9: Table WORKFLOW_STORE_ENTRY
|       columns: TypeMapping
|         0: ProductNode
|           1: Path s9.WORKFLOW_EXECUTION_UUID : String'
|           2: Path s9.WORKFLOW_DEFINITION : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           3: Path s9.WORKFLOW_URL : Option[String']
|           4: Path s9.WORKFLOW_ROOT : Option[String']
|           5: Path s9.WORKFLOW_TYPE : Option[String']
|           6: Path s9.WORKFLOW_TYPE_VERSION : Option[String']
|           7: Path s9.WORKFLOW_INPUTS : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           8: Path s9.WORKFLOW_OPTIONS : Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']]
|           9: Path s9.WORKFLOW_STATE : String'
|           10: Path s9.SUBMISSION_TIME : java.sql.Timestamp'
|           11: Path s9.IMPORTS_ZIP : Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']]
|           12: Path s9.CUSTOM_LABELS : MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']
|           13: Path s9.CROMWELL_ID : Option[String']
|           14: Path s9.HEARTBEAT_TIMESTAMP : Option[java.sql.Timestamp']
|           15: Path s9.HOG_GROUP : Option[String']
|           16: OptionApply
|             0: Path s9.WORKFLOW_STORE_ENTRY_ID : Int'
|     where: Apply Function =
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d
|   select: Pure t11
|     value: Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:37,56] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:37,56] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:37,56] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.WORKFLOW_STORE_ENTRY)
[2020-07-30 19:06:37,56] [debug] With correct table types:
| Bind : Vector[t11<String'>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     where: Apply Function = : SOption[Boolean]
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<String'>]
|     value: Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:37,56] [debug] Table expansions: @t10 -> (s9,TypeMapping)
[2020-07-30 19:06:37,56] [debug] After phase expandTables:
| Bind : Vector[t11<String'>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     where: Apply Function = : SOption[Boolean]
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<String'>]
|     value: Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:37,56] [debug] After phase forceOuterBinds:
| Bind : Vector[t11<String'>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     where: Apply Function = : SOption[Boolean]
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<String'>]
|     value: Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:37,56] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:37,56] [debug] Translated type: Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>] -> Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
[2020-07-30 19:06:37,56] [debug] Translated type: @t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}> -> @t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>
[2020-07-30 19:06:37,56] [debug] Translated type: Option[String'] -> Option[String']
[2020-07-30 19:06:37,56] [debug] Translated type: String' -> String'
[2020-07-30 19:06:37,56] [debug] Translated type: SOption[Boolean] -> SOption[Boolean]
[2020-07-30 19:06:37,56] [debug] Translated type: Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>] -> Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
[2020-07-30 19:06:37,56] [debug] Translated type: @t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}> -> @t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>
[2020-07-30 19:06:37,56] [debug] Translated type: String' -> String'
[2020-07-30 19:06:37,56] [debug] Translated type: Vector[t11<String'>] -> Vector[t11<String'>]
[2020-07-30 19:06:37,56] [debug] Translated type: Vector[t11<String'>] -> Vector[t11<String'>]
[2020-07-30 19:06:37,56] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:37,56] [debug] After phase expandRecords:
| Bind : Vector[t11<String'>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     where: Apply Function = : SOption[Boolean]
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<String'>]
|     value: Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:37,56] [debug] Analyzing s8.CROMWELL_ID with symbols 
| Path s8.CROMWELL_ID : Option[String']

[2020-07-30 19:06:37,56] [debug] Translated s8.CROMWELL_ID to:
| Path s8.CROMWELL_ID

[2020-07-30 19:06:37,56] [debug] Flattening projection t11
[2020-07-30 19:06:37,56] [debug] Analyzing s7.WORKFLOW_EXECUTION_UUID with symbols 
| Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:37,56] [debug] Translated s7.WORKFLOW_EXECUTION_UUID to:
| Path s7.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:37,56] [debug] Flattening node at Path 
| Path s7.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:37,56] [debug] Adding definition: s12 -> Path s7.WORKFLOW_EXECUTION_UUID
[2020-07-30 19:06:37,56] [debug] Adding translation for t11: (Map(List() -> s12), UnassignedType)
[2020-07-30 19:06:37,56] [debug] Flattened projection to
| Pure t11
|   value: StructNode
|     s12: Path s7.WORKFLOW_EXECUTION_UUID

[2020-07-30 19:06:37,56] [debug] After phase flattenProjections:
| Bind : Vector[t11<{s12: String'}>]
|   from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     where: Apply Function = : SOption[Boolean]
|       0: Path s8.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   select: Pure t11 : Vector[t11<{s12: String'}>]
|     value: StructNode : {s12: String'}
|       s12: Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:37,56] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:37,56] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:37,56] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:37,56] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:37,56] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:37,56] [debug] Unreferenced: t11; Field refs: (@t10,WORKFLOW_EXECUTION_UUID), (@t10,CROMWELL_ID)
[2020-07-30 19:06:37,56] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:37,56] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:37,56] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:37,56] [debug] Creating mapping from t11<String'>
[2020-07-30 19:06:37,56] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[String']
|   from s13: Bind : Vector[t11<{s12: String'}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|       from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|       where: Apply Function = : SOption[Boolean]
|         0: Path s8.CROMWELL_ID : Option[String']
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t11 : Vector[t11<{s12: String'}>]
|       value: StructNode : {s12: String'}
|         s12: Path s7.WORKFLOW_EXECUTION_UUID : String'
|   map: Path s13.s12 : String'

[2020-07-30 19:06:37,56] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:37,56] [debug] New defs: Map(0 -> (Path s7.WORKFLOW_EXECUTION_UUID,s14))
[2020-07-30 19:06:37,56] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[String']
|   from s13: Bind : Vector[t15<{s14: String'}>]
|     from s7: ...
|     select: Pure t15 : Vector[t15<{s14: String'}>]
|       value: StructNode : {s14: String'}
|         s14: Path s7.WORKFLOW_EXECUTION_UUID : String'
|   map: Path s13.s14 : String'

[2020-07-30 19:06:37,56] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[String']
|   from s13: Bind : Vector[t15<{s14: String'}>]
|     from s7: Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|       from s8: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|       where: Apply Function = : SOption[Boolean]
|         0: Path s8.CROMWELL_ID : Option[String']
|         1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|     select: Pure t15 : Vector[t15<{s14: String'}>]
|       value: StructNode : {s14: String'}
|         s14: Path s7.WORKFLOW_EXECUTION_UUID : String'
|   map: Path s13.s14 : String'

[2020-07-30 19:06:37,56] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:37,56] [debug] Table fields: Map(@t10 -> Vector(CROMWELL_ID, WORKFLOW_EXECUTION_UUID))
[2020-07-30 19:06:37,56] [debug] Creating source from TableNode:
| Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]

[2020-07-30 19:06:37,56] [debug] Mappings are: ConstArray(((@t10,CROMWELL_ID),List(CROMWELL_ID)), ((@t10,WORKFLOW_EXECUTION_UUID),List(WORKFLOW_EXECUTION_UUID)))
[2020-07-30 19:06:37,56] [debug] Building new Comprehension from:
| Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]

[2020-07-30 19:06:37,56] [debug] Built new Comprehension:
| Comprehension s16, None, None, ConstArray(), None, None, None, None, false : Vector[t17<{s18: Option[String'], s19: String'}>]
|   from s16: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|   select: Pure t17 : Vector[t17<{s18: Option[String'], s19: String'}>]
|     value: StructNode : {s18: Option[String'], s19: String'}
|       s18: Path s16.CROMWELL_ID : Option[String']
|       s19: Path s16.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:37,56] [debug] Replacements are: Map((@t10,CROMWELL_ID) -> s18, (@t10,WORKFLOW_EXECUTION_UUID) -> s19)
[2020-07-30 19:06:37,56] [debug] Merging Filter into Comprehension:
| Filter s8 : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|   from s8: ...
|   where: Apply Function = : SOption[Boolean]
|     0: Path s8.CROMWELL_ID : Option[String']
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:37,56] [debug] Merged Filter into Comprehension:
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t17<{s18: Option[String'], s19: String'}>]
|   from s16: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|   select: Pure t17 : Vector[t17<{s18: Option[String'], s19: String'}>]
|     value: StructNode : {s18: Option[String'], s19: String'}
|       s18: Path s16.CROMWELL_ID : Option[String']
|       s19: Path s16.WORKFLOW_EXECUTION_UUID : String'
|   where: Apply Function = : SOption[Boolean]
|     0: Path s16.CROMWELL_ID : Option[String']
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:37,56] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t15<{s14: String'}>]
|   from s7: ...
|   select: Pure t15 : Vector[t15<{s14: String'}>]
|     value: StructNode : {s14: String'}
|       s14: Path s7.WORKFLOW_EXECUTION_UUID : String'

[2020-07-30 19:06:37,57] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<{s14: String'}>]
|   from s16: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|   select: Pure t15 : Vector[t15<{s14: String'}>]
|     value: StructNode : {s14: String'}
|       s14: Path s16.WORKFLOW_EXECUTION_UUID : String'
|   where: Apply Function = : SOption[Boolean]
|     0: Path s16.CROMWELL_ID : Option[String']
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:37,57] [debug] Replacements are: Map((t15,s14) -> s14)
[2020-07-30 19:06:37,57] [debug] Mappings are: ConstArray(((t15,s14),List(s14)))
[2020-07-30 19:06:37,57] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[String']
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<{s14: String'}>]
|     from s16: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     select: Pure t15 : Vector[t15<{s14: String'}>]
|       value: StructNode : {s14: String'}
|         s14: Path s16.WORKFLOW_EXECUTION_UUID : String'
|     where: Apply Function = : SOption[Boolean]
|       0: Path s16.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: Path s13.s14 : String'

[2020-07-30 19:06:37,57] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:37,57] [debug] Required symbols: s14 -> 0
[2020-07-30 19:06:37,57] [debug] Transformed RSM: 
| ResultSetMapping
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(String')>]
|     from s16: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     select: Pure t15 : Vector[t15<(String')>]
|       value: ProductNode : (String')
|         1: Path s16.WORKFLOW_EXECUTION_UUID : String'
|     where: Apply Function = : SOption[Boolean]
|       0: Path s16.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: Path s13.s14 : String'

[2020-07-30 19:06:37,57] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[String']
|   from s13: Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(String')>]
|     from s16: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|     select: Pure t15 : Vector[t15<(String')>]
|       value: ProductNode : (String')
|         1: Path s16.WORKFLOW_EXECUTION_UUID : String'
|     where: Apply Function = : SOption[Boolean]
|       0: Path s16.CROMWELL_ID : Option[String']
|       1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'
|   map: Path s13._1 : String'

[2020-07-30 19:06:37,57] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:37,57] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:37,57] [debug] Compiling server-side and mapping with server-side:
| Comprehension s16, Some(Apply Function =), None, ConstArray(), None, None, None, None, false : Vector[t15<(String')>]
|   from s16: Table WORKFLOW_STORE_ENTRY : Vector[@t10<{WORKFLOW_OPTIONS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_EXECUTION_UUID: String', WORKFLOW_TYPE_VERSION: Option[String'], WORKFLOW_STATE: String', CUSTOM_LABELS: MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob'], SUBMISSION_TIME: java.sql.Timestamp', IMPORTS_ZIP: Option[MappedJdbcType[javax.sql.rowset.serial.SerialBlob -> java.sql.Blob']], WORKFLOW_URL: Option[String'], WORKFLOW_TYPE: Option[String'], HEARTBEAT_TIMESTAMP: Option[java.sql.Timestamp'], WORKFLOW_DEFINITION: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_STORE_ENTRY_ID: Int', HOG_GROUP: Option[String'], WORKFLOW_INPUTS: Option[MappedJdbcType[javax.sql.rowset.serial.SerialClob -> java.sql.Clob']], WORKFLOW_ROOT: Option[String'], CROMWELL_ID: Option[String']}>]
|   select: Pure t15 : Vector[t15<(String')>]
|     value: ProductNode : (String')
|       1: Path s16.WORKFLOW_EXECUTION_UUID : String'
|   where: Apply Function = : SOption[Boolean]
|     0: Path s16.CROMWELL_ID : Option[String']
|     1: QueryParameter s5 slick.lifted.CompiledFunction$$Lambda$827/0x0000000801289040@55e5f69d : String'

[2020-07-30 19:06:37,57] [debug] Compiled ResultConverter
| SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'

[2020-07-30 19:06:37,57] [debug] Compiled server-side to:
| CompiledStatement "select "WORKFLOW_EXECUTION_UUID" from "WORKFLOW_STORE_ENTRY" where "CROMWELL_ID" = ?" : Vector[t15<(String')>]

[2020-07-30 19:06:37,57] [debug] After phase codeGen:
| ResultSetMapping : Vector[String']
|   from s13: CompiledStatement "select "WORKFLOW_EXECUTION_UUID" from "WORKFLOW_STORE_ENTRY" where "CROMWELL_ID" = ?" : Vector[t15<(String')>]
|   map: CompiledMapping : String'
|     converter: SpecializedJdbcResultConverter$$anon$1 idx=1, name=<computed> : String'

[2020-07-30 19:06:37,57] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:37,57] [debug]       assignUniqueSymbols:    0.802931 ms
[2020-07-30 19:06:37,57] [debug]           unrollTailBinds:    0.057301 ms
[2020-07-30 19:06:37,57] [debug]                inferTypes:    0.188803 ms
[2020-07-30 19:06:37,57] [debug]              expandTables:    1.376037 ms
[2020-07-30 19:06:37,57] [debug]           forceOuterBinds:    0.418595 ms
[2020-07-30 19:06:37,57] [debug]         removeMappedTypes:    0.129608 ms
[2020-07-30 19:06:37,57] [debug]                expandSums:    0.938470 ms
[2020-07-30 19:06:37,57] [debug]             expandRecords:    0.461519 ms
[2020-07-30 19:06:37,57] [debug]        flattenProjections:    0.973116 ms
[2020-07-30 19:06:37,57] [debug]              rewriteJoins:    0.060334 ms
[2020-07-30 19:06:37,57] [debug]             verifySymbols:    0.049384 ms
[2020-07-30 19:06:37,57] [debug]             relabelUnions:    0.047682 ms
[2020-07-30 19:06:37,57] [debug]          createAggregates:    0.024512 ms
[2020-07-30 19:06:37,57] [debug]           resolveZipJoins:    0.039448 ms
[2020-07-30 19:06:37,57] [debug]          pruneProjections:    0.181553 ms
[2020-07-30 19:06:37,57] [debug]           rewriteDistinct:    0.038003 ms
[2020-07-30 19:06:37,57] [debug]    createResultSetMapping:    0.521129 ms
[2020-07-30 19:06:37,57] [debug]            hoistClientOps:    1.052914 ms
[2020-07-30 19:06:37,57] [debug]         reorderOperations:    0.072734 ms
[2020-07-30 19:06:37,57] [debug]     mergeToComprehensions:    3.164527 ms
[2020-07-30 19:06:37,57] [debug]            optimizeScalar:    0.077342 ms
[2020-07-30 19:06:37,57] [debug]          removeFieldNames:    1.158571 ms
[2020-07-30 19:06:37,57] [debug]      specializeParameters:    0.189704 ms
[2020-07-30 19:06:37,57] [debug]                   codeGen:    1.162598 ms
[2020-07-30 19:06:37,57] [debug]                     TOTAL:   13.186815 ms
[2020-07-30 19:06:37,57] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: flatMap slick.jdbc.JdbcActionComponent$JdbcActionExtensionMethods$$Lambda$1656/0x0000000801619040@4fcf162b
          base: SetTransactionIsolation
[2020-07-30 19:06:37,57] [info] Shutting down WorkflowStoreActor - Timeout = 5 seconds
[2020-07-30 19:06:37,57] [debug] Preparing statement: select "WORKFLOW_EXECUTION_UUID" from "WORKFLOW_STORE_ENTRY" where "CROMWELL_ID" = ?
[2020-07-30 19:06:37,57] [debug] Executing prepared statement: HikariProxyPreparedStatement@1205633863 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7919719c[sql=[select "WORKFLOW_EXECUTION_UUID" from "WORKFLOW_STORE_ENTRY" where "CROMWELL_ID" = ?], parameters=[[cromid-c858775]]]
[2020-07-30 19:06:37,57] [debug] Executing prepared statement: HikariProxyPreparedStatement@1205633863 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@7919719c[sql=[select "WORKFLOW_EXECUTION_UUID" from "WORKFLOW_STORE_ENTRY" where "CROMWELL_ID" = ?], parameters=[[cromid-c858775]]]
[2020-07-30 19:06:37,57] [debug] /----------------\
[2020-07-30 19:06:37,57] [debug] | 1              |
[2020-07-30 19:06:37,57] [debug] | String         |
[2020-07-30 19:06:37,57] [debug] |----------------|
[2020-07-30 19:06:37,57] [debug] | cromid-c858775 |
[2020-07-30 19:06:37,57] [debug] \----------------/
[2020-07-30 19:06:37,57] [debug] Execution of prepared statement took 68µs
[2020-07-30 19:06:37,57] [debug] /----------------------\
[2020-07-30 19:06:37,57] [debug] | 1                    |
[2020-07-30 19:06:37,57] [debug] | WORKFLOW_EXECUTIO... |
[2020-07-30 19:06:37,57] [debug] |----------------------|
[2020-07-30 19:06:37,57] [debug] \----------------------/
[2020-07-30 19:06:37,57] [info] Shutting down WorkflowLogCopyRouter - Timeout = 5 seconds
[2020-07-30 19:06:37,58] [info] Shutting down JobExecutionTokenDispenser - Timeout = 5 seconds
[INFO] [07/30/2020 19:06:37.585] [cromwell-system-akka.dispatchers.engine-dispatcher-32] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowStoreActor/WorkflowStoreEngineActor] Aborting all running workflows.
[2020-07-30 19:06:37,58] [info] JobExecutionTokenDispenser stopped
[INFO] [07/30/2020 19:06:37.588] [cromwell-system-akka.actor.default-dispatcher-62] [akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowStoreActor/WorkflowStoreEngineActor] Message [cromwell.engine.workflow.workflowstore.WorkflowStoreActor$WorkDone$] from Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowStoreActor/WorkflowStoreEngineActor#1226375688] to Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowStoreActor/WorkflowStoreEngineActor#1226375688] was not delivered. [1] dead letters encountered. If this is not an expected behavior, then [Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor/WorkflowStoreActor/WorkflowStoreEngineActor#1226375688]] may have terminated unexpectedly, This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
[2020-07-30 19:06:37,58] [info] WorkflowStoreActor stopped
[2020-07-30 19:06:37,58] [info] WorkflowLogCopyRouter stopped
[2020-07-30 19:06:37,65] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:37,65] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:37,65] [debug] #3: StartTransaction
[2020-07-30 19:06:37,65] [debug] #4: result [select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"]
[2020-07-30 19:06:37,65] [debug] Preparing statement: select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"
[2020-07-30 19:06:37,65] [debug] Executing prepared statement: HikariProxyPreparedStatement@1888210445 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@324ec5e0[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:37,65] [debug] Executing prepared statement: HikariProxyPreparedStatement@1888210445 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@324ec5e0[sql=[select s41."WORKFLOW_EXECUTION_UUID", s41."CALL_FQN", s41."JOB_SCATTER_INDEX", s41."JOB_RETRY_ATTEMPT", s41."METADATA_KEY", s41."METADATA_VALUE", s41."METADATA_VALUE_TYPE", s41."METADATA_TIMESTAMP", s41."METADATA_JOURNAL_ID" from (select "METADATA_JOURNAL_ID" as s55 from "SUMMARY_QUEUE_ENTRY" limit ?) s40, "METADATA_ENTRY" s41 where s41."METADATA_JOURNAL_ID" = s40.s55 order by s41."METADATA_JOURNAL_ID"], parameters=[[5000]]]
[2020-07-30 19:06:37,65] [debug] /------\
[2020-07-30 19:06:37,65] [debug] | 1    |
[2020-07-30 19:06:37,65] [debug] | Long |
[2020-07-30 19:06:37,65] [debug] |------|
[2020-07-30 19:06:37,65] [debug] | 5000 |
[2020-07-30 19:06:37,65] [debug] \------/
[2020-07-30 19:06:37,65] [debug] Execution of prepared statement took 81µs
[2020-07-30 19:06:37,65] [debug] /----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------\
[2020-07-30 19:06:37,65] [debug] | 1                    | 2        | 3                 | 4                 | 5            | 6              | 7                   | 8                  | 9                   |
[2020-07-30 19:06:37,65] [debug] | WORKFLOW_EXECUTIO... | CALL_FQN | JOB_SCATTER_INDEX | JOB_RETRY_ATTEMPT | METADATA_KEY | METADATA_VALUE | METADATA_VALUE_TYPE | METADATA_TIMESTAMP | METADATA_JOURNAL_ID |
[2020-07-30 19:06:37,65] [debug] |----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------|
[2020-07-30 19:06:37,65] [debug] \----------------------+----------+-------------------+-------------------+--------------+----------------+---------------------+--------------------+---------------------/
[2020-07-30 19:06:37,65] [debug] #5: success Vector()
[2020-07-30 19:06:37,65] [debug] #6: success Vector()
[2020-07-30 19:06:37,65] [debug] #7: success ()
[2020-07-30 19:06:37,65] [debug] #8: success ((),Vector())
[2020-07-30 19:06:37,65] [debug] Source:
| Filter s2
|   from s2: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:37,65] [debug] Detected features: UsedFeatures(false,true,false,false)
[2020-07-30 19:06:37,65] [debug] After phase assignUniqueSymbols:
| Filter s4
|   from s4: TableExpansion
|     table s5: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s5.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false)

[2020-07-30 19:06:37,65] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:37,65] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:37,65] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:37,65] [debug] With correct table types:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:37,65] [debug] Table expansions: @t6 -> (s5,TypeMapping)
[2020-07-30 19:06:37,65] [debug] Expanding tables in result type
[2020-07-30 19:06:37,65] [debug] After phase expandTables:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,65] [debug] After phase forceOuterBinds:
| Bind : Vector[t8<Mapped[Long']>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Mapped[Long']>]
|     value: TypeMapping : Mapped[Long']
|       0: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,65] [debug] After phase removeMappedTypes:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,65] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:37,65] [debug] After phase expandRecords:
| Bind : Vector[t8<Long'>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<Long'>]
|     value: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,65] [debug] Flattening projection t8
[2020-07-30 19:06:37,65] [debug] Analyzing s7.METADATA_JOURNAL_ID with symbols 
| Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,65] [debug] Translated s7.METADATA_JOURNAL_ID to:
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:37,65] [debug] Flattening node at Path 
| Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:37,65] [debug] Adding definition: s9 -> Path s7.METADATA_JOURNAL_ID
[2020-07-30 19:06:37,65] [debug] Adding translation for t8: (Map(List() -> s9), UnassignedType)
[2020-07-30 19:06:37,65] [debug] Flattened projection to
| Pure t8
|   value: StructNode
|     s9: Path s7.METADATA_JOURNAL_ID

[2020-07-30 19:06:37,65] [debug] After phase flattenProjections:
| Bind : Vector[t8<{s9: Long'}>]
|   from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     where: LiteralNode false (volatileHint=false) : Boolean
|   select: Pure t8 : Vector[t8<{s9: Long'}>]
|     value: StructNode : {s9: Long'}
|       s9: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,65] [debug] After phase rewriteJoins: (no change)
[2020-07-30 19:06:37,65] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:37,65] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:37,65] [debug] After phase createAggregates: (no change)
[2020-07-30 19:06:37,65] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:37,65] [debug] Unreferenced: t8; Field refs: (@t6,METADATA_JOURNAL_ID)
[2020-07-30 19:06:37,65] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:37,65] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:37,65] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:37,65] [debug] Creating mapping from t8<Mapped[Long']>
[2020-07-30 19:06:37,65] [debug] Creating mapping from Long'
[2020-07-30 19:06:37,65] [debug] After phase createResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t8<{s9: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t8 : Vector[t8<{s9: Long'}>]
|       value: StructNode : {s9: Long'}
|         s9: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s9 : Long'

[2020-07-30 19:06:37,65] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:37,65] [debug] New defs: Map(0 -> (Path s7.METADATA_JOURNAL_ID,s11))
[2020-07-30 19:06:37,65] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: ...
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:37,65] [debug] After phase hoistClientOps:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Bind : Vector[t12<{s11: Long'}>]
|     from s7: Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       from s4: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|       where: LiteralNode false (volatileHint=false) : Boolean
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s7.METADATA_JOURNAL_ID : Long'
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:37,65] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:37,65] [debug] Table fields: Map(@t6 -> Vector(METADATA_JOURNAL_ID))
[2020-07-30 19:06:37,65] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:37,65] [debug] Mappings are: ConstArray(((@t6,METADATA_JOURNAL_ID),List(METADATA_JOURNAL_ID)))
[2020-07-30 19:06:37,65] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:37,65] [debug] Built new Comprehension:
| Comprehension s13, None, None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,65] [debug] Replacements are: Map((@t6,METADATA_JOURNAL_ID) -> s15)
[2020-07-30 19:06:37,65] [debug] Merging Filter into Comprehension:
| Filter s4 : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   from s4: ...
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:37,66] [debug] Merged Filter into Comprehension:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t14<{s15: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t14 : Vector[t14<{s15: Long'}>]
|     value: StructNode : {s15: Long'}
|       s15: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:37,66] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t12<{s11: Long'}>]
|   from s7: ...
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s7.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,66] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<{s11: Long'}>]
|     value: StructNode : {s11: Long'}
|       s11: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:37,66] [debug] Replacements are: Map((t12,s11) -> s11)
[2020-07-30 19:06:37,66] [debug] Mappings are: ConstArray(((t12,s11),List(s11)))
[2020-07-30 19:06:37,66] [debug] After phase mergeToComprehensions:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<{s11: Long'}>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<{s11: Long'}>]
|       value: StructNode : {s11: Long'}
|         s11: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:37,66] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:37,66] [debug] Required symbols: s11 -> 0
[2020-07-30 19:06:37,66] [debug] Transformed RSM: 
| ResultSetMapping
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10.s11 : Long'

[2020-07-30 19:06:37,66] [debug] After phase removeFieldNames:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|     from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t12 : Vector[t12<(Long')>]
|       value: ProductNode : (Long')
|         1: Path s13.METADATA_JOURNAL_ID : Long'
|     where: LiteralNode false (volatileHint=false) : Boolean
|   map: TypeMapping : Mapped[Long']
|     0: Path s10._1 : Long'

[2020-07-30 19:06:37,66] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:37,66] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:37,66] [debug] Compiling server-side and mapping with server-side:
| Comprehension s13, Some(LiteralNode false (volatileHint=false)), None, ConstArray(), None, None, None, None, false : Vector[t12<(Long')>]
|   from s13: Table SUMMARY_QUEUE_ENTRY : Vector[@t6<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t12 : Vector[t12<(Long')>]
|     value: ProductNode : (Long')
|       1: Path s13.METADATA_JOURNAL_ID : Long'
|   where: LiteralNode false (volatileHint=false) : Boolean

[2020-07-30 19:06:37,66] [debug] Compiled ResultConverter
| TypeMappingResultConverter
|   child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:37,66] [debug] Compiled server-side to:
| CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]

[2020-07-30 19:06:37,66] [debug] After phase codeGen:
| ResultSetMapping : Vector[Mapped[Long']]
|   from s10: CompiledStatement "delete from "SUMMARY_QUEUE_ENTRY" where false" : Vector[t12<(Long')>]
|   map: CompiledMapping : Mapped[Long']
|     converter: TypeMappingResultConverter
|       child: BaseResultConverter$mcJ$sp idx=1, name=<computed> : Long'

[2020-07-30 19:06:37,66] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:37,66] [debug]       assignUniqueSymbols:    0.313070 ms
[2020-07-30 19:06:37,66] [debug]           unrollTailBinds:    0.037987 ms
[2020-07-30 19:06:37,66] [debug]                inferTypes:    0.083426 ms
[2020-07-30 19:06:37,66] [debug]              expandTables:    0.922989 ms
[2020-07-30 19:06:37,66] [debug]           forceOuterBinds:    0.278769 ms
[2020-07-30 19:06:37,66] [debug]         removeMappedTypes:    0.249200 ms
[2020-07-30 19:06:37,66] [debug]                expandSums:    0.028340 ms
[2020-07-30 19:06:37,66] [debug]             expandRecords:    0.237822 ms
[2020-07-30 19:06:37,66] [debug]        flattenProjections:    0.728178 ms
[2020-07-30 19:06:37,66] [debug]              rewriteJoins:    0.048269 ms
[2020-07-30 19:06:37,66] [debug]             verifySymbols:    0.048654 ms
[2020-07-30 19:06:37,66] [debug]             relabelUnions:    0.037384 ms
[2020-07-30 19:06:37,66] [debug]          createAggregates:    0.028473 ms
[2020-07-30 19:06:37,66] [debug]           resolveZipJoins:    0.035262 ms
[2020-07-30 19:06:37,66] [debug]          pruneProjections:    0.141825 ms
[2020-07-30 19:06:37,66] [debug]           rewriteDistinct:    0.038717 ms
[2020-07-30 19:06:37,66] [debug]    createResultSetMapping:    0.407498 ms
[2020-07-30 19:06:37,66] [debug]            hoistClientOps:    0.829214 ms
[2020-07-30 19:06:37,66] [debug]         reorderOperations:    0.061089 ms
[2020-07-30 19:06:37,66] [debug]     mergeToComprehensions:    2.246348 ms
[2020-07-30 19:06:37,66] [debug]            optimizeScalar:    0.065356 ms
[2020-07-30 19:06:37,66] [debug]          removeFieldNames:    0.880321 ms
[2020-07-30 19:06:37,66] [debug]      specializeParameters:    0.103458 ms
[2020-07-30 19:06:37,66] [debug]                   codeGen:    0.807588 ms
[2020-07-30 19:06:37,66] [debug]                     TOTAL:    8.659237 ms
[2020-07-30 19:06:37,66] [debug] #9: delete [delete from "SUMMARY_QUEUE_ENTRY" where false]
[2020-07-30 19:06:37,66] [debug] Preparing statement: delete from "SUMMARY_QUEUE_ENTRY" where false
[2020-07-30 19:06:37,66] [debug] Executing prepared update: HikariProxyPreparedStatement@1403733188 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@35517dd9[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:37,66] [debug] Executing prepared update: HikariProxyPreparedStatement@1403733188 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@35517dd9[sql=[delete from "SUMMARY_QUEUE_ENTRY" where false]]
[2020-07-30 19:06:37,66] [debug] Execution of prepared update took 143µs
[2020-07-30 19:06:37,66] [debug] #10: success 0
[2020-07-30 19:06:37,66] [debug] #11: Commit
[2020-07-30 19:06:37,66] [debug] #12: SetTransactionIsolation
[2020-07-30 19:06:37,66] [debug] #13: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:37,66] [debug] #1: SynchronousDatabaseAction.Pin
[2020-07-30 19:06:37,66] [debug] #2: SetTransactionIsolation
[2020-07-30 19:06:37,66] [debug] #3: StartTransaction
[2020-07-30 19:06:37,66] [debug] #4: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:37,66] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:37,66] [debug] Executing prepared statement: HikariProxyPreparedStatement@633430992 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6164cbd9[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:37,66] [debug] Executing prepared statement: HikariProxyPreparedStatement@633430992 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@6164cbd9[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_DECREASING]]]
[2020-07-30 19:06:37,66] [debug] /---------------------------\
[2020-07-30 19:06:37,66] [debug] | 1                         |
[2020-07-30 19:06:37,66] [debug] | String                    |
[2020-07-30 19:06:37,66] [debug] |---------------------------|
[2020-07-30 19:06:37,66] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:37,66] [debug] \---------------------------/
[2020-07-30 19:06:37,66] [debug] Execution of prepared statement took 46µs
[2020-07-30 19:06:37,66] [debug] /------------------\
[2020-07-30 19:06:37,66] [debug] | 1                |
[2020-07-30 19:06:37,66] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:37,66] [debug] |------------------|
[2020-07-30 19:06:37,66] [debug] \------------------/
[2020-07-30 19:06:37,66] [debug] #5: StreamingInvokerAction$HeadOptionAction [select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?]
[2020-07-30 19:06:37,66] [debug] Preparing statement: select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?
[2020-07-30 19:06:37,66] [debug] Executing prepared statement: HikariProxyPreparedStatement@1983978503 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@48c00f73[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:37,66] [debug] Executing prepared statement: HikariProxyPreparedStatement@1983978503 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@48c00f73[sql=[select "SUMMARY_POSITION" from "SUMMARY_STATUS_ENTRY" where "SUMMARY_NAME" = ?], parameters=[[WORKFLOW_METADATA_SUMMARY_ENTRY_INCREASING]]]
[2020-07-30 19:06:37,66] [debug] /---------------------------\
[2020-07-30 19:06:37,67] [debug] | 1                         |
[2020-07-30 19:06:37,67] [debug] | String                    |
[2020-07-30 19:06:37,67] [debug] |---------------------------|
[2020-07-30 19:06:37,67] [debug] | WORKFLOW_METADATA_SUMM... |
[2020-07-30 19:06:37,67] [debug] \---------------------------/
[2020-07-30 19:06:37,67] [debug] Execution of prepared statement took 59µs
[2020-07-30 19:06:37,67] [debug] /------------------\
[2020-07-30 19:06:37,67] [debug] | 1                |
[2020-07-30 19:06:37,67] [debug] | SUMMARY_POSITION |
[2020-07-30 19:06:37,67] [debug] |------------------|
[2020-07-30 19:06:37,67] [debug] \------------------/
[2020-07-30 19:06:37,67] [debug] #6: success None
[2020-07-30 19:06:37,67] [debug] #7: success 0
[2020-07-30 19:06:37,67] [debug] #8: success (0,0)
[2020-07-30 19:06:37,67] [debug] #9: success (0,0)
[2020-07-30 19:06:37,67] [debug] #10: Commit
[2020-07-30 19:06:37,67] [debug] #11: SetTransactionIsolation
[2020-07-30 19:06:37,67] [debug] #12: SynchronousDatabaseAction.Unpin
[2020-07-30 19:06:37,67] [debug] Source:
| Apply Function count(*)
|   0: TableExpansion
|     table s2: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s2.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,67] [debug] Detected features: UsedFeatures(false,true,true,false)
[2020-07-30 19:06:37,67] [debug] After phase assignUniqueSymbols:
| Apply Function count(*)
|   0: TableExpansion
|     table s3: Table SUMMARY_QUEUE_ENTRY
|     columns: TypeMapping
|       0: Path s3.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,67] [debug] After phase unrollTailBinds: (no change)
[2020-07-30 19:06:37,67] [debug] After phase inferTypes: (no change)
[2020-07-30 19:06:37,67] [debug] Found Selects for NominalTypes: @(slick.jdbc.HsqldbProfile$._.SUMMARY_QUEUE_ENTRY)
[2020-07-30 19:06:37,67] [debug] With correct table types:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:37,67] [debug] Table expansions: @t4 -> (s3,TypeMapping)
[2020-07-30 19:06:37,67] [debug] After phase expandTables:
| Apply Function count(*) : Int
|   0: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:37,67] [debug] Introducing new Bind s5 for Table SUMMARY_QUEUE_ENTRY
[2020-07-30 19:06:37,67] [debug] Introducing new Bind s6 for Pure t7
[2020-07-30 19:06:37,67] [debug] After phase forceOuterBinds:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<@t4<{METADATA_JOURNAL_ID: Long'}>>]
|             value: Ref s5 : @t4<{METADATA_JOURNAL_ID: Long'}>

[2020-07-30 19:06:37,67] [debug] After phase removeMappedTypes: (no change)
[2020-07-30 19:06:37,67] [debug] After phase expandSums: (no change)
[2020-07-30 19:06:37,67] [debug] After phase expandRecords:
| First : t7<Int>
|   0: Bind : Vector[t7<Int>]
|     from s6: Pure t8 : Vector[t8<()>]
|       value: ProductNode : ()
|     select: Pure t7 : Vector[t7<Int>]
|       value: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{METADATA_JOURNAL_ID: Long'}>]
|             value: StructNode : {METADATA_JOURNAL_ID: Long'}
|               METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,67] [debug] Flattening projection t8
[2020-07-30 19:06:37,67] [debug] Flattening node at Path 
| ProductNode : ()

[2020-07-30 19:06:37,67] [debug] Adding translation for t8: (Map(), UnassignedType)
[2020-07-30 19:06:37,67] [debug] Flattened projection to
| Pure t8
|   value: StructNode

[2020-07-30 19:06:37,67] [debug] Flattening projection t7
[2020-07-30 19:06:37,67] [debug] Flattening projection t9
[2020-07-30 19:06:37,67] [debug] Analyzing s5.METADATA_JOURNAL_ID with symbols t8
| Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,67] [debug] Translated s5.METADATA_JOURNAL_ID to:
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:37,67] [debug] Flattening node at Path 
| StructNode
|   METADATA_JOURNAL_ID: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:37,67] [debug] Flattening node at Path METADATA_JOURNAL_ID
| Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:37,67] [debug] Adding definition: s10 -> Path s5.METADATA_JOURNAL_ID
[2020-07-30 19:06:37,67] [debug] Adding translation for t9: (Map(List(METADATA_JOURNAL_ID) -> s10), UnassignedType)
[2020-07-30 19:06:37,67] [debug] Flattened projection to
| Pure t9
|   value: StructNode
|     s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:37,67] [debug] Flattening node at Path 
| Apply Function count(*)
|   0: Bind
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9
|       value: StructNode
|         s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:37,67] [debug] Adding definition: s11 -> Apply Function count(*)
[2020-07-30 19:06:37,67] [debug] Adding translation for t7: (Map(List() -> s11), UnassignedType)
[2020-07-30 19:06:37,67] [debug] Flattened projection to
| Pure t7
|   value: StructNode
|     s11: Apply Function count(*)
|       0: Bind
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Pure t9
|           value: StructNode
|             s10: Path s5.METADATA_JOURNAL_ID

[2020-07-30 19:06:37,67] [debug] After phase flattenProjections:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t8 : Vector[t8<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,67] [debug] Inlining Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t8 : Vector[t8<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,67] [debug] Inlined Pure 'from' in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Apply Function count(*) : Int
|         0: Bind : Vector[t9<{s10: Long'}>]
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: Pure t9 : Vector[t9<{s10: Long'}>]
|             value: StructNode : {s10: Long'}
|               s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,67] [debug] After phase rewriteJoins:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t12 : Vector[t12<{}>]
|       value: StructNode : {}
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Apply Function count(*) : Int
|           0: Bind : Vector[t9<{s10: Long'}>]
|             from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|             select: Pure t9 : Vector[t9<{s10: Long'}>]
|               value: StructNode : {s10: Long'}
|                 s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,67] [debug] After phase verifySymbols: (no change)
[2020-07-30 19:06:37,67] [debug] After phase relabelUnions: (no change)
[2020-07-30 19:06:37,67] [debug] Converting aggregation function application
| Apply Function count(*) : Int
|   0: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'

[2020-07-30 19:06:37,67] [debug] Converted aggregation function application
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:37,67] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s13: Bind : Vector[t9<{s10: Long'}>]
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t9 : Vector[t9<{s10: Long'}>]
|       value: StructNode : {s10: Long'}
|         s10: Path s5.METADATA_JOURNAL_ID : Long'
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:37,67] [debug] Inlining mapping Bind under Aggregate
| Aggregate : Int
|   from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Apply Function count(*) : Int
|     0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:37,68] [debug] Lifting aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t12 : Vector[t12<{}>]
|     value: StructNode : {}
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Aggregate : Int
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:37,68] [debug] New mapping with temporary refs:
| StructNode : {s11: Int}
|   s11: Path s15.s14 : Int

[2020-07-30 19:06:37,68] [debug] New 'from' with joined aggregates:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:37,68] [debug] Replacement paths: Map(s15 -> List(s6))
[2020-07-30 19:06:37,68] [debug] Replacement path nodes: 
| StructNode
|   s15: Ref s6 : t16<{s14: Int}>

[2020-07-30 19:06:37,68] [debug] Lifted aggregates into join in:
| Bind : Vector[t7<{s11: Int}>]
|   from s6: Pure t16 : Vector[t16<{s14: Int}>]
|     value: Aggregate : {s14: Int}
|       from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: StructNode : {s14: Int}
|         s14: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   select: Pure t7 : Vector[t7<{s11: Int}>]
|     value: StructNode : {s11: Int}
|       s11: Path s6.s14 : Int

[2020-07-30 19:06:37,68] [debug] After phase createAggregates:
| First : t7<{s11: Int}>
|   0: Bind : Vector[t7<{s11: Int}>]
|     from s6: Pure t16 : Vector[t16<{s14: Int}>]
|       value: Aggregate : {s14: Int}
|         from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|         select: StructNode : {s14: Int}
|           s14: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     select: Pure t7 : Vector[t7<{s11: Int}>]
|       value: StructNode : {s11: Int}
|         s11: Path s6.s14 : Int

[2020-07-30 19:06:37,68] [debug] After phase resolveZipJoins: (no change)
[2020-07-30 19:06:37,68] [debug] Unreferenced: t7; Field refs: (t16,s14)
[2020-07-30 19:06:37,68] [debug] After phase pruneProjections: (no change)
[2020-07-30 19:06:37,68] [debug] No DISTINCT used as determined by assignUniqueSymbols - skipping phase
[2020-07-30 19:06:37,68] [debug] After phase rewriteDistinct: (no change)
[2020-07-30 19:06:37,68] [debug] Creating mapping from t7<Int>
[2020-07-30 19:06:37,68] [debug] After phase createResultSetMapping:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t7<{s11: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t7 : Vector[t7<{s11: Int}>]
|         value: StructNode : {s11: Int}
|           s11: Path s6.s14 : Int
|     map: Path s17.s11 : Int

[2020-07-30 19:06:37,68] [debug] Hoisting operations from defs: 
[2020-07-30 19:06:37,68] [debug] New defs: Map(0 -> (Path s6.s14,s18))
[2020-07-30 19:06:37,68] [debug] New ResultSetMapping:
| ResultSetMapping : Vector[Int]
|   from s17: Bind : Vector[t19<{s18: Int}>]
|     from s6: ...
|     select: Pure t19 : Vector[t19<{s18: Int}>]
|       value: StructNode : {s18: Int}
|         s18: Path s6.s14 : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:37,68] [debug] After phase hoistClientOps:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Bind : Vector[t19<{s18: Int}>]
|       from s6: Pure t16 : Vector[t16<{s14: Int}>]
|         value: Aggregate : {s14: Int}
|           from s5: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|           select: StructNode : {s14: Int}
|             s14: Apply Function count(*) : Int
|               0: LiteralNode 1 (volatileHint=false) : Int
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Path s6.s14 : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:37,68] [debug] After phase reorderOperations: (no change)
[2020-07-30 19:06:37,68] [debug] Table fields: Map()
[2020-07-30 19:06:37,68] [debug] Merging Aggregate source into Comprehension:
| Pure t16 : Vector[t16<{s14: Int}>]
|   value: Aggregate : {s14: Int}
|     from s5: ...
|     select: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:37,68] [debug] Creating source from TableNode:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:37,68] [debug] Mappings are: ConstArray()
[2020-07-30 19:06:37,68] [debug] Building new Comprehension from:
| Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]

[2020-07-30 19:06:37,68] [debug] Built new Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:37,68] [debug] Replacements are: Map()
[2020-07-30 19:06:37,68] [debug] New source at this point is:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t21<{}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t21 : Vector[t21<{}>]
|     value: StructNode : {}

[2020-07-30 19:06:37,68] [debug] Merged Aggregate source into Comprehension:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t16<{s14: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t16 : Vector[t16<{s14: Int}>]
|     value: StructNode : {s14: Int}
|       s14: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:37,68] [debug] Replacements are: Map((t16,s14) -> s14)
[2020-07-30 19:06:37,68] [debug] Merging Bind into Comprehension as 'select':
| Bind : Vector[t19<{s18: Int}>]
|   from s6: ...
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Path s6.s14 : Int

[2020-07-30 19:06:37,68] [debug] Merged Bind into Comprehension as 'select':
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<{s18: Int}>]
|     value: StructNode : {s18: Int}
|       s18: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:37,68] [debug] Replacements are: Map((t19,s18) -> s18)
[2020-07-30 19:06:37,68] [debug] Mappings are: ConstArray(((t19,s18),List(s18)))
[2020-07-30 19:06:37,68] [debug] After phase mergeToComprehensions:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<{s18: Int}>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<{s18: Int}>]
|         value: StructNode : {s18: Int}
|           s18: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17.s18 : Int

[2020-07-30 19:06:37,68] [debug] After phase optimizeScalar: (no change)
[2020-07-30 19:06:37,68] [debug] Required symbols: s18 -> 0
[2020-07-30 19:06:37,68] [debug] Transformed RSM: 
| ResultSetMapping
|   from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|     from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|     select: Pure t19 : Vector[t19<(Int)>]
|       value: ProductNode : (Int)
|         1: Apply Function count(*) : Int
|           0: LiteralNode 1 (volatileHint=false) : Int
|   map: Path s17.s18 : Int

[2020-07-30 19:06:37,68] [debug] After phase removeFieldNames:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|       from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|       select: Pure t19 : Vector[t19<(Int)>]
|         value: ProductNode : (Int)
|           1: Apply Function count(*) : Int
|             0: LiteralNode 1 (volatileHint=false) : Int
|     map: Path s17._1 : Int

[2020-07-30 19:06:37,68] [debug] Affected fetch clauses in: 
[2020-07-30 19:06:37,68] [debug] After phase specializeParameters: (no change)
[2020-07-30 19:06:37,68] [debug] Compiling server-side and mapping with server-side:
| Comprehension s20, None, None, ConstArray(), None, None, None, None, false : Vector[t19<(Int)>]
|   from s20: Table SUMMARY_QUEUE_ENTRY : Vector[@t4<{METADATA_JOURNAL_ID: Long'}>]
|   select: Pure t19 : Vector[t19<(Int)>]
|     value: ProductNode : (Int)
|       1: Apply Function count(*) : Int
|         0: LiteralNode 1 (volatileHint=false) : Int

[2020-07-30 19:06:37,68] [debug] Compiled ResultConverter
| BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:37,68] [debug] Compiled server-side to:
| CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]

[2020-07-30 19:06:37,68] [debug] After phase codeGen:
| First : Int
|   0: ResultSetMapping : Vector[Int]
|     from s17: CompiledStatement "select count(1) from "SUMMARY_QUEUE_ENTRY"" : Vector[t19<(Int)>]
|     map: CompiledMapping : Int
|       converter: BaseResultConverter$mcI$sp idx=1, name=<computed> : Int'

[2020-07-30 19:06:37,68] [debug] ------------------- Phase: Time ---------
[2020-07-30 19:06:37,68] [debug]       assignUniqueSymbols:    0.642298 ms
[2020-07-30 19:06:37,68] [debug]           unrollTailBinds:    0.093548 ms
[2020-07-30 19:06:37,68] [debug]                inferTypes:    0.097592 ms
[2020-07-30 19:06:37,68] [debug]              expandTables:    0.646349 ms
[2020-07-30 19:06:37,68] [debug]           forceOuterBinds:    0.643155 ms
[2020-07-30 19:06:37,68] [debug]         removeMappedTypes:    0.094912 ms
[2020-07-30 19:06:37,68] [debug]                expandSums:    0.031304 ms
[2020-07-30 19:06:37,68] [debug]             expandRecords:    0.479078 ms
[2020-07-30 19:06:37,68] [debug]        flattenProjections:    2.143870 ms
[2020-07-30 19:06:37,68] [debug]              rewriteJoins:    1.220235 ms
[2020-07-30 19:06:37,68] [debug]             verifySymbols:    0.062300 ms
[2020-07-30 19:06:37,68] [debug]             relabelUnions:    0.062525 ms
[2020-07-30 19:06:37,68] [debug]          createAggregates:    2.905915 ms
[2020-07-30 19:06:37,68] [debug]           resolveZipJoins:    0.074174 ms
[2020-07-30 19:06:37,68] [debug]          pruneProjections:    0.196821 ms
[2020-07-30 19:06:37,68] [debug]           rewriteDistinct:    0.057279 ms
[2020-07-30 19:06:37,68] [debug]    createResultSetMapping:    0.508636 ms
[2020-07-30 19:06:37,68] [debug]            hoistClientOps:    1.009608 ms
[2020-07-30 19:06:37,68] [debug]         reorderOperations:    0.081013 ms
[2020-07-30 19:06:37,68] [debug]     mergeToComprehensions:    2.579472 ms
[2020-07-30 19:06:37,68] [debug]            optimizeScalar:    0.070052 ms
[2020-07-30 19:06:37,68] [debug]          removeFieldNames:    0.828080 ms
[2020-07-30 19:06:37,68] [debug]      specializeParameters:    0.122316 ms
[2020-07-30 19:06:37,68] [debug]                   codeGen:    0.957330 ms
[2020-07-30 19:06:37,69] [debug]                     TOTAL:   15.607862 ms
[2020-07-30 19:06:37,69] [debug] #1: [fused] cleanUp
      try: andThen
        1: SynchronousDatabaseAction.Pin
        2: result [select count(1) from "SUMMARY_QUEUE_ENTRY"]
[2020-07-30 19:06:37,69] [debug] Preparing statement: select count(1) from "SUMMARY_QUEUE_ENTRY"
[2020-07-30 19:06:37,69] [debug] Executing prepared statement: HikariProxyPreparedStatement@1185728013 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@edffb32[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:37,69] [debug] Executing prepared statement: HikariProxyPreparedStatement@1185728013 wrapping org.hsqldb.jdbc.JDBCPreparedStatement@edffb32[sql=[select count(1) from "SUMMARY_QUEUE_ENTRY"]]
[2020-07-30 19:06:37,69] [debug] Execution of prepared statement took 76µs
[2020-07-30 19:06:37,69] [debug] /----\
[2020-07-30 19:06:37,69] [debug] | 1  |
[2020-07-30 19:06:37,69] [debug] | C1 |
[2020-07-30 19:06:37,69] [debug] |----|
[2020-07-30 19:06:37,69] [debug] | 0  |
[2020-07-30 19:06:37,69] [debug] \----/
[2020-07-30 19:06:37,82] [info] Connection pools shut down
[2020-07-30 19:06:37,87] [info] Database closed
[2020-07-30 19:06:37,87] [info] Stream materializer shut down
[ERROR] [07/30/2020 19:06:37.891] [cromwell-system-akka.dispatchers.engine-dispatcher-37] [akka://cromwell-system/user/SingleWorkflowRunnerActor/IoActor] akka.stream.StreamDetachedException: Stream is terminated. Materialized value is detached.
cromwell.core.actor.StreamActorHelper$ActorRestartException: akka.stream.StreamDetachedException: Stream is terminated. Materialized value is detached.
	at cromwell.core.actor.StreamActorHelper.cromwell$core$actor$StreamActorHelper$$restart(StreamActorHelper.scala:93)
	at cromwell.core.actor.StreamActorHelper$$anonfun$streamReceive$1.applyOrElse(StreamActorHelper.scala:86)
	at scala.PartialFunction$OrElse.applyOrElse(PartialFunction.scala:175)
	at akka.actor.Actor.aroundReceive(Actor.scala:539)
	at akka.actor.Actor.aroundReceive$(Actor.scala:537)
	at cromwell.engine.io.IoActor.akka$actor$Timers$$super$aroundReceive(IoActor.scala:36)
	at akka.actor.Timers.aroundReceive(Timers.scala:55)
	at akka.actor.Timers.aroundReceive$(Timers.scala:40)
	at cromwell.engine.io.IoActor.aroundReceive(IoActor.scala:36)
	at akka.actor.ActorCell.receiveMessage(ActorCell.scala:612)
	at akka.actor.ActorCell.invoke(ActorCell.scala:581)
	at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:268)
	at akka.dispatch.Mailbox.run(Mailbox.scala:229)
	at akka.dispatch.Mailbox.exec(Mailbox.scala:241)
	at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
	at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
	at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
	at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)
Caused by: akka.stream.StreamDetachedException: Stream is terminated. Materialized value is detached.

[2020-07-30 19:06:37,90] [info] WDL HTTP import resolver closed
[INFO] [07/30/2020 19:06:37.919] [cromwell-system-akka.actor.default-dispatcher-21] [akka://cromwell-system/user/SingleWorkflowRunnerActor/ServiceRegistryActor] Message [cromwell.services.loadcontroller.LoadControllerService$LoadMetric] from Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor/IoActor#-1698045470] to Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor/ServiceRegistryActor#169176143] was not delivered. [2] dead letters encountered. If this is not an expected behavior, then [Actor[akka://cromwell-system/user/SingleWorkflowRunnerActor/ServiceRegistryActor#169176143]] may have terminated unexpectedly, This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
[2020-07-30 19:06:37,93] [info] Shutting down WorkflowManagerActor - Timeout = 3600 seconds
[WARN] [07/30/2020 19:06:37.938] [cromwell-system-akka.actor.default-dispatcher-62] [CoordinatedShutdown(akka://cromwell-system)] Task [stopWorkflowManagerActor] failed in phase [abort-all-workflows]: cannot enqueue after timer shutdown
[2020-07-30 19:06:37,93] [info] Shutting down SubWorkflowStoreActor - Timeout = 1800 seconds
[WARN] [07/30/2020 19:06:37.939] [cromwell-system-akka.actor.default-dispatcher-62] [CoordinatedShutdown(akka://cromwell-system)] Task [stopSubWorkflowStoreActor] failed in phase [stop-io-activity]: cannot enqueue after timer shutdown
[2020-07-30 19:06:37,93] [info] Shutting down JobStoreActor - Timeout = 1800 seconds
[WARN] [07/30/2020 19:06:37.939] [cromwell-system-akka.actor.default-dispatcher-62] [CoordinatedShutdown(akka://cromwell-system)] Task [stopJobStoreActor] failed in phase [stop-io-activity]: cannot enqueue after timer shutdown
[2020-07-30 19:06:37,93] [info] Shutting down CallCacheWriteActor - Timeout = 1800 seconds
[WARN] [07/30/2020 19:06:37.940] [cromwell-system-akka.actor.default-dispatcher-62] [CoordinatedShutdown(akka://cromwell-system)] Task [stopCallCacheWriteActor] failed in phase [stop-io-activity]: cannot enqueue after timer shutdown
[2020-07-30 19:06:37,94] [info] Shutting down ServiceRegistryActor - Timeout = 1800 seconds
[WARN] [07/30/2020 19:06:37.940] [cromwell-system-akka.actor.default-dispatcher-62] [CoordinatedShutdown(akka://cromwell-system)] Task [stopServiceRegistryActor] failed in phase [stop-io-activity]: cannot enqueue after timer shutdown
[2020-07-30 19:06:37,94] [info] Shutting down DockerHashActor - Timeout = 1800 seconds
[WARN] [07/30/2020 19:06:37.940] [cromwell-system-akka.actor.default-dispatcher-62] [CoordinatedShutdown(akka://cromwell-system)] Task [stopDockerHashActor] failed in phase [stop-io-activity]: cannot enqueue after timer shutdown
[2020-07-30 19:06:37,94] [info] Shutting down IoProxy - Timeout = 1800 seconds
[WARN] [07/30/2020 19:06:37.941] [cromwell-system-akka.actor.default-dispatcher-62] [CoordinatedShutdown(akka://cromwell-system)] Task [stopIoProxy] failed in phase [stop-io-activity]: cannot enqueue after timer shutdown
